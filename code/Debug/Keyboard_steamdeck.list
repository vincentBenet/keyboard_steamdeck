
Keyboard_steamdeck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009968  08009968  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009970  08009970  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009974  08009974  00019974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  08009978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000940  200001b4  08009b2c  000201b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08009b2c  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb17  00000000  00000000  0002021f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a42  00000000  00000000  0002bd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  0002e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000807  00000000  00000000  0002f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016170  00000000  00000000  0002fa7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5d6  00000000  00000000  00045bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077ba6  00000000  00000000  000551c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c88  00000000  00000000  000ccd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000cf9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001b4 	.word	0x200001b4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080096a0 	.word	0x080096a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b8 	.word	0x200001b8
 8000104:	080096a0 	.word	0x080096a0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  printf("Initialisation begin");
 80004c0:	4beb      	ldr	r3, [pc, #940]	; (8000870 <main+0x3b4>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f008 fa46 	bl	8008954 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f001 f872 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 fe80 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fef4 	bl	80012bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f007 fcf8 	bl	8007ec8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  printf("Initialisation finish");
 80004d8:	4be6      	ldr	r3, [pc, #920]	; (8000874 <main+0x3b8>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f008 fa3a 	bl	8008954 <iprintf>
  printf("Infinite loop begin");
 80004e0:	4be5      	ldr	r3, [pc, #916]	; (8000878 <main+0x3bc>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f008 fa36 	bl	8008954 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Cycle begin");
 80004e8:	4be4      	ldr	r3, [pc, #912]	; (800087c <main+0x3c0>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f008 fa32 	bl	8008954 <iprintf>
	  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_SET);
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	00d9      	lsls	r1, r3, #3
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2201      	movs	r2, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fb39 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_SET);
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	0099      	lsls	r1, r3, #2
 8000504:	23a0      	movs	r3, #160	; 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	2201      	movs	r2, #1
 800050a:	0018      	movs	r0, r3
 800050c:	f001 fb31 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_SET);
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	0059      	lsls	r1, r3, #1
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	2201      	movs	r2, #1
 800051a:	0018      	movs	r0, r3
 800051c:	f001 fb29 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_SET);
 8000520:	4bd7      	ldr	r3, [pc, #860]	; (8000880 <main+0x3c4>)
 8000522:	2201      	movs	r2, #1
 8000524:	2101      	movs	r1, #1
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fb23 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_SET);
 800052c:	23a0      	movs	r3, #160	; 0xa0
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2201      	movs	r2, #1
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fb1c 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_SET);
 800053a:	23a0      	movs	r3, #160	; 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	2201      	movs	r2, #1
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fb15 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_SET);
 8000548:	23a0      	movs	r3, #160	; 0xa0
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	2201      	movs	r2, #1
 800054e:	2120      	movs	r1, #32
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fb0e 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_SET);
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2201      	movs	r2, #1
 800055c:	2110      	movs	r1, #16
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fb07 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_SET);
 8000564:	23a0      	movs	r3, #160	; 0xa0
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	2201      	movs	r2, #1
 800056a:	2108      	movs	r1, #8
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fb00 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_SET);
 8000572:	23a0      	movs	r3, #160	; 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2201      	movs	r2, #1
 8000578:	2104      	movs	r1, #4
 800057a:	0018      	movs	r0, r3
 800057c:	f001 faf9 	bl	8001b72 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_SET);
 8000580:	4bbf      	ldr	r3, [pc, #764]	; (8000880 <main+0x3c4>)
 8000582:	2201      	movs	r2, #1
 8000584:	2120      	movs	r1, #32
 8000586:	0018      	movs	r0, r3
 8000588:	f001 faf3 	bl	8001b72 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 800058c:	4bbc      	ldr	r3, [pc, #752]	; (8000880 <main+0x3c4>)
 800058e:	2104      	movs	r1, #4
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fad1 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d100      	bne.n	800059c <main+0xe0>
 800059a:	e162      	b.n	8000862 <main+0x3a6>
		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	00d9      	lsls	r1, r3, #3
 80005a0:	23a0      	movs	r3, #160	; 0xa0
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	2200      	movs	r2, #0
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fae3 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	0099      	lsls	r1, r3, #2
 80005b0:	23a0      	movs	r3, #160	; 0xa0
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	2200      	movs	r2, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 fadb 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_RESET);
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	0059      	lsls	r1, r3, #1
 80005c0:	23a0      	movs	r3, #160	; 0xa0
 80005c2:	05db      	lsls	r3, r3, #23
 80005c4:	2200      	movs	r2, #0
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fad3 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 80005cc:	4bac      	ldr	r3, [pc, #688]	; (8000880 <main+0x3c4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 facd 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_RESET);
 80005d8:	23a0      	movs	r3, #160	; 0xa0
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	2200      	movs	r2, #0
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fac6 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_RESET);
 80005e6:	23a0      	movs	r3, #160	; 0xa0
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2200      	movs	r2, #0
 80005ec:	2140      	movs	r1, #64	; 0x40
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fabf 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_RESET);
 80005f4:	23a0      	movs	r3, #160	; 0xa0
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	2200      	movs	r2, #0
 80005fa:	2120      	movs	r1, #32
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fab8 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_RESET);
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	2110      	movs	r1, #16
 800060a:	0018      	movs	r0, r3
 800060c:	f001 fab1 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_RESET);
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2200      	movs	r2, #0
 8000616:	2108      	movs	r1, #8
 8000618:	0018      	movs	r0, r3
 800061a:	f001 faaa 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_RESET);
 800061e:	23a0      	movs	r3, #160	; 0xa0
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	0018      	movs	r0, r3
 8000628:	f001 faa3 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_RESET);
 800062c:	4b94      	ldr	r3, [pc, #592]	; (8000880 <main+0x3c4>)
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fa9d 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_SET);
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	00d9      	lsls	r1, r3, #3
 800063c:	23a0      	movs	r3, #160	; 0xa0
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	2201      	movs	r2, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fa95 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 8000648:	4b8d      	ldr	r3, [pc, #564]	; (8000880 <main+0x3c4>)
 800064a:	2104      	movs	r1, #4
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fa73 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d003      	beq.n	800065e <main+0x1a2>
			  printf("L1xC1");
 8000656:	4b8b      	ldr	r3, [pc, #556]	; (8000884 <main+0x3c8>)
 8000658:	0018      	movs	r0, r3
 800065a:	f008 f97b 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	00d9      	lsls	r1, r3, #3
 8000662:	23a0      	movs	r3, #160	; 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2200      	movs	r2, #0
 8000668:	0018      	movs	r0, r3
 800066a:	f001 fa82 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_SET);
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	0099      	lsls	r1, r3, #2
 8000672:	23a0      	movs	r3, #160	; 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2201      	movs	r2, #1
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fa7a 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 800067e:	4b80      	ldr	r3, [pc, #512]	; (8000880 <main+0x3c4>)
 8000680:	2104      	movs	r1, #4
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fa58 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d003      	beq.n	8000694 <main+0x1d8>
			  printf("L1xC2");
 800068c:	4b7e      	ldr	r3, [pc, #504]	; (8000888 <main+0x3cc>)
 800068e:	0018      	movs	r0, r3
 8000690:	f008 f960 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	0099      	lsls	r1, r3, #2
 8000698:	23a0      	movs	r3, #160	; 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	2200      	movs	r2, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 fa67 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_SET);
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	0059      	lsls	r1, r3, #1
 80006a8:	23a0      	movs	r3, #160	; 0xa0
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	2201      	movs	r2, #1
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 fa5f 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 80006b4:	4b72      	ldr	r3, [pc, #456]	; (8000880 <main+0x3c4>)
 80006b6:	2104      	movs	r1, #4
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fa3d 	bl	8001b38 <HAL_GPIO_ReadPin>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d003      	beq.n	80006ca <main+0x20e>
			  printf("L1xC3");
 80006c2:	4b72      	ldr	r3, [pc, #456]	; (800088c <main+0x3d0>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f008 f945 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_RESET);
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	0059      	lsls	r1, r3, #1
 80006ce:	23a0      	movs	r3, #160	; 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2200      	movs	r2, #0
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fa4c 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_SET);
 80006da:	4b69      	ldr	r3, [pc, #420]	; (8000880 <main+0x3c4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	2101      	movs	r1, #1
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fa46 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 80006e6:	4b66      	ldr	r3, [pc, #408]	; (8000880 <main+0x3c4>)
 80006e8:	2104      	movs	r1, #4
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fa24 	bl	8001b38 <HAL_GPIO_ReadPin>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d003      	beq.n	80006fc <main+0x240>
			  printf("L1xC4");
 80006f4:	4b66      	ldr	r3, [pc, #408]	; (8000890 <main+0x3d4>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f008 f92c 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 80006fc:	4b60      	ldr	r3, [pc, #384]	; (8000880 <main+0x3c4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fa35 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_SET);
 8000708:	23a0      	movs	r3, #160	; 0xa0
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	2201      	movs	r2, #1
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fa2e 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 8000716:	4b5a      	ldr	r3, [pc, #360]	; (8000880 <main+0x3c4>)
 8000718:	2104      	movs	r1, #4
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fa0c 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d003      	beq.n	800072c <main+0x270>
			  printf("L1xC5");
 8000724:	4b5b      	ldr	r3, [pc, #364]	; (8000894 <main+0x3d8>)
 8000726:	0018      	movs	r0, r3
 8000728:	f008 f914 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_RESET);
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2200      	movs	r2, #0
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fa1c 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_SET);
 800073a:	23a0      	movs	r3, #160	; 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2201      	movs	r2, #1
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fa15 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 8000748:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <main+0x3c4>)
 800074a:	2104      	movs	r1, #4
 800074c:	0018      	movs	r0, r3
 800074e:	f001 f9f3 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d003      	beq.n	800075e <main+0x2a2>
			  printf("L1xC6");
 8000756:	4b50      	ldr	r3, [pc, #320]	; (8000898 <main+0x3dc>)
 8000758:	0018      	movs	r0, r3
 800075a:	f008 f8fb 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_RESET);
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	2200      	movs	r2, #0
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	0018      	movs	r0, r3
 8000768:	f001 fa03 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_SET);
 800076c:	23a0      	movs	r3, #160	; 0xa0
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	0018      	movs	r0, r3
 8000776:	f001 f9fc 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 800077a:	4b41      	ldr	r3, [pc, #260]	; (8000880 <main+0x3c4>)
 800077c:	2104      	movs	r1, #4
 800077e:	0018      	movs	r0, r3
 8000780:	f001 f9da 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d003      	beq.n	8000790 <main+0x2d4>
			  printf("L1xC7");
 8000788:	4b44      	ldr	r3, [pc, #272]	; (800089c <main+0x3e0>)
 800078a:	0018      	movs	r0, r3
 800078c:	f008 f8e2 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_RESET);
 8000790:	23a0      	movs	r3, #160	; 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	2200      	movs	r2, #0
 8000796:	2120      	movs	r1, #32
 8000798:	0018      	movs	r0, r3
 800079a:	f001 f9ea 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_SET);
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	2201      	movs	r2, #1
 80007a4:	2110      	movs	r1, #16
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 f9e3 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 80007ac:	4b34      	ldr	r3, [pc, #208]	; (8000880 <main+0x3c4>)
 80007ae:	2104      	movs	r1, #4
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 f9c1 	bl	8001b38 <HAL_GPIO_ReadPin>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d003      	beq.n	80007c2 <main+0x306>
			  printf("L1xC8");
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <main+0x3e4>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f008 f8c9 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_RESET);
 80007c2:	23a0      	movs	r3, #160	; 0xa0
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 f9d1 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_SET);
 80007d0:	23a0      	movs	r3, #160	; 0xa0
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	2201      	movs	r2, #1
 80007d6:	2108      	movs	r1, #8
 80007d8:	0018      	movs	r0, r3
 80007da:	f001 f9ca 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <main+0x3c4>)
 80007e0:	2104      	movs	r1, #4
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 f9a8 	bl	8001b38 <HAL_GPIO_ReadPin>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d003      	beq.n	80007f4 <main+0x338>
			  printf("L1xC9");
 80007ec:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <main+0x3e8>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f008 f8b0 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_RESET);
 80007f4:	23a0      	movs	r3, #160	; 0xa0
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	2200      	movs	r2, #0
 80007fa:	2108      	movs	r1, #8
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f9b8 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_SET);
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2201      	movs	r2, #1
 8000808:	2104      	movs	r1, #4
 800080a:	0018      	movs	r0, r3
 800080c:	f001 f9b1 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <main+0x3c4>)
 8000812:	2104      	movs	r1, #4
 8000814:	0018      	movs	r0, r3
 8000816:	f001 f98f 	bl	8001b38 <HAL_GPIO_ReadPin>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d003      	beq.n	8000826 <main+0x36a>
			  printf("L1xC10");
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <main+0x3ec>)
 8000820:	0018      	movs	r0, r3
 8000822:	f008 f897 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_RESET);
 8000826:	23a0      	movs	r3, #160	; 0xa0
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	2200      	movs	r2, #0
 800082c:	2104      	movs	r1, #4
 800082e:	0018      	movs	r0, r3
 8000830:	f001 f99f 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_SET);
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <main+0x3c4>)
 8000836:	2201      	movs	r2, #1
 8000838:	2120      	movs	r1, #32
 800083a:	0018      	movs	r0, r3
 800083c:	f001 f999 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L1_GPIO_Port, L1_Pin)){
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <main+0x3c4>)
 8000842:	2104      	movs	r1, #4
 8000844:	0018      	movs	r0, r3
 8000846:	f001 f977 	bl	8001b38 <HAL_GPIO_ReadPin>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d003      	beq.n	8000856 <main+0x39a>
			  printf("L1xC11");
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <main+0x3f0>)
 8000850:	0018      	movs	r0, r3
 8000852:	f008 f87f 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_RESET);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <main+0x3c4>)
 8000858:	2200      	movs	r2, #0
 800085a:	2120      	movs	r1, #32
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f988 	bl	8001b72 <HAL_GPIO_WritePin>
	  }

	  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <main+0x3c4>)
 8000864:	2102      	movs	r1, #2
 8000866:	0018      	movs	r0, r3
 8000868:	f001 f966 	bl	8001b38 <HAL_GPIO_ReadPin>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	e01f      	b.n	80008b0 <main+0x3f4>
 8000870:	080096b8 	.word	0x080096b8
 8000874:	080096d0 	.word	0x080096d0
 8000878:	080096e8 	.word	0x080096e8
 800087c:	080096fc 	.word	0x080096fc
 8000880:	50000400 	.word	0x50000400
 8000884:	08009708 	.word	0x08009708
 8000888:	08009710 	.word	0x08009710
 800088c:	08009718 	.word	0x08009718
 8000890:	08009720 	.word	0x08009720
 8000894:	08009728 	.word	0x08009728
 8000898:	08009730 	.word	0x08009730
 800089c:	08009738 	.word	0x08009738
 80008a0:	08009740 	.word	0x08009740
 80008a4:	08009748 	.word	0x08009748
 80008a8:	08009750 	.word	0x08009750
 80008ac:	08009758 	.word	0x08009758
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d100      	bne.n	80008b6 <main+0x3fa>
 80008b4:	e162      	b.n	8000b7c <main+0x6c0>
		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	00d9      	lsls	r1, r3, #3
 80008ba:	23a0      	movs	r3, #160	; 0xa0
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	2200      	movs	r2, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 f956 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	0099      	lsls	r1, r3, #2
 80008ca:	23a0      	movs	r3, #160	; 0xa0
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	2200      	movs	r2, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 f94e 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_RESET);
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	0059      	lsls	r1, r3, #1
 80008da:	23a0      	movs	r3, #160	; 0xa0
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	2200      	movs	r2, #0
 80008e0:	0018      	movs	r0, r3
 80008e2:	f001 f946 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 80008e6:	4be8      	ldr	r3, [pc, #928]	; (8000c88 <main+0x7cc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	0018      	movs	r0, r3
 80008ee:	f001 f940 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_RESET);
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0018      	movs	r0, r3
 80008fc:	f001 f939 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_RESET);
 8000900:	23a0      	movs	r3, #160	; 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	2200      	movs	r2, #0
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	0018      	movs	r0, r3
 800090a:	f001 f932 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_RESET);
 800090e:	23a0      	movs	r3, #160	; 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	0018      	movs	r0, r3
 8000918:	f001 f92b 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_RESET);
 800091c:	23a0      	movs	r3, #160	; 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2200      	movs	r2, #0
 8000922:	2110      	movs	r1, #16
 8000924:	0018      	movs	r0, r3
 8000926:	f001 f924 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_RESET);
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	0018      	movs	r0, r3
 8000934:	f001 f91d 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_RESET);
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2200      	movs	r2, #0
 800093e:	2104      	movs	r1, #4
 8000940:	0018      	movs	r0, r3
 8000942:	f001 f916 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_RESET);
 8000946:	4bd0      	ldr	r3, [pc, #832]	; (8000c88 <main+0x7cc>)
 8000948:	2200      	movs	r2, #0
 800094a:	2120      	movs	r1, #32
 800094c:	0018      	movs	r0, r3
 800094e:	f001 f910 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_SET);
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	00d9      	lsls	r1, r3, #3
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2201      	movs	r2, #1
 800095c:	0018      	movs	r0, r3
 800095e:	f001 f908 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000962:	4bc9      	ldr	r3, [pc, #804]	; (8000c88 <main+0x7cc>)
 8000964:	2102      	movs	r1, #2
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f8e6 	bl	8001b38 <HAL_GPIO_ReadPin>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d003      	beq.n	8000978 <main+0x4bc>
			  printf("L2xC1");
 8000970:	4bc6      	ldr	r3, [pc, #792]	; (8000c8c <main+0x7d0>)
 8000972:	0018      	movs	r0, r3
 8000974:	f007 ffee 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	00d9      	lsls	r1, r3, #3
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f001 f8f5 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_SET);
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	0099      	lsls	r1, r3, #2
 800098c:	23a0      	movs	r3, #160	; 0xa0
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	2201      	movs	r2, #1
 8000992:	0018      	movs	r0, r3
 8000994:	f001 f8ed 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000998:	4bbb      	ldr	r3, [pc, #748]	; (8000c88 <main+0x7cc>)
 800099a:	2102      	movs	r1, #2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f8cb 	bl	8001b38 <HAL_GPIO_ReadPin>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d003      	beq.n	80009ae <main+0x4f2>
			  printf("L2xC2");
 80009a6:	4bba      	ldr	r3, [pc, #744]	; (8000c90 <main+0x7d4>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f007 ffd3 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	0099      	lsls	r1, r3, #2
 80009b2:	23a0      	movs	r3, #160	; 0xa0
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2200      	movs	r2, #0
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 f8da 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_SET);
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	0059      	lsls	r1, r3, #1
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2201      	movs	r2, #1
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 f8d2 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 80009ce:	4bae      	ldr	r3, [pc, #696]	; (8000c88 <main+0x7cc>)
 80009d0:	2102      	movs	r1, #2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f001 f8b0 	bl	8001b38 <HAL_GPIO_ReadPin>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d003      	beq.n	80009e4 <main+0x528>
			  printf("L2xC3");
 80009dc:	4bad      	ldr	r3, [pc, #692]	; (8000c94 <main+0x7d8>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f007 ffb8 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_RESET);
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	0059      	lsls	r1, r3, #1
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	2200      	movs	r2, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 f8bf 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_SET);
 80009f4:	4ba4      	ldr	r3, [pc, #656]	; (8000c88 <main+0x7cc>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	2101      	movs	r1, #1
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 f8b9 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000a00:	4ba1      	ldr	r3, [pc, #644]	; (8000c88 <main+0x7cc>)
 8000a02:	2102      	movs	r1, #2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 f897 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d003      	beq.n	8000a16 <main+0x55a>
			  printf("L2xC4");
 8000a0e:	4ba2      	ldr	r3, [pc, #648]	; (8000c98 <main+0x7dc>)
 8000a10:	0018      	movs	r0, r3
 8000a12:	f007 ff9f 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 8000a16:	4b9c      	ldr	r3, [pc, #624]	; (8000c88 <main+0x7cc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 f8a8 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_SET);
 8000a22:	23a0      	movs	r3, #160	; 0xa0
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	2201      	movs	r2, #1
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 f8a1 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000a30:	4b95      	ldr	r3, [pc, #596]	; (8000c88 <main+0x7cc>)
 8000a32:	2102      	movs	r1, #2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 f87f 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d003      	beq.n	8000a46 <main+0x58a>
			  printf("L2xC5");
 8000a3e:	4b97      	ldr	r3, [pc, #604]	; (8000c9c <main+0x7e0>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f007 ff87 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_RESET);
 8000a46:	23a0      	movs	r3, #160	; 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f001 f88f 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_SET);
 8000a54:	23a0      	movs	r3, #160	; 0xa0
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 f888 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000a62:	4b89      	ldr	r3, [pc, #548]	; (8000c88 <main+0x7cc>)
 8000a64:	2102      	movs	r1, #2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 f866 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d003      	beq.n	8000a78 <main+0x5bc>
			  printf("L2xC6");
 8000a70:	4b8b      	ldr	r3, [pc, #556]	; (8000ca0 <main+0x7e4>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f007 ff6e 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_RESET);
 8000a78:	23a0      	movs	r3, #160	; 0xa0
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	0018      	movs	r0, r3
 8000a82:	f001 f876 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_SET);
 8000a86:	23a0      	movs	r3, #160	; 0xa0
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 f86f 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000a94:	4b7c      	ldr	r3, [pc, #496]	; (8000c88 <main+0x7cc>)
 8000a96:	2102      	movs	r1, #2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 f84d 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d003      	beq.n	8000aaa <main+0x5ee>
			  printf("L2xC7");
 8000aa2:	4b80      	ldr	r3, [pc, #512]	; (8000ca4 <main+0x7e8>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f007 ff55 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_RESET);
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 f85d 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_SET);
 8000ab8:	23a0      	movs	r3, #160	; 0xa0
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	2201      	movs	r2, #1
 8000abe:	2110      	movs	r1, #16
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f001 f856 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000ac6:	4b70      	ldr	r3, [pc, #448]	; (8000c88 <main+0x7cc>)
 8000ac8:	2102      	movs	r1, #2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 f834 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d003      	beq.n	8000adc <main+0x620>
			  printf("L2xC8");
 8000ad4:	4b74      	ldr	r3, [pc, #464]	; (8000ca8 <main+0x7ec>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f007 ff3c 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_RESET);
 8000adc:	23a0      	movs	r3, #160	; 0xa0
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 f844 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_SET);
 8000aea:	23a0      	movs	r3, #160	; 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	2201      	movs	r2, #1
 8000af0:	2108      	movs	r1, #8
 8000af2:	0018      	movs	r0, r3
 8000af4:	f001 f83d 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000af8:	4b63      	ldr	r3, [pc, #396]	; (8000c88 <main+0x7cc>)
 8000afa:	2102      	movs	r1, #2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 f81b 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d003      	beq.n	8000b0e <main+0x652>
			  printf("L2xC9");
 8000b06:	4b69      	ldr	r3, [pc, #420]	; (8000cac <main+0x7f0>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f007 ff23 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_RESET);
 8000b0e:	23a0      	movs	r3, #160	; 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	2200      	movs	r2, #0
 8000b14:	2108      	movs	r1, #8
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 f82b 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_SET);
 8000b1c:	23a0      	movs	r3, #160	; 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2201      	movs	r2, #1
 8000b22:	2104      	movs	r1, #4
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 f824 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000b2a:	4b57      	ldr	r3, [pc, #348]	; (8000c88 <main+0x7cc>)
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 f802 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d003      	beq.n	8000b40 <main+0x684>
			  printf("L2xC10");
 8000b38:	4b5d      	ldr	r3, [pc, #372]	; (8000cb0 <main+0x7f4>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f007 ff0a 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_RESET);
 8000b40:	23a0      	movs	r3, #160	; 0xa0
 8000b42:	05db      	lsls	r3, r3, #23
 8000b44:	2200      	movs	r2, #0
 8000b46:	2104      	movs	r1, #4
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f001 f812 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_SET);
 8000b4e:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <main+0x7cc>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	2120      	movs	r1, #32
 8000b54:	0018      	movs	r0, r3
 8000b56:	f001 f80c 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L2_GPIO_Port, L2_Pin)){
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	; (8000c88 <main+0x7cc>)
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 ffea 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d003      	beq.n	8000b70 <main+0x6b4>
			  printf("L2xC11");
 8000b68:	4b52      	ldr	r3, [pc, #328]	; (8000cb4 <main+0x7f8>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f007 fef2 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_RESET);
 8000b70:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <main+0x7cc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	2120      	movs	r1, #32
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fffb 	bl	8001b72 <HAL_GPIO_WritePin>
	  }

	  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000b7c:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <main+0x7cc>)
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 ffd9 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d100      	bne.n	8000b8c <main+0x6d0>
 8000b8a:	e180      	b.n	8000e8e <main+0x9d2>
		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	00d9      	lsls	r1, r3, #3
 8000b90:	23a0      	movs	r3, #160	; 0xa0
 8000b92:	05db      	lsls	r3, r3, #23
 8000b94:	2200      	movs	r2, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 ffeb 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	0099      	lsls	r1, r3, #2
 8000ba0:	23a0      	movs	r3, #160	; 0xa0
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 ffe3 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_RESET);
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	0059      	lsls	r1, r3, #1
 8000bb0:	23a0      	movs	r3, #160	; 0xa0
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 ffdb 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 8000bbc:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <main+0x7cc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 ffd5 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_RESET);
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f000 ffce 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_RESET);
 8000bd6:	23a0      	movs	r3, #160	; 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 ffc7 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_RESET);
 8000be4:	23a0      	movs	r3, #160	; 0xa0
 8000be6:	05db      	lsls	r3, r3, #23
 8000be8:	2200      	movs	r2, #0
 8000bea:	2120      	movs	r1, #32
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 ffc0 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_RESET);
 8000bf2:	23a0      	movs	r3, #160	; 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 ffb9 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_RESET);
 8000c00:	23a0      	movs	r3, #160	; 0xa0
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	2200      	movs	r2, #0
 8000c06:	2108      	movs	r1, #8
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 ffb2 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_RESET);
 8000c0e:	23a0      	movs	r3, #160	; 0xa0
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	2200      	movs	r2, #0
 8000c14:	2104      	movs	r1, #4
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 ffab 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_RESET);
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <main+0x7cc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 ffa5 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_SET);
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	00d9      	lsls	r1, r3, #3
 8000c2c:	23a0      	movs	r3, #160	; 0xa0
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	2201      	movs	r2, #1
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 ff9d 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <main+0x7cc>)
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 ff7b 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d003      	beq.n	8000c4e <main+0x792>
			  printf("L3xC1");
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <main+0x7fc>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f007 fe83 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	00d9      	lsls	r1, r3, #3
 8000c52:	23a0      	movs	r3, #160	; 0xa0
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	2200      	movs	r2, #0
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 ff8a 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_SET);
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	0099      	lsls	r1, r3, #2
 8000c62:	23a0      	movs	r3, #160	; 0xa0
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	2201      	movs	r2, #1
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 ff82 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <main+0x7cc>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 ff60 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d021      	beq.n	8000cc0 <main+0x804>
			  printf("L3xC2");
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <main+0x800>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f007 fe68 	bl	8008954 <iprintf>
 8000c84:	e01c      	b.n	8000cc0 <main+0x804>
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	50000400 	.word	0x50000400
 8000c8c:	08009760 	.word	0x08009760
 8000c90:	08009768 	.word	0x08009768
 8000c94:	08009770 	.word	0x08009770
 8000c98:	08009778 	.word	0x08009778
 8000c9c:	08009780 	.word	0x08009780
 8000ca0:	08009788 	.word	0x08009788
 8000ca4:	08009790 	.word	0x08009790
 8000ca8:	08009798 	.word	0x08009798
 8000cac:	080097a0 	.word	0x080097a0
 8000cb0:	080097a8 	.word	0x080097a8
 8000cb4:	080097b0 	.word	0x080097b0
 8000cb8:	080097b8 	.word	0x080097b8
 8000cbc:	080097c0 	.word	0x080097c0
		  };
		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	0099      	lsls	r1, r3, #2
 8000cc4:	23a0      	movs	r3, #160	; 0xa0
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	2200      	movs	r2, #0
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 ff51 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_SET);
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	0059      	lsls	r1, r3, #1
 8000cd4:	23a0      	movs	r3, #160	; 0xa0
 8000cd6:	05db      	lsls	r3, r3, #23
 8000cd8:	2201      	movs	r2, #1
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 ff49 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000ce0:	4be0      	ldr	r3, [pc, #896]	; (8001064 <main+0xba8>)
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 ff27 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d003      	beq.n	8000cf6 <main+0x83a>
			  printf("L3xC3");
 8000cee:	4bde      	ldr	r3, [pc, #888]	; (8001068 <main+0xbac>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f007 fe2f 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_RESET);
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	0059      	lsls	r1, r3, #1
 8000cfa:	23a0      	movs	r3, #160	; 0xa0
 8000cfc:	05db      	lsls	r3, r3, #23
 8000cfe:	2200      	movs	r2, #0
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 ff36 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_SET);
 8000d06:	4bd7      	ldr	r3, [pc, #860]	; (8001064 <main+0xba8>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 ff30 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000d12:	4bd4      	ldr	r3, [pc, #848]	; (8001064 <main+0xba8>)
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 ff0e 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d003      	beq.n	8000d28 <main+0x86c>
			  printf("L3xC4");
 8000d20:	4bd2      	ldr	r3, [pc, #840]	; (800106c <main+0xbb0>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f007 fe16 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 8000d28:	4bce      	ldr	r3, [pc, #824]	; (8001064 <main+0xba8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 ff1f 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_SET);
 8000d34:	23a0      	movs	r3, #160	; 0xa0
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 ff18 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000d42:	4bc8      	ldr	r3, [pc, #800]	; (8001064 <main+0xba8>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 fef6 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d003      	beq.n	8000d58 <main+0x89c>
			  printf("L3xC5");
 8000d50:	4bc7      	ldr	r3, [pc, #796]	; (8001070 <main+0xbb4>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f007 fdfe 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_RESET);
 8000d58:	23a0      	movs	r3, #160	; 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 ff06 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_SET);
 8000d66:	23a0      	movs	r3, #160	; 0xa0
 8000d68:	05db      	lsls	r3, r3, #23
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2140      	movs	r1, #64	; 0x40
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 feff 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000d74:	4bbb      	ldr	r3, [pc, #748]	; (8001064 <main+0xba8>)
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 fedd 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d003      	beq.n	8000d8a <main+0x8ce>
			  printf("L3xC6");
 8000d82:	4bbc      	ldr	r3, [pc, #752]	; (8001074 <main+0xbb8>)
 8000d84:	0018      	movs	r0, r3
 8000d86:	f007 fde5 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_RESET);
 8000d8a:	23a0      	movs	r3, #160	; 0xa0
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 feed 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_SET);
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2120      	movs	r1, #32
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fee6 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000da6:	4baf      	ldr	r3, [pc, #700]	; (8001064 <main+0xba8>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 fec4 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d003      	beq.n	8000dbc <main+0x900>
			  printf("L3xC7");
 8000db4:	4bb0      	ldr	r3, [pc, #704]	; (8001078 <main+0xbbc>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f007 fdcc 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_RESET);
 8000dbc:	23a0      	movs	r3, #160	; 0xa0
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 fed4 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_SET);
 8000dca:	23a0      	movs	r3, #160	; 0xa0
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 fecd 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000dd8:	4ba2      	ldr	r3, [pc, #648]	; (8001064 <main+0xba8>)
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 feab 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d003      	beq.n	8000dee <main+0x932>
			  printf("L3xC8");
 8000de6:	4ba5      	ldr	r3, [pc, #660]	; (800107c <main+0xbc0>)
 8000de8:	0018      	movs	r0, r3
 8000dea:	f007 fdb3 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_RESET);
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 febb 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_SET);
 8000dfc:	23a0      	movs	r3, #160	; 0xa0
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	2201      	movs	r2, #1
 8000e02:	2108      	movs	r1, #8
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 feb4 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000e0a:	4b96      	ldr	r3, [pc, #600]	; (8001064 <main+0xba8>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 fe92 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000e14:	1e03      	subs	r3, r0, #0
 8000e16:	d003      	beq.n	8000e20 <main+0x964>
			  printf("L3xC9");
 8000e18:	4b99      	ldr	r3, [pc, #612]	; (8001080 <main+0xbc4>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f007 fd9a 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_RESET);
 8000e20:	23a0      	movs	r3, #160	; 0xa0
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	2200      	movs	r2, #0
 8000e26:	2108      	movs	r1, #8
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fea2 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_SET);
 8000e2e:	23a0      	movs	r3, #160	; 0xa0
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	2201      	movs	r2, #1
 8000e34:	2104      	movs	r1, #4
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 fe9b 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000e3c:	4b89      	ldr	r3, [pc, #548]	; (8001064 <main+0xba8>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 fe79 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d003      	beq.n	8000e52 <main+0x996>
			  printf("L3xC10");
 8000e4a:	4b8e      	ldr	r3, [pc, #568]	; (8001084 <main+0xbc8>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f007 fd81 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_RESET);
 8000e52:	23a0      	movs	r3, #160	; 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	2200      	movs	r2, #0
 8000e58:	2104      	movs	r1, #4
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f000 fe89 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_SET);
 8000e60:	4b80      	ldr	r3, [pc, #512]	; (8001064 <main+0xba8>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	2120      	movs	r1, #32
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 fe83 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L3_GPIO_Port, L3_Pin)){
 8000e6c:	4b7d      	ldr	r3, [pc, #500]	; (8001064 <main+0xba8>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 fe61 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d003      	beq.n	8000e82 <main+0x9c6>
			  printf("L3xC11");
 8000e7a:	4b83      	ldr	r3, [pc, #524]	; (8001088 <main+0xbcc>)
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f007 fd69 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_RESET);
 8000e82:	4b78      	ldr	r3, [pc, #480]	; (8001064 <main+0xba8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	2120      	movs	r1, #32
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f000 fe72 	bl	8001b72 <HAL_GPIO_WritePin>
	  }

	  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 8000e8e:	4b75      	ldr	r3, [pc, #468]	; (8001064 <main+0xba8>)
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fe50 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d100      	bne.n	8000e9e <main+0x9e2>
 8000e9c:	e184      	b.n	80011a8 <main+0xcec>
		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	00d9      	lsls	r1, r3, #3
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 fe62 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	0099      	lsls	r1, r3, #2
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f000 fe5a 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_RESET);
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	0059      	lsls	r1, r3, #1
 8000ec2:	23a0      	movs	r3, #160	; 0xa0
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f000 fe52 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 8000ece:	4b65      	ldr	r3, [pc, #404]	; (8001064 <main+0xba8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f000 fe4c 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_RESET);
 8000eda:	23a0      	movs	r3, #160	; 0xa0
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f000 fe45 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_RESET);
 8000ee8:	23a0      	movs	r3, #160	; 0xa0
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	2200      	movs	r2, #0
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 fe3e 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_RESET);
 8000ef6:	23a0      	movs	r3, #160	; 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	2200      	movs	r2, #0
 8000efc:	2120      	movs	r1, #32
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fe37 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_RESET);
 8000f04:	23a0      	movs	r3, #160	; 0xa0
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f000 fe30 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_RESET);
 8000f12:	23a0      	movs	r3, #160	; 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	2200      	movs	r2, #0
 8000f18:	2108      	movs	r1, #8
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 fe29 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_RESET);
 8000f20:	23a0      	movs	r3, #160	; 0xa0
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	2200      	movs	r2, #0
 8000f26:	2104      	movs	r1, #4
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 fe22 	bl	8001b72 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_RESET);
 8000f2e:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <main+0xba8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	2120      	movs	r1, #32
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fe1c 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_SET);
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	00d9      	lsls	r1, r3, #3
 8000f3e:	23a0      	movs	r3, #160	; 0xa0
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	2201      	movs	r2, #1
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 fe14 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <main+0xba8>)
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 fdf2 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d003      	beq.n	8000f60 <main+0xaa4>
			  printf("L4xC1");
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <main+0xbd0>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f007 fcfa 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	00d9      	lsls	r1, r3, #3
 8000f64:	23a0      	movs	r3, #160	; 0xa0
 8000f66:	05db      	lsls	r3, r3, #23
 8000f68:	2200      	movs	r2, #0
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fe01 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_SET);
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	0099      	lsls	r1, r3, #2
 8000f74:	23a0      	movs	r3, #160	; 0xa0
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	2201      	movs	r2, #1
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fdf9 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 8000f80:	4b38      	ldr	r3, [pc, #224]	; (8001064 <main+0xba8>)
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 fdd7 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d003      	beq.n	8000f96 <main+0xada>
			  printf("L4xC2");
 8000f8e:	4b40      	ldr	r3, [pc, #256]	; (8001090 <main+0xbd4>)
 8000f90:	0018      	movs	r0, r3
 8000f92:	f007 fcdf 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	0099      	lsls	r1, r3, #2
 8000f9a:	23a0      	movs	r3, #160	; 0xa0
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 fde6 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_SET);
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	0059      	lsls	r1, r3, #1
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	2201      	movs	r2, #1
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fdde 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <main+0xba8>)
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 fdbc 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d003      	beq.n	8000fcc <main+0xb10>
			  printf("L4xC3");
 8000fc4:	4b33      	ldr	r3, [pc, #204]	; (8001094 <main+0xbd8>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f007 fcc4 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_RESET);
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	0059      	lsls	r1, r3, #1
 8000fd0:	23a0      	movs	r3, #160	; 0xa0
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 fdcb 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_SET);
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <main+0xba8>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fdc5 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <main+0xba8>)
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fda3 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d003      	beq.n	8000ffe <main+0xb42>
			  printf("L4xC4");
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <main+0xbdc>)
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f007 fcab 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <main+0xba8>)
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	0018      	movs	r0, r3
 8001006:	f000 fdb4 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_SET);
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	2201      	movs	r2, #1
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0018      	movs	r0, r3
 8001014:	f000 fdad 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <main+0xba8>)
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	0018      	movs	r0, r3
 800101e:	f000 fd8b 	bl	8001b38 <HAL_GPIO_ReadPin>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d003      	beq.n	800102e <main+0xb72>
			  printf("L4xC5");
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <main+0xbe0>)
 8001028:	0018      	movs	r0, r3
 800102a:	f007 fc93 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, GPIO_PIN_RESET);
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	2200      	movs	r2, #0
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fd9b 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_SET);
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2201      	movs	r2, #1
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	0018      	movs	r0, r3
 8001046:	f000 fd94 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <main+0xba8>)
 800104c:	2140      	movs	r1, #64	; 0x40
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fd72 	bl	8001b38 <HAL_GPIO_ReadPin>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d025      	beq.n	80010a4 <main+0xbe8>
			  printf("L4xC6");
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <main+0xbe4>)
 800105a:	0018      	movs	r0, r3
 800105c:	f007 fc7a 	bl	8008954 <iprintf>
 8001060:	e020      	b.n	80010a4 <main+0xbe8>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	50000400 	.word	0x50000400
 8001068:	080097c8 	.word	0x080097c8
 800106c:	080097d0 	.word	0x080097d0
 8001070:	080097d8 	.word	0x080097d8
 8001074:	080097e0 	.word	0x080097e0
 8001078:	080097e8 	.word	0x080097e8
 800107c:	080097f0 	.word	0x080097f0
 8001080:	080097f8 	.word	0x080097f8
 8001084:	08009800 	.word	0x08009800
 8001088:	08009808 	.word	0x08009808
 800108c:	08009810 	.word	0x08009810
 8001090:	08009818 	.word	0x08009818
 8001094:	08009820 	.word	0x08009820
 8001098:	08009828 	.word	0x08009828
 800109c:	08009830 	.word	0x08009830
 80010a0:	08009838 	.word	0x08009838
		  };
		  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, GPIO_PIN_RESET);
 80010a4:	23a0      	movs	r3, #160	; 0xa0
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	2200      	movs	r2, #0
 80010aa:	2140      	movs	r1, #64	; 0x40
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 fd60 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_SET);
 80010b2:	23a0      	movs	r3, #160	; 0xa0
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	2201      	movs	r2, #1
 80010b8:	2120      	movs	r1, #32
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fd59 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 80010c0:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <main+0xcf8>)
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	0018      	movs	r0, r3
 80010c6:	f000 fd37 	bl	8001b38 <HAL_GPIO_ReadPin>
 80010ca:	1e03      	subs	r3, r0, #0
 80010cc:	d003      	beq.n	80010d6 <main+0xc1a>
			  printf("L4xC7");
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <main+0xcfc>)
 80010d0:	0018      	movs	r0, r3
 80010d2:	f007 fc3f 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, GPIO_PIN_RESET);
 80010d6:	23a0      	movs	r3, #160	; 0xa0
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	2200      	movs	r2, #0
 80010dc:	2120      	movs	r1, #32
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 fd47 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_SET);
 80010e4:	23a0      	movs	r3, #160	; 0xa0
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	2201      	movs	r2, #1
 80010ea:	2110      	movs	r1, #16
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 fd40 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <main+0xcf8>)
 80010f4:	2140      	movs	r1, #64	; 0x40
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 fd1e 	bl	8001b38 <HAL_GPIO_ReadPin>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d003      	beq.n	8001108 <main+0xc4c>
			  printf("L4xC8");
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <main+0xd00>)
 8001102:	0018      	movs	r0, r3
 8001104:	f007 fc26 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C8_GPIO_Port, C8_Pin, GPIO_PIN_RESET);
 8001108:	23a0      	movs	r3, #160	; 0xa0
 800110a:	05db      	lsls	r3, r3, #23
 800110c:	2200      	movs	r2, #0
 800110e:	2110      	movs	r1, #16
 8001110:	0018      	movs	r0, r3
 8001112:	f000 fd2e 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_SET);
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	2201      	movs	r2, #1
 800111c:	2108      	movs	r1, #8
 800111e:	0018      	movs	r0, r3
 8001120:	f000 fd27 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <main+0xcf8>)
 8001126:	2140      	movs	r1, #64	; 0x40
 8001128:	0018      	movs	r0, r3
 800112a:	f000 fd05 	bl	8001b38 <HAL_GPIO_ReadPin>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d003      	beq.n	800113a <main+0xc7e>
			  printf("L4xC9");
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <main+0xd04>)
 8001134:	0018      	movs	r0, r3
 8001136:	f007 fc0d 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C9_GPIO_Port, C9_Pin, GPIO_PIN_RESET);
 800113a:	23a0      	movs	r3, #160	; 0xa0
 800113c:	05db      	lsls	r3, r3, #23
 800113e:	2200      	movs	r2, #0
 8001140:	2108      	movs	r1, #8
 8001142:	0018      	movs	r0, r3
 8001144:	f000 fd15 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_SET);
 8001148:	23a0      	movs	r3, #160	; 0xa0
 800114a:	05db      	lsls	r3, r3, #23
 800114c:	2201      	movs	r2, #1
 800114e:	2104      	movs	r1, #4
 8001150:	0018      	movs	r0, r3
 8001152:	f000 fd0e 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <main+0xcf8>)
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	0018      	movs	r0, r3
 800115c:	f000 fcec 	bl	8001b38 <HAL_GPIO_ReadPin>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d003      	beq.n	800116c <main+0xcb0>
			  printf("L4xC10");
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <main+0xd08>)
 8001166:	0018      	movs	r0, r3
 8001168:	f007 fbf4 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C10_GPIO_Port, C10_Pin, GPIO_PIN_RESET);
 800116c:	23a0      	movs	r3, #160	; 0xa0
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	2200      	movs	r2, #0
 8001172:	2104      	movs	r1, #4
 8001174:	0018      	movs	r0, r3
 8001176:	f000 fcfc 	bl	8001b72 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_SET);
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <main+0xcf8>)
 800117c:	2201      	movs	r2, #1
 800117e:	2120      	movs	r1, #32
 8001180:	0018      	movs	r0, r3
 8001182:	f000 fcf6 	bl	8001b72 <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin (L4_GPIO_Port, L4_Pin)){
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <main+0xcf8>)
 8001188:	2140      	movs	r1, #64	; 0x40
 800118a:	0018      	movs	r0, r3
 800118c:	f000 fcd4 	bl	8001b38 <HAL_GPIO_ReadPin>
 8001190:	1e03      	subs	r3, r0, #0
 8001192:	d003      	beq.n	800119c <main+0xce0>
			  printf("L4xC11");
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <main+0xd0c>)
 8001196:	0018      	movs	r0, r3
 8001198:	f007 fbdc 	bl	8008954 <iprintf>
		  };
		  HAL_GPIO_WritePin(C11_GPIO_Port, C11_Pin, GPIO_PIN_RESET);
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <main+0xcf8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	2120      	movs	r1, #32
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 fce5 	bl	8001b72 <HAL_GPIO_WritePin>
	  keyBoardHIDsub.KEYCODE2=0x00;  // Release B key
	  keyBoardHIDsub.KEYCODE3=0x00;  // Release C key
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
	  */

	  printf("Cycle finish");
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <main+0xd10>)
 80011aa:	0018      	movs	r0, r3
 80011ac:	f007 fbd2 	bl	8008954 <iprintf>
	  printf("Cycle begin");
 80011b0:	f7ff f99a 	bl	80004e8 <main+0x2c>
 80011b4:	50000400 	.word	0x50000400
 80011b8:	08009840 	.word	0x08009840
 80011bc:	08009848 	.word	0x08009848
 80011c0:	08009850 	.word	0x08009850
 80011c4:	08009858 	.word	0x08009858
 80011c8:	08009860 	.word	0x08009860
 80011cc:	08009868 	.word	0x08009868

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b09d      	sub	sp, #116	; 0x74
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	2438      	movs	r4, #56	; 0x38
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	0018      	movs	r0, r3
 80011dc:	2338      	movs	r3, #56	; 0x38
 80011de:	001a      	movs	r2, r3
 80011e0:	2100      	movs	r1, #0
 80011e2:	f007 fc13 	bl	8008a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e6:	2324      	movs	r3, #36	; 0x24
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	0018      	movs	r0, r3
 80011ec:	2314      	movs	r3, #20
 80011ee:	001a      	movs	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f007 fc0b 	bl	8008a0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	0018      	movs	r0, r3
 80011fa:	2320      	movs	r3, #32
 80011fc:	001a      	movs	r2, r3
 80011fe:	2100      	movs	r1, #0
 8001200:	f007 fc04 	bl	8008a0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <SystemClock_Config+0xe4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <SystemClock_Config+0xe8>)
 800120a:	401a      	ands	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <SystemClock_Config+0xe4>)
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	0109      	lsls	r1, r1, #4
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001216:	0021      	movs	r1, r4
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2222      	movs	r2, #34	; 0x22
 800121c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2201      	movs	r2, #1
 8001222:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2210      	movs	r2, #16
 8001228:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2201      	movs	r2, #1
 800122e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2202      	movs	r2, #2
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	0312      	lsls	r2, r2, #12
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_4;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	22c0      	movs	r2, #192	; 0xc0
 8001248:	0412      	lsls	r2, r2, #16
 800124a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124c:	187b      	adds	r3, r7, r1
 800124e:	0018      	movs	r0, r3
 8001250:	f002 fae4 	bl	800381c <HAL_RCC_OscConfig>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001258:	f000 f8a0 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	2124      	movs	r1, #36	; 0x24
 800125e:	187b      	adds	r3, r7, r1
 8001260:	220f      	movs	r2, #15
 8001262:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2203      	movs	r2, #3
 8001268:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2101      	movs	r1, #1
 8001280:	0018      	movs	r0, r3
 8001282:	f002 fe8f 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800128a:	f000 f887 	bl	800139c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2240      	movs	r2, #64	; 0x40
 8001292:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	04d2      	lsls	r2, r2, #19
 800129a:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	0018      	movs	r0, r3
 80012a0:	f003 f86e 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 80012a4:	1e03      	subs	r3, r0, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80012a8:	f000 f878 	bl	800139c <Error_Handler>
  }
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b01d      	add	sp, #116	; 0x74
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	40007000 	.word	0x40007000
 80012b8:	ffffe7ff 	.word	0xffffe7ff

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	240c      	movs	r4, #12
 80012c4:	193b      	adds	r3, r7, r4
 80012c6:	0018      	movs	r0, r3
 80012c8:	2314      	movs	r3, #20
 80012ca:	001a      	movs	r2, r3
 80012cc:	2100      	movs	r1, #0
 80012ce:	f007 fb9d 	bl	8008a0c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <MX_GPIO_Init+0xd4>)
 80012d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <MX_GPIO_Init+0xd4>)
 80012d8:	2101      	movs	r1, #1
 80012da:	430a      	orrs	r2, r1
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <MX_GPIO_Init+0xd4>)
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	2201      	movs	r2, #1
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_GPIO_Init+0xd4>)
 80012ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <MX_GPIO_Init+0xd4>)
 80012f0:	2102      	movs	r1, #2
 80012f2:	430a      	orrs	r2, r1
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_GPIO_Init+0xd4>)
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	2202      	movs	r2, #2
 80012fc:	4013      	ands	r3, r2
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C10_Pin|C9_Pin|C8_Pin|C7_Pin
 8001302:	4924      	ldr	r1, [pc, #144]	; (8001394 <MX_GPIO_Init+0xd8>)
 8001304:	23a0      	movs	r3, #160	; 0xa0
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	2200      	movs	r2, #0
 800130a:	0018      	movs	r0, r3
 800130c:	f000 fc31 	bl	8001b72 <HAL_GPIO_WritePin>
                          |C6_Pin|C5_Pin|C3_Pin|C2_Pin
                          |C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C4_Pin|C11_Pin, GPIO_PIN_RESET);
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_GPIO_Init+0xdc>)
 8001312:	2200      	movs	r2, #0
 8001314:	2121      	movs	r1, #33	; 0x21
 8001316:	0018      	movs	r0, r3
 8001318:	f000 fc2b 	bl	8001b72 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C10_Pin C9_Pin C8_Pin C7_Pin
                           C6_Pin C5_Pin C3_Pin C2_Pin
                           C1_Pin */
  GPIO_InitStruct.Pin = C10_Pin|C9_Pin|C8_Pin|C7_Pin
 800131c:	193b      	adds	r3, r7, r4
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <MX_GPIO_Init+0xd8>)
 8001320:	601a      	str	r2, [r3, #0]
                          |C6_Pin|C5_Pin|C3_Pin|C2_Pin
                          |C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	193b      	adds	r3, r7, r4
 8001324:	2201      	movs	r2, #1
 8001326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	193b      	adds	r3, r7, r4
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	193b      	adds	r3, r7, r4
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	193a      	adds	r2, r7, r4
 8001336:	23a0      	movs	r3, #160	; 0xa0
 8001338:	05db      	lsls	r3, r3, #23
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f000 fa85 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C11_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C11_Pin;
 8001342:	193b      	adds	r3, r7, r4
 8001344:	2221      	movs	r2, #33	; 0x21
 8001346:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	2201      	movs	r2, #1
 800134c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	193b      	adds	r3, r7, r4
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	193b      	adds	r3, r7, r4
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	193b      	adds	r3, r7, r4
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <MX_GPIO_Init+0xdc>)
 800135e:	0019      	movs	r1, r3
 8001360:	0010      	movs	r0, r2
 8001362:	f000 fa73 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : L2_Pin L1_Pin L4_Pin L3_Pin */
  GPIO_InitStruct.Pin = L2_Pin|L1_Pin|L4_Pin|L3_Pin;
 8001366:	0021      	movs	r1, r4
 8001368:	187b      	adds	r3, r7, r1
 800136a:	22c6      	movs	r2, #198	; 0xc6
 800136c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2202      	movs	r2, #2
 8001378:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	187b      	adds	r3, r7, r1
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <MX_GPIO_Init+0xdc>)
 800137e:	0019      	movs	r1, r3
 8001380:	0010      	movs	r0, r2
 8001382:	f000 fa63 	bl	800184c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b009      	add	sp, #36	; 0x24
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	40021000 	.word	0x40021000
 8001394:	000007fc 	.word	0x000007fc
 8001398:	50000400 	.word	0x50000400

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_MspInit+0x24>)
 80013ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x24>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	430a      	orrs	r2, r1
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_MspInit+0x24>)
 80013ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_MspInit+0x24>)
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	0549      	lsls	r1, r1, #21
 80013c2:	430a      	orrs	r2, r1
 80013c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f930 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <USB_IRQHandler+0x14>)
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fcf6 	bl	8001df8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	200006a0 	.word	0x200006a0

08001418 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e00a      	b.n	8001440 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800142a:	e000      	b.n	800142e <_read+0x16>
 800142c:	bf00      	nop
 800142e:	0001      	movs	r1, r0
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	b2ca      	uxtb	r2, r1
 8001438:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	dbf0      	blt.n	800142a <_read+0x12>
  }

  return len;
 8001448:	687b      	ldr	r3, [r7, #4]
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b006      	add	sp, #24
 8001450:	bd80      	pop	{r7, pc}

08001452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	e009      	b.n	8001478 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	60ba      	str	r2, [r7, #8]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	0018      	movs	r0, r3
 800146e:	e000      	b.n	8001472 <_write+0x20>
 8001470:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf1      	blt.n	8001464 <_write+0x12>
  }
  return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b006      	add	sp, #24
 8001488:	bd80      	pop	{r7, pc}

0800148a <_close>:

int _close(int file)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001492:	2301      	movs	r3, #1
 8001494:	425b      	negs	r3, r3
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}

0800149e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	0192      	lsls	r2, r2, #6
 80014ae:	605a      	str	r2, [r3, #4]
  return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b002      	add	sp, #8
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_isatty>:

int _isatty(int file)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b004      	add	sp, #16
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d207      	bcs.n	8001524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001514:	f007 fad0 	bl	8008ab8 <__errno>
 8001518:	0003      	movs	r3, r0
 800151a:	220c      	movs	r2, #12
 800151c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151e:	2301      	movs	r3, #1
 8001520:	425b      	negs	r3, r3
 8001522:	e009      	b.n	8001538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	18d2      	adds	r2, r2, r3
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <_sbrk+0x64>)
 8001534:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b006      	add	sp, #24
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20002000 	.word	0x20002000
 8001544:	00000400 	.word	0x00000400
 8001548:	200001d0 	.word	0x200001d0
 800154c:	20000af8 	.word	0x20000af8

08001550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800155e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001560:	f7ff fff6 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <LoopForever+0x6>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	; (800159c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <LoopForever+0xe>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	; (80015a8 <LoopForever+0x16>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f007 fa9b 	bl	8008ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7fe ff95 	bl	80004bc <main>

08001592 <LoopForever>:

LoopForever:
    b LoopForever
 8001592:	e7fe      	b.n	8001592 <LoopForever>
   ldr   r0, =_estack
 8001594:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 80015a0:	08009978 	.word	0x08009978
  ldr r2, =_sbss
 80015a4:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80015a8:	20000af4 	.word	0x20000af4

080015ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_COMP_IRQHandler>
	...

080015b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_Init+0x3c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_Init+0x3c>)
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f811 	bl	80015f0 <HAL_InitTick>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d003      	beq.n	80015da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e001      	b.n	80015de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015da:	f7ff fee5 	bl	80013a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b002      	add	sp, #8
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	40022000 	.word	0x40022000

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_InitTick+0x5c>)
 80015fa:	681c      	ldr	r4, [r3, #0]
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_InitTick+0x60>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	0019      	movs	r1, r3
 8001602:	23fa      	movs	r3, #250	; 0xfa
 8001604:	0098      	lsls	r0, r3, #2
 8001606:	f7fe fd89 	bl	800011c <__udivsi3>
 800160a:	0003      	movs	r3, r0
 800160c:	0019      	movs	r1, r3
 800160e:	0020      	movs	r0, r4
 8001610:	f7fe fd84 	bl	800011c <__udivsi3>
 8001614:	0003      	movs	r3, r0
 8001616:	0018      	movs	r0, r3
 8001618:	f000 f90b 	bl	8001832 <HAL_SYSTICK_Config>
 800161c:	1e03      	subs	r3, r0, #0
 800161e:	d001      	beq.n	8001624 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e00f      	b.n	8001644 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d80b      	bhi.n	8001642 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	2301      	movs	r3, #1
 800162e:	425b      	negs	r3, r3
 8001630:	2200      	movs	r2, #0
 8001632:	0018      	movs	r0, r3
 8001634:	f000 f8d8 	bl	80017e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_InitTick+0x64>)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b003      	add	sp, #12
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_IncTick+0x1c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	001a      	movs	r2, r3
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_IncTick+0x20>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	18d2      	adds	r2, r2, r3
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_IncTick+0x20>)
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	20000008 	.word	0x20000008
 8001678:	200001d4 	.word	0x200001d4

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <HAL_GetTick+0x10>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	200001d4 	.word	0x200001d4

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	0002      	movs	r2, r0
 8001698:	1dfb      	adds	r3, r7, #7
 800169a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800169c:	1dfb      	adds	r3, r7, #7
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b7f      	cmp	r3, #127	; 0x7f
 80016a2:	d809      	bhi.n	80016b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	001a      	movs	r2, r3
 80016aa:	231f      	movs	r3, #31
 80016ac:	401a      	ands	r2, r3
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_EnableIRQ+0x30>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	4091      	lsls	r1, r2
 80016b4:	000a      	movs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
  }
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	0002      	movs	r2, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b7f      	cmp	r3, #127	; 0x7f
 80016d8:	d828      	bhi.n	800172c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016da:	4a2f      	ldr	r2, [pc, #188]	; (8001798 <__NVIC_SetPriority+0xd4>)
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	33c0      	adds	r3, #192	; 0xc0
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	589b      	ldr	r3, [r3, r2]
 80016ea:	1dfa      	adds	r2, r7, #7
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	0011      	movs	r1, r2
 80016f0:	2203      	movs	r2, #3
 80016f2:	400a      	ands	r2, r1
 80016f4:	00d2      	lsls	r2, r2, #3
 80016f6:	21ff      	movs	r1, #255	; 0xff
 80016f8:	4091      	lsls	r1, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	43d2      	mvns	r2, r2
 80016fe:	401a      	ands	r2, r3
 8001700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	22ff      	movs	r2, #255	; 0xff
 8001708:	401a      	ands	r2, r3
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	0018      	movs	r0, r3
 8001710:	2303      	movs	r3, #3
 8001712:	4003      	ands	r3, r0
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001718:	481f      	ldr	r0, [pc, #124]	; (8001798 <__NVIC_SetPriority+0xd4>)
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b25b      	sxtb	r3, r3
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	430a      	orrs	r2, r1
 8001724:	33c0      	adds	r3, #192	; 0xc0
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800172a:	e031      	b.n	8001790 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <__NVIC_SetPriority+0xd8>)
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	0019      	movs	r1, r3
 8001734:	230f      	movs	r3, #15
 8001736:	400b      	ands	r3, r1
 8001738:	3b08      	subs	r3, #8
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3306      	adds	r3, #6
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	18d3      	adds	r3, r2, r3
 8001742:	3304      	adds	r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	1dfa      	adds	r2, r7, #7
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	0011      	movs	r1, r2
 800174c:	2203      	movs	r2, #3
 800174e:	400a      	ands	r2, r1
 8001750:	00d2      	lsls	r2, r2, #3
 8001752:	21ff      	movs	r1, #255	; 0xff
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	43d2      	mvns	r2, r2
 800175a:	401a      	ands	r2, r3
 800175c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	22ff      	movs	r2, #255	; 0xff
 8001764:	401a      	ands	r2, r3
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	2303      	movs	r3, #3
 800176e:	4003      	ands	r3, r0
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <__NVIC_SetPriority+0xd8>)
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	001c      	movs	r4, r3
 800177c:	230f      	movs	r3, #15
 800177e:	4023      	ands	r3, r4
 8001780:	3b08      	subs	r3, #8
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	430a      	orrs	r2, r1
 8001786:	3306      	adds	r3, #6
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	18c3      	adds	r3, r0, r3
 800178c:	3304      	adds	r3, #4
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b003      	add	sp, #12
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	1e5a      	subs	r2, r3, #1
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	045b      	lsls	r3, r3, #17
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d301      	bcc.n	80017b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b4:	2301      	movs	r3, #1
 80017b6:	e010      	b.n	80017da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <SysTick_Config+0x44>)
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	3a01      	subs	r2, #1
 80017be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c0:	2301      	movs	r3, #1
 80017c2:	425b      	negs	r3, r3
 80017c4:	2103      	movs	r1, #3
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff ff7c 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <SysTick_Config+0x44>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <SysTick_Config+0x44>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d8:	2300      	movs	r3, #0
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b002      	add	sp, #8
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	210f      	movs	r1, #15
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	1c02      	adds	r2, r0, #0
 80017f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b25b      	sxtb	r3, r3
 8001802:	0011      	movs	r1, r2
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>
}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b004      	add	sp, #16
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	0002      	movs	r2, r0
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b25b      	sxtb	r3, r3
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff ff33 	bl	8001690 <__NVIC_EnableIRQ>
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff ffaf 	bl	80017a0 <SysTick_Config>
 8001842:	0003      	movs	r3, r0
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001862:	e14f      	b.n	8001b04 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4091      	lsls	r1, r2
 800186e:	000a      	movs	r2, r1
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d100      	bne.n	800187c <HAL_GPIO_Init+0x30>
 800187a:	e140      	b.n	8001afe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	4013      	ands	r3, r2
 8001884:	2b01      	cmp	r3, #1
 8001886:	d005      	beq.n	8001894 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001890:	2b02      	cmp	r3, #2
 8001892:	d130      	bne.n	80018f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	409a      	lsls	r2, r3
 80018a2:	0013      	movs	r3, r2
 80018a4:	43da      	mvns	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	409a      	lsls	r2, r3
 80018b6:	0013      	movs	r3, r2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ca:	2201      	movs	r2, #1
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	43da      	mvns	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	2201      	movs	r2, #1
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
 80018e8:	0013      	movs	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2203      	movs	r2, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d017      	beq.n	8001932 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	43da      	mvns	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	409a      	lsls	r2, r3
 8001924:	0013      	movs	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2203      	movs	r2, #3
 8001938:	4013      	ands	r3, r2
 800193a:	2b02      	cmp	r3, #2
 800193c:	d123      	bne.n	8001986 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	58d3      	ldr	r3, [r2, r3]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2207      	movs	r2, #7
 8001950:	4013      	ands	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2107      	movs	r1, #7
 800196a:	400b      	ands	r3, r1
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3208      	adds	r2, #8
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	6939      	ldr	r1, [r7, #16]
 8001984:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	409a      	lsls	r2, r3
 8001994:	0013      	movs	r3, r2
 8001996:	43da      	mvns	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	401a      	ands	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	23c0      	movs	r3, #192	; 0xc0
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4013      	ands	r3, r2
 80019c4:	d100      	bne.n	80019c8 <HAL_GPIO_Init+0x17c>
 80019c6:	e09a      	b.n	8001afe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c8:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 80019ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	430a      	orrs	r2, r1
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d4:	4a52      	ldr	r2, [pc, #328]	; (8001b20 <HAL_GPIO_Init+0x2d4>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	589b      	ldr	r3, [r3, r2]
 80019e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2203      	movs	r2, #3
 80019e6:	4013      	ands	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	409a      	lsls	r2, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	43da      	mvns	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	23a0      	movs	r3, #160	; 0xa0
 80019fc:	05db      	lsls	r3, r3, #23
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x1ea>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a47      	ldr	r2, [pc, #284]	; (8001b24 <HAL_GPIO_Init+0x2d8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x1e6>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a46      	ldr	r2, [pc, #280]	; (8001b28 <HAL_GPIO_Init+0x2dc>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a45      	ldr	r2, [pc, #276]	; (8001b2c <HAL_GPIO_Init+0x2e0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x1de>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a44      	ldr	r2, [pc, #272]	; (8001b30 <HAL_GPIO_Init+0x2e4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x1da>
 8001a22:	2305      	movs	r3, #5
 8001a24:	e008      	b.n	8001a38 <HAL_GPIO_Init+0x1ec>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x1ec>
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e004      	b.n	8001a38 <HAL_GPIO_Init+0x1ec>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e002      	b.n	8001a38 <HAL_GPIO_Init+0x1ec>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x1ec>
 8001a36:	2300      	movs	r3, #0
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	4093      	lsls	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a48:	4935      	ldr	r1, [pc, #212]	; (8001b20 <HAL_GPIO_Init+0x2d4>)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	035b      	lsls	r3, r3, #13
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	039b      	lsls	r3, r3, #14
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	029b      	lsls	r3, r3, #10
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43da      	mvns	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	4013      	ands	r3, r2
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	40da      	lsrs	r2, r3
 8001b0c:	1e13      	subs	r3, r2, #0
 8001b0e:	d000      	beq.n	8001b12 <HAL_GPIO_Init+0x2c6>
 8001b10:	e6a8      	b.n	8001864 <HAL_GPIO_Init+0x18>
  }
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b006      	add	sp, #24
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	50000400 	.word	0x50000400
 8001b28:	50000800 	.word	0x50000800
 8001b2c:	50000c00 	.word	0x50000c00
 8001b30:	50001c00 	.word	0x50001c00
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	000a      	movs	r2, r1
 8001b42:	1cbb      	adds	r3, r7, #2
 8001b44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	1cba      	adds	r2, r7, #2
 8001b4c:	8812      	ldrh	r2, [r2, #0]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b52:	230f      	movs	r3, #15
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	e003      	b.n	8001b64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b64:	230f      	movs	r3, #15
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	781b      	ldrb	r3, [r3, #0]
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b004      	add	sp, #16
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	0008      	movs	r0, r1
 8001b7c:	0011      	movs	r1, r2
 8001b7e:	1cbb      	adds	r3, r7, #2
 8001b80:	1c02      	adds	r2, r0, #0
 8001b82:	801a      	strh	r2, [r3, #0]
 8001b84:	1c7b      	adds	r3, r7, #1
 8001b86:	1c0a      	adds	r2, r1, #0
 8001b88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8a:	1c7b      	adds	r3, r7, #1
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	1cbb      	adds	r3, r7, #2
 8001b94:	881a      	ldrh	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b9a:	e003      	b.n	8001ba4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b9c:	1cbb      	adds	r3, r7, #2
 8001b9e:	881a      	ldrh	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	b08b      	sub	sp, #44	; 0x2c
 8001bb0:	af06      	add	r7, sp, #24
 8001bb2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0f0      	b.n	8001da0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a79      	ldr	r2, [pc, #484]	; (8001da8 <HAL_PCD_Init+0x1fc>)
 8001bc2:	5c9b      	ldrb	r3, [r3, r2]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d108      	bne.n	8001bdc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	23aa      	movs	r3, #170	; 0xaa
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f006 facc 	bl	8008174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <HAL_PCD_Init+0x1fc>)
 8001be0:	2103      	movs	r1, #3
 8001be2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f002 fd2b 	bl	8004644 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bee:	230f      	movs	r3, #15
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	e049      	b.n	8001c8c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	0013      	movs	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	189b      	adds	r3, r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	18cb      	adds	r3, r1, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	189b      	adds	r3, r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	183a      	adds	r2, r7, r0
 8001c24:	7812      	ldrb	r2, [r2, #0]
 8001c26:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c28:	183b      	adds	r3, r7, r0
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	0013      	movs	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	189b      	adds	r3, r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	18cb      	adds	r3, r1, r3
 8001c3a:	3303      	adds	r3, #3
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c40:	183b      	adds	r3, r7, r0
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	0013      	movs	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	189b      	adds	r3, r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	18cb      	adds	r3, r1, r3
 8001c50:	3338      	adds	r3, #56	; 0x38
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c56:	183b      	adds	r3, r7, r0
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	189b      	adds	r3, r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	18cb      	adds	r3, r1, r3
 8001c66:	333c      	adds	r3, #60	; 0x3c
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c6c:	183b      	adds	r3, r7, r0
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	0013      	movs	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	189b      	adds	r3, r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	18cb      	adds	r3, r1, r3
 8001c7c:	3340      	adds	r3, #64	; 0x40
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c82:	183b      	adds	r3, r7, r0
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	3201      	adds	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3ae      	bcc.n	8001bf8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e056      	b.n	8001d50 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ca2:	240f      	movs	r4, #15
 8001ca4:	193b      	adds	r3, r7, r4
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	236a      	movs	r3, #106	; 0x6a
 8001cac:	33ff      	adds	r3, #255	; 0xff
 8001cae:	0019      	movs	r1, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	189b      	adds	r3, r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	18c3      	adds	r3, r0, r3
 8001cba:	185b      	adds	r3, r3, r1
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cc0:	193b      	adds	r3, r7, r4
 8001cc2:	781a      	ldrb	r2, [r3, #0]
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	23b4      	movs	r3, #180	; 0xb4
 8001cc8:	0059      	lsls	r1, r3, #1
 8001cca:	0013      	movs	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	189b      	adds	r3, r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	18c3      	adds	r3, r0, r3
 8001cd4:	185b      	adds	r3, r3, r1
 8001cd6:	193a      	adds	r2, r7, r4
 8001cd8:	7812      	ldrb	r2, [r2, #0]
 8001cda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cdc:	193b      	adds	r3, r7, r4
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	236c      	movs	r3, #108	; 0x6c
 8001ce4:	33ff      	adds	r3, #255	; 0xff
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	189b      	adds	r3, r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	18c3      	adds	r3, r0, r3
 8001cf2:	185b      	adds	r3, r3, r1
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	23bc      	movs	r3, #188	; 0xbc
 8001d00:	0059      	lsls	r1, r3, #1
 8001d02:	0013      	movs	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	189b      	adds	r3, r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	18c3      	adds	r3, r0, r3
 8001d0c:	185b      	adds	r3, r3, r1
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	23be      	movs	r3, #190	; 0xbe
 8001d1a:	0059      	lsls	r1, r3, #1
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	189b      	adds	r3, r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	18c3      	adds	r3, r0, r3
 8001d26:	185b      	adds	r3, r3, r1
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d2c:	193b      	adds	r3, r7, r4
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	23c0      	movs	r3, #192	; 0xc0
 8001d34:	0059      	lsls	r1, r3, #1
 8001d36:	0013      	movs	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	189b      	adds	r3, r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	18c3      	adds	r3, r0, r3
 8001d40:	185b      	adds	r3, r3, r1
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d46:	193b      	adds	r3, r7, r4
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	193b      	adds	r3, r7, r4
 8001d4c:	3201      	adds	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	230f      	movs	r3, #15
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d3a1      	bcc.n	8001ca2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	466a      	mov	r2, sp
 8001d66:	0011      	movs	r1, r2
 8001d68:	001a      	movs	r2, r3
 8001d6a:	3210      	adds	r2, #16
 8001d6c:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001d6e:	c170      	stmia	r1!, {r4, r5, r6}
 8001d70:	ca30      	ldmia	r2!, {r4, r5}
 8001d72:	c130      	stmia	r1!, {r4, r5}
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f002 fc7d 	bl	8004678 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2224      	movs	r2, #36	; 0x24
 8001d82:	2100      	movs	r1, #0
 8001d84:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_PCD_Init+0x1fc>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d103      	bne.n	8001d9e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f001 fd09 	bl	80037b0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b005      	add	sp, #20
 8001da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da8:	000002a9 	.word	0x000002a9

08001dac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	23aa      	movs	r3, #170	; 0xaa
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_PCD_Start+0x18>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e014      	b.n	8001dee <HAL_PCD_Start+0x42>
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	23aa      	movs	r3, #170	; 0xaa
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	2101      	movs	r1, #1
 8001dcc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f002 fc20 	bl	8004618 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f004 fc23 	bl	8006628 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	23aa      	movs	r3, #170	; 0xaa
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	2100      	movs	r1, #0
 8001dea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b002      	add	sp, #8
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f004 fc25 	bl	8006654 <USB_ReadInterrupts>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	4013      	ands	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 fb48 	bl	80024b0 <PCD_EP_ISR_Handler>

    return;
 8001e20:	e11d      	b.n	800205e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d015      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2244      	movs	r2, #68	; 0x44
 8001e32:	5a9b      	ldrh	r3, [r3, r2]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	498a      	ldr	r1, [pc, #552]	; (8002064 <HAL_PCD_IRQHandler+0x26c>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	b291      	uxth	r1, r2
 8001e40:	2244      	movs	r2, #68	; 0x44
 8001e42:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f006 fa17 	bl	800827a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2100      	movs	r1, #0
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 f915 	bl	8002080 <HAL_PCD_SetAddress>

    return;
 8001e56:	e102      	b.n	800205e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	01db      	lsls	r3, r3, #7
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d00c      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2244      	movs	r2, #68	; 0x44
 8001e68:	5a9b      	ldrh	r3, [r3, r2]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	497d      	ldr	r1, [pc, #500]	; (8002068 <HAL_PCD_IRQHandler+0x270>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	b291      	uxth	r1, r2
 8001e76:	2244      	movs	r2, #68	; 0x44
 8001e78:	5299      	strh	r1, [r3, r2]

    return;
 8001e7a:	e0f0      	b.n	800205e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	019b      	lsls	r3, r3, #6
 8001e82:	4013      	ands	r3, r2
 8001e84:	d00c      	beq.n	8001ea0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2244      	movs	r2, #68	; 0x44
 8001e8c:	5a9b      	ldrh	r3, [r3, r2]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4975      	ldr	r1, [pc, #468]	; (800206c <HAL_PCD_IRQHandler+0x274>)
 8001e96:	400a      	ands	r2, r1
 8001e98:	b291      	uxth	r1, r2
 8001e9a:	2244      	movs	r2, #68	; 0x44
 8001e9c:	5299      	strh	r1, [r3, r2]

    return;
 8001e9e:	e0de      	b.n	800205e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	015b      	lsls	r3, r3, #5
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d038      	beq.n	8001f1c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	5a9b      	ldrh	r3, [r3, r2]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2104      	movs	r1, #4
 8001eba:	438a      	bics	r2, r1
 8001ebc:	b291      	uxth	r1, r2
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2240      	movs	r2, #64	; 0x40
 8001ec8:	5a9b      	ldrh	r3, [r3, r2]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	b291      	uxth	r1, r2
 8001ed6:	2240      	movs	r2, #64	; 0x40
 8001ed8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	23b8      	movs	r3, #184	; 0xb8
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d109      	bne.n	8001efa <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	23b8      	movs	r3, #184	; 0xb8
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	2100      	movs	r1, #0
 8001eee:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f001 fc85 	bl	8003804 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f006 f9fd 	bl	80082fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2244      	movs	r2, #68	; 0x44
 8001f08:	5a9b      	ldrh	r3, [r3, r2]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4957      	ldr	r1, [pc, #348]	; (8002070 <HAL_PCD_IRQHandler+0x278>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	b291      	uxth	r1, r2
 8001f16:	2244      	movs	r2, #68	; 0x44
 8001f18:	5299      	strh	r1, [r3, r2]

    return;
 8001f1a:	e0a0      	b.n	800205e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4013      	ands	r3, r2
 8001f24:	d028      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2240      	movs	r2, #64	; 0x40
 8001f2c:	5a9b      	ldrh	r3, [r3, r2]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2108      	movs	r1, #8
 8001f36:	430a      	orrs	r2, r1
 8001f38:	b291      	uxth	r1, r2
 8001f3a:	2240      	movs	r2, #64	; 0x40
 8001f3c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2244      	movs	r2, #68	; 0x44
 8001f44:	5a9b      	ldrh	r3, [r3, r2]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4949      	ldr	r1, [pc, #292]	; (8002074 <HAL_PCD_IRQHandler+0x27c>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	b291      	uxth	r1, r2
 8001f52:	2244      	movs	r2, #68	; 0x44
 8001f54:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	5a9b      	ldrh	r3, [r3, r2]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2104      	movs	r1, #4
 8001f66:	430a      	orrs	r2, r1
 8001f68:	b291      	uxth	r1, r2
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f006 f9a7 	bl	80082c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f76:	e072      	b.n	800205e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d046      	beq.n	800200e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2244      	movs	r2, #68	; 0x44
 8001f86:	5a9b      	ldrh	r3, [r3, r2]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	438a      	bics	r2, r1
 8001f92:	b291      	uxth	r1, r2
 8001f94:	2244      	movs	r2, #68	; 0x44
 8001f96:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	23b8      	movs	r3, #184	; 0xb8
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d12f      	bne.n	8002004 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	5a9b      	ldrh	r3, [r3, r2]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	b291      	uxth	r1, r2
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	5a9b      	ldrh	r3, [r3, r2]
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2108      	movs	r1, #8
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	b291      	uxth	r1, r2
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	23b8      	movs	r3, #184	; 0xb8
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	2101      	movs	r1, #1
 8001fdc:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2254      	movs	r2, #84	; 0x54
 8001fe4:	5a9b      	ldrh	r3, [r3, r2]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	223c      	movs	r2, #60	; 0x3c
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	23b9      	movs	r3, #185	; 0xb9
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f001 fc01 	bl	8003804 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002002:	e02c      	b.n	800205e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0018      	movs	r0, r3
 8002008:	f006 f95c 	bl	80082c4 <HAL_PCD_SuspendCallback>
    return;
 800200c:	e027      	b.n	800205e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d010      	beq.n	800203a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2244      	movs	r2, #68	; 0x44
 800201e:	5a9b      	ldrh	r3, [r3, r2]
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4914      	ldr	r1, [pc, #80]	; (8002078 <HAL_PCD_IRQHandler+0x280>)
 8002028:	400a      	ands	r2, r1
 800202a:	b291      	uxth	r1, r2
 800202c:	2244      	movs	r2, #68	; 0x44
 800202e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	0018      	movs	r0, r3
 8002034:	f006 f912 	bl	800825c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002038:	e011      	b.n	800205e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d00c      	beq.n	800205e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2244      	movs	r2, #68	; 0x44
 800204a:	5a9b      	ldrh	r3, [r3, r2]
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	490a      	ldr	r1, [pc, #40]	; (800207c <HAL_PCD_IRQHandler+0x284>)
 8002054:	400a      	ands	r2, r1
 8002056:	b291      	uxth	r1, r2
 8002058:	2244      	movs	r2, #68	; 0x44
 800205a:	5299      	strh	r1, [r3, r2]

    return;
 800205c:	46c0      	nop			; (mov r8, r8)
  }
}
 800205e:	46bd      	mov	sp, r7
 8002060:	b004      	add	sp, #16
 8002062:	bd80      	pop	{r7, pc}
 8002064:	fffffbff 	.word	0xfffffbff
 8002068:	ffffbfff 	.word	0xffffbfff
 800206c:	ffffdfff 	.word	0xffffdfff
 8002070:	ffffefff 	.word	0xffffefff
 8002074:	fffff7ff 	.word	0xfffff7ff
 8002078:	fffffdff 	.word	0xfffffdff
 800207c:	fffffeff 	.word	0xfffffeff

08002080 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	000a      	movs	r2, r1
 800208a:	1cfb      	adds	r3, r7, #3
 800208c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	23aa      	movs	r3, #170	; 0xaa
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_PCD_SetAddress+0x1e>
 800209a:	2302      	movs	r3, #2
 800209c:	e017      	b.n	80020ce <HAL_PCD_SetAddress+0x4e>
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	23aa      	movs	r3, #170	; 0xaa
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	2101      	movs	r1, #1
 80020a6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1cfa      	adds	r2, r7, #3
 80020ac:	2124      	movs	r1, #36	; 0x24
 80020ae:	7812      	ldrb	r2, [r2, #0]
 80020b0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	1cfb      	adds	r3, r7, #3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	0019      	movs	r1, r3
 80020bc:	0010      	movs	r0, r2
 80020be:	f004 fa9f 	bl	8006600 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	23aa      	movs	r3, #170	; 0xaa
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	2100      	movs	r1, #0
 80020ca:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b002      	add	sp, #8
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	000c      	movs	r4, r1
 80020e0:	0010      	movs	r0, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	1cfb      	adds	r3, r7, #3
 80020e6:	1c22      	adds	r2, r4, #0
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	003b      	movs	r3, r7
 80020ec:	1c02      	adds	r2, r0, #0
 80020ee:	801a      	strh	r2, [r3, #0]
 80020f0:	1cbb      	adds	r3, r7, #2
 80020f2:	1c0a      	adds	r2, r1, #0
 80020f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020f6:	230b      	movs	r3, #11
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020fe:	1cfb      	adds	r3, r7, #3
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b25b      	sxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	da0f      	bge.n	8002128 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002108:	1cfb      	adds	r3, r7, #3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2207      	movs	r2, #7
 800210e:	4013      	ands	r3, r2
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	0013      	movs	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	189b      	adds	r3, r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	18d3      	adds	r3, r2, r3
 800211e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	705a      	strb	r2, [r3, #1]
 8002126:	e00f      	b.n	8002148 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002128:	1cfb      	adds	r3, r7, #3
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2207      	movs	r2, #7
 800212e:	401a      	ands	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	189b      	adds	r3, r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	3369      	adds	r3, #105	; 0x69
 800213a:	33ff      	adds	r3, #255	; 0xff
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	18d3      	adds	r3, r2, r3
 8002140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002148:	1cfb      	adds	r3, r7, #3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2207      	movs	r2, #7
 800214e:	4013      	ands	r3, r2
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002156:	003b      	movs	r3, r7
 8002158:	881a      	ldrh	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1cba      	adds	r2, r7, #2
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002166:	1cbb      	adds	r3, r7, #2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d102      	bne.n	8002174 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	23aa      	movs	r3, #170	; 0xaa
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_PCD_EP_Open+0xae>
 8002180:	2302      	movs	r3, #2
 8002182:	e013      	b.n	80021ac <HAL_PCD_EP_Open+0xd6>
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	23aa      	movs	r3, #170	; 0xaa
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	2101      	movs	r1, #1
 800218c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	0011      	movs	r1, r2
 8002196:	0018      	movs	r0, r3
 8002198:	f002 fa96 	bl	80046c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	23aa      	movs	r3, #170	; 0xaa
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	2100      	movs	r1, #0
 80021a4:	54d1      	strb	r1, [r2, r3]

  return ret;
 80021a6:	230b      	movs	r3, #11
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	781b      	ldrb	r3, [r3, #0]
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b005      	add	sp, #20
 80021b2:	bd90      	pop	{r4, r7, pc}

080021b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	000a      	movs	r2, r1
 80021be:	1cfb      	adds	r3, r7, #3
 80021c0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021c2:	1cfb      	adds	r3, r7, #3
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da0f      	bge.n	80021ec <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021cc:	1cfb      	adds	r3, r7, #3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2207      	movs	r2, #7
 80021d2:	4013      	ands	r3, r2
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	0013      	movs	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	189b      	adds	r3, r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	18d3      	adds	r3, r2, r3
 80021e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	705a      	strb	r2, [r3, #1]
 80021ea:	e00f      	b.n	800220c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ec:	1cfb      	adds	r3, r7, #3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2207      	movs	r2, #7
 80021f2:	401a      	ands	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	3369      	adds	r3, #105	; 0x69
 80021fe:	33ff      	adds	r3, #255	; 0xff
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	18d3      	adds	r3, r2, r3
 8002204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800220c:	1cfb      	adds	r3, r7, #3
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2207      	movs	r2, #7
 8002212:	4013      	ands	r3, r2
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	23aa      	movs	r3, #170	; 0xaa
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_PCD_EP_Close+0x76>
 8002226:	2302      	movs	r3, #2
 8002228:	e011      	b.n	800224e <HAL_PCD_EP_Close+0x9a>
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	23aa      	movs	r3, #170	; 0xaa
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	2101      	movs	r1, #1
 8002232:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f002 fde5 	bl	8004e0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	23aa      	movs	r3, #170	; 0xaa
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	2100      	movs	r1, #0
 800224a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b004      	add	sp, #16
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	200b      	movs	r0, #11
 8002264:	183b      	adds	r3, r7, r0
 8002266:	1c0a      	adds	r2, r1, #0
 8002268:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800226a:	0001      	movs	r1, r0
 800226c:	187b      	adds	r3, r7, r1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2207      	movs	r2, #7
 8002272:	401a      	ands	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	189b      	adds	r3, r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	3369      	adds	r3, #105	; 0x69
 800227e:	33ff      	adds	r3, #255	; 0xff
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	18d3      	adds	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2200      	movs	r2, #0
 800229c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2207      	movs	r2, #7
 80022a4:	4013      	ands	r3, r2
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f002 ff69 	bl	800518c <USB_EPStartXfer>

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b006      	add	sp, #24
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	200b      	movs	r0, #11
 80022d2:	183b      	adds	r3, r7, r0
 80022d4:	1c0a      	adds	r2, r1, #0
 80022d6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d8:	183b      	adds	r3, r7, r0
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2207      	movs	r2, #7
 80022de:	4013      	ands	r3, r2
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	0013      	movs	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	189b      	adds	r3, r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	18d3      	adds	r3, r2, r3
 80022ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2224      	movs	r2, #36	; 0x24
 8002300:	2101      	movs	r1, #1
 8002302:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2201      	movs	r2, #1
 8002314:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002316:	183b      	adds	r3, r7, r0
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2207      	movs	r2, #7
 800231c:	4013      	ands	r3, r2
 800231e:	b2da      	uxtb	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	0011      	movs	r1, r2
 800232c:	0018      	movs	r0, r3
 800232e:	f002 ff2d 	bl	800518c <USB_EPStartXfer>

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b006      	add	sp, #24
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	000a      	movs	r2, r1
 8002346:	1cfb      	adds	r3, r7, #3
 8002348:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800234a:	1cfb      	adds	r3, r7, #3
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2207      	movs	r2, #7
 8002350:	401a      	ands	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	d901      	bls.n	800235e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e046      	b.n	80023ec <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800235e:	1cfb      	adds	r3, r7, #3
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b25b      	sxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	da0f      	bge.n	8002388 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002368:	1cfb      	adds	r3, r7, #3
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2207      	movs	r2, #7
 800236e:	4013      	ands	r3, r2
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	0013      	movs	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	189b      	adds	r3, r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	18d3      	adds	r3, r2, r3
 800237e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	705a      	strb	r2, [r3, #1]
 8002386:	e00d      	b.n	80023a4 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002388:	1cfb      	adds	r3, r7, #3
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	0013      	movs	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	189b      	adds	r3, r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	3369      	adds	r3, #105	; 0x69
 8002396:	33ff      	adds	r3, #255	; 0xff
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	18d3      	adds	r3, r2, r3
 800239c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023aa:	1cfb      	adds	r3, r7, #3
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2207      	movs	r2, #7
 80023b0:	4013      	ands	r3, r2
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	23aa      	movs	r3, #170	; 0xaa
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_PCD_EP_SetStall+0x8c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e011      	b.n	80023ec <HAL_PCD_EP_SetStall+0xb0>
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	23aa      	movs	r3, #170	; 0xaa
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	2101      	movs	r1, #1
 80023d0:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	0011      	movs	r1, r2
 80023da:	0018      	movs	r0, r3
 80023dc:	f004 f80e 	bl	80063fc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	23aa      	movs	r3, #170	; 0xaa
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	2100      	movs	r1, #0
 80023e8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b004      	add	sp, #16
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	000a      	movs	r2, r1
 80023fe:	1cfb      	adds	r3, r7, #3
 8002400:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002402:	1cfb      	adds	r3, r7, #3
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	220f      	movs	r2, #15
 8002408:	401a      	ands	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d901      	bls.n	8002416 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e048      	b.n	80024a8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002416:	1cfb      	adds	r3, r7, #3
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b25b      	sxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	da0f      	bge.n	8002440 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002420:	1cfb      	adds	r3, r7, #3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2207      	movs	r2, #7
 8002426:	4013      	ands	r3, r2
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	0013      	movs	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	189b      	adds	r3, r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	18d3      	adds	r3, r2, r3
 8002436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	705a      	strb	r2, [r3, #1]
 800243e:	e00f      	b.n	8002460 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002440:	1cfb      	adds	r3, r7, #3
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2207      	movs	r2, #7
 8002446:	401a      	ands	r2, r3
 8002448:	0013      	movs	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	189b      	adds	r3, r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	3369      	adds	r3, #105	; 0x69
 8002452:	33ff      	adds	r3, #255	; 0xff
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	18d3      	adds	r3, r2, r3
 8002458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002466:	1cfb      	adds	r3, r7, #3
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2207      	movs	r2, #7
 800246c:	4013      	ands	r3, r2
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	23aa      	movs	r3, #170	; 0xaa
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_PCD_EP_ClrStall+0x90>
 8002480:	2302      	movs	r3, #2
 8002482:	e011      	b.n	80024a8 <HAL_PCD_EP_ClrStall+0xb4>
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	23aa      	movs	r3, #170	; 0xaa
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	2101      	movs	r1, #1
 800248c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	0011      	movs	r1, r2
 8002496:	0018      	movs	r0, r3
 8002498:	f004 f800 	bl	800649c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	23aa      	movs	r3, #170	; 0xaa
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	2100      	movs	r1, #0
 80024a4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b004      	add	sp, #16
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b096      	sub	sp, #88	; 0x58
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024b8:	f000 fbec 	bl	8002c94 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	204e      	movs	r0, #78	; 0x4e
 80024c2:	183b      	adds	r3, r7, r0
 80024c4:	2144      	movs	r1, #68	; 0x44
 80024c6:	5a52      	ldrh	r2, [r2, r1]
 80024c8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	244d      	movs	r4, #77	; 0x4d
 80024d2:	193b      	adds	r3, r7, r4
 80024d4:	210f      	movs	r1, #15
 80024d6:	400a      	ands	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80024da:	193b      	adds	r3, r7, r4
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d000      	beq.n	80024e4 <PCD_EP_ISR_Handler+0x34>
 80024e2:	e18f      	b.n	8002804 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024e4:	183b      	adds	r3, r7, r0
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	2210      	movs	r2, #16
 80024ea:	4013      	ands	r3, r2
 80024ec:	d155      	bne.n	800259a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	200e      	movs	r0, #14
 80024f8:	183b      	adds	r3, r7, r0
 80024fa:	49bb      	ldr	r1, [pc, #748]	; (80027e8 <PCD_EP_ISR_Handler+0x338>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	801a      	strh	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	183a      	adds	r2, r7, r0
 8002506:	8812      	ldrh	r2, [r2, #0]
 8002508:	49b8      	ldr	r1, [pc, #736]	; (80027ec <PCD_EP_ISR_Handler+0x33c>)
 800250a:	430a      	orrs	r2, r1
 800250c:	b292      	uxth	r2, r2
 800250e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3328      	adds	r3, #40	; 0x28
 8002514:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2250      	movs	r2, #80	; 0x50
 800251c:	5a9b      	ldrh	r3, [r3, r2]
 800251e:	b29b      	uxth	r3, r3
 8002520:	001a      	movs	r2, r3
 8002522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	18d2      	adds	r2, r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	18d3      	adds	r3, r2, r3
 8002530:	4aaf      	ldr	r2, [pc, #700]	; (80027f0 <PCD_EP_ISR_Handler+0x340>)
 8002532:	4694      	mov	ip, r2
 8002534:	4463      	add	r3, ip
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	059b      	lsls	r3, r3, #22
 800253a:	0d9a      	lsrs	r2, r3, #22
 800253c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	18d2      	adds	r2, r2, r3
 800254a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2100      	movs	r1, #0
 8002552:	0018      	movs	r0, r3
 8002554:	f005 fe64 	bl	8008220 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2224      	movs	r2, #36	; 0x24
 800255c:	5c9b      	ldrb	r3, [r3, r2]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <PCD_EP_ISR_Handler+0xb8>
 8002564:	f000 fb96 	bl	8002c94 <PCD_EP_ISR_Handler+0x7e4>
 8002568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <PCD_EP_ISR_Handler+0xc4>
 8002570:	f000 fb90 	bl	8002c94 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	5c9b      	ldrb	r3, [r3, r2]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	4252      	negs	r2, r2
 8002580:	4313      	orrs	r3, r2
 8002582:	b2da      	uxtb	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b291      	uxth	r1, r2
 800258a:	224c      	movs	r2, #76	; 0x4c
 800258c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2224      	movs	r2, #36	; 0x24
 8002592:	2100      	movs	r1, #0
 8002594:	5499      	strb	r1, [r3, r2]
 8002596:	f000 fb7d 	bl	8002c94 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3369      	adds	r3, #105	; 0x69
 800259e:	33ff      	adds	r3, #255	; 0xff
 80025a0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	214a      	movs	r1, #74	; 0x4a
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	8812      	ldrh	r2, [r2, #0]
 80025ac:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	4013      	ands	r3, r2
 80025b8:	d037      	beq.n	800262a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2250      	movs	r2, #80	; 0x50
 80025c0:	5a9b      	ldrh	r3, [r3, r2]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	001a      	movs	r2, r3
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	18d2      	adds	r2, r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	18d3      	adds	r3, r2, r3
 80025d4:	4a87      	ldr	r2, [pc, #540]	; (80027f4 <PCD_EP_ISR_Handler+0x344>)
 80025d6:	4694      	mov	ip, r2
 80025d8:	4463      	add	r3, ip
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	059b      	lsls	r3, r3, #22
 80025de:	0d9a      	lsrs	r2, r3, #22
 80025e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	22ac      	movs	r2, #172	; 0xac
 80025ec:	0092      	lsls	r2, r2, #2
 80025ee:	1899      	adds	r1, r3, r2
 80025f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f004 f882 	bl	8006702 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29a      	uxth	r2, r3
 8002606:	2010      	movs	r0, #16
 8002608:	183b      	adds	r3, r7, r0
 800260a:	497b      	ldr	r1, [pc, #492]	; (80027f8 <PCD_EP_ISR_Handler+0x348>)
 800260c:	400a      	ands	r2, r1
 800260e:	801a      	strh	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	183a      	adds	r2, r7, r0
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	430a      	orrs	r2, r1
 800261c:	b292      	uxth	r2, r2
 800261e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f005 fdc6 	bl	80081b4 <HAL_PCD_SetupStageCallback>
 8002628:	e334      	b.n	8002c94 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800262a:	234a      	movs	r3, #74	; 0x4a
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2200      	movs	r2, #0
 8002630:	5e9b      	ldrsh	r3, [r3, r2]
 8002632:	2b00      	cmp	r3, #0
 8002634:	db00      	blt.n	8002638 <PCD_EP_ISR_Handler+0x188>
 8002636:	e32d      	b.n	8002c94 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	201e      	movs	r0, #30
 8002642:	183b      	adds	r3, r7, r0
 8002644:	496c      	ldr	r1, [pc, #432]	; (80027f8 <PCD_EP_ISR_Handler+0x348>)
 8002646:	400a      	ands	r2, r1
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	183a      	adds	r2, r7, r0
 8002650:	8812      	ldrh	r2, [r2, #0]
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	430a      	orrs	r2, r1
 8002656:	b292      	uxth	r2, r2
 8002658:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2250      	movs	r2, #80	; 0x50
 8002660:	5a9b      	ldrh	r3, [r3, r2]
 8002662:	b29b      	uxth	r3, r3
 8002664:	001a      	movs	r2, r3
 8002666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	18d2      	adds	r2, r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	18d3      	adds	r3, r2, r3
 8002674:	4a5f      	ldr	r2, [pc, #380]	; (80027f4 <PCD_EP_ISR_Handler+0x344>)
 8002676:	4694      	mov	ip, r2
 8002678:	4463      	add	r3, ip
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	059b      	lsls	r3, r3, #22
 800267e:	0d9a      	lsrs	r2, r3, #22
 8002680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002682:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01a      	beq.n	80026c2 <PCD_EP_ISR_Handler+0x212>
 800268c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d016      	beq.n	80026c2 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269a:	6959      	ldr	r1, [r3, #20]
 800269c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f004 f82c 	bl	8006702 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	18d2      	adds	r2, r2, r3
 80026b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2100      	movs	r1, #0
 80026bc:	0018      	movs	r0, r3
 80026be:	f005 fd8e 	bl	80081de <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	214a      	movs	r1, #74	; 0x4a
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	8812      	ldrh	r2, [r2, #0]
 80026cc:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4013      	ands	r3, r2
 80026d8:	d000      	beq.n	80026dc <PCD_EP_ISR_Handler+0x22c>
 80026da:	e2db      	b.n	8002c94 <PCD_EP_ISR_Handler+0x7e4>
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	881a      	ldrh	r2, [r3, #0]
 80026e0:	23c0      	movs	r3, #192	; 0xc0
 80026e2:	019b      	lsls	r3, r3, #6
 80026e4:	401a      	ands	r2, r3
 80026e6:	23c0      	movs	r3, #192	; 0xc0
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d100      	bne.n	80026f0 <PCD_EP_ISR_Handler+0x240>
 80026ee:	e2d1      	b.n	8002c94 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2250      	movs	r2, #80	; 0x50
 80026fc:	5a9b      	ldrh	r3, [r3, r2]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	001a      	movs	r2, r3
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	189b      	adds	r3, r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4a3a      	ldr	r2, [pc, #232]	; (80027f4 <PCD_EP_ISR_Handler+0x344>)
 800270c:	4694      	mov	ip, r2
 800270e:	4463      	add	r3, ip
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	059b      	lsls	r3, r3, #22
 800271a:	0d9b      	lsrs	r3, r3, #22
 800271c:	b29a      	uxth	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	801a      	strh	r2, [r3, #0]
 8002722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b3e      	cmp	r3, #62	; 0x3e
 8002728:	d91a      	bls.n	8002760 <PCD_EP_ISR_Handler+0x2b0>
 800272a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	647b      	str	r3, [r7, #68]	; 0x44
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	221f      	movs	r2, #31
 8002738:	4013      	ands	r3, r2
 800273a:	d102      	bne.n	8002742 <PCD_EP_ISR_Handler+0x292>
 800273c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273e:	3b01      	subs	r3, #1
 8002740:	647b      	str	r3, [r7, #68]	; 0x44
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29a      	uxth	r2, r3
 8002748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274a:	b29b      	uxth	r3, r3
 800274c:	029b      	lsls	r3, r3, #10
 800274e:	b29b      	uxth	r3, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <PCD_EP_ISR_Handler+0x33c>)
 8002756:	4313      	orrs	r3, r2
 8002758:	b29a      	uxth	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	801a      	strh	r2, [r3, #0]
 800275e:	e023      	b.n	80027a8 <PCD_EP_ISR_Handler+0x2f8>
 8002760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d108      	bne.n	800277a <PCD_EP_ISR_Handler+0x2ca>
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4a1f      	ldr	r2, [pc, #124]	; (80027ec <PCD_EP_ISR_Handler+0x33c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	b29a      	uxth	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	e016      	b.n	80027a8 <PCD_EP_ISR_Handler+0x2f8>
 800277a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	647b      	str	r3, [r7, #68]	; 0x44
 8002782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2201      	movs	r2, #1
 8002788:	4013      	ands	r3, r2
 800278a:	d002      	beq.n	8002792 <PCD_EP_ISR_Handler+0x2e2>
 800278c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278e:	3301      	adds	r3, #1
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29a      	uxth	r2, r3
 8002798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279a:	b29b      	uxth	r3, r3
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	2012      	movs	r0, #18
 80027b2:	183b      	adds	r3, r7, r0
 80027b4:	4911      	ldr	r1, [pc, #68]	; (80027fc <PCD_EP_ISR_Handler+0x34c>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	183b      	adds	r3, r7, r0
 80027bc:	183a      	adds	r2, r7, r0
 80027be:	8812      	ldrh	r2, [r2, #0]
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	0149      	lsls	r1, r1, #5
 80027c4:	404a      	eors	r2, r1
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	183b      	adds	r3, r7, r0
 80027ca:	183a      	adds	r2, r7, r0
 80027cc:	8812      	ldrh	r2, [r2, #0]
 80027ce:	2180      	movs	r1, #128	; 0x80
 80027d0:	0189      	lsls	r1, r1, #6
 80027d2:	404a      	eors	r2, r1
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	183a      	adds	r2, r7, r0
 80027dc:	8812      	ldrh	r2, [r2, #0]
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <PCD_EP_ISR_Handler+0x350>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	b292      	uxth	r2, r2
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	e255      	b.n	8002c94 <PCD_EP_ISR_Handler+0x7e4>
 80027e8:	ffff8f0f 	.word	0xffff8f0f
 80027ec:	ffff8000 	.word	0xffff8000
 80027f0:	00000402 	.word	0x00000402
 80027f4:	00000406 	.word	0x00000406
 80027f8:	00000f8f 	.word	0x00000f8f
 80027fc:	ffffbf8f 	.word	0xffffbf8f
 8002800:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	001a      	movs	r2, r3
 800280a:	204d      	movs	r0, #77	; 0x4d
 800280c:	183b      	adds	r3, r7, r0
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	18d2      	adds	r2, r2, r3
 8002814:	214a      	movs	r1, #74	; 0x4a
 8002816:	187b      	adds	r3, r7, r1
 8002818:	8812      	ldrh	r2, [r2, #0]
 800281a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800281c:	187b      	adds	r3, r7, r1
 800281e:	2200      	movs	r2, #0
 8002820:	5e9b      	ldrsh	r3, [r3, r2]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db00      	blt.n	8002828 <PCD_EP_ISR_Handler+0x378>
 8002826:	e0fa      	b.n	8002a1e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	001a      	movs	r2, r3
 800282e:	183b      	adds	r3, r7, r0
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	18d3      	adds	r3, r2, r3
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b29a      	uxth	r2, r3
 800283a:	2448      	movs	r4, #72	; 0x48
 800283c:	193b      	adds	r3, r7, r4
 800283e:	49d1      	ldr	r1, [pc, #836]	; (8002b84 <PCD_EP_ISR_Handler+0x6d4>)
 8002840:	400a      	ands	r2, r1
 8002842:	801a      	strh	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	001a      	movs	r2, r3
 800284a:	183b      	adds	r3, r7, r0
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	18d3      	adds	r3, r2, r3
 8002852:	193a      	adds	r2, r7, r4
 8002854:	8812      	ldrh	r2, [r2, #0]
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	430a      	orrs	r2, r1
 800285a:	b292      	uxth	r2, r2
 800285c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800285e:	183b      	adds	r3, r7, r0
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	0013      	movs	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	189b      	adds	r3, r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	3369      	adds	r3, #105	; 0x69
 800286c:	33ff      	adds	r3, #255	; 0xff
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	18d3      	adds	r3, r2, r3
 8002872:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002876:	7b1b      	ldrb	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d125      	bne.n	80028c8 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2250      	movs	r2, #80	; 0x50
 8002882:	5a9b      	ldrh	r3, [r3, r2]
 8002884:	b29b      	uxth	r3, r3
 8002886:	001a      	movs	r2, r3
 8002888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	18d2      	adds	r2, r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	4abc      	ldr	r2, [pc, #752]	; (8002b88 <PCD_EP_ISR_Handler+0x6d8>)
 8002898:	4694      	mov	ip, r2
 800289a:	4463      	add	r3, ip
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	2450      	movs	r4, #80	; 0x50
 80028a0:	193b      	adds	r3, r7, r4
 80028a2:	0592      	lsls	r2, r2, #22
 80028a4:	0d92      	lsrs	r2, r2, #22
 80028a6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d100      	bne.n	80028b2 <PCD_EP_ISR_Handler+0x402>
 80028b0:	e08d      	b.n	80029ce <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b8:	6959      	ldr	r1, [r3, #20]
 80028ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028bc:	88da      	ldrh	r2, [r3, #6]
 80028be:	193b      	adds	r3, r7, r4
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f003 ff1e 	bl	8006702 <USB_ReadPMA>
 80028c6:	e082      	b.n	80029ce <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ca:	78db      	ldrb	r3, [r3, #3]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d10c      	bne.n	80028ea <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028d0:	2350      	movs	r3, #80	; 0x50
 80028d2:	18fc      	adds	r4, r7, r3
 80028d4:	234a      	movs	r3, #74	; 0x4a
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	881a      	ldrh	r2, [r3, #0]
 80028da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 f9ec 	bl	8002cbc <HAL_PCD_EP_DB_Receive>
 80028e4:	0003      	movs	r3, r0
 80028e6:	8023      	strh	r3, [r4, #0]
 80028e8:	e071      	b.n	80029ce <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	001a      	movs	r2, r3
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	18d3      	adds	r3, r2, r3
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	2052      	movs	r0, #82	; 0x52
 80028fe:	183b      	adds	r3, r7, r0
 8002900:	49a2      	ldr	r1, [pc, #648]	; (8002b8c <PCD_EP_ISR_Handler+0x6dc>)
 8002902:	400a      	ands	r2, r1
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	001a      	movs	r2, r3
 800290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	18d3      	adds	r3, r2, r3
 8002914:	183a      	adds	r2, r7, r0
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	499d      	ldr	r1, [pc, #628]	; (8002b90 <PCD_EP_ISR_Handler+0x6e0>)
 800291a:	430a      	orrs	r2, r1
 800291c:	b292      	uxth	r2, r2
 800291e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	001a      	movs	r2, r3
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	18d3      	adds	r3, r2, r3
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	001a      	movs	r2, r3
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	01db      	lsls	r3, r3, #7
 8002938:	4013      	ands	r3, r2
 800293a:	d024      	beq.n	8002986 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2250      	movs	r2, #80	; 0x50
 8002942:	5a9b      	ldrh	r3, [r3, r2]
 8002944:	b29b      	uxth	r3, r3
 8002946:	001a      	movs	r2, r3
 8002948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	18d2      	adds	r2, r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	18d3      	adds	r3, r2, r3
 8002956:	4a8f      	ldr	r2, [pc, #572]	; (8002b94 <PCD_EP_ISR_Handler+0x6e4>)
 8002958:	4694      	mov	ip, r2
 800295a:	4463      	add	r3, ip
 800295c:	881a      	ldrh	r2, [r3, #0]
 800295e:	2450      	movs	r4, #80	; 0x50
 8002960:	193b      	adds	r3, r7, r4
 8002962:	0592      	lsls	r2, r2, #22
 8002964:	0d92      	lsrs	r2, r2, #22
 8002966:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002968:	193b      	adds	r3, r7, r4
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d02e      	beq.n	80029ce <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002976:	6959      	ldr	r1, [r3, #20]
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	891a      	ldrh	r2, [r3, #8]
 800297c:	193b      	adds	r3, r7, r4
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	f003 febf 	bl	8006702 <USB_ReadPMA>
 8002984:	e023      	b.n	80029ce <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2250      	movs	r2, #80	; 0x50
 800298c:	5a9b      	ldrh	r3, [r3, r2]
 800298e:	b29b      	uxth	r3, r3
 8002990:	001a      	movs	r2, r3
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	18d2      	adds	r2, r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	18d3      	adds	r3, r2, r3
 80029a0:	4a79      	ldr	r2, [pc, #484]	; (8002b88 <PCD_EP_ISR_Handler+0x6d8>)
 80029a2:	4694      	mov	ip, r2
 80029a4:	4463      	add	r3, ip
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	2450      	movs	r4, #80	; 0x50
 80029aa:	193b      	adds	r3, r7, r4
 80029ac:	0592      	lsls	r2, r2, #22
 80029ae:	0d92      	lsrs	r2, r2, #22
 80029b0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80029b2:	193b      	adds	r3, r7, r4
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c0:	6959      	ldr	r1, [r3, #20]
 80029c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c4:	895a      	ldrh	r2, [r3, #10]
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	f003 fe9a 	bl	8006702 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	2150      	movs	r1, #80	; 0x50
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	18d2      	adds	r2, r2, r3
 80029da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	18d2      	adds	r2, r2, r3
 80029e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <PCD_EP_ISR_Handler+0x550>
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d207      	bcs.n	8002a10 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	0011      	movs	r1, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f005 fbe8 	bl	80081de <HAL_PCD_DataOutStageCallback>
 8002a0e:	e006      	b.n	8002a1e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a16:	0011      	movs	r1, r2
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f002 fbb7 	bl	800518c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a1e:	244a      	movs	r4, #74	; 0x4a
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	4013      	ands	r3, r2
 8002a28:	d100      	bne.n	8002a2c <PCD_EP_ISR_Handler+0x57c>
 8002a2a:	e133      	b.n	8002c94 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a2c:	204d      	movs	r0, #77	; 0x4d
 8002a2e:	183b      	adds	r3, r7, r0
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	0013      	movs	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	189b      	adds	r3, r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	18d3      	adds	r3, r2, r3
 8002a40:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	001a      	movs	r2, r3
 8002a48:	183b      	adds	r3, r7, r0
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	18d3      	adds	r3, r2, r3
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	2542      	movs	r5, #66	; 0x42
 8002a56:	197b      	adds	r3, r7, r5
 8002a58:	494f      	ldr	r1, [pc, #316]	; (8002b98 <PCD_EP_ISR_Handler+0x6e8>)
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	001a      	movs	r2, r3
 8002a64:	183b      	adds	r3, r7, r0
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	18d3      	adds	r3, r2, r3
 8002a6c:	197a      	adds	r2, r7, r5
 8002a6e:	8812      	ldrh	r2, [r2, #0]
 8002a70:	494a      	ldr	r1, [pc, #296]	; (8002b9c <PCD_EP_ISR_Handler+0x6ec>)
 8002a72:	430a      	orrs	r2, r1
 8002a74:	b292      	uxth	r2, r2
 8002a76:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7a:	78db      	ldrb	r3, [r3, #3]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d000      	beq.n	8002a82 <PCD_EP_ISR_Handler+0x5d2>
 8002a80:	e0af      	b.n	8002be2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8002a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	7b1b      	ldrb	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <PCD_EP_ISR_Handler+0x5e2>
 8002a90:	e09f      	b.n	8002bd2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d046      	beq.n	8002b2a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d125      	bne.n	8002af0 <PCD_EP_ISR_Handler+0x640>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2250      	movs	r2, #80	; 0x50
 8002ab0:	5a9b      	ldrh	r3, [r3, r2]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
 8002abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	00da      	lsls	r2, r3, #3
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	18d3      	adds	r3, r2, r3
 8002ac6:	4a33      	ldr	r2, [pc, #204]	; (8002b94 <PCD_EP_ISR_Handler+0x6e4>)
 8002ac8:	4694      	mov	ip, r2
 8002aca:	4463      	add	r3, ip
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	059b      	lsls	r3, r3, #22
 8002ad6:	0d9b      	lsrs	r3, r3, #22
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	801a      	strh	r2, [r3, #0]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4a2d      	ldr	r2, [pc, #180]	; (8002b9c <PCD_EP_ISR_Handler+0x6ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	e070      	b.n	8002bd2 <PCD_EP_ISR_Handler+0x722>
 8002af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d16c      	bne.n	8002bd2 <PCD_EP_ISR_Handler+0x722>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2250      	movs	r2, #80	; 0x50
 8002b04:	5a9b      	ldrh	r3, [r3, r2]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	001a      	movs	r2, r3
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	189b      	adds	r3, r3, r2
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	00da      	lsls	r2, r3, #3
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	18d3      	adds	r3, r2, r3
 8002b1a:	4a1e      	ldr	r2, [pc, #120]	; (8002b94 <PCD_EP_ISR_Handler+0x6e4>)
 8002b1c:	4694      	mov	ip, r2
 8002b1e:	4463      	add	r3, ip
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	2200      	movs	r2, #0
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	e053      	b.n	8002bd2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d133      	bne.n	8002ba0 <PCD_EP_ISR_Handler+0x6f0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2250      	movs	r2, #80	; 0x50
 8002b44:	5a9b      	ldrh	r3, [r3, r2]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	001a      	movs	r2, r3
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4c:	189b      	adds	r3, r3, r2
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	00da      	lsls	r2, r3, #3
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	18d3      	adds	r3, r2, r3
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <PCD_EP_ISR_Handler+0x6d8>)
 8002b5c:	4694      	mov	ip, r2
 8002b5e:	4463      	add	r3, ip
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	059b      	lsls	r3, r3, #22
 8002b6a:	0d9b      	lsrs	r3, r3, #22
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <PCD_EP_ISR_Handler+0x6ec>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	e026      	b.n	8002bd2 <PCD_EP_ISR_Handler+0x722>
 8002b84:	00000f8f 	.word	0x00000f8f
 8002b88:	00000406 	.word	0x00000406
 8002b8c:	ffff8f8f 	.word	0xffff8f8f
 8002b90:	ffff80c0 	.word	0xffff80c0
 8002b94:	00000402 	.word	0x00000402
 8002b98:	ffff8f0f 	.word	0xffff8f0f
 8002b9c:	ffff8000 	.word	0xffff8000
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d114      	bne.n	8002bd2 <PCD_EP_ISR_Handler+0x722>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2250      	movs	r2, #80	; 0x50
 8002bae:	5a9b      	ldrh	r3, [r3, r2]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00da      	lsls	r2, r3, #3
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc2:	18d3      	adds	r3, r2, r3
 8002bc4:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <PCD_EP_ISR_Handler+0x804>)
 8002bc6:	4694      	mov	ip, r2
 8002bc8:	4463      	add	r3, ip
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	2200      	movs	r2, #0
 8002bd0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	0011      	movs	r1, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f005 fb20 	bl	8008220 <HAL_PCD_DataInStageCallback>
 8002be0:	e058      	b.n	8002c94 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002be2:	234a      	movs	r3, #74	; 0x4a
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	d149      	bne.n	8002c84 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2250      	movs	r2, #80	; 0x50
 8002bf6:	5a9b      	ldrh	r3, [r3, r2]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	18d2      	adds	r2, r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	18d3      	adds	r3, r2, r3
 8002c0a:	4a2b      	ldr	r2, [pc, #172]	; (8002cb8 <PCD_EP_ISR_Handler+0x808>)
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	4463      	add	r3, ip
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	2140      	movs	r1, #64	; 0x40
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	0592      	lsls	r2, r2, #22
 8002c18:	0d92      	lsrs	r2, r2, #22
 8002c1a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d907      	bls.n	8002c38 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8002c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	1ad2      	subs	r2, r2, r3
 8002c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c34:	619a      	str	r2, [r3, #24]
 8002c36:	e002      	b.n	8002c3e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0011      	movs	r1, r2
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f005 fae6 	bl	8008220 <HAL_PCD_DataInStageCallback>
 8002c54:	e01e      	b.n	8002c94 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	2140      	movs	r1, #64	; 0x40
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	18d2      	adds	r2, r2, r3
 8002c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c64:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	18d2      	adds	r2, r2, r3
 8002c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c72:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c7a:	0011      	movs	r1, r2
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f002 fa85 	bl	800518c <USB_EPStartXfer>
 8002c82:	e007      	b.n	8002c94 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c84:	234a      	movs	r3, #74	; 0x4a
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	881a      	ldrh	r2, [r3, #0]
 8002c8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f930 	bl	8002ef4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2244      	movs	r2, #68	; 0x44
 8002c9a:	5a9b      	ldrh	r3, [r3, r2]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da01      	bge.n	8002ca8 <PCD_EP_ISR_Handler+0x7f8>
 8002ca4:	f7ff fc0a 	bl	80024bc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b016      	add	sp, #88	; 0x58
 8002cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	00000406 	.word	0x00000406
 8002cb8:	00000402 	.word	0x00000402

08002cbc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	1dbb      	adds	r3, r7, #6
 8002cc8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cca:	1dbb      	adds	r3, r7, #6
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	01db      	lsls	r3, r3, #7
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d100      	bne.n	8002cd8 <HAL_PCD_EP_DB_Receive+0x1c>
 8002cd6:	e07d      	b.n	8002dd4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2250      	movs	r2, #80	; 0x50
 8002cde:	5a9b      	ldrh	r3, [r3, r2]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	18d2      	adds	r2, r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	18d3      	adds	r3, r2, r3
 8002cf2:	4a7a      	ldr	r2, [pc, #488]	; (8002edc <HAL_PCD_EP_DB_Receive+0x220>)
 8002cf4:	4694      	mov	ip, r2
 8002cf6:	4463      	add	r3, ip
 8002cf8:	881a      	ldrh	r2, [r3, #0]
 8002cfa:	211a      	movs	r1, #26
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	0592      	lsls	r2, r2, #22
 8002d00:	0d92      	lsrs	r2, r2, #22
 8002d02:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	699a      	ldr	r2, [r3, #24]
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d307      	bcc.n	8002d20 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	187b      	adds	r3, r7, r1
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	1ad2      	subs	r2, r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	619a      	str	r2, [r3, #24]
 8002d1e:	e002      	b.n	8002d26 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d121      	bne.n	8002d72 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	001a      	movs	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	18d3      	adds	r3, r2, r3
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	2018      	movs	r0, #24
 8002d42:	183b      	adds	r3, r7, r0
 8002d44:	4966      	ldr	r1, [pc, #408]	; (8002ee0 <HAL_PCD_EP_DB_Receive+0x224>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	801a      	strh	r2, [r3, #0]
 8002d4a:	183b      	adds	r3, r7, r0
 8002d4c:	183a      	adds	r2, r7, r0
 8002d4e:	8812      	ldrh	r2, [r2, #0]
 8002d50:	2180      	movs	r1, #128	; 0x80
 8002d52:	0189      	lsls	r1, r1, #6
 8002d54:	404a      	eors	r2, r1
 8002d56:	801a      	strh	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	18d3      	adds	r3, r2, r3
 8002d66:	183a      	adds	r2, r7, r0
 8002d68:	8812      	ldrh	r2, [r2, #0]
 8002d6a:	495e      	ldr	r1, [pc, #376]	; (8002ee4 <HAL_PCD_EP_DB_Receive+0x228>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	b292      	uxth	r2, r2
 8002d70:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d72:	1dbb      	adds	r3, r7, #6
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d01a      	beq.n	8002db2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	001a      	movs	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	18d3      	adds	r3, r2, r3
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	2016      	movs	r0, #22
 8002d90:	183b      	adds	r3, r7, r0
 8002d92:	4955      	ldr	r1, [pc, #340]	; (8002ee8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002d94:	400a      	ands	r2, r1
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	18d3      	adds	r3, r2, r3
 8002da6:	183a      	adds	r2, r7, r0
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	4950      	ldr	r1, [pc, #320]	; (8002eec <HAL_PCD_EP_DB_Receive+0x230>)
 8002dac:	430a      	orrs	r2, r1
 8002dae:	b292      	uxth	r2, r2
 8002db0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002db2:	241a      	movs	r4, #26
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d100      	bne.n	8002dbe <HAL_PCD_EP_DB_Receive+0x102>
 8002dbc:	e086      	b.n	8002ecc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6959      	ldr	r1, [r3, #20]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	891a      	ldrh	r2, [r3, #8]
 8002dca:	193b      	adds	r3, r7, r4
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	f003 fc98 	bl	8006702 <USB_ReadPMA>
 8002dd2:	e07b      	b.n	8002ecc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2250      	movs	r2, #80	; 0x50
 8002dda:	5a9b      	ldrh	r3, [r3, r2]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	001a      	movs	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	18d2      	adds	r2, r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	18d3      	adds	r3, r2, r3
 8002dee:	4a40      	ldr	r2, [pc, #256]	; (8002ef0 <HAL_PCD_EP_DB_Receive+0x234>)
 8002df0:	4694      	mov	ip, r2
 8002df2:	4463      	add	r3, ip
 8002df4:	881a      	ldrh	r2, [r3, #0]
 8002df6:	211a      	movs	r1, #26
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	0592      	lsls	r2, r2, #22
 8002dfc:	0d92      	lsrs	r2, r2, #22
 8002dfe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	699a      	ldr	r2, [r3, #24]
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d307      	bcc.n	8002e1c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	1ad2      	subs	r2, r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	619a      	str	r2, [r3, #24]
 8002e1a:	e002      	b.n	8002e22 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d121      	bne.n	8002e6e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	001a      	movs	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	18d3      	adds	r3, r2, r3
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	201e      	movs	r0, #30
 8002e3e:	183b      	adds	r3, r7, r0
 8002e40:	4927      	ldr	r1, [pc, #156]	; (8002ee0 <HAL_PCD_EP_DB_Receive+0x224>)
 8002e42:	400a      	ands	r2, r1
 8002e44:	801a      	strh	r2, [r3, #0]
 8002e46:	183b      	adds	r3, r7, r0
 8002e48:	183a      	adds	r2, r7, r0
 8002e4a:	8812      	ldrh	r2, [r2, #0]
 8002e4c:	2180      	movs	r1, #128	; 0x80
 8002e4e:	0189      	lsls	r1, r1, #6
 8002e50:	404a      	eors	r2, r1
 8002e52:	801a      	strh	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	001a      	movs	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	18d3      	adds	r3, r2, r3
 8002e62:	183a      	adds	r2, r7, r0
 8002e64:	8812      	ldrh	r2, [r2, #0]
 8002e66:	491f      	ldr	r1, [pc, #124]	; (8002ee4 <HAL_PCD_EP_DB_Receive+0x228>)
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e6e:	1dbb      	adds	r3, r7, #6
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	2240      	movs	r2, #64	; 0x40
 8002e74:	4013      	ands	r3, r2
 8002e76:	d11a      	bne.n	8002eae <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	18d3      	adds	r3, r2, r3
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	201c      	movs	r0, #28
 8002e8c:	183b      	adds	r3, r7, r0
 8002e8e:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002e90:	400a      	ands	r2, r1
 8002e92:	801a      	strh	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	001a      	movs	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	18d3      	adds	r3, r2, r3
 8002ea2:	183a      	adds	r2, r7, r0
 8002ea4:	8812      	ldrh	r2, [r2, #0]
 8002ea6:	4911      	ldr	r1, [pc, #68]	; (8002eec <HAL_PCD_EP_DB_Receive+0x230>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002eae:	241a      	movs	r4, #26
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d009      	beq.n	8002ecc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6959      	ldr	r1, [r3, #20]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	895a      	ldrh	r2, [r3, #10]
 8002ec4:	193b      	adds	r3, r7, r4
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	f003 fc1b 	bl	8006702 <USB_ReadPMA>
    }
  }

  return count;
 8002ecc:	231a      	movs	r3, #26
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	881b      	ldrh	r3, [r3, #0]
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b009      	add	sp, #36	; 0x24
 8002ed8:	bd90      	pop	{r4, r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	00000402 	.word	0x00000402
 8002ee0:	ffffbf8f 	.word	0xffffbf8f
 8002ee4:	ffff8080 	.word	0xffff8080
 8002ee8:	ffff8f8f 	.word	0xffff8f8f
 8002eec:	ffff80c0 	.word	0xffff80c0
 8002ef0:	00000406 	.word	0x00000406

08002ef4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0a4      	sub	sp, #144	; 0x90
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f02:	1dbb      	adds	r3, r7, #6
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x1a>
 8002f0c:	e1e4      	b.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2250      	movs	r2, #80	; 0x50
 8002f14:	5a9b      	ldrh	r3, [r3, r2]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	001a      	movs	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	18d2      	adds	r2, r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	4ad0      	ldr	r2, [pc, #832]	; (800326c <HAL_PCD_EP_DB_Transmit+0x378>)
 8002f2a:	4694      	mov	ip, r2
 8002f2c:	4463      	add	r3, ip
 8002f2e:	881a      	ldrh	r2, [r3, #0]
 8002f30:	2186      	movs	r1, #134	; 0x86
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	0592      	lsls	r2, r2, #22
 8002f36:	0d92      	lsrs	r2, r2, #22
 8002f38:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d907      	bls.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	1ad2      	subs	r2, r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	619a      	str	r2, [r3, #24]
 8002f54:	e002      	b.n	8002f5c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d000      	beq.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x72>
 8002f64:	e0b5      	b.n	80030d2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d125      	bne.n	8002fba <HAL_PCD_EP_DB_Transmit+0xc6>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2250      	movs	r2, #80	; 0x50
 8002f7a:	5a9b      	ldrh	r3, [r3, r2]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	001a      	movs	r2, r3
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	00da      	lsls	r2, r3, #3
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	18d3      	adds	r3, r2, r3
 8002f90:	4ab6      	ldr	r2, [pc, #728]	; (800326c <HAL_PCD_EP_DB_Transmit+0x378>)
 8002f92:	4694      	mov	ip, r2
 8002f94:	4463      	add	r3, ip
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	059b      	lsls	r3, r3, #22
 8002fa0:	0d9b      	lsrs	r3, r3, #22
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4ab0      	ldr	r2, [pc, #704]	; (8003270 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	801a      	strh	r2, [r3, #0]
 8002fb8:	e01b      	b.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d117      	bne.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2250      	movs	r2, #80	; 0x50
 8002fce:	5a9b      	ldrh	r3, [r3, r2]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	00da      	lsls	r2, r3, #3
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe2:	18d3      	adds	r3, r2, r3
 8002fe4:	4aa1      	ldr	r2, [pc, #644]	; (800326c <HAL_PCD_EP_DB_Transmit+0x378>)
 8002fe6:	4694      	mov	ip, r2
 8002fe8:	4463      	add	r3, ip
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	2200      	movs	r2, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d125      	bne.n	800304c <HAL_PCD_EP_DB_Transmit+0x158>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2250      	movs	r2, #80	; 0x50
 800300c:	5a9b      	ldrh	r3, [r3, r2]
 800300e:	b29b      	uxth	r3, r3
 8003010:	001a      	movs	r2, r3
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	189b      	adds	r3, r3, r2
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	00da      	lsls	r2, r3, #3
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	18d3      	adds	r3, r2, r3
 8003022:	4a94      	ldr	r2, [pc, #592]	; (8003274 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003024:	4694      	mov	ip, r2
 8003026:	4463      	add	r3, ip
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	059b      	lsls	r3, r3, #22
 8003032:	0d9b      	lsrs	r3, r3, #22
 8003034:	b29a      	uxth	r2, r3
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	4a8b      	ldr	r2, [pc, #556]	; (8003270 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	b29a      	uxth	r2, r3
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	801a      	strh	r2, [r3, #0]
 800304a:	e018      	b.n	800307e <HAL_PCD_EP_DB_Transmit+0x18a>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	785b      	ldrb	r3, [r3, #1]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d114      	bne.n	800307e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2250      	movs	r2, #80	; 0x50
 800305a:	5a9b      	ldrh	r3, [r3, r2]
 800305c:	b29b      	uxth	r3, r3
 800305e:	001a      	movs	r2, r3
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	189b      	adds	r3, r3, r2
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	00da      	lsls	r2, r3, #3
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	18d3      	adds	r3, r2, r3
 8003070:	4a80      	ldr	r2, [pc, #512]	; (8003274 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003072:	4694      	mov	ip, r2
 8003074:	4463      	add	r3, ip
 8003076:	623b      	str	r3, [r7, #32]
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	2200      	movs	r2, #0
 800307c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	0011      	movs	r1, r2
 8003086:	0018      	movs	r0, r3
 8003088:	f005 f8ca 	bl	8008220 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800308c:	1dbb      	adds	r3, r7, #6
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	01db      	lsls	r3, r3, #7
 8003094:	4013      	ands	r3, r2
 8003096:	d100      	bne.n	800309a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003098:	e309      	b.n	80036ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	001a      	movs	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	18d3      	adds	r3, r2, r3
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	2016      	movs	r0, #22
 80030ae:	183b      	adds	r3, r7, r0
 80030b0:	4971      	ldr	r1, [pc, #452]	; (8003278 <HAL_PCD_EP_DB_Transmit+0x384>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	001a      	movs	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	18d3      	adds	r3, r2, r3
 80030c4:	183a      	adds	r2, r7, r0
 80030c6:	8812      	ldrh	r2, [r2, #0]
 80030c8:	496c      	ldr	r1, [pc, #432]	; (800327c <HAL_PCD_EP_DB_Transmit+0x388>)
 80030ca:	430a      	orrs	r2, r1
 80030cc:	b292      	uxth	r2, r2
 80030ce:	801a      	strh	r2, [r3, #0]
 80030d0:	e2ed      	b.n	80036ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030d2:	1dbb      	adds	r3, r7, #6
 80030d4:	881a      	ldrh	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	01db      	lsls	r3, r3, #7
 80030da:	4013      	ands	r3, r2
 80030dc:	d01a      	beq.n	8003114 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	001a      	movs	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	18d3      	adds	r3, r2, r3
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	208a      	movs	r0, #138	; 0x8a
 80030f2:	183b      	adds	r3, r7, r0
 80030f4:	4960      	ldr	r1, [pc, #384]	; (8003278 <HAL_PCD_EP_DB_Transmit+0x384>)
 80030f6:	400a      	ands	r2, r1
 80030f8:	801a      	strh	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	001a      	movs	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	18d3      	adds	r3, r2, r3
 8003108:	183a      	adds	r2, r7, r0
 800310a:	8812      	ldrh	r2, [r2, #0]
 800310c:	495b      	ldr	r1, [pc, #364]	; (800327c <HAL_PCD_EP_DB_Transmit+0x388>)
 800310e:	430a      	orrs	r2, r1
 8003110:	b292      	uxth	r2, r2
 8003112:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	5c9b      	ldrb	r3, [r3, r2]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d000      	beq.n	8003120 <HAL_PCD_EP_DB_Transmit+0x22c>
 800311e:	e2c6      	b.n	80036ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	2186      	movs	r1, #134	; 0x86
 8003126:	187b      	adds	r3, r7, r1
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	18d2      	adds	r2, r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	187b      	adds	r3, r7, r1
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	18d2      	adds	r2, r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	429a      	cmp	r2, r3
 8003148:	d30c      	bcc.n	8003164 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	218c      	movs	r1, #140	; 0x8c
 8003150:	187a      	adds	r2, r7, r1
 8003152:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	187b      	adds	r3, r7, r1
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	1ad2      	subs	r2, r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	621a      	str	r2, [r3, #32]
 8003162:	e01a      	b.n	800319a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800316c:	2386      	movs	r3, #134	; 0x86
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	228c      	movs	r2, #140	; 0x8c
 8003174:	18ba      	adds	r2, r7, r2
 8003176:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2224      	movs	r2, #36	; 0x24
 800317c:	2100      	movs	r1, #0
 800317e:	5499      	strb	r1, [r3, r2]
 8003180:	e00b      	b.n	800319a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2224      	movs	r2, #36	; 0x24
 8003186:	2100      	movs	r1, #0
 8003188:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	228c      	movs	r2, #140	; 0x8c
 8003190:	18ba      	adds	r2, r7, r2
 8003192:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2200      	movs	r2, #0
 8003198:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	785b      	ldrb	r3, [r3, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d000      	beq.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80031a2:	e06d      	b.n	8003280 <HAL_PCD_EP_DB_Transmit+0x38c>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2250      	movs	r2, #80	; 0x50
 80031b0:	5a9b      	ldrh	r3, [r3, r2]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	001a      	movs	r2, r3
 80031b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b8:	189b      	adds	r3, r3, r2
 80031ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	00da      	lsls	r2, r3, #3
 80031c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	4a29      	ldr	r2, [pc, #164]	; (800326c <HAL_PCD_EP_DB_Transmit+0x378>)
 80031c8:	4694      	mov	ip, r2
 80031ca:	4463      	add	r3, ip
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	059b      	lsls	r3, r3, #22
 80031d6:	0d9b      	lsrs	r3, r3, #22
 80031d8:	b29a      	uxth	r2, r3
 80031da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031dc:	801a      	strh	r2, [r3, #0]
 80031de:	228c      	movs	r2, #140	; 0x8c
 80031e0:	18bb      	adds	r3, r7, r2
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b3e      	cmp	r3, #62	; 0x3e
 80031e6:	d91a      	bls.n	800321e <HAL_PCD_EP_DB_Transmit+0x32a>
 80031e8:	18bb      	adds	r3, r7, r2
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f0:	18bb      	adds	r3, r7, r2
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	221f      	movs	r2, #31
 80031f6:	4013      	ands	r3, r2
 80031f8:	d102      	bne.n	8003200 <HAL_PCD_EP_DB_Transmit+0x30c>
 80031fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fc:	3b01      	subs	r3, #1
 80031fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b29a      	uxth	r2, r3
 8003206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003208:	b29b      	uxth	r3, r3
 800320a:	029b      	lsls	r3, r3, #10
 800320c:	b29b      	uxth	r3, r3
 800320e:	4313      	orrs	r3, r2
 8003210:	b29b      	uxth	r3, r3
 8003212:	4a17      	ldr	r2, [pc, #92]	; (8003270 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003214:	4313      	orrs	r3, r2
 8003216:	b29a      	uxth	r2, r3
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	801a      	strh	r2, [r3, #0]
 800321c:	e04f      	b.n	80032be <HAL_PCD_EP_DB_Transmit+0x3ca>
 800321e:	238c      	movs	r3, #140	; 0x8c
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d108      	bne.n	800323a <HAL_PCD_EP_DB_Transmit+0x346>
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	b29a      	uxth	r2, r3
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	801a      	strh	r2, [r3, #0]
 8003238:	e041      	b.n	80032be <HAL_PCD_EP_DB_Transmit+0x3ca>
 800323a:	228c      	movs	r2, #140	; 0x8c
 800323c:	18bb      	adds	r3, r7, r2
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	64bb      	str	r3, [r7, #72]	; 0x48
 8003244:	18bb      	adds	r3, r7, r2
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	d002      	beq.n	8003254 <HAL_PCD_EP_DB_Transmit+0x360>
 800324e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003250:	3301      	adds	r3, #1
 8003252:	64bb      	str	r3, [r7, #72]	; 0x48
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29a      	uxth	r2, r3
 800325a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800325c:	b29b      	uxth	r3, r3
 800325e:	029b      	lsls	r3, r3, #10
 8003260:	b29b      	uxth	r3, r3
 8003262:	4313      	orrs	r3, r2
 8003264:	b29a      	uxth	r2, r3
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	801a      	strh	r2, [r3, #0]
 800326a:	e028      	b.n	80032be <HAL_PCD_EP_DB_Transmit+0x3ca>
 800326c:	00000402 	.word	0x00000402
 8003270:	ffff8000 	.word	0xffff8000
 8003274:	00000406 	.word	0x00000406
 8003278:	ffff8f8f 	.word	0xffff8f8f
 800327c:	ffffc080 	.word	0xffffc080
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	785b      	ldrb	r3, [r3, #1]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d11a      	bne.n	80032be <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	647b      	str	r3, [r7, #68]	; 0x44
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2250      	movs	r2, #80	; 0x50
 8003294:	5a9b      	ldrh	r3, [r3, r2]
 8003296:	b29b      	uxth	r3, r3
 8003298:	001a      	movs	r2, r3
 800329a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329c:	189b      	adds	r3, r3, r2
 800329e:	647b      	str	r3, [r7, #68]	; 0x44
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	00da      	lsls	r2, r3, #3
 80032a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a8:	18d3      	adds	r3, r2, r3
 80032aa:	4adb      	ldr	r2, [pc, #876]	; (8003618 <HAL_PCD_EP_DB_Transmit+0x724>)
 80032ac:	4694      	mov	ip, r2
 80032ae:	4463      	add	r3, ip
 80032b0:	643b      	str	r3, [r7, #64]	; 0x40
 80032b2:	238c      	movs	r3, #140	; 0x8c
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032bc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	6959      	ldr	r1, [r3, #20]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	891a      	ldrh	r2, [r3, #8]
 80032ca:	238c      	movs	r3, #140	; 0x8c
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f003 f9cd 	bl	8006670 <USB_WritePMA>
 80032d6:	e1ea      	b.n	80036ae <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2250      	movs	r2, #80	; 0x50
 80032de:	5a9b      	ldrh	r3, [r3, r2]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	001a      	movs	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	18d2      	adds	r2, r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	18d3      	adds	r3, r2, r3
 80032f2:	4aca      	ldr	r2, [pc, #808]	; (800361c <HAL_PCD_EP_DB_Transmit+0x728>)
 80032f4:	4694      	mov	ip, r2
 80032f6:	4463      	add	r3, ip
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	2186      	movs	r1, #134	; 0x86
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	0592      	lsls	r2, r2, #22
 8003300:	0d92      	lsrs	r2, r2, #22
 8003302:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	187b      	adds	r3, r7, r1
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d307      	bcc.n	8003320 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	187b      	adds	r3, r7, r1
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	1ad2      	subs	r2, r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	619a      	str	r2, [r3, #24]
 800331e:	e002      	b.n	8003326 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2200      	movs	r2, #0
 8003324:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d000      	beq.n	8003330 <HAL_PCD_EP_DB_Transmit+0x43c>
 800332e:	e0bb      	b.n	80034a8 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d125      	bne.n	8003384 <HAL_PCD_EP_DB_Transmit+0x490>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2250      	movs	r2, #80	; 0x50
 8003344:	5a9b      	ldrh	r3, [r3, r2]
 8003346:	b29b      	uxth	r3, r3
 8003348:	001a      	movs	r2, r3
 800334a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800334c:	189b      	adds	r3, r3, r2
 800334e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	00da      	lsls	r2, r3, #3
 8003356:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003358:	18d3      	adds	r3, r2, r3
 800335a:	4aaf      	ldr	r2, [pc, #700]	; (8003618 <HAL_PCD_EP_DB_Transmit+0x724>)
 800335c:	4694      	mov	ip, r2
 800335e:	4463      	add	r3, ip
 8003360:	67bb      	str	r3, [r7, #120]	; 0x78
 8003362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	059b      	lsls	r3, r3, #22
 800336a:	0d9b      	lsrs	r3, r3, #22
 800336c:	b29a      	uxth	r2, r3
 800336e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	4aa9      	ldr	r2, [pc, #676]	; (8003620 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	b29a      	uxth	r2, r3
 800337e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003380:	801a      	strh	r2, [r3, #0]
 8003382:	e01b      	b.n	80033bc <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	785b      	ldrb	r3, [r3, #1]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d117      	bne.n	80033bc <HAL_PCD_EP_DB_Transmit+0x4c8>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	667b      	str	r3, [r7, #100]	; 0x64
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2250      	movs	r2, #80	; 0x50
 8003398:	5a9b      	ldrh	r3, [r3, r2]
 800339a:	b29b      	uxth	r3, r3
 800339c:	001a      	movs	r2, r3
 800339e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a0:	189b      	adds	r3, r3, r2
 80033a2:	667b      	str	r3, [r7, #100]	; 0x64
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	00da      	lsls	r2, r3, #3
 80033aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ac:	18d3      	adds	r3, r2, r3
 80033ae:	4a9a      	ldr	r2, [pc, #616]	; (8003618 <HAL_PCD_EP_DB_Transmit+0x724>)
 80033b0:	4694      	mov	ip, r2
 80033b2:	4463      	add	r3, ip
 80033b4:	663b      	str	r3, [r7, #96]	; 0x60
 80033b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b8:	2200      	movs	r2, #0
 80033ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	677b      	str	r3, [r7, #116]	; 0x74
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d12b      	bne.n	8003422 <HAL_PCD_EP_DB_Transmit+0x52e>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2250      	movs	r2, #80	; 0x50
 80033d6:	5a9b      	ldrh	r3, [r3, r2]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	001a      	movs	r2, r3
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	00da      	lsls	r2, r3, #3
 80033e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ea:	18d3      	adds	r3, r2, r3
 80033ec:	4a8b      	ldr	r2, [pc, #556]	; (800361c <HAL_PCD_EP_DB_Transmit+0x728>)
 80033ee:	4694      	mov	ip, r2
 80033f0:	4463      	add	r3, ip
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	187a      	adds	r2, r7, r1
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	059b      	lsls	r3, r3, #22
 8003402:	0d9b      	lsrs	r3, r3, #22
 8003404:	b29a      	uxth	r2, r3
 8003406:	187b      	adds	r3, r7, r1
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	801a      	strh	r2, [r3, #0]
 800340c:	187b      	adds	r3, r7, r1
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	4a82      	ldr	r2, [pc, #520]	; (8003620 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003416:	4313      	orrs	r3, r2
 8003418:	b29a      	uxth	r2, r3
 800341a:	187b      	adds	r3, r7, r1
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	801a      	strh	r2, [r3, #0]
 8003420:	e018      	b.n	8003454 <HAL_PCD_EP_DB_Transmit+0x560>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d114      	bne.n	8003454 <HAL_PCD_EP_DB_Transmit+0x560>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2250      	movs	r2, #80	; 0x50
 8003430:	5a9b      	ldrh	r3, [r3, r2]
 8003432:	b29b      	uxth	r3, r3
 8003434:	001a      	movs	r2, r3
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	189b      	adds	r3, r3, r2
 800343a:	677b      	str	r3, [r7, #116]	; 0x74
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	00da      	lsls	r2, r3, #3
 8003442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003444:	18d3      	adds	r3, r2, r3
 8003446:	4a75      	ldr	r2, [pc, #468]	; (800361c <HAL_PCD_EP_DB_Transmit+0x728>)
 8003448:	4694      	mov	ip, r2
 800344a:	4463      	add	r3, ip
 800344c:	673b      	str	r3, [r7, #112]	; 0x70
 800344e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003450:	2200      	movs	r2, #0
 8003452:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	0011      	movs	r1, r2
 800345c:	0018      	movs	r0, r3
 800345e:	f004 fedf 	bl	8008220 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003462:	1dbb      	adds	r3, r7, #6
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	01db      	lsls	r3, r3, #7
 800346a:	4013      	ands	r3, r2
 800346c:	d000      	beq.n	8003470 <HAL_PCD_EP_DB_Transmit+0x57c>
 800346e:	e11e      	b.n	80036ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	001a      	movs	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	18d3      	adds	r3, r2, r3
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29a      	uxth	r2, r3
 8003482:	2088      	movs	r0, #136	; 0x88
 8003484:	183b      	adds	r3, r7, r0
 8003486:	4967      	ldr	r1, [pc, #412]	; (8003624 <HAL_PCD_EP_DB_Transmit+0x730>)
 8003488:	400a      	ands	r2, r1
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	001a      	movs	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	18d3      	adds	r3, r2, r3
 800349a:	183a      	adds	r2, r7, r0
 800349c:	8812      	ldrh	r2, [r2, #0]
 800349e:	4962      	ldr	r1, [pc, #392]	; (8003628 <HAL_PCD_EP_DB_Transmit+0x734>)
 80034a0:	430a      	orrs	r2, r1
 80034a2:	b292      	uxth	r2, r2
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	e102      	b.n	80036ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034a8:	1dbb      	adds	r3, r7, #6
 80034aa:	881a      	ldrh	r2, [r3, #0]
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	01db      	lsls	r3, r3, #7
 80034b0:	4013      	ands	r3, r2
 80034b2:	d11a      	bne.n	80034ea <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	001a      	movs	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	18d3      	adds	r3, r2, r3
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	204e      	movs	r0, #78	; 0x4e
 80034c8:	183b      	adds	r3, r7, r0
 80034ca:	4956      	ldr	r1, [pc, #344]	; (8003624 <HAL_PCD_EP_DB_Transmit+0x730>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	001a      	movs	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	18d3      	adds	r3, r2, r3
 80034de:	183a      	adds	r2, r7, r0
 80034e0:	8812      	ldrh	r2, [r2, #0]
 80034e2:	4951      	ldr	r1, [pc, #324]	; (8003628 <HAL_PCD_EP_DB_Transmit+0x734>)
 80034e4:	430a      	orrs	r2, r1
 80034e6:	b292      	uxth	r2, r2
 80034e8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2224      	movs	r2, #36	; 0x24
 80034ee:	5c9b      	ldrb	r3, [r3, r2]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d000      	beq.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x602>
 80034f4:	e0db      	b.n	80036ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	2186      	movs	r1, #134	; 0x86
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	18d2      	adds	r2, r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	187b      	adds	r3, r7, r1
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	18d2      	adds	r2, r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	429a      	cmp	r2, r3
 800351e:	d30c      	bcc.n	800353a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	218c      	movs	r1, #140	; 0x8c
 8003526:	187a      	adds	r2, r7, r1
 8003528:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	6a1a      	ldr	r2, [r3, #32]
 800352e:	187b      	adds	r3, r7, r1
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	1ad2      	subs	r2, r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	621a      	str	r2, [r3, #32]
 8003538:	e01a      	b.n	8003570 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8003542:	2386      	movs	r3, #134	; 0x86
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	228c      	movs	r2, #140	; 0x8c
 800354a:	18ba      	adds	r2, r7, r2
 800354c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2224      	movs	r2, #36	; 0x24
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]
 8003556:	e00b      	b.n	8003570 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	228c      	movs	r2, #140	; 0x8c
 800355e:	18ba      	adds	r2, r7, r2
 8003560:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	657b      	str	r3, [r7, #84]	; 0x54
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d000      	beq.n	8003580 <HAL_PCD_EP_DB_Transmit+0x68c>
 800357e:	e06e      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x76a>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2250      	movs	r2, #80	; 0x50
 800358c:	5a9b      	ldrh	r3, [r3, r2]
 800358e:	b29b      	uxth	r3, r3
 8003590:	001a      	movs	r2, r3
 8003592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003594:	189b      	adds	r3, r3, r2
 8003596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	00da      	lsls	r2, r3, #3
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	18d3      	adds	r3, r2, r3
 80035a2:	4a1e      	ldr	r2, [pc, #120]	; (800361c <HAL_PCD_EP_DB_Transmit+0x728>)
 80035a4:	4694      	mov	ip, r2
 80035a6:	4463      	add	r3, ip
 80035a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80035aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	059b      	lsls	r3, r3, #22
 80035b2:	0d9b      	lsrs	r3, r3, #22
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	228c      	movs	r2, #140	; 0x8c
 80035bc:	18bb      	adds	r3, r7, r2
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b3e      	cmp	r3, #62	; 0x3e
 80035c2:	d91a      	bls.n	80035fa <HAL_PCD_EP_DB_Transmit+0x706>
 80035c4:	18bb      	adds	r3, r7, r2
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80035cc:	18bb      	adds	r3, r7, r2
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	221f      	movs	r2, #31
 80035d2:	4013      	ands	r3, r2
 80035d4:	d102      	bne.n	80035dc <HAL_PCD_EP_DB_Transmit+0x6e8>
 80035d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035d8:	3b01      	subs	r3, #1
 80035da:	66bb      	str	r3, [r7, #104]	; 0x68
 80035dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	029b      	lsls	r3, r3, #10
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f6:	801a      	strh	r2, [r3, #0]
 80035f8:	e04d      	b.n	8003696 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80035fa:	238c      	movs	r3, #140	; 0x8c
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d113      	bne.n	800362c <HAL_PCD_EP_DB_Transmit+0x738>
 8003604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	b29a      	uxth	r2, r3
 8003610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003612:	801a      	strh	r2, [r3, #0]
 8003614:	e03f      	b.n	8003696 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	00000402 	.word	0x00000402
 800361c:	00000406 	.word	0x00000406
 8003620:	ffff8000 	.word	0xffff8000
 8003624:	ffff8f8f 	.word	0xffff8f8f
 8003628:	ffffc080 	.word	0xffffc080
 800362c:	228c      	movs	r2, #140	; 0x8c
 800362e:	18bb      	adds	r3, r7, r2
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	66bb      	str	r3, [r7, #104]	; 0x68
 8003636:	18bb      	adds	r3, r7, r2
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	4013      	ands	r3, r2
 800363e:	d002      	beq.n	8003646 <HAL_PCD_EP_DB_Transmit+0x752>
 8003640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003642:	3301      	adds	r3, #1
 8003644:	66bb      	str	r3, [r7, #104]	; 0x68
 8003646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29a      	uxth	r2, r3
 800364c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800364e:	b29b      	uxth	r3, r3
 8003650:	029b      	lsls	r3, r3, #10
 8003652:	b29b      	uxth	r3, r3
 8003654:	4313      	orrs	r3, r2
 8003656:	b29a      	uxth	r2, r3
 8003658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	e01b      	b.n	8003696 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d117      	bne.n	8003696 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2250      	movs	r2, #80	; 0x50
 800366c:	5a9b      	ldrh	r3, [r3, r2]
 800366e:	b29b      	uxth	r3, r3
 8003670:	001a      	movs	r2, r3
 8003672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003674:	189b      	adds	r3, r3, r2
 8003676:	657b      	str	r3, [r7, #84]	; 0x54
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	00da      	lsls	r2, r3, #3
 800367e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <HAL_PCD_EP_DB_Transmit+0x814>)
 8003684:	4694      	mov	ip, r2
 8003686:	4463      	add	r3, ip
 8003688:	653b      	str	r3, [r7, #80]	; 0x50
 800368a:	238c      	movs	r3, #140	; 0x8c
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29a      	uxth	r2, r3
 8003692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003694:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6959      	ldr	r1, [r3, #20]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	895a      	ldrh	r2, [r3, #10]
 80036a2:	238c      	movs	r3, #140	; 0x8c
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f002 ffe1 	bl	8006670 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	001a      	movs	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	18d3      	adds	r3, r2, r3
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29a      	uxth	r2, r3
 80036c0:	2014      	movs	r0, #20
 80036c2:	183b      	adds	r3, r7, r0
 80036c4:	4911      	ldr	r1, [pc, #68]	; (800370c <HAL_PCD_EP_DB_Transmit+0x818>)
 80036c6:	400a      	ands	r2, r1
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	183b      	adds	r3, r7, r0
 80036cc:	183a      	adds	r2, r7, r0
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	2110      	movs	r1, #16
 80036d2:	404a      	eors	r2, r1
 80036d4:	801a      	strh	r2, [r3, #0]
 80036d6:	183b      	adds	r3, r7, r0
 80036d8:	183a      	adds	r2, r7, r0
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	2120      	movs	r1, #32
 80036de:	404a      	eors	r2, r1
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	001a      	movs	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	18d3      	adds	r3, r2, r3
 80036f0:	183a      	adds	r2, r7, r0
 80036f2:	8812      	ldrh	r2, [r2, #0]
 80036f4:	4906      	ldr	r1, [pc, #24]	; (8003710 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80036f6:	430a      	orrs	r2, r1
 80036f8:	b292      	uxth	r2, r2
 80036fa:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b024      	add	sp, #144	; 0x90
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	00000406 	.word	0x00000406
 800370c:	ffff8fbf 	.word	0xffff8fbf
 8003710:	ffff8080 	.word	0xffff8080

08003714 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	0008      	movs	r0, r1
 800371e:	0011      	movs	r1, r2
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	240a      	movs	r4, #10
 8003724:	193b      	adds	r3, r7, r4
 8003726:	1c02      	adds	r2, r0, #0
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	2308      	movs	r3, #8
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	1c0a      	adds	r2, r1, #0
 8003730:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003732:	0021      	movs	r1, r4
 8003734:	187b      	adds	r3, r7, r1
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	4013      	ands	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003742:	187b      	adds	r3, r7, r1
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	2207      	movs	r2, #7
 8003748:	4013      	ands	r3, r2
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	0013      	movs	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	189b      	adds	r3, r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	18d3      	adds	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e00b      	b.n	8003774 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800375c:	230a      	movs	r3, #10
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	0013      	movs	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	189b      	adds	r3, r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	3369      	adds	r3, #105	; 0x69
 800376c:	33ff      	adds	r3, #255	; 0xff
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	18d3      	adds	r3, r2, r3
 8003772:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003774:	2308      	movs	r3, #8
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	b29a      	uxth	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	80da      	strh	r2, [r3, #6]
 800378c:	e00b      	b.n	80037a6 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2201      	movs	r2, #1
 8003792:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	b29a      	uxth	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b007      	add	sp, #28
 80037ae:	bd90      	pop	{r4, r7, pc}

080037b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	23ba      	movs	r3, #186	; 0xba
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	2101      	movs	r1, #1
 80037c6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	23b8      	movs	r3, #184	; 0xb8
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	2100      	movs	r1, #0
 80037d0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2254      	movs	r2, #84	; 0x54
 80037d6:	5a9b      	ldrh	r3, [r3, r2]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2201      	movs	r2, #1
 80037dc:	4313      	orrs	r3, r2
 80037de:	b299      	uxth	r1, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2254      	movs	r2, #84	; 0x54
 80037e4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2254      	movs	r2, #84	; 0x54
 80037ea:	5a9b      	ldrh	r3, [r3, r2]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2202      	movs	r2, #2
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b299      	uxth	r1, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2254      	movs	r2, #84	; 0x54
 80037f8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b004      	add	sp, #16
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	000a      	movs	r2, r1
 800380e:	1cfb      	adds	r3, r7, #3
 8003810:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b002      	add	sp, #8
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b5b0      	push	{r4, r5, r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f000 fbaf 	bl	8003f8e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003830:	4bcf      	ldr	r3, [pc, #828]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	220c      	movs	r2, #12
 8003836:	4013      	ands	r3, r2
 8003838:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800383a:	4bcd      	ldr	r3, [pc, #820]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	025b      	lsls	r3, r3, #9
 8003842:	4013      	ands	r3, r2
 8003844:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2201      	movs	r2, #1
 800384c:	4013      	ands	r3, r2
 800384e:	d100      	bne.n	8003852 <HAL_RCC_OscConfig+0x36>
 8003850:	e07e      	b.n	8003950 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d007      	beq.n	8003868 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d112      	bne.n	8003884 <HAL_RCC_OscConfig+0x68>
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	025b      	lsls	r3, r3, #9
 8003864:	429a      	cmp	r2, r3
 8003866:	d10d      	bne.n	8003884 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	4bc1      	ldr	r3, [pc, #772]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	029b      	lsls	r3, r3, #10
 8003870:	4013      	ands	r3, r2
 8003872:	d100      	bne.n	8003876 <HAL_RCC_OscConfig+0x5a>
 8003874:	e06b      	b.n	800394e <HAL_RCC_OscConfig+0x132>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d167      	bne.n	800394e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f000 fb85 	bl	8003f8e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	025b      	lsls	r3, r3, #9
 800388c:	429a      	cmp	r2, r3
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x84>
 8003890:	4bb7      	ldr	r3, [pc, #732]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4bb6      	ldr	r3, [pc, #728]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	0249      	lsls	r1, r1, #9
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e027      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	23a0      	movs	r3, #160	; 0xa0
 80038a6:	02db      	lsls	r3, r3, #11
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d10e      	bne.n	80038ca <HAL_RCC_OscConfig+0xae>
 80038ac:	4bb0      	ldr	r3, [pc, #704]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4baf      	ldr	r3, [pc, #700]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	02c9      	lsls	r1, r1, #11
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	4bad      	ldr	r3, [pc, #692]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4bac      	ldr	r3, [pc, #688]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	0249      	lsls	r1, r1, #9
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e012      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038ca:	4ba9      	ldr	r3, [pc, #676]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4ba8      	ldr	r3, [pc, #672]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80038d0:	49a8      	ldr	r1, [pc, #672]	; (8003b74 <HAL_RCC_OscConfig+0x358>)
 80038d2:	400a      	ands	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	4ba6      	ldr	r3, [pc, #664]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	025b      	lsls	r3, r3, #9
 80038de:	4013      	ands	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4ba2      	ldr	r3, [pc, #648]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4ba1      	ldr	r3, [pc, #644]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80038ea:	49a3      	ldr	r1, [pc, #652]	; (8003b78 <HAL_RCC_OscConfig+0x35c>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd fec0 	bl	800167c <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003900:	e009      	b.n	8003916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003902:	f7fd febb 	bl	800167c <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	; 0x64
 800390e:	d902      	bls.n	8003916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f000 fb3c 	bl	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003916:	4b96      	ldr	r3, [pc, #600]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	029b      	lsls	r3, r3, #10
 800391e:	4013      	ands	r3, r2
 8003920:	d0ef      	beq.n	8003902 <HAL_RCC_OscConfig+0xe6>
 8003922:	e015      	b.n	8003950 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fd feaa 	bl	800167c <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800392e:	f7fd fea5 	bl	800167c <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b64      	cmp	r3, #100	; 0x64
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e326      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003940:	4b8b      	ldr	r3, [pc, #556]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	029b      	lsls	r3, r3, #10
 8003948:	4013      	ands	r3, r2
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x112>
 800394c:	e000      	b.n	8003950 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2202      	movs	r2, #2
 8003956:	4013      	ands	r3, r2
 8003958:	d100      	bne.n	800395c <HAL_RCC_OscConfig+0x140>
 800395a:	e08b      	b.n	8003a74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d13e      	bne.n	80039ec <HAL_RCC_OscConfig+0x1d0>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d13b      	bne.n	80039ec <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003974:	4b7e      	ldr	r3, [pc, #504]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2204      	movs	r2, #4
 800397a:	4013      	ands	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_RCC_OscConfig+0x16c>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e302      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003988:	4b79      	ldr	r3, [pc, #484]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a7b      	ldr	r2, [pc, #492]	; (8003b7c <HAL_RCC_OscConfig+0x360>)
 800398e:	4013      	ands	r3, r2
 8003990:	0019      	movs	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	021a      	lsls	r2, r3, #8
 8003998:	4b75      	ldr	r3, [pc, #468]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800399e:	4b74      	ldr	r3, [pc, #464]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2209      	movs	r2, #9
 80039a4:	4393      	bics	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	4b71      	ldr	r3, [pc, #452]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039b0:	f000 fc40 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 80039b4:	0001      	movs	r1, r0
 80039b6:	4b6e      	ldr	r3, [pc, #440]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	220f      	movs	r2, #15
 80039be:	4013      	ands	r3, r2
 80039c0:	4a6f      	ldr	r2, [pc, #444]	; (8003b80 <HAL_RCC_OscConfig+0x364>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	000a      	movs	r2, r1
 80039c6:	40da      	lsrs	r2, r3
 80039c8:	4b6e      	ldr	r3, [pc, #440]	; (8003b84 <HAL_RCC_OscConfig+0x368>)
 80039ca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80039cc:	4b6e      	ldr	r3, [pc, #440]	; (8003b88 <HAL_RCC_OscConfig+0x36c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2513      	movs	r5, #19
 80039d2:	197c      	adds	r4, r7, r5
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7fd fe0b 	bl	80015f0 <HAL_InitTick>
 80039da:	0003      	movs	r3, r0
 80039dc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80039de:	197b      	adds	r3, r7, r5
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d046      	beq.n	8003a74 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80039e6:	197b      	adds	r3, r7, r5
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	e2d0      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d027      	beq.n	8003a42 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80039f2:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2209      	movs	r2, #9
 80039f8:	4393      	bics	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	4b5c      	ldr	r3, [pc, #368]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fd fe3a 	bl	800167c <HAL_GetTick>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7fd fe35 	bl	800167c <HAL_GetTick>
 8003a12:	0002      	movs	r2, r0
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e2b6      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2204      	movs	r2, #4
 8003a26:	4013      	ands	r3, r2
 8003a28:	d0f1      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	4b51      	ldr	r3, [pc, #324]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4a53      	ldr	r2, [pc, #332]	; (8003b7c <HAL_RCC_OscConfig+0x360>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	e018      	b.n	8003a74 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a42:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003a48:	2101      	movs	r1, #1
 8003a4a:	438a      	bics	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fd fe15 	bl	800167c <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a58:	f7fd fe10 	bl	800167c <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e291      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	4013      	ands	r3, r2
 8003a72:	d1f1      	bne.n	8003a58 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2210      	movs	r2, #16
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d100      	bne.n	8003a80 <HAL_RCC_OscConfig+0x264>
 8003a7e:	e0a1      	b.n	8003bc4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d140      	bne.n	8003b08 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a86:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d005      	beq.n	8003a9e <HAL_RCC_OscConfig+0x282>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e277      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a9e:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a3a      	ldr	r2, [pc, #232]	; (8003b8c <HAL_RCC_OscConfig+0x370>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aac:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ab2:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	0a19      	lsrs	r1, r3, #8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	061a      	lsls	r2, r3, #24
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	0b5b      	lsrs	r3, r3, #13
 8003acc:	3301      	adds	r3, #1
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	0212      	lsls	r2, r2, #8
 8003ad2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003ad4:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	210f      	movs	r1, #15
 8003adc:	400b      	ands	r3, r1
 8003ade:	4928      	ldr	r1, [pc, #160]	; (8003b80 <HAL_RCC_OscConfig+0x364>)
 8003ae0:	5ccb      	ldrb	r3, [r1, r3]
 8003ae2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_RCC_OscConfig+0x368>)
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <HAL_RCC_OscConfig+0x36c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2513      	movs	r5, #19
 8003aee:	197c      	adds	r4, r7, r5
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7fd fd7d 	bl	80015f0 <HAL_InitTick>
 8003af6:	0003      	movs	r3, r0
 8003af8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003afa:	197b      	adds	r3, r7, r5
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d060      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003b02:	197b      	adds	r3, r7, r5
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	e242      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d03f      	beq.n	8003b90 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	0049      	lsls	r1, r1, #1
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1e:	f7fd fdad 	bl	800167c <HAL_GetTick>
 8003b22:	0003      	movs	r3, r0
 8003b24:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b28:	f7fd fda8 	bl	800167c <HAL_GetTick>
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e229      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4013      	ands	r3, r2
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a10      	ldr	r2, [pc, #64]	; (8003b8c <HAL_RCC_OscConfig+0x370>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	0019      	movs	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	0a19      	lsrs	r1, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	061a      	lsls	r2, r3, #24
 8003b68:	4b01      	ldr	r3, [pc, #4]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	e029      	b.n	8003bc4 <HAL_RCC_OscConfig+0x3a8>
 8003b70:	40021000 	.word	0x40021000
 8003b74:	fffeffff 	.word	0xfffeffff
 8003b78:	fffbffff 	.word	0xfffbffff
 8003b7c:	ffffe0ff 	.word	0xffffe0ff
 8003b80:	080098b8 	.word	0x080098b8
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004
 8003b8c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b90:	4bbd      	ldr	r3, [pc, #756]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4bbc      	ldr	r3, [pc, #752]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003b96:	49bd      	ldr	r1, [pc, #756]	; (8003e8c <HAL_RCC_OscConfig+0x670>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fd fd6e 	bl	800167c <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ba6:	f7fd fd69 	bl	800167c <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1ea      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003bb8:	4bb3      	ldr	r3, [pc, #716]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d036      	beq.n	8003c3c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d019      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4bac      	ldr	r3, [pc, #688]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003bd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bda:	4bab      	ldr	r3, [pc, #684]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003bdc:	2101      	movs	r1, #1
 8003bde:	430a      	orrs	r2, r1
 8003be0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be2:	f7fd fd4b 	bl	800167c <HAL_GetTick>
 8003be6:	0003      	movs	r3, r0
 8003be8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fd fd46 	bl	800167c <HAL_GetTick>
 8003bf0:	0002      	movs	r2, r0
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e1c7      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bfe:	4ba2      	ldr	r3, [pc, #648]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c02:	2202      	movs	r2, #2
 8003c04:	4013      	ands	r3, r2
 8003c06:	d0f1      	beq.n	8003bec <HAL_RCC_OscConfig+0x3d0>
 8003c08:	e018      	b.n	8003c3c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0a:	4b9f      	ldr	r3, [pc, #636]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c0e:	4b9e      	ldr	r3, [pc, #632]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003c10:	2101      	movs	r1, #1
 8003c12:	438a      	bics	r2, r1
 8003c14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c16:	f7fd fd31 	bl	800167c <HAL_GetTick>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c20:	f7fd fd2c 	bl	800167c <HAL_GetTick>
 8003c24:	0002      	movs	r2, r0
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1ad      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c32:	4b95      	ldr	r3, [pc, #596]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c36:	2202      	movs	r2, #2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d1f1      	bne.n	8003c20 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2204      	movs	r2, #4
 8003c42:	4013      	ands	r3, r2
 8003c44:	d100      	bne.n	8003c48 <HAL_RCC_OscConfig+0x42c>
 8003c46:	e0ae      	b.n	8003da6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c48:	2027      	movs	r0, #39	; 0x27
 8003c4a:	183b      	adds	r3, r7, r0
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c50:	4b8d      	ldr	r3, [pc, #564]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	055b      	lsls	r3, r3, #21
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d109      	bne.n	8003c70 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5c:	4b8a      	ldr	r3, [pc, #552]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c60:	4b89      	ldr	r3, [pc, #548]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003c62:	2180      	movs	r1, #128	; 0x80
 8003c64:	0549      	lsls	r1, r1, #21
 8003c66:	430a      	orrs	r2, r1
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003c6a:	183b      	adds	r3, r7, r0
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	4b87      	ldr	r3, [pc, #540]	; (8003e90 <HAL_RCC_OscConfig+0x674>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d11a      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7c:	4b84      	ldr	r3, [pc, #528]	; (8003e90 <HAL_RCC_OscConfig+0x674>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b83      	ldr	r3, [pc, #524]	; (8003e90 <HAL_RCC_OscConfig+0x674>)
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	0049      	lsls	r1, r1, #1
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8a:	f7fd fcf7 	bl	800167c <HAL_GetTick>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c94:	f7fd fcf2 	bl	800167c <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e173      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b7a      	ldr	r3, [pc, #488]	; (8003e90 <HAL_RCC_OscConfig+0x674>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_OscConfig+0x4b2>
 8003cbe:	4b72      	ldr	r3, [pc, #456]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cc2:	4b71      	ldr	r3, [pc, #452]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003cc4:	2180      	movs	r1, #128	; 0x80
 8003cc6:	0049      	lsls	r1, r1, #1
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	651a      	str	r2, [r3, #80]	; 0x50
 8003ccc:	e031      	b.n	8003d32 <HAL_RCC_OscConfig+0x516>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4d4>
 8003cd6:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cda:	4b6b      	ldr	r3, [pc, #428]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003cdc:	496b      	ldr	r1, [pc, #428]	; (8003e8c <HAL_RCC_OscConfig+0x670>)
 8003cde:	400a      	ands	r2, r1
 8003ce0:	651a      	str	r2, [r3, #80]	; 0x50
 8003ce2:	4b69      	ldr	r3, [pc, #420]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ce6:	4b68      	ldr	r3, [pc, #416]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003ce8:	496a      	ldr	r1, [pc, #424]	; (8003e94 <HAL_RCC_OscConfig+0x678>)
 8003cea:	400a      	ands	r2, r1
 8003cec:	651a      	str	r2, [r3, #80]	; 0x50
 8003cee:	e020      	b.n	8003d32 <HAL_RCC_OscConfig+0x516>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	23a0      	movs	r3, #160	; 0xa0
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10e      	bne.n	8003d1a <HAL_RCC_OscConfig+0x4fe>
 8003cfc:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d00:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d02:	2180      	movs	r1, #128	; 0x80
 8003d04:	00c9      	lsls	r1, r1, #3
 8003d06:	430a      	orrs	r2, r1
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d0e:	4b5e      	ldr	r3, [pc, #376]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	0049      	lsls	r1, r1, #1
 8003d14:	430a      	orrs	r2, r1
 8003d16:	651a      	str	r2, [r3, #80]	; 0x50
 8003d18:	e00b      	b.n	8003d32 <HAL_RCC_OscConfig+0x516>
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d1e:	4b5a      	ldr	r3, [pc, #360]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d20:	495a      	ldr	r1, [pc, #360]	; (8003e8c <HAL_RCC_OscConfig+0x670>)
 8003d22:	400a      	ands	r2, r1
 8003d24:	651a      	str	r2, [r3, #80]	; 0x50
 8003d26:	4b58      	ldr	r3, [pc, #352]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d2c:	4959      	ldr	r1, [pc, #356]	; (8003e94 <HAL_RCC_OscConfig+0x678>)
 8003d2e:	400a      	ands	r2, r1
 8003d30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d015      	beq.n	8003d66 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fc9f 	bl	800167c <HAL_GetTick>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d42:	e009      	b.n	8003d58 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fd fc9a 	bl	800167c <HAL_GetTick>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	4a52      	ldr	r2, [pc, #328]	; (8003e98 <HAL_RCC_OscConfig+0x67c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e11a      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d58:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4013      	ands	r3, r2
 8003d62:	d0ef      	beq.n	8003d44 <HAL_RCC_OscConfig+0x528>
 8003d64:	e014      	b.n	8003d90 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d66:	f7fd fc89 	bl	800167c <HAL_GetTick>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d6e:	e009      	b.n	8003d84 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fd fc84 	bl	800167c <HAL_GetTick>
 8003d74:	0002      	movs	r2, r0
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	4a47      	ldr	r2, [pc, #284]	; (8003e98 <HAL_RCC_OscConfig+0x67c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e104      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d84:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d1ef      	bne.n	8003d70 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d90:	2327      	movs	r3, #39	; 0x27
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9e:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003da0:	493e      	ldr	r1, [pc, #248]	; (8003e9c <HAL_RCC_OscConfig+0x680>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2220      	movs	r2, #32
 8003dac:	4013      	ands	r3, r2
 8003dae:	d049      	beq.n	8003e44 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d026      	beq.n	8003e06 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003db8:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc8:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	635a      	str	r2, [r3, #52]	; 0x34
 8003dd0:	4b33      	ldr	r3, [pc, #204]	; (8003ea0 <HAL_RCC_OscConfig+0x684>)
 8003dd2:	6a1a      	ldr	r2, [r3, #32]
 8003dd4:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <HAL_RCC_OscConfig+0x684>)
 8003dd6:	2180      	movs	r1, #128	; 0x80
 8003dd8:	0189      	lsls	r1, r1, #6
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fd fc4d 	bl	800167c <HAL_GetTick>
 8003de2:	0003      	movs	r3, r0
 8003de4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de8:	f7fd fc48 	bl	800167c <HAL_GetTick>
 8003dec:	0002      	movs	r2, r0
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e0c9      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003dfa:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	4013      	ands	r3, r2
 8003e02:	d0f1      	beq.n	8003de8 <HAL_RCC_OscConfig+0x5cc>
 8003e04:	e01e      	b.n	8003e44 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	438a      	bics	r2, r1
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <HAL_RCC_OscConfig+0x684>)
 8003e14:	6a1a      	ldr	r2, [r3, #32]
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_RCC_OscConfig+0x684>)
 8003e18:	4922      	ldr	r1, [pc, #136]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fc2d 	bl	800167c <HAL_GetTick>
 8003e22:	0003      	movs	r3, r0
 8003e24:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e28:	f7fd fc28 	bl	800167c <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0a9      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d1f1      	bne.n	8003e28 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d100      	bne.n	8003e4e <HAL_RCC_OscConfig+0x632>
 8003e4c:	e09e      	b.n	8003f8c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d100      	bne.n	8003e56 <HAL_RCC_OscConfig+0x63a>
 8003e54:	e077      	b.n	8003f46 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d158      	bne.n	8003f10 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_OscConfig+0x66c>)
 8003e64:	4910      	ldr	r1, [pc, #64]	; (8003ea8 <HAL_RCC_OscConfig+0x68c>)
 8003e66:	400a      	ands	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fd fc07 	bl	800167c <HAL_GetTick>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e72:	e01b      	b.n	8003eac <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd fc02 	bl	800167c <HAL_GetTick>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d914      	bls.n	8003eac <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e083      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	fffffeff 	.word	0xfffffeff
 8003e90:	40007000 	.word	0x40007000
 8003e94:	fffffbff 	.word	0xfffffbff
 8003e98:	00001388 	.word	0x00001388
 8003e9c:	efffffff 	.word	0xefffffff
 8003ea0:	40010000 	.word	0x40010000
 8003ea4:	ffffdfff 	.word	0xffffdfff
 8003ea8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003eac:	4b3a      	ldr	r3, [pc, #232]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	049b      	lsls	r3, r3, #18
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d1dd      	bne.n	8003e74 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb8:	4b37      	ldr	r3, [pc, #220]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a37      	ldr	r2, [pc, #220]	; (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed8:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b2e      	ldr	r3, [pc, #184]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003ede:	2180      	movs	r1, #128	; 0x80
 8003ee0:	0449      	lsls	r1, r1, #17
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fd fbc9 	bl	800167c <HAL_GetTick>
 8003eea:	0003      	movs	r3, r0
 8003eec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fd fbc4 	bl	800167c <HAL_GetTick>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e045      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f02:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	049b      	lsls	r3, r3, #18
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x6d4>
 8003f0e:	e03d      	b.n	8003f8c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f10:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003f16:	4922      	ldr	r1, [pc, #136]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003f18:	400a      	ands	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fd fbae 	bl	800167c <HAL_GetTick>
 8003f20:	0003      	movs	r3, r0
 8003f22:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fd fba9 	bl	800167c <HAL_GetTick>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e02a      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f38:	4b17      	ldr	r3, [pc, #92]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	049b      	lsls	r3, r3, #18
 8003f40:	4013      	ands	r3, r2
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x70a>
 8003f44:	e022      	b.n	8003f8c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e01d      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_RCC_OscConfig+0x77c>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	025b      	lsls	r3, r3, #9
 8003f5e:	401a      	ands	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d10f      	bne.n	8003f88 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	23f0      	movs	r3, #240	; 0xf0
 8003f6c:	039b      	lsls	r3, r3, #14
 8003f6e:	401a      	ands	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	23c0      	movs	r3, #192	; 0xc0
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	401a      	ands	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b00a      	add	sp, #40	; 0x28
 8003f94:	bdb0      	pop	{r4, r5, r7, pc}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	ff02ffff 	.word	0xff02ffff
 8003fa0:	feffffff 	.word	0xfeffffff

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b5b0      	push	{r4, r5, r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e128      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b96      	ldr	r3, [pc, #600]	; (8004214 <HAL_RCC_ClockConfig+0x270>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d91e      	bls.n	8004004 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b93      	ldr	r3, [pc, #588]	; (8004214 <HAL_RCC_ClockConfig+0x270>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4393      	bics	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	4b90      	ldr	r3, [pc, #576]	; (8004214 <HAL_RCC_ClockConfig+0x270>)
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fd8:	f7fd fb50 	bl	800167c <HAL_GetTick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe0:	e009      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe2:	f7fd fb4b 	bl	800167c <HAL_GetTick>
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	4a8a      	ldr	r2, [pc, #552]	; (8004218 <HAL_RCC_ClockConfig+0x274>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e109      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b87      	ldr	r3, [pc, #540]	; (8004214 <HAL_RCC_ClockConfig+0x270>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d1ee      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2202      	movs	r2, #2
 800400a:	4013      	ands	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400e:	4b83      	ldr	r3, [pc, #524]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	22f0      	movs	r2, #240	; 0xf0
 8004014:	4393      	bics	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	4b7f      	ldr	r3, [pc, #508]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 800401e:	430a      	orrs	r2, r1
 8004020:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2201      	movs	r2, #1
 8004028:	4013      	ands	r3, r2
 800402a:	d100      	bne.n	800402e <HAL_RCC_ClockConfig+0x8a>
 800402c:	e089      	b.n	8004142 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004036:	4b79      	ldr	r3, [pc, #484]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	029b      	lsls	r3, r3, #10
 800403e:	4013      	ands	r3, r2
 8004040:	d120      	bne.n	8004084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0e1      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800404e:	4b73      	ldr	r3, [pc, #460]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	049b      	lsls	r3, r3, #18
 8004056:	4013      	ands	r3, r2
 8004058:	d114      	bne.n	8004084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0d5      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d106      	bne.n	8004074 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004066:	4b6d      	ldr	r3, [pc, #436]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2204      	movs	r2, #4
 800406c:	4013      	ands	r3, r2
 800406e:	d109      	bne.n	8004084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0ca      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004074:	4b69      	ldr	r3, [pc, #420]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4013      	ands	r3, r2
 800407e:	d101      	bne.n	8004084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0c2      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004084:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2203      	movs	r2, #3
 800408a:	4393      	bics	r3, r2
 800408c:	0019      	movs	r1, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	4b62      	ldr	r3, [pc, #392]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004098:	f7fd faf0 	bl	800167c <HAL_GetTick>
 800409c:	0003      	movs	r3, r0
 800409e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d111      	bne.n	80040cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040a8:	e009      	b.n	80040be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040aa:	f7fd fae7 	bl	800167c <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_RCC_ClockConfig+0x274>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0a5      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040be:	4b57      	ldr	r3, [pc, #348]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	220c      	movs	r2, #12
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d1ef      	bne.n	80040aa <HAL_RCC_ClockConfig+0x106>
 80040ca:	e03a      	b.n	8004142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d111      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d4:	e009      	b.n	80040ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d6:	f7fd fad1 	bl	800167c <HAL_GetTick>
 80040da:	0002      	movs	r2, r0
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	4a4d      	ldr	r2, [pc, #308]	; (8004218 <HAL_RCC_ClockConfig+0x274>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e08f      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ea:	4b4c      	ldr	r3, [pc, #304]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	220c      	movs	r2, #12
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d1ef      	bne.n	80040d6 <HAL_RCC_ClockConfig+0x132>
 80040f6:	e024      	b.n	8004142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d11b      	bne.n	8004138 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004100:	e009      	b.n	8004116 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004102:	f7fd fabb 	bl	800167c <HAL_GetTick>
 8004106:	0002      	movs	r2, r0
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	4a42      	ldr	r2, [pc, #264]	; (8004218 <HAL_RCC_ClockConfig+0x274>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e079      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004116:	4b41      	ldr	r3, [pc, #260]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	220c      	movs	r2, #12
 800411c:	4013      	ands	r3, r2
 800411e:	2b04      	cmp	r3, #4
 8004120:	d1ef      	bne.n	8004102 <HAL_RCC_ClockConfig+0x15e>
 8004122:	e00e      	b.n	8004142 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fd faaa 	bl	800167c <HAL_GetTick>
 8004128:	0002      	movs	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	4a3a      	ldr	r2, [pc, #232]	; (8004218 <HAL_RCC_ClockConfig+0x274>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e068      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004138:	4b38      	ldr	r3, [pc, #224]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	220c      	movs	r2, #12
 800413e:	4013      	ands	r3, r2
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004142:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_RCC_ClockConfig+0x270>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2201      	movs	r2, #1
 8004148:	4013      	ands	r3, r2
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d21e      	bcs.n	800418e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004150:	4b30      	ldr	r3, [pc, #192]	; (8004214 <HAL_RCC_ClockConfig+0x270>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	4393      	bics	r3, r2
 8004158:	0019      	movs	r1, r3
 800415a:	4b2e      	ldr	r3, [pc, #184]	; (8004214 <HAL_RCC_ClockConfig+0x270>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004162:	f7fd fa8b 	bl	800167c <HAL_GetTick>
 8004166:	0003      	movs	r3, r0
 8004168:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	e009      	b.n	8004180 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fd fa86 	bl	800167c <HAL_GetTick>
 8004170:	0002      	movs	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	4a28      	ldr	r2, [pc, #160]	; (8004218 <HAL_RCC_ClockConfig+0x274>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e044      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCC_ClockConfig+0x270>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2201      	movs	r2, #1
 8004186:	4013      	ands	r3, r2
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d1ee      	bne.n	800416c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2204      	movs	r2, #4
 8004194:	4013      	ands	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a20      	ldr	r2, [pc, #128]	; (8004220 <HAL_RCC_ClockConfig+0x27c>)
 800419e:	4013      	ands	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2208      	movs	r2, #8
 80041b2:	4013      	ands	r3, r2
 80041b4:	d00a      	beq.n	80041cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041b6:	4b19      	ldr	r3, [pc, #100]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <HAL_RCC_ClockConfig+0x280>)
 80041bc:	4013      	ands	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	00da      	lsls	r2, r3, #3
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 80041c8:	430a      	orrs	r2, r1
 80041ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041cc:	f000 f832 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 80041d0:	0001      	movs	r1, r0
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <HAL_RCC_ClockConfig+0x278>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	220f      	movs	r2, #15
 80041da:	4013      	ands	r3, r2
 80041dc:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_RCC_ClockConfig+0x284>)
 80041de:	5cd3      	ldrb	r3, [r2, r3]
 80041e0:	000a      	movs	r2, r1
 80041e2:	40da      	lsrs	r2, r3
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <HAL_RCC_ClockConfig+0x288>)
 80041e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCC_ClockConfig+0x28c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	250b      	movs	r5, #11
 80041ee:	197c      	adds	r4, r7, r5
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7fd f9fd 	bl	80015f0 <HAL_InitTick>
 80041f6:	0003      	movs	r3, r0
 80041f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80041fa:	197b      	adds	r3, r7, r5
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004202:	197b      	adds	r3, r7, r5
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	e000      	b.n	800420a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b004      	add	sp, #16
 8004210:	bdb0      	pop	{r4, r5, r7, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	40022000 	.word	0x40022000
 8004218:	00001388 	.word	0x00001388
 800421c:	40021000 	.word	0x40021000
 8004220:	fffff8ff 	.word	0xfffff8ff
 8004224:	ffffc7ff 	.word	0xffffc7ff
 8004228:	080098b8 	.word	0x080098b8
 800422c:	20000000 	.word	0x20000000
 8004230:	20000004 	.word	0x20000004

08004234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004234:	b5b0      	push	{r4, r5, r7, lr}
 8004236:	b08e      	sub	sp, #56	; 0x38
 8004238:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800423a:	4b4c      	ldr	r3, [pc, #304]	; (800436c <HAL_RCC_GetSysClockFreq+0x138>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004242:	230c      	movs	r3, #12
 8004244:	4013      	ands	r3, r2
 8004246:	2b0c      	cmp	r3, #12
 8004248:	d014      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x40>
 800424a:	d900      	bls.n	800424e <HAL_RCC_GetSysClockFreq+0x1a>
 800424c:	e07b      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x112>
 800424e:	2b04      	cmp	r3, #4
 8004250:	d002      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0x24>
 8004252:	2b08      	cmp	r3, #8
 8004254:	d00b      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x3a>
 8004256:	e076      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004258:	4b44      	ldr	r3, [pc, #272]	; (800436c <HAL_RCC_GetSysClockFreq+0x138>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2210      	movs	r2, #16
 800425e:	4013      	ands	r3, r2
 8004260:	d002      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004262:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004264:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004266:	e07c      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <HAL_RCC_GetSysClockFreq+0x140>)
 800426a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800426c:	e079      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800426e:	4b42      	ldr	r3, [pc, #264]	; (8004378 <HAL_RCC_GetSysClockFreq+0x144>)
 8004270:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004272:	e076      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	0c9a      	lsrs	r2, r3, #18
 8004278:	230f      	movs	r3, #15
 800427a:	401a      	ands	r2, r3
 800427c:	4b3f      	ldr	r3, [pc, #252]	; (800437c <HAL_RCC_GetSysClockFreq+0x148>)
 800427e:	5c9b      	ldrb	r3, [r3, r2]
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	0d9a      	lsrs	r2, r3, #22
 8004286:	2303      	movs	r3, #3
 8004288:	4013      	ands	r3, r2
 800428a:	3301      	adds	r3, #1
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800428e:	4b37      	ldr	r3, [pc, #220]	; (800436c <HAL_RCC_GetSysClockFreq+0x138>)
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	025b      	lsls	r3, r3, #9
 8004296:	4013      	ands	r3, r2
 8004298:	d01a      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	4a35      	ldr	r2, [pc, #212]	; (8004378 <HAL_RCC_GetSysClockFreq+0x144>)
 80042a4:	2300      	movs	r3, #0
 80042a6:	69b8      	ldr	r0, [r7, #24]
 80042a8:	69f9      	ldr	r1, [r7, #28]
 80042aa:	f7fb ffe3 	bl	8000274 <__aeabi_lmul>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f7fb ffb7 	bl	8000234 <__aeabi_uldivmod>
 80042c6:	0002      	movs	r2, r0
 80042c8:	000b      	movs	r3, r1
 80042ca:	0013      	movs	r3, r2
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
 80042ce:	e037      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80042d0:	4b26      	ldr	r3, [pc, #152]	; (800436c <HAL_RCC_GetSysClockFreq+0x138>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2210      	movs	r2, #16
 80042d6:	4013      	ands	r3, r2
 80042d8:	d01a      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	4a23      	ldr	r2, [pc, #140]	; (8004370 <HAL_RCC_GetSysClockFreq+0x13c>)
 80042e4:	2300      	movs	r3, #0
 80042e6:	68b8      	ldr	r0, [r7, #8]
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	f7fb ffc3 	bl	8000274 <__aeabi_lmul>
 80042ee:	0002      	movs	r2, r0
 80042f0:	000b      	movs	r3, r1
 80042f2:	0010      	movs	r0, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f7fb ff97 	bl	8000234 <__aeabi_uldivmod>
 8004306:	0002      	movs	r2, r0
 8004308:	000b      	movs	r3, r1
 800430a:	0013      	movs	r3, r2
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
 800430e:	e017      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	0018      	movs	r0, r3
 8004314:	2300      	movs	r3, #0
 8004316:	0019      	movs	r1, r3
 8004318:	4a16      	ldr	r2, [pc, #88]	; (8004374 <HAL_RCC_GetSysClockFreq+0x140>)
 800431a:	2300      	movs	r3, #0
 800431c:	f7fb ffaa 	bl	8000274 <__aeabi_lmul>
 8004320:	0002      	movs	r2, r0
 8004322:	000b      	movs	r3, r1
 8004324:	0010      	movs	r0, r2
 8004326:	0019      	movs	r1, r3
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	001c      	movs	r4, r3
 800432c:	2300      	movs	r3, #0
 800432e:	001d      	movs	r5, r3
 8004330:	0022      	movs	r2, r4
 8004332:	002b      	movs	r3, r5
 8004334:	f7fb ff7e 	bl	8000234 <__aeabi_uldivmod>
 8004338:	0002      	movs	r2, r0
 800433a:	000b      	movs	r3, r1
 800433c:	0013      	movs	r3, r2
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004342:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004344:	e00d      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCC_GetSysClockFreq+0x138>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	0b5b      	lsrs	r3, r3, #13
 800434c:	2207      	movs	r2, #7
 800434e:	4013      	ands	r3, r2
 8004350:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	3301      	adds	r3, #1
 8004356:	2280      	movs	r2, #128	; 0x80
 8004358:	0212      	lsls	r2, r2, #8
 800435a:	409a      	lsls	r2, r3
 800435c:	0013      	movs	r3, r2
 800435e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004360:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b00e      	add	sp, #56	; 0x38
 800436a:	bdb0      	pop	{r4, r5, r7, pc}
 800436c:	40021000 	.word	0x40021000
 8004370:	003d0900 	.word	0x003d0900
 8004374:	00f42400 	.word	0x00f42400
 8004378:	007a1200 	.word	0x007a1200
 800437c:	080098c8 	.word	0x080098c8

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004388:	2017      	movs	r0, #23
 800438a:	183b      	adds	r3, r7, r0
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2220      	movs	r2, #32
 8004396:	4013      	ands	r3, r2
 8004398:	d100      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800439a:	e0c7      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439c:	4b93      	ldr	r3, [pc, #588]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800439e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	055b      	lsls	r3, r3, #21
 80043a4:	4013      	ands	r3, r2
 80043a6:	d109      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a8:	4b90      	ldr	r3, [pc, #576]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ac:	4b8f      	ldr	r3, [pc, #572]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043ae:	2180      	movs	r1, #128	; 0x80
 80043b0:	0549      	lsls	r1, r1, #21
 80043b2:	430a      	orrs	r2, r1
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80043b6:	183b      	adds	r3, r7, r0
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	4b8c      	ldr	r3, [pc, #560]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4013      	ands	r3, r2
 80043c6:	d11a      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c8:	4b89      	ldr	r3, [pc, #548]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b88      	ldr	r3, [pc, #544]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	0049      	lsls	r1, r1, #1
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d6:	f7fd f951 	bl	800167c <HAL_GetTick>
 80043da:	0003      	movs	r3, r0
 80043dc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043de:	e008      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e0:	f7fd f94c 	bl	800167c <HAL_GetTick>
 80043e4:	0002      	movs	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e0f7      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b7f      	ldr	r3, [pc, #508]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80043fe:	4b7b      	ldr	r3, [pc, #492]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	23c0      	movs	r3, #192	; 0xc0
 8004404:	039b      	lsls	r3, r3, #14
 8004406:	4013      	ands	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	23c0      	movs	r3, #192	; 0xc0
 8004410:	039b      	lsls	r3, r3, #14
 8004412:	4013      	ands	r3, r2
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	429a      	cmp	r2, r3
 8004418:	d013      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	23c0      	movs	r3, #192	; 0xc0
 8004420:	029b      	lsls	r3, r3, #10
 8004422:	401a      	ands	r2, r3
 8004424:	23c0      	movs	r3, #192	; 0xc0
 8004426:	029b      	lsls	r3, r3, #10
 8004428:	429a      	cmp	r2, r3
 800442a:	d10a      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800442c:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	401a      	ands	r2, r3
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	029b      	lsls	r3, r3, #10
 800443a:	429a      	cmp	r2, r3
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e0cf      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004442:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004446:	23c0      	movs	r3, #192	; 0xc0
 8004448:	029b      	lsls	r3, r3, #10
 800444a:	4013      	ands	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03b      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	23c0      	movs	r3, #192	; 0xc0
 800445a:	029b      	lsls	r3, r3, #10
 800445c:	4013      	ands	r3, r2
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	429a      	cmp	r2, r3
 8004462:	d033      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2220      	movs	r2, #32
 800446a:	4013      	ands	r3, r2
 800446c:	d02e      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800446e:	4b5f      	ldr	r3, [pc, #380]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	4a60      	ldr	r2, [pc, #384]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004474:	4013      	ands	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004478:	4b5c      	ldr	r3, [pc, #368]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800447a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800447c:	4b5b      	ldr	r3, [pc, #364]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	0309      	lsls	r1, r1, #12
 8004482:	430a      	orrs	r2, r1
 8004484:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004486:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800448a:	4b58      	ldr	r3, [pc, #352]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800448c:	495a      	ldr	r1, [pc, #360]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800448e:	400a      	ands	r2, r1
 8004490:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004492:	4b56      	ldr	r3, [pc, #344]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	4013      	ands	r3, r2
 80044a0:	d014      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fd f8eb 	bl	800167c <HAL_GetTick>
 80044a6:	0003      	movs	r3, r0
 80044a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044aa:	e009      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fd f8e6 	bl	800167c <HAL_GetTick>
 80044b0:	0002      	movs	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	4a51      	ldr	r2, [pc, #324]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e090      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044c0:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4013      	ands	r3, r2
 80044ca:	d0ef      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2220      	movs	r2, #32
 80044d2:	4013      	ands	r3, r2
 80044d4:	d01f      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	23c0      	movs	r3, #192	; 0xc0
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	401a      	ands	r2, r3
 80044e0:	23c0      	movs	r3, #192	; 0xc0
 80044e2:	029b      	lsls	r3, r3, #10
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d10c      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80044e8:	4b40      	ldr	r3, [pc, #256]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a44      	ldr	r2, [pc, #272]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	0019      	movs	r1, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	23c0      	movs	r3, #192	; 0xc0
 80044f8:	039b      	lsls	r3, r3, #14
 80044fa:	401a      	ands	r2, r3
 80044fc:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044fe:	430a      	orrs	r2, r1
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	4b3a      	ldr	r3, [pc, #232]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004504:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	23c0      	movs	r3, #192	; 0xc0
 800450c:	029b      	lsls	r3, r3, #10
 800450e:	401a      	ands	r2, r3
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004512:	430a      	orrs	r2, r1
 8004514:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004516:	2317      	movs	r3, #23
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d105      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004520:	4b32      	ldr	r3, [pc, #200]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004524:	4b31      	ldr	r3, [pc, #196]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004526:	4937      	ldr	r1, [pc, #220]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004528:	400a      	ands	r2, r1
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2201      	movs	r2, #1
 8004532:	4013      	ands	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004536:	4b2d      	ldr	r3, [pc, #180]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	2203      	movs	r2, #3
 800453c:	4393      	bics	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	4b29      	ldr	r3, [pc, #164]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004546:	430a      	orrs	r2, r1
 8004548:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004558:	220c      	movs	r2, #12
 800455a:	4393      	bics	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004564:	430a      	orrs	r2, r1
 8004566:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2204      	movs	r2, #4
 800456e:	4013      	ands	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004572:	4b1e      	ldr	r3, [pc, #120]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	4a24      	ldr	r2, [pc, #144]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004582:	430a      	orrs	r2, r1
 8004584:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2208      	movs	r2, #8
 800458c:	4013      	ands	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004590:	4b16      	ldr	r3, [pc, #88]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004594:	4a1d      	ldr	r2, [pc, #116]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004596:	4013      	ands	r3, r2
 8004598:	0019      	movs	r1, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045a0:	430a      	orrs	r2, r1
 80045a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2240      	movs	r2, #64	; 0x40
 80045aa:	4013      	ands	r3, r2
 80045ac:	d009      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	4a17      	ldr	r2, [pc, #92]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045be:	430a      	orrs	r2, r1
 80045c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2280      	movs	r2, #128	; 0x80
 80045c8:	4013      	ands	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80045cc:	4b07      	ldr	r3, [pc, #28]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d0:	4a10      	ldr	r2, [pc, #64]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	0019      	movs	r1, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	4b04      	ldr	r3, [pc, #16]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045dc:	430a      	orrs	r2, r1
 80045de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b006      	add	sp, #24
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40007000 	.word	0x40007000
 80045f4:	fffcffff 	.word	0xfffcffff
 80045f8:	fff7ffff 	.word	0xfff7ffff
 80045fc:	00001388 	.word	0x00001388
 8004600:	ffcfffff 	.word	0xffcfffff
 8004604:	efffffff 	.word	0xefffffff
 8004608:	fffff3ff 	.word	0xfffff3ff
 800460c:	ffffcfff 	.word	0xffffcfff
 8004610:	fbffffff 	.word	0xfbffffff
 8004614:	fff3ffff 	.word	0xfff3ffff

08004618 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2244      	movs	r2, #68	; 0x44
 8004624:	2100      	movs	r1, #0
 8004626:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <USB_EnableGlobalInt+0x28>)
 800462a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	b299      	uxth	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2240      	movs	r2, #64	; 0x40
 8004634:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b004      	add	sp, #16
 800463e:	bd80      	pop	{r7, pc}
 8004640:	0000bf80 	.word	0x0000bf80

08004644 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <USB_DisableGlobalInt+0x30>)
 800464e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2240      	movs	r2, #64	; 0x40
 8004654:	5a9b      	ldrh	r3, [r3, r2]
 8004656:	b29b      	uxth	r3, r3
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	b292      	uxth	r2, r2
 800465c:	43d2      	mvns	r2, r2
 800465e:	b292      	uxth	r2, r2
 8004660:	4013      	ands	r3, r2
 8004662:	b299      	uxth	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2240      	movs	r2, #64	; 0x40
 8004668:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	0018      	movs	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	b004      	add	sp, #16
 8004672:	bd80      	pop	{r7, pc}
 8004674:	0000bf80 	.word	0x0000bf80

08004678 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004678:	b084      	sub	sp, #16
 800467a:	b590      	push	{r4, r7, lr}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	2004      	movs	r0, #4
 8004684:	2410      	movs	r4, #16
 8004686:	1900      	adds	r0, r0, r4
 8004688:	2408      	movs	r4, #8
 800468a:	46a4      	mov	ip, r4
 800468c:	44bc      	add	ip, r7
 800468e:	4460      	add	r0, ip
 8004690:	6001      	str	r1, [r0, #0]
 8004692:	6042      	str	r2, [r0, #4]
 8004694:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2240      	movs	r2, #64	; 0x40
 800469a:	2101      	movs	r1, #1
 800469c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2240      	movs	r2, #64	; 0x40
 80046a2:	2100      	movs	r1, #0
 80046a4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2244      	movs	r2, #68	; 0x44
 80046aa:	2100      	movs	r1, #0
 80046ac:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2250      	movs	r2, #80	; 0x50
 80046b2:	2100      	movs	r1, #0
 80046b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	0018      	movs	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b003      	add	sp, #12
 80046be:	bc90      	pop	{r4, r7}
 80046c0:	bc08      	pop	{r3}
 80046c2:	b004      	add	sp, #16
 80046c4:	4718      	bx	r3
	...

080046c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b09c      	sub	sp, #112	; 0x70
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046d2:	236f      	movs	r3, #111	; 0x6f
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	18d3      	adds	r3, r2, r3
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	236c      	movs	r3, #108	; 0x6c
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	49a3      	ldr	r1, [pc, #652]	; (800497c <USB_ActivateEndpoint+0x2b4>)
 80046ee:	400a      	ands	r2, r1
 80046f0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	78db      	ldrb	r3, [r3, #3]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d017      	beq.n	800472a <USB_ActivateEndpoint+0x62>
 80046fa:	dc28      	bgt.n	800474e <USB_ActivateEndpoint+0x86>
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d00e      	beq.n	800471e <USB_ActivateEndpoint+0x56>
 8004700:	dc25      	bgt.n	800474e <USB_ActivateEndpoint+0x86>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <USB_ActivateEndpoint+0x44>
 8004706:	2b01      	cmp	r3, #1
 8004708:	d018      	beq.n	800473c <USB_ActivateEndpoint+0x74>
 800470a:	e020      	b.n	800474e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800470c:	226c      	movs	r2, #108	; 0x6c
 800470e:	18bb      	adds	r3, r7, r2
 8004710:	18ba      	adds	r2, r7, r2
 8004712:	8812      	ldrh	r2, [r2, #0]
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	0089      	lsls	r1, r1, #2
 8004718:	430a      	orrs	r2, r1
 800471a:	801a      	strh	r2, [r3, #0]
      break;
 800471c:	e01c      	b.n	8004758 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800471e:	226c      	movs	r2, #108	; 0x6c
 8004720:	18bb      	adds	r3, r7, r2
 8004722:	18ba      	adds	r2, r7, r2
 8004724:	8812      	ldrh	r2, [r2, #0]
 8004726:	801a      	strh	r2, [r3, #0]
      break;
 8004728:	e016      	b.n	8004758 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800472a:	226c      	movs	r2, #108	; 0x6c
 800472c:	18bb      	adds	r3, r7, r2
 800472e:	18ba      	adds	r2, r7, r2
 8004730:	8812      	ldrh	r2, [r2, #0]
 8004732:	21c0      	movs	r1, #192	; 0xc0
 8004734:	00c9      	lsls	r1, r1, #3
 8004736:	430a      	orrs	r2, r1
 8004738:	801a      	strh	r2, [r3, #0]
      break;
 800473a:	e00d      	b.n	8004758 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800473c:	226c      	movs	r2, #108	; 0x6c
 800473e:	18bb      	adds	r3, r7, r2
 8004740:	18ba      	adds	r2, r7, r2
 8004742:	8812      	ldrh	r2, [r2, #0]
 8004744:	2180      	movs	r1, #128	; 0x80
 8004746:	00c9      	lsls	r1, r1, #3
 8004748:	430a      	orrs	r2, r1
 800474a:	801a      	strh	r2, [r3, #0]
      break;
 800474c:	e004      	b.n	8004758 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800474e:	236f      	movs	r3, #111	; 0x6f
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	2201      	movs	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
      break;
 8004756:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	18d3      	adds	r3, r2, r3
 8004762:	226c      	movs	r2, #108	; 0x6c
 8004764:	18ba      	adds	r2, r7, r2
 8004766:	8812      	ldrh	r2, [r2, #0]
 8004768:	4985      	ldr	r1, [pc, #532]	; (8004980 <USB_ActivateEndpoint+0x2b8>)
 800476a:	430a      	orrs	r2, r1
 800476c:	b292      	uxth	r2, r2
 800476e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	18d3      	adds	r3, r2, r3
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	b21b      	sxth	r3, r3
 8004780:	4a80      	ldr	r2, [pc, #512]	; (8004984 <USB_ActivateEndpoint+0x2bc>)
 8004782:	4013      	ands	r3, r2
 8004784:	b21a      	sxth	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	b21b      	sxth	r3, r3
 800478c:	4313      	orrs	r3, r2
 800478e:	b21a      	sxth	r2, r3
 8004790:	2166      	movs	r1, #102	; 0x66
 8004792:	187b      	adds	r3, r7, r1
 8004794:	801a      	strh	r2, [r3, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	18d3      	adds	r3, r2, r3
 80047a0:	187a      	adds	r2, r7, r1
 80047a2:	8812      	ldrh	r2, [r2, #0]
 80047a4:	4976      	ldr	r1, [pc, #472]	; (8004980 <USB_ActivateEndpoint+0x2b8>)
 80047a6:	430a      	orrs	r2, r1
 80047a8:	b292      	uxth	r2, r2
 80047aa:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	7b1b      	ldrb	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d000      	beq.n	80047b6 <USB_ActivateEndpoint+0xee>
 80047b4:	e178      	b.n	8004aa8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d100      	bne.n	80047c0 <USB_ActivateEndpoint+0xf8>
 80047be:	e07a      	b.n	80048b6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2250      	movs	r2, #80	; 0x50
 80047c8:	5a9b      	ldrh	r3, [r3, r2]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	001a      	movs	r2, r3
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	00da      	lsls	r2, r3, #3
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	18d3      	adds	r3, r2, r3
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	00d2      	lsls	r2, r2, #3
 80047e2:	4694      	mov	ip, r2
 80047e4:	4463      	add	r3, ip
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	88db      	ldrh	r3, [r3, #6]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	18db      	adds	r3, r3, r3
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	18d2      	adds	r2, r2, r3
 8004802:	2112      	movs	r1, #18
 8004804:	187b      	adds	r3, r7, r1
 8004806:	8812      	ldrh	r2, [r2, #0]
 8004808:	801a      	strh	r2, [r3, #0]
 800480a:	187b      	adds	r3, r7, r1
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	4013      	ands	r3, r2
 8004812:	d016      	beq.n	8004842 <USB_ActivateEndpoint+0x17a>
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	18d3      	adds	r3, r2, r3
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29a      	uxth	r2, r3
 8004822:	2010      	movs	r0, #16
 8004824:	183b      	adds	r3, r7, r0
 8004826:	4957      	ldr	r1, [pc, #348]	; (8004984 <USB_ActivateEndpoint+0x2bc>)
 8004828:	400a      	ands	r2, r1
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	18d3      	adds	r3, r2, r3
 8004836:	183a      	adds	r2, r7, r0
 8004838:	8812      	ldrh	r2, [r2, #0]
 800483a:	4953      	ldr	r1, [pc, #332]	; (8004988 <USB_ActivateEndpoint+0x2c0>)
 800483c:	430a      	orrs	r2, r1
 800483e:	b292      	uxth	r2, r2
 8004840:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	78db      	ldrb	r3, [r3, #3]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d01d      	beq.n	8004886 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	18d3      	adds	r3, r2, r3
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	b29a      	uxth	r2, r3
 8004858:	200c      	movs	r0, #12
 800485a:	183b      	adds	r3, r7, r0
 800485c:	494b      	ldr	r1, [pc, #300]	; (800498c <USB_ActivateEndpoint+0x2c4>)
 800485e:	400a      	ands	r2, r1
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	183b      	adds	r3, r7, r0
 8004864:	183a      	adds	r2, r7, r0
 8004866:	8812      	ldrh	r2, [r2, #0]
 8004868:	2120      	movs	r1, #32
 800486a:	404a      	eors	r2, r1
 800486c:	801a      	strh	r2, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	18d3      	adds	r3, r2, r3
 8004878:	183a      	adds	r2, r7, r0
 800487a:	8812      	ldrh	r2, [r2, #0]
 800487c:	4940      	ldr	r1, [pc, #256]	; (8004980 <USB_ActivateEndpoint+0x2b8>)
 800487e:	430a      	orrs	r2, r1
 8004880:	b292      	uxth	r2, r2
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	e2b4      	b.n	8004df0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	18d3      	adds	r3, r2, r3
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29a      	uxth	r2, r3
 8004894:	200e      	movs	r0, #14
 8004896:	183b      	adds	r3, r7, r0
 8004898:	493c      	ldr	r1, [pc, #240]	; (800498c <USB_ActivateEndpoint+0x2c4>)
 800489a:	400a      	ands	r2, r1
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	18d3      	adds	r3, r2, r3
 80048a8:	183a      	adds	r2, r7, r0
 80048aa:	8812      	ldrh	r2, [r2, #0]
 80048ac:	4934      	ldr	r1, [pc, #208]	; (8004980 <USB_ActivateEndpoint+0x2b8>)
 80048ae:	430a      	orrs	r2, r1
 80048b0:	b292      	uxth	r2, r2
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	e29c      	b.n	8004df0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2250      	movs	r2, #80	; 0x50
 80048be:	5a9b      	ldrh	r3, [r3, r2]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	001a      	movs	r2, r3
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	189b      	adds	r3, r3, r2
 80048c8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	00da      	lsls	r2, r3, #3
 80048d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d2:	18d3      	adds	r3, r2, r3
 80048d4:	4a2e      	ldr	r2, [pc, #184]	; (8004990 <USB_ActivateEndpoint+0x2c8>)
 80048d6:	4694      	mov	ip, r2
 80048d8:	4463      	add	r3, ip
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	88db      	ldrh	r3, [r3, #6]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	18db      	adds	r3, r3, r3
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2250      	movs	r2, #80	; 0x50
 80048f4:	5a9b      	ldrh	r3, [r3, r2]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	001a      	movs	r2, r3
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	189b      	adds	r3, r3, r2
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	00da      	lsls	r2, r3, #3
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	18d3      	adds	r3, r2, r3
 800490a:	4a22      	ldr	r2, [pc, #136]	; (8004994 <USB_ActivateEndpoint+0x2cc>)
 800490c:	4694      	mov	ip, r2
 800490e:	4463      	add	r3, ip
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	059b      	lsls	r3, r3, #22
 800491a:	0d9b      	lsrs	r3, r3, #22
 800491c:	b29a      	uxth	r2, r3
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b3e      	cmp	r3, #62	; 0x3e
 8004928:	d91a      	bls.n	8004960 <USB_ActivateEndpoint+0x298>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	66bb      	str	r3, [r7, #104]	; 0x68
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	221f      	movs	r2, #31
 8004938:	4013      	ands	r3, r2
 800493a:	d102      	bne.n	8004942 <USB_ActivateEndpoint+0x27a>
 800493c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800493e:	3b01      	subs	r3, #1
 8004940:	66bb      	str	r3, [r7, #104]	; 0x68
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29a      	uxth	r2, r3
 8004948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800494a:	b29b      	uxth	r3, r3
 800494c:	029b      	lsls	r3, r3, #10
 800494e:	b29b      	uxth	r3, r3
 8004950:	4313      	orrs	r3, r2
 8004952:	b29b      	uxth	r3, r3
 8004954:	4a10      	ldr	r2, [pc, #64]	; (8004998 <USB_ActivateEndpoint+0x2d0>)
 8004956:	4313      	orrs	r3, r2
 8004958:	b29a      	uxth	r2, r3
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	801a      	strh	r2, [r3, #0]
 800495e:	e034      	b.n	80049ca <USB_ActivateEndpoint+0x302>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d119      	bne.n	800499c <USB_ActivateEndpoint+0x2d4>
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <USB_ActivateEndpoint+0x2d0>)
 8004970:	4313      	orrs	r3, r2
 8004972:	b29a      	uxth	r2, r3
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	e027      	b.n	80049ca <USB_ActivateEndpoint+0x302>
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	ffff898f 	.word	0xffff898f
 8004980:	ffff8080 	.word	0xffff8080
 8004984:	ffff8f8f 	.word	0xffff8f8f
 8004988:	ffff80c0 	.word	0xffff80c0
 800498c:	ffff8fbf 	.word	0xffff8fbf
 8004990:	00000404 	.word	0x00000404
 8004994:	00000406 	.word	0x00000406
 8004998:	ffff8000 	.word	0xffff8000
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	085b      	lsrs	r3, r3, #1
 80049a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2201      	movs	r2, #1
 80049aa:	4013      	ands	r3, r2
 80049ac:	d002      	beq.n	80049b4 <USB_ActivateEndpoint+0x2ec>
 80049ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049b0:	3301      	adds	r3, #1
 80049b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049bc:	b29b      	uxth	r3, r3
 80049be:	029b      	lsls	r3, r3, #10
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	4313      	orrs	r3, r2
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	18d2      	adds	r2, r2, r3
 80049d4:	2122      	movs	r1, #34	; 0x22
 80049d6:	187b      	adds	r3, r7, r1
 80049d8:	8812      	ldrh	r2, [r2, #0]
 80049da:	801a      	strh	r2, [r3, #0]
 80049dc:	187b      	adds	r3, r7, r1
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	01db      	lsls	r3, r3, #7
 80049e4:	4013      	ands	r3, r2
 80049e6:	d016      	beq.n	8004a16 <USB_ActivateEndpoint+0x34e>
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	18d3      	adds	r3, r2, r3
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	2020      	movs	r0, #32
 80049f8:	183b      	adds	r3, r7, r0
 80049fa:	49dd      	ldr	r1, [pc, #884]	; (8004d70 <USB_ActivateEndpoint+0x6a8>)
 80049fc:	400a      	ands	r2, r1
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	18d3      	adds	r3, r2, r3
 8004a0a:	183a      	adds	r2, r7, r0
 8004a0c:	8812      	ldrh	r2, [r2, #0]
 8004a0e:	49d9      	ldr	r1, [pc, #868]	; (8004d74 <USB_ActivateEndpoint+0x6ac>)
 8004a10:	430a      	orrs	r2, r1
 8004a12:	b292      	uxth	r2, r2
 8004a14:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d125      	bne.n	8004a6a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	18d3      	adds	r3, r2, r3
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	201c      	movs	r0, #28
 8004a2e:	183b      	adds	r3, r7, r0
 8004a30:	49d1      	ldr	r1, [pc, #836]	; (8004d78 <USB_ActivateEndpoint+0x6b0>)
 8004a32:	400a      	ands	r2, r1
 8004a34:	801a      	strh	r2, [r3, #0]
 8004a36:	183b      	adds	r3, r7, r0
 8004a38:	183a      	adds	r2, r7, r0
 8004a3a:	8812      	ldrh	r2, [r2, #0]
 8004a3c:	2180      	movs	r1, #128	; 0x80
 8004a3e:	0149      	lsls	r1, r1, #5
 8004a40:	404a      	eors	r2, r1
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	183b      	adds	r3, r7, r0
 8004a46:	183a      	adds	r2, r7, r0
 8004a48:	8812      	ldrh	r2, [r2, #0]
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	0189      	lsls	r1, r1, #6
 8004a4e:	404a      	eors	r2, r1
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	18d3      	adds	r3, r2, r3
 8004a5c:	183a      	adds	r2, r7, r0
 8004a5e:	8812      	ldrh	r2, [r2, #0]
 8004a60:	49c6      	ldr	r1, [pc, #792]	; (8004d7c <USB_ActivateEndpoint+0x6b4>)
 8004a62:	430a      	orrs	r2, r1
 8004a64:	b292      	uxth	r2, r2
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	e1c2      	b.n	8004df0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	18d3      	adds	r3, r2, r3
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	201e      	movs	r0, #30
 8004a7a:	183b      	adds	r3, r7, r0
 8004a7c:	49be      	ldr	r1, [pc, #760]	; (8004d78 <USB_ActivateEndpoint+0x6b0>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	183b      	adds	r3, r7, r0
 8004a84:	183a      	adds	r2, r7, r0
 8004a86:	8812      	ldrh	r2, [r2, #0]
 8004a88:	2180      	movs	r1, #128	; 0x80
 8004a8a:	0189      	lsls	r1, r1, #6
 8004a8c:	404a      	eors	r2, r1
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	18d3      	adds	r3, r2, r3
 8004a9a:	183a      	adds	r2, r7, r0
 8004a9c:	8812      	ldrh	r2, [r2, #0]
 8004a9e:	49b7      	ldr	r1, [pc, #732]	; (8004d7c <USB_ActivateEndpoint+0x6b4>)
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	801a      	strh	r2, [r3, #0]
 8004aa6:	e1a3      	b.n	8004df0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	78db      	ldrb	r3, [r3, #3]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d117      	bne.n	8004ae0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	18d3      	adds	r3, r2, r3
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	2062      	movs	r0, #98	; 0x62
 8004ac0:	183b      	adds	r3, r7, r0
 8004ac2:	49ab      	ldr	r1, [pc, #684]	; (8004d70 <USB_ActivateEndpoint+0x6a8>)
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	18d3      	adds	r3, r2, r3
 8004ad2:	183a      	adds	r2, r7, r0
 8004ad4:	8812      	ldrh	r2, [r2, #0]
 8004ad6:	49aa      	ldr	r1, [pc, #680]	; (8004d80 <USB_ActivateEndpoint+0x6b8>)
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	b292      	uxth	r2, r2
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	e016      	b.n	8004b0e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	2064      	movs	r0, #100	; 0x64
 8004af0:	183b      	adds	r3, r7, r0
 8004af2:	49a4      	ldr	r1, [pc, #656]	; (8004d84 <USB_ActivateEndpoint+0x6bc>)
 8004af4:	400a      	ands	r2, r1
 8004af6:	801a      	strh	r2, [r3, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	18d3      	adds	r3, r2, r3
 8004b02:	183a      	adds	r2, r7, r0
 8004b04:	8812      	ldrh	r2, [r2, #0]
 8004b06:	499d      	ldr	r1, [pc, #628]	; (8004d7c <USB_ActivateEndpoint+0x6b4>)
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2250      	movs	r2, #80	; 0x50
 8004b16:	5a9b      	ldrh	r3, [r3, r2]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	001a      	movs	r2, r3
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	00da      	lsls	r2, r3, #3
 8004b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2a:	18d3      	adds	r3, r2, r3
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	00d2      	lsls	r2, r2, #3
 8004b30:	4694      	mov	ip, r2
 8004b32:	4463      	add	r3, ip
 8004b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	891b      	ldrh	r3, [r3, #8]
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	18db      	adds	r3, r3, r3
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b44:	801a      	strh	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	657b      	str	r3, [r7, #84]	; 0x54
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2250      	movs	r2, #80	; 0x50
 8004b4e:	5a9b      	ldrh	r3, [r3, r2]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	001a      	movs	r2, r3
 8004b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b56:	189b      	adds	r3, r3, r2
 8004b58:	657b      	str	r3, [r7, #84]	; 0x54
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	00da      	lsls	r2, r3, #3
 8004b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b62:	18d3      	adds	r3, r2, r3
 8004b64:	4a88      	ldr	r2, [pc, #544]	; (8004d88 <USB_ActivateEndpoint+0x6c0>)
 8004b66:	4694      	mov	ip, r2
 8004b68:	4463      	add	r3, ip
 8004b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	895b      	ldrh	r3, [r3, #10]
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	18db      	adds	r3, r3, r3
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d000      	beq.n	8004b86 <USB_ActivateEndpoint+0x4be>
 8004b84:	e087      	b.n	8004c96 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	18d2      	adds	r2, r2, r3
 8004b90:	2140      	movs	r1, #64	; 0x40
 8004b92:	187b      	adds	r3, r7, r1
 8004b94:	8812      	ldrh	r2, [r2, #0]
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	881a      	ldrh	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	01db      	lsls	r3, r3, #7
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d016      	beq.n	8004bd2 <USB_ActivateEndpoint+0x50a>
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	18d3      	adds	r3, r2, r3
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	203e      	movs	r0, #62	; 0x3e
 8004bb4:	183b      	adds	r3, r7, r0
 8004bb6:	496e      	ldr	r1, [pc, #440]	; (8004d70 <USB_ActivateEndpoint+0x6a8>)
 8004bb8:	400a      	ands	r2, r1
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	18d3      	adds	r3, r2, r3
 8004bc6:	183a      	adds	r2, r7, r0
 8004bc8:	8812      	ldrh	r2, [r2, #0]
 8004bca:	496a      	ldr	r1, [pc, #424]	; (8004d74 <USB_ActivateEndpoint+0x6ac>)
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	b292      	uxth	r2, r2
 8004bd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	18d2      	adds	r2, r2, r3
 8004bdc:	213c      	movs	r1, #60	; 0x3c
 8004bde:	187b      	adds	r3, r7, r1
 8004be0:	8812      	ldrh	r2, [r2, #0]
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	2240      	movs	r2, #64	; 0x40
 8004bea:	4013      	ands	r3, r2
 8004bec:	d016      	beq.n	8004c1c <USB_ActivateEndpoint+0x554>
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	18d3      	adds	r3, r2, r3
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	203a      	movs	r0, #58	; 0x3a
 8004bfe:	183b      	adds	r3, r7, r0
 8004c00:	495b      	ldr	r1, [pc, #364]	; (8004d70 <USB_ActivateEndpoint+0x6a8>)
 8004c02:	400a      	ands	r2, r1
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	18d3      	adds	r3, r2, r3
 8004c10:	183a      	adds	r2, r7, r0
 8004c12:	8812      	ldrh	r2, [r2, #0]
 8004c14:	495d      	ldr	r1, [pc, #372]	; (8004d8c <USB_ActivateEndpoint+0x6c4>)
 8004c16:	430a      	orrs	r2, r1
 8004c18:	b292      	uxth	r2, r2
 8004c1a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	18d3      	adds	r3, r2, r3
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	2038      	movs	r0, #56	; 0x38
 8004c2c:	183b      	adds	r3, r7, r0
 8004c2e:	4952      	ldr	r1, [pc, #328]	; (8004d78 <USB_ActivateEndpoint+0x6b0>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	183b      	adds	r3, r7, r0
 8004c36:	183a      	adds	r2, r7, r0
 8004c38:	8812      	ldrh	r2, [r2, #0]
 8004c3a:	2180      	movs	r1, #128	; 0x80
 8004c3c:	0149      	lsls	r1, r1, #5
 8004c3e:	404a      	eors	r2, r1
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	183b      	adds	r3, r7, r0
 8004c44:	183a      	adds	r2, r7, r0
 8004c46:	8812      	ldrh	r2, [r2, #0]
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	0189      	lsls	r1, r1, #6
 8004c4c:	404a      	eors	r2, r1
 8004c4e:	801a      	strh	r2, [r3, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	18d3      	adds	r3, r2, r3
 8004c5a:	183a      	adds	r2, r7, r0
 8004c5c:	8812      	ldrh	r2, [r2, #0]
 8004c5e:	4947      	ldr	r1, [pc, #284]	; (8004d7c <USB_ActivateEndpoint+0x6b4>)
 8004c60:	430a      	orrs	r2, r1
 8004c62:	b292      	uxth	r2, r2
 8004c64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	18d3      	adds	r3, r2, r3
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	2036      	movs	r0, #54	; 0x36
 8004c76:	183b      	adds	r3, r7, r0
 8004c78:	4945      	ldr	r1, [pc, #276]	; (8004d90 <USB_ActivateEndpoint+0x6c8>)
 8004c7a:	400a      	ands	r2, r1
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	18d3      	adds	r3, r2, r3
 8004c88:	183a      	adds	r2, r7, r0
 8004c8a:	8812      	ldrh	r2, [r2, #0]
 8004c8c:	493b      	ldr	r1, [pc, #236]	; (8004d7c <USB_ActivateEndpoint+0x6b4>)
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	b292      	uxth	r2, r2
 8004c92:	801a      	strh	r2, [r3, #0]
 8004c94:	e0ac      	b.n	8004df0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	18d2      	adds	r2, r2, r3
 8004ca0:	214e      	movs	r1, #78	; 0x4e
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	8812      	ldrh	r2, [r2, #0]
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	187b      	adds	r3, r7, r1
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	01db      	lsls	r3, r3, #7
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d016      	beq.n	8004ce2 <USB_ActivateEndpoint+0x61a>
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	204c      	movs	r0, #76	; 0x4c
 8004cc4:	183b      	adds	r3, r7, r0
 8004cc6:	492a      	ldr	r1, [pc, #168]	; (8004d70 <USB_ActivateEndpoint+0x6a8>)
 8004cc8:	400a      	ands	r2, r1
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	183a      	adds	r2, r7, r0
 8004cd8:	8812      	ldrh	r2, [r2, #0]
 8004cda:	4926      	ldr	r1, [pc, #152]	; (8004d74 <USB_ActivateEndpoint+0x6ac>)
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	18d2      	adds	r2, r2, r3
 8004cec:	214a      	movs	r1, #74	; 0x4a
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	187b      	adds	r3, r7, r1
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	2240      	movs	r2, #64	; 0x40
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d016      	beq.n	8004d2c <USB_ActivateEndpoint+0x664>
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	2048      	movs	r0, #72	; 0x48
 8004d0e:	183b      	adds	r3, r7, r0
 8004d10:	4917      	ldr	r1, [pc, #92]	; (8004d70 <USB_ActivateEndpoint+0x6a8>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	18d3      	adds	r3, r2, r3
 8004d20:	183a      	adds	r2, r7, r0
 8004d22:	8812      	ldrh	r2, [r2, #0]
 8004d24:	4919      	ldr	r1, [pc, #100]	; (8004d8c <USB_ActivateEndpoint+0x6c4>)
 8004d26:	430a      	orrs	r2, r1
 8004d28:	b292      	uxth	r2, r2
 8004d2a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	78db      	ldrb	r3, [r3, #3]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d02f      	beq.n	8004d94 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	18d3      	adds	r3, r2, r3
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	2044      	movs	r0, #68	; 0x44
 8004d44:	183b      	adds	r3, r7, r0
 8004d46:	4912      	ldr	r1, [pc, #72]	; (8004d90 <USB_ActivateEndpoint+0x6c8>)
 8004d48:	400a      	ands	r2, r1
 8004d4a:	801a      	strh	r2, [r3, #0]
 8004d4c:	183b      	adds	r3, r7, r0
 8004d4e:	183a      	adds	r2, r7, r0
 8004d50:	8812      	ldrh	r2, [r2, #0]
 8004d52:	2120      	movs	r1, #32
 8004d54:	404a      	eors	r2, r1
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	18d3      	adds	r3, r2, r3
 8004d62:	183a      	adds	r2, r7, r0
 8004d64:	8812      	ldrh	r2, [r2, #0]
 8004d66:	4905      	ldr	r1, [pc, #20]	; (8004d7c <USB_ActivateEndpoint+0x6b4>)
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	b292      	uxth	r2, r2
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	e028      	b.n	8004dc2 <USB_ActivateEndpoint+0x6fa>
 8004d70:	ffff8f8f 	.word	0xffff8f8f
 8004d74:	ffffc080 	.word	0xffffc080
 8004d78:	ffffbf8f 	.word	0xffffbf8f
 8004d7c:	ffff8080 	.word	0xffff8080
 8004d80:	ffff8180 	.word	0xffff8180
 8004d84:	ffff8e8f 	.word	0xffff8e8f
 8004d88:	00000404 	.word	0x00000404
 8004d8c:	ffff80c0 	.word	0xffff80c0
 8004d90:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	18d3      	adds	r3, r2, r3
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	2046      	movs	r0, #70	; 0x46
 8004da4:	183b      	adds	r3, r7, r0
 8004da6:	4916      	ldr	r1, [pc, #88]	; (8004e00 <USB_ActivateEndpoint+0x738>)
 8004da8:	400a      	ands	r2, r1
 8004daa:	801a      	strh	r2, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	18d3      	adds	r3, r2, r3
 8004db6:	183a      	adds	r2, r7, r0
 8004db8:	8812      	ldrh	r2, [r2, #0]
 8004dba:	4912      	ldr	r1, [pc, #72]	; (8004e04 <USB_ActivateEndpoint+0x73c>)
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	b292      	uxth	r2, r2
 8004dc0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	18d3      	adds	r3, r2, r3
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	2042      	movs	r0, #66	; 0x42
 8004dd2:	183b      	adds	r3, r7, r0
 8004dd4:	490c      	ldr	r1, [pc, #48]	; (8004e08 <USB_ActivateEndpoint+0x740>)
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	18d3      	adds	r3, r2, r3
 8004de4:	183a      	adds	r2, r7, r0
 8004de6:	8812      	ldrh	r2, [r2, #0]
 8004de8:	4906      	ldr	r1, [pc, #24]	; (8004e04 <USB_ActivateEndpoint+0x73c>)
 8004dea:	430a      	orrs	r2, r1
 8004dec:	b292      	uxth	r2, r2
 8004dee:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004df0:	236f      	movs	r3, #111	; 0x6f
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	781b      	ldrb	r3, [r3, #0]
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b01c      	add	sp, #112	; 0x70
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	ffff8fbf 	.word	0xffff8fbf
 8004e04:	ffff8080 	.word	0xffff8080
 8004e08:	ffffbf8f 	.word	0xffffbf8f

08004e0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	7b1b      	ldrb	r3, [r3, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d000      	beq.n	8004e20 <USB_DeactivateEndpoint+0x14>
 8004e1e:	e07e      	b.n	8004f1e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d03c      	beq.n	8004ea2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	18d2      	adds	r2, r2, r3
 8004e32:	210c      	movs	r1, #12
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	8812      	ldrh	r2, [r2, #0]
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	187b      	adds	r3, r7, r1
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	2240      	movs	r2, #64	; 0x40
 8004e40:	4013      	ands	r3, r2
 8004e42:	d016      	beq.n	8004e72 <USB_DeactivateEndpoint+0x66>
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	18d3      	adds	r3, r2, r3
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	200a      	movs	r0, #10
 8004e54:	183b      	adds	r3, r7, r0
 8004e56:	49c7      	ldr	r1, [pc, #796]	; (8005174 <USB_DeactivateEndpoint+0x368>)
 8004e58:	400a      	ands	r2, r1
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	18d3      	adds	r3, r2, r3
 8004e66:	183a      	adds	r2, r7, r0
 8004e68:	8812      	ldrh	r2, [r2, #0]
 8004e6a:	49c3      	ldr	r1, [pc, #780]	; (8005178 <USB_DeactivateEndpoint+0x36c>)
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	18d3      	adds	r3, r2, r3
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	2008      	movs	r0, #8
 8004e82:	183b      	adds	r3, r7, r0
 8004e84:	49bd      	ldr	r1, [pc, #756]	; (800517c <USB_DeactivateEndpoint+0x370>)
 8004e86:	400a      	ands	r2, r1
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	18d3      	adds	r3, r2, r3
 8004e94:	183a      	adds	r2, r7, r0
 8004e96:	8812      	ldrh	r2, [r2, #0]
 8004e98:	49b9      	ldr	r1, [pc, #740]	; (8005180 <USB_DeactivateEndpoint+0x374>)
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	b292      	uxth	r2, r2
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	e163      	b.n	800516a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	18d2      	adds	r2, r2, r3
 8004eac:	2112      	movs	r1, #18
 8004eae:	187b      	adds	r3, r7, r1
 8004eb0:	8812      	ldrh	r2, [r2, #0]
 8004eb2:	801a      	strh	r2, [r3, #0]
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	881a      	ldrh	r2, [r3, #0]
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	01db      	lsls	r3, r3, #7
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d016      	beq.n	8004eee <USB_DeactivateEndpoint+0xe2>
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	18d3      	adds	r3, r2, r3
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	2010      	movs	r0, #16
 8004ed0:	183b      	adds	r3, r7, r0
 8004ed2:	49a8      	ldr	r1, [pc, #672]	; (8005174 <USB_DeactivateEndpoint+0x368>)
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	18d3      	adds	r3, r2, r3
 8004ee2:	183a      	adds	r2, r7, r0
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	49a7      	ldr	r1, [pc, #668]	; (8005184 <USB_DeactivateEndpoint+0x378>)
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	b292      	uxth	r2, r2
 8004eec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	18d3      	adds	r3, r2, r3
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	200e      	movs	r0, #14
 8004efe:	183b      	adds	r3, r7, r0
 8004f00:	49a1      	ldr	r1, [pc, #644]	; (8005188 <USB_DeactivateEndpoint+0x37c>)
 8004f02:	400a      	ands	r2, r1
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	18d3      	adds	r3, r2, r3
 8004f10:	183a      	adds	r2, r7, r0
 8004f12:	8812      	ldrh	r2, [r2, #0]
 8004f14:	499a      	ldr	r1, [pc, #616]	; (8005180 <USB_DeactivateEndpoint+0x374>)
 8004f16:	430a      	orrs	r2, r1
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	e125      	b.n	800516a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d000      	beq.n	8004f28 <USB_DeactivateEndpoint+0x11c>
 8004f26:	e090      	b.n	800504a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	18d2      	adds	r2, r2, r3
 8004f32:	2120      	movs	r1, #32
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	8812      	ldrh	r2, [r2, #0]
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	187b      	adds	r3, r7, r1
 8004f3c:	881a      	ldrh	r2, [r3, #0]
 8004f3e:	2380      	movs	r3, #128	; 0x80
 8004f40:	01db      	lsls	r3, r3, #7
 8004f42:	4013      	ands	r3, r2
 8004f44:	d016      	beq.n	8004f74 <USB_DeactivateEndpoint+0x168>
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	18d3      	adds	r3, r2, r3
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	201e      	movs	r0, #30
 8004f56:	183b      	adds	r3, r7, r0
 8004f58:	4986      	ldr	r1, [pc, #536]	; (8005174 <USB_DeactivateEndpoint+0x368>)
 8004f5a:	400a      	ands	r2, r1
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	18d3      	adds	r3, r2, r3
 8004f68:	183a      	adds	r2, r7, r0
 8004f6a:	8812      	ldrh	r2, [r2, #0]
 8004f6c:	4985      	ldr	r1, [pc, #532]	; (8005184 <USB_DeactivateEndpoint+0x378>)
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	b292      	uxth	r2, r2
 8004f72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	18d2      	adds	r2, r2, r3
 8004f7e:	211c      	movs	r1, #28
 8004f80:	187b      	adds	r3, r7, r1
 8004f82:	8812      	ldrh	r2, [r2, #0]
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	2240      	movs	r2, #64	; 0x40
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d016      	beq.n	8004fbe <USB_DeactivateEndpoint+0x1b2>
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	18d3      	adds	r3, r2, r3
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	201a      	movs	r0, #26
 8004fa0:	183b      	adds	r3, r7, r0
 8004fa2:	4974      	ldr	r1, [pc, #464]	; (8005174 <USB_DeactivateEndpoint+0x368>)
 8004fa4:	400a      	ands	r2, r1
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	18d3      	adds	r3, r2, r3
 8004fb2:	183a      	adds	r2, r7, r0
 8004fb4:	8812      	ldrh	r2, [r2, #0]
 8004fb6:	4970      	ldr	r1, [pc, #448]	; (8005178 <USB_DeactivateEndpoint+0x36c>)
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	b292      	uxth	r2, r2
 8004fbc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	2018      	movs	r0, #24
 8004fce:	183b      	adds	r3, r7, r0
 8004fd0:	4968      	ldr	r1, [pc, #416]	; (8005174 <USB_DeactivateEndpoint+0x368>)
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	18d3      	adds	r3, r2, r3
 8004fe0:	183a      	adds	r2, r7, r0
 8004fe2:	8812      	ldrh	r2, [r2, #0]
 8004fe4:	4964      	ldr	r1, [pc, #400]	; (8005178 <USB_DeactivateEndpoint+0x36c>)
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	b292      	uxth	r2, r2
 8004fea:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	18d3      	adds	r3, r2, r3
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	2016      	movs	r0, #22
 8004ffc:	183b      	adds	r3, r7, r0
 8004ffe:	4962      	ldr	r1, [pc, #392]	; (8005188 <USB_DeactivateEndpoint+0x37c>)
 8005000:	400a      	ands	r2, r1
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	18d3      	adds	r3, r2, r3
 800500e:	183a      	adds	r2, r7, r0
 8005010:	8812      	ldrh	r2, [r2, #0]
 8005012:	495b      	ldr	r1, [pc, #364]	; (8005180 <USB_DeactivateEndpoint+0x374>)
 8005014:	430a      	orrs	r2, r1
 8005016:	b292      	uxth	r2, r2
 8005018:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	18d3      	adds	r3, r2, r3
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29a      	uxth	r2, r3
 8005028:	2014      	movs	r0, #20
 800502a:	183b      	adds	r3, r7, r0
 800502c:	4953      	ldr	r1, [pc, #332]	; (800517c <USB_DeactivateEndpoint+0x370>)
 800502e:	400a      	ands	r2, r1
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	18d3      	adds	r3, r2, r3
 800503c:	183a      	adds	r2, r7, r0
 800503e:	8812      	ldrh	r2, [r2, #0]
 8005040:	494f      	ldr	r1, [pc, #316]	; (8005180 <USB_DeactivateEndpoint+0x374>)
 8005042:	430a      	orrs	r2, r1
 8005044:	b292      	uxth	r2, r2
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	e08f      	b.n	800516a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	18d2      	adds	r2, r2, r3
 8005054:	212e      	movs	r1, #46	; 0x2e
 8005056:	187b      	adds	r3, r7, r1
 8005058:	8812      	ldrh	r2, [r2, #0]
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	187b      	adds	r3, r7, r1
 800505e:	881a      	ldrh	r2, [r3, #0]
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	01db      	lsls	r3, r3, #7
 8005064:	4013      	ands	r3, r2
 8005066:	d016      	beq.n	8005096 <USB_DeactivateEndpoint+0x28a>
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	18d3      	adds	r3, r2, r3
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29a      	uxth	r2, r3
 8005076:	202c      	movs	r0, #44	; 0x2c
 8005078:	183b      	adds	r3, r7, r0
 800507a:	493e      	ldr	r1, [pc, #248]	; (8005174 <USB_DeactivateEndpoint+0x368>)
 800507c:	400a      	ands	r2, r1
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	18d3      	adds	r3, r2, r3
 800508a:	183a      	adds	r2, r7, r0
 800508c:	8812      	ldrh	r2, [r2, #0]
 800508e:	493d      	ldr	r1, [pc, #244]	; (8005184 <USB_DeactivateEndpoint+0x378>)
 8005090:	430a      	orrs	r2, r1
 8005092:	b292      	uxth	r2, r2
 8005094:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	18d2      	adds	r2, r2, r3
 80050a0:	212a      	movs	r1, #42	; 0x2a
 80050a2:	187b      	adds	r3, r7, r1
 80050a4:	8812      	ldrh	r2, [r2, #0]
 80050a6:	801a      	strh	r2, [r3, #0]
 80050a8:	187b      	adds	r3, r7, r1
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	2240      	movs	r2, #64	; 0x40
 80050ae:	4013      	ands	r3, r2
 80050b0:	d016      	beq.n	80050e0 <USB_DeactivateEndpoint+0x2d4>
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	18d3      	adds	r3, r2, r3
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29a      	uxth	r2, r3
 80050c0:	2028      	movs	r0, #40	; 0x28
 80050c2:	183b      	adds	r3, r7, r0
 80050c4:	492b      	ldr	r1, [pc, #172]	; (8005174 <USB_DeactivateEndpoint+0x368>)
 80050c6:	400a      	ands	r2, r1
 80050c8:	801a      	strh	r2, [r3, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	18d3      	adds	r3, r2, r3
 80050d4:	183a      	adds	r2, r7, r0
 80050d6:	8812      	ldrh	r2, [r2, #0]
 80050d8:	4927      	ldr	r1, [pc, #156]	; (8005178 <USB_DeactivateEndpoint+0x36c>)
 80050da:	430a      	orrs	r2, r1
 80050dc:	b292      	uxth	r2, r2
 80050de:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	18d3      	adds	r3, r2, r3
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	2026      	movs	r0, #38	; 0x26
 80050f0:	183b      	adds	r3, r7, r0
 80050f2:	4920      	ldr	r1, [pc, #128]	; (8005174 <USB_DeactivateEndpoint+0x368>)
 80050f4:	400a      	ands	r2, r1
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	18d3      	adds	r3, r2, r3
 8005102:	183a      	adds	r2, r7, r0
 8005104:	8812      	ldrh	r2, [r2, #0]
 8005106:	491f      	ldr	r1, [pc, #124]	; (8005184 <USB_DeactivateEndpoint+0x378>)
 8005108:	430a      	orrs	r2, r1
 800510a:	b292      	uxth	r2, r2
 800510c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	18d3      	adds	r3, r2, r3
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29a      	uxth	r2, r3
 800511c:	2024      	movs	r0, #36	; 0x24
 800511e:	183b      	adds	r3, r7, r0
 8005120:	4916      	ldr	r1, [pc, #88]	; (800517c <USB_DeactivateEndpoint+0x370>)
 8005122:	400a      	ands	r2, r1
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	18d3      	adds	r3, r2, r3
 8005130:	183a      	adds	r2, r7, r0
 8005132:	8812      	ldrh	r2, [r2, #0]
 8005134:	4912      	ldr	r1, [pc, #72]	; (8005180 <USB_DeactivateEndpoint+0x374>)
 8005136:	430a      	orrs	r2, r1
 8005138:	b292      	uxth	r2, r2
 800513a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	18d3      	adds	r3, r2, r3
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29a      	uxth	r2, r3
 800514a:	2022      	movs	r0, #34	; 0x22
 800514c:	183b      	adds	r3, r7, r0
 800514e:	490e      	ldr	r1, [pc, #56]	; (8005188 <USB_DeactivateEndpoint+0x37c>)
 8005150:	400a      	ands	r2, r1
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	18d3      	adds	r3, r2, r3
 800515e:	183a      	adds	r2, r7, r0
 8005160:	8812      	ldrh	r2, [r2, #0]
 8005162:	4907      	ldr	r1, [pc, #28]	; (8005180 <USB_DeactivateEndpoint+0x374>)
 8005164:	430a      	orrs	r2, r1
 8005166:	b292      	uxth	r2, r2
 8005168:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b00c      	add	sp, #48	; 0x30
 8005172:	bd80      	pop	{r7, pc}
 8005174:	ffff8f8f 	.word	0xffff8f8f
 8005178:	ffff80c0 	.word	0xffff80c0
 800517c:	ffff8fbf 	.word	0xffff8fbf
 8005180:	ffff8080 	.word	0xffff8080
 8005184:	ffffc080 	.word	0xffffc080
 8005188:	ffffbf8f 	.word	0xffffbf8f

0800518c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b0c3      	sub	sp, #268	; 0x10c
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d001      	beq.n	80051a2 <USB_EPStartXfer+0x16>
 800519e:	f000 fd2d 	bl	8005bfc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d905      	bls.n	80051ba <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	1d7a      	adds	r2, r7, #5
 80051b4:	32ff      	adds	r2, #255	; 0xff
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	e004      	b.n	80051c4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	1d7a      	adds	r2, r7, #5
 80051c0:	32ff      	adds	r2, #255	; 0xff
 80051c2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7b1b      	ldrb	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d125      	bne.n	8005218 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6959      	ldr	r1, [r3, #20]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	88da      	ldrh	r2, [r3, #6]
 80051d4:	1d7b      	adds	r3, r7, #5
 80051d6:	33ff      	adds	r3, #255	; 0xff
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 fa47 	bl	8006670 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2250      	movs	r2, #80	; 0x50
 80051ea:	5a9b      	ldrh	r3, [r3, r2]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	001a      	movs	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	189b      	adds	r3, r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	00da      	lsls	r2, r3, #3
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	4ad7      	ldr	r2, [pc, #860]	; (8005560 <USB_EPStartXfer+0x3d4>)
 8005202:	4694      	mov	ip, r2
 8005204:	4463      	add	r3, ip
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	1d7b      	adds	r3, r7, #5
 800520a:	33ff      	adds	r3, #255	; 0xff
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	f000 fccd 	bl	8005bb2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d000      	beq.n	8005222 <USB_EPStartXfer+0x96>
 8005220:	e362      	b.n	80058e8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6a1a      	ldr	r2, [r3, #32]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	429a      	cmp	r2, r3
 800522c:	d800      	bhi.n	8005230 <USB_EPStartXfer+0xa4>
 800522e:	e309      	b.n	8005844 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	18d3      	adds	r3, r2, r3
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29a      	uxth	r2, r3
 800523e:	2056      	movs	r0, #86	; 0x56
 8005240:	183b      	adds	r3, r7, r0
 8005242:	49c8      	ldr	r1, [pc, #800]	; (8005564 <USB_EPStartXfer+0x3d8>)
 8005244:	400a      	ands	r2, r1
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	18d3      	adds	r3, r2, r3
 8005252:	183a      	adds	r2, r7, r0
 8005254:	8812      	ldrh	r2, [r2, #0]
 8005256:	49c4      	ldr	r1, [pc, #784]	; (8005568 <USB_EPStartXfer+0x3dc>)
 8005258:	430a      	orrs	r2, r1
 800525a:	b292      	uxth	r2, r2
 800525c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	1d7b      	adds	r3, r7, #5
 8005264:	33ff      	adds	r3, #255	; 0xff
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	1ad2      	subs	r2, r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	18d3      	adds	r3, r2, r3
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	001a      	movs	r2, r3
 800527e:	2340      	movs	r3, #64	; 0x40
 8005280:	4013      	ands	r3, r2
 8005282:	d100      	bne.n	8005286 <USB_EPStartXfer+0xfa>
 8005284:	e176      	b.n	8005574 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	633b      	str	r3, [r7, #48]	; 0x30
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d000      	beq.n	8005294 <USB_EPStartXfer+0x108>
 8005292:	e074      	b.n	800537e <USB_EPStartXfer+0x1f2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2250      	movs	r2, #80	; 0x50
 800529c:	5a9b      	ldrh	r3, [r3, r2]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	001a      	movs	r2, r3
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	189b      	adds	r3, r3, r2
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	00da      	lsls	r2, r3, #3
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	18d3      	adds	r3, r2, r3
 80052b2:	4aae      	ldr	r2, [pc, #696]	; (800556c <USB_EPStartXfer+0x3e0>)
 80052b4:	4694      	mov	ip, r2
 80052b6:	4463      	add	r3, ip
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	059b      	lsls	r3, r3, #22
 80052c2:	0d9b      	lsrs	r3, r3, #22
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	1d7b      	adds	r3, r7, #5
 80052cc:	33ff      	adds	r3, #255	; 0xff
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b3e      	cmp	r3, #62	; 0x3e
 80052d2:	d924      	bls.n	800531e <USB_EPStartXfer+0x192>
 80052d4:	1d7b      	adds	r3, r7, #5
 80052d6:	33ff      	adds	r3, #255	; 0xff
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	1c7a      	adds	r2, r7, #1
 80052de:	32ff      	adds	r2, #255	; 0xff
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	1d7b      	adds	r3, r7, #5
 80052e4:	33ff      	adds	r3, #255	; 0xff
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	221f      	movs	r2, #31
 80052ea:	4013      	ands	r3, r2
 80052ec:	d106      	bne.n	80052fc <USB_EPStartXfer+0x170>
 80052ee:	1c7b      	adds	r3, r7, #1
 80052f0:	33ff      	adds	r3, #255	; 0xff
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	1c7a      	adds	r2, r7, #1
 80052f8:	32ff      	adds	r2, #255	; 0xff
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29a      	uxth	r2, r3
 8005302:	1c7b      	adds	r3, r7, #1
 8005304:	33ff      	adds	r3, #255	; 0xff
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	029b      	lsls	r3, r3, #10
 800530c:	b29b      	uxth	r3, r3
 800530e:	4313      	orrs	r3, r2
 8005310:	b29b      	uxth	r3, r3
 8005312:	4a97      	ldr	r2, [pc, #604]	; (8005570 <USB_EPStartXfer+0x3e4>)
 8005314:	4313      	orrs	r3, r2
 8005316:	b29a      	uxth	r2, r3
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e04a      	b.n	80053b4 <USB_EPStartXfer+0x228>
 800531e:	1d7b      	adds	r3, r7, #5
 8005320:	33ff      	adds	r3, #255	; 0xff
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d108      	bne.n	800533a <USB_EPStartXfer+0x1ae>
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	4a90      	ldr	r2, [pc, #576]	; (8005570 <USB_EPStartXfer+0x3e4>)
 8005330:	4313      	orrs	r3, r2
 8005332:	b29a      	uxth	r2, r3
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e03c      	b.n	80053b4 <USB_EPStartXfer+0x228>
 800533a:	1d7b      	adds	r3, r7, #5
 800533c:	33ff      	adds	r3, #255	; 0xff
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	1c7a      	adds	r2, r7, #1
 8005344:	32ff      	adds	r2, #255	; 0xff
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	1d7b      	adds	r3, r7, #5
 800534a:	33ff      	adds	r3, #255	; 0xff
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	4013      	ands	r3, r2
 8005352:	d006      	beq.n	8005362 <USB_EPStartXfer+0x1d6>
 8005354:	1c7b      	adds	r3, r7, #1
 8005356:	33ff      	adds	r3, #255	; 0xff
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3301      	adds	r3, #1
 800535c:	1c7a      	adds	r2, r7, #1
 800535e:	32ff      	adds	r2, #255	; 0xff
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29a      	uxth	r2, r3
 8005368:	1c7b      	adds	r3, r7, #1
 800536a:	33ff      	adds	r3, #255	; 0xff
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	b29b      	uxth	r3, r3
 8005374:	4313      	orrs	r3, r2
 8005376:	b29a      	uxth	r2, r3
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	801a      	strh	r2, [r3, #0]
 800537c:	e01a      	b.n	80053b4 <USB_EPStartXfer+0x228>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	785b      	ldrb	r3, [r3, #1]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d116      	bne.n	80053b4 <USB_EPStartXfer+0x228>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2250      	movs	r2, #80	; 0x50
 800538a:	5a9b      	ldrh	r3, [r3, r2]
 800538c:	b29b      	uxth	r3, r3
 800538e:	001a      	movs	r2, r3
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	189b      	adds	r3, r3, r2
 8005394:	633b      	str	r3, [r7, #48]	; 0x30
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	00da      	lsls	r2, r3, #3
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	18d3      	adds	r3, r2, r3
 80053a0:	4a72      	ldr	r2, [pc, #456]	; (800556c <USB_EPStartXfer+0x3e0>)
 80053a2:	4694      	mov	ip, r2
 80053a4:	4463      	add	r3, ip
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a8:	1d7b      	adds	r3, r7, #5
 80053aa:	33ff      	adds	r3, #255	; 0xff
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053b4:	2076      	movs	r0, #118	; 0x76
 80053b6:	183b      	adds	r3, r7, r0
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	8952      	ldrh	r2, [r2, #10]
 80053bc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6959      	ldr	r1, [r3, #20]
 80053c2:	1d7b      	adds	r3, r7, #5
 80053c4:	33ff      	adds	r3, #255	; 0xff
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	b29c      	uxth	r4, r3
 80053ca:	183b      	adds	r3, r7, r0
 80053cc:	881a      	ldrh	r2, [r3, #0]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	0023      	movs	r3, r4
 80053d2:	f001 f94d 	bl	8006670 <USB_WritePMA>
            ep->xfer_buff += len;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	1d7b      	adds	r3, r7, #5
 80053dc:	33ff      	adds	r3, #255	; 0xff
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	18d2      	adds	r2, r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6a1a      	ldr	r2, [r3, #32]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d908      	bls.n	8005404 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	1d7b      	adds	r3, r7, #5
 80053f8:	33ff      	adds	r3, #255	; 0xff
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	1ad2      	subs	r2, r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	621a      	str	r2, [r3, #32]
 8005402:	e007      	b.n	8005414 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	1d7a      	adds	r2, r7, #5
 800540a:	32ff      	adds	r2, #255	; 0xff
 800540c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2200      	movs	r2, #0
 8005412:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	785b      	ldrb	r3, [r3, #1]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d000      	beq.n	800541e <USB_EPStartXfer+0x292>
 800541c:	e070      	b.n	8005500 <USB_EPStartXfer+0x374>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2250      	movs	r2, #80	; 0x50
 8005426:	5a9b      	ldrh	r3, [r3, r2]
 8005428:	b29b      	uxth	r3, r3
 800542a:	001a      	movs	r2, r3
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	189b      	adds	r3, r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	00da      	lsls	r2, r3, #3
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	18d3      	adds	r3, r2, r3
 800543c:	4a48      	ldr	r2, [pc, #288]	; (8005560 <USB_EPStartXfer+0x3d4>)
 800543e:	4694      	mov	ip, r2
 8005440:	4463      	add	r3, ip
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	059b      	lsls	r3, r3, #22
 800544c:	0d9b      	lsrs	r3, r3, #22
 800544e:	b29a      	uxth	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	1d7b      	adds	r3, r7, #5
 8005456:	33ff      	adds	r3, #255	; 0xff
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b3e      	cmp	r3, #62	; 0x3e
 800545c:	d922      	bls.n	80054a4 <USB_EPStartXfer+0x318>
 800545e:	1d7b      	adds	r3, r7, #5
 8005460:	33ff      	adds	r3, #255	; 0xff
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	21fc      	movs	r1, #252	; 0xfc
 8005468:	187a      	adds	r2, r7, r1
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	1d7b      	adds	r3, r7, #5
 800546e:	33ff      	adds	r3, #255	; 0xff
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	221f      	movs	r2, #31
 8005474:	4013      	ands	r3, r2
 8005476:	d104      	bne.n	8005482 <USB_EPStartXfer+0x2f6>
 8005478:	187b      	adds	r3, r7, r1
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3b01      	subs	r3, #1
 800547e:	187a      	adds	r2, r7, r1
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29a      	uxth	r2, r3
 8005488:	23fc      	movs	r3, #252	; 0xfc
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	b29b      	uxth	r3, r3
 8005494:	4313      	orrs	r3, r2
 8005496:	b29b      	uxth	r3, r3
 8005498:	4a35      	ldr	r2, [pc, #212]	; (8005570 <USB_EPStartXfer+0x3e4>)
 800549a:	4313      	orrs	r3, r2
 800549c:	b29a      	uxth	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	e04a      	b.n	800553a <USB_EPStartXfer+0x3ae>
 80054a4:	1d7b      	adds	r3, r7, #5
 80054a6:	33ff      	adds	r3, #255	; 0xff
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <USB_EPStartXfer+0x334>
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	4a2e      	ldr	r2, [pc, #184]	; (8005570 <USB_EPStartXfer+0x3e4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	e03c      	b.n	800553a <USB_EPStartXfer+0x3ae>
 80054c0:	1d7b      	adds	r3, r7, #5
 80054c2:	33ff      	adds	r3, #255	; 0xff
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	21fc      	movs	r1, #252	; 0xfc
 80054ca:	187a      	adds	r2, r7, r1
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	1d7b      	adds	r3, r7, #5
 80054d0:	33ff      	adds	r3, #255	; 0xff
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	4013      	ands	r3, r2
 80054d8:	d004      	beq.n	80054e4 <USB_EPStartXfer+0x358>
 80054da:	187b      	adds	r3, r7, r1
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3301      	adds	r3, #1
 80054e0:	187a      	adds	r2, r7, r1
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	23fc      	movs	r3, #252	; 0xfc
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	4313      	orrs	r3, r2
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	e01c      	b.n	800553a <USB_EPStartXfer+0x3ae>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d118      	bne.n	800553a <USB_EPStartXfer+0x3ae>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2250      	movs	r2, #80	; 0x50
 8005510:	5a9b      	ldrh	r3, [r3, r2]
 8005512:	b29b      	uxth	r3, r3
 8005514:	001a      	movs	r2, r3
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	189b      	adds	r3, r3, r2
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	00da      	lsls	r2, r3, #3
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	18d3      	adds	r3, r2, r3
 8005526:	4a0e      	ldr	r2, [pc, #56]	; (8005560 <USB_EPStartXfer+0x3d4>)
 8005528:	4694      	mov	ip, r2
 800552a:	4463      	add	r3, ip
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	1d7b      	adds	r3, r7, #5
 8005530:	33ff      	adds	r3, #255	; 0xff
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	b29a      	uxth	r2, r3
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800553a:	2076      	movs	r0, #118	; 0x76
 800553c:	183b      	adds	r3, r7, r0
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	8912      	ldrh	r2, [r2, #8]
 8005542:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	6959      	ldr	r1, [r3, #20]
 8005548:	1d7b      	adds	r3, r7, #5
 800554a:	33ff      	adds	r3, #255	; 0xff
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	b29c      	uxth	r4, r3
 8005550:	183b      	adds	r3, r7, r0
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	0023      	movs	r3, r4
 8005558:	f001 f88a 	bl	8006670 <USB_WritePMA>
 800555c:	e329      	b.n	8005bb2 <USB_EPStartXfer+0xa26>
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	00000402 	.word	0x00000402
 8005564:	ffff8f8f 	.word	0xffff8f8f
 8005568:	ffff8180 	.word	0xffff8180
 800556c:	00000406 	.word	0x00000406
 8005570:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d000      	beq.n	800557e <USB_EPStartXfer+0x3f2>
 800557c:	e070      	b.n	8005660 <USB_EPStartXfer+0x4d4>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	64bb      	str	r3, [r7, #72]	; 0x48
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2250      	movs	r2, #80	; 0x50
 8005586:	5a9b      	ldrh	r3, [r3, r2]
 8005588:	b29b      	uxth	r3, r3
 800558a:	001a      	movs	r2, r3
 800558c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800558e:	189b      	adds	r3, r3, r2
 8005590:	64bb      	str	r3, [r7, #72]	; 0x48
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	00da      	lsls	r2, r3, #3
 8005598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800559a:	18d3      	adds	r3, r2, r3
 800559c:	4acd      	ldr	r2, [pc, #820]	; (80058d4 <USB_EPStartXfer+0x748>)
 800559e:	4694      	mov	ip, r2
 80055a0:	4463      	add	r3, ip
 80055a2:	647b      	str	r3, [r7, #68]	; 0x44
 80055a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	059b      	lsls	r3, r3, #22
 80055ac:	0d9b      	lsrs	r3, r3, #22
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	1d7b      	adds	r3, r7, #5
 80055b6:	33ff      	adds	r3, #255	; 0xff
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b3e      	cmp	r3, #62	; 0x3e
 80055bc:	d922      	bls.n	8005604 <USB_EPStartXfer+0x478>
 80055be:	1d7b      	adds	r3, r7, #5
 80055c0:	33ff      	adds	r3, #255	; 0xff
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	21f8      	movs	r1, #248	; 0xf8
 80055c8:	187a      	adds	r2, r7, r1
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	1d7b      	adds	r3, r7, #5
 80055ce:	33ff      	adds	r3, #255	; 0xff
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	221f      	movs	r2, #31
 80055d4:	4013      	ands	r3, r2
 80055d6:	d104      	bne.n	80055e2 <USB_EPStartXfer+0x456>
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3b01      	subs	r3, #1
 80055de:	187a      	adds	r2, r7, r1
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	23f8      	movs	r3, #248	; 0xf8
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	4313      	orrs	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4ab7      	ldr	r2, [pc, #732]	; (80058d8 <USB_EPStartXfer+0x74c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	e04a      	b.n	800569a <USB_EPStartXfer+0x50e>
 8005604:	1d7b      	adds	r3, r7, #5
 8005606:	33ff      	adds	r3, #255	; 0xff
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d108      	bne.n	8005620 <USB_EPStartXfer+0x494>
 800560e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	4ab0      	ldr	r2, [pc, #704]	; (80058d8 <USB_EPStartXfer+0x74c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	b29a      	uxth	r2, r3
 800561a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e03c      	b.n	800569a <USB_EPStartXfer+0x50e>
 8005620:	1d7b      	adds	r3, r7, #5
 8005622:	33ff      	adds	r3, #255	; 0xff
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	085b      	lsrs	r3, r3, #1
 8005628:	21f8      	movs	r1, #248	; 0xf8
 800562a:	187a      	adds	r2, r7, r1
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	1d7b      	adds	r3, r7, #5
 8005630:	33ff      	adds	r3, #255	; 0xff
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2201      	movs	r2, #1
 8005636:	4013      	ands	r3, r2
 8005638:	d004      	beq.n	8005644 <USB_EPStartXfer+0x4b8>
 800563a:	187b      	adds	r3, r7, r1
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	187a      	adds	r2, r7, r1
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29a      	uxth	r2, r3
 800564a:	23f8      	movs	r3, #248	; 0xf8
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	029b      	lsls	r3, r3, #10
 8005654:	b29b      	uxth	r3, r3
 8005656:	4313      	orrs	r3, r2
 8005658:	b29a      	uxth	r2, r3
 800565a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	e01c      	b.n	800569a <USB_EPStartXfer+0x50e>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d118      	bne.n	800569a <USB_EPStartXfer+0x50e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	653b      	str	r3, [r7, #80]	; 0x50
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2250      	movs	r2, #80	; 0x50
 8005670:	5a9b      	ldrh	r3, [r3, r2]
 8005672:	b29b      	uxth	r3, r3
 8005674:	001a      	movs	r2, r3
 8005676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005678:	189b      	adds	r3, r3, r2
 800567a:	653b      	str	r3, [r7, #80]	; 0x50
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00da      	lsls	r2, r3, #3
 8005682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005684:	18d3      	adds	r3, r2, r3
 8005686:	4a93      	ldr	r2, [pc, #588]	; (80058d4 <USB_EPStartXfer+0x748>)
 8005688:	4694      	mov	ip, r2
 800568a:	4463      	add	r3, ip
 800568c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568e:	1d7b      	adds	r3, r7, #5
 8005690:	33ff      	adds	r3, #255	; 0xff
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	b29a      	uxth	r2, r3
 8005696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005698:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800569a:	2076      	movs	r0, #118	; 0x76
 800569c:	183b      	adds	r3, r7, r0
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	8912      	ldrh	r2, [r2, #8]
 80056a2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6959      	ldr	r1, [r3, #20]
 80056a8:	1d7b      	adds	r3, r7, #5
 80056aa:	33ff      	adds	r3, #255	; 0xff
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b29c      	uxth	r4, r3
 80056b0:	183b      	adds	r3, r7, r0
 80056b2:	881a      	ldrh	r2, [r3, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	0023      	movs	r3, r4
 80056b8:	f000 ffda 	bl	8006670 <USB_WritePMA>
            ep->xfer_buff += len;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	1d7b      	adds	r3, r7, #5
 80056c2:	33ff      	adds	r3, #255	; 0xff
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	18d2      	adds	r2, r2, r3
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d908      	bls.n	80056ea <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6a1a      	ldr	r2, [r3, #32]
 80056dc:	1d7b      	adds	r3, r7, #5
 80056de:	33ff      	adds	r3, #255	; 0xff
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	621a      	str	r2, [r3, #32]
 80056e8:	e007      	b.n	80056fa <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	1d7a      	adds	r2, r7, #5
 80056f0:	32ff      	adds	r2, #255	; 0xff
 80056f2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	643b      	str	r3, [r7, #64]	; 0x40
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d000      	beq.n	8005708 <USB_EPStartXfer+0x57c>
 8005706:	e070      	b.n	80057ea <USB_EPStartXfer+0x65e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2250      	movs	r2, #80	; 0x50
 8005710:	5a9b      	ldrh	r3, [r3, r2]
 8005712:	b29b      	uxth	r3, r3
 8005714:	001a      	movs	r2, r3
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	189b      	adds	r3, r3, r2
 800571a:	63bb      	str	r3, [r7, #56]	; 0x38
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	00da      	lsls	r2, r3, #3
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	18d3      	adds	r3, r2, r3
 8005726:	4a6d      	ldr	r2, [pc, #436]	; (80058dc <USB_EPStartXfer+0x750>)
 8005728:	4694      	mov	ip, r2
 800572a:	4463      	add	r3, ip
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
 800572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	059b      	lsls	r3, r3, #22
 8005736:	0d9b      	lsrs	r3, r3, #22
 8005738:	b29a      	uxth	r2, r3
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	1d7b      	adds	r3, r7, #5
 8005740:	33ff      	adds	r3, #255	; 0xff
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b3e      	cmp	r3, #62	; 0x3e
 8005746:	d922      	bls.n	800578e <USB_EPStartXfer+0x602>
 8005748:	1d7b      	adds	r3, r7, #5
 800574a:	33ff      	adds	r3, #255	; 0xff
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	21f4      	movs	r1, #244	; 0xf4
 8005752:	187a      	adds	r2, r7, r1
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	1d7b      	adds	r3, r7, #5
 8005758:	33ff      	adds	r3, #255	; 0xff
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	221f      	movs	r2, #31
 800575e:	4013      	ands	r3, r2
 8005760:	d104      	bne.n	800576c <USB_EPStartXfer+0x5e0>
 8005762:	187b      	adds	r3, r7, r1
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3b01      	subs	r3, #1
 8005768:	187a      	adds	r2, r7, r1
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29a      	uxth	r2, r3
 8005772:	23f4      	movs	r3, #244	; 0xf4
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	b29b      	uxth	r3, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	b29b      	uxth	r3, r3
 8005782:	4a55      	ldr	r2, [pc, #340]	; (80058d8 <USB_EPStartXfer+0x74c>)
 8005784:	4313      	orrs	r3, r2
 8005786:	b29a      	uxth	r2, r3
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	e048      	b.n	8005820 <USB_EPStartXfer+0x694>
 800578e:	1d7b      	adds	r3, r7, #5
 8005790:	33ff      	adds	r3, #255	; 0xff
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <USB_EPStartXfer+0x61e>
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	4a4e      	ldr	r2, [pc, #312]	; (80058d8 <USB_EPStartXfer+0x74c>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e03a      	b.n	8005820 <USB_EPStartXfer+0x694>
 80057aa:	1d7b      	adds	r3, r7, #5
 80057ac:	33ff      	adds	r3, #255	; 0xff
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	21f4      	movs	r1, #244	; 0xf4
 80057b4:	187a      	adds	r2, r7, r1
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	1d7b      	adds	r3, r7, #5
 80057ba:	33ff      	adds	r3, #255	; 0xff
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2201      	movs	r2, #1
 80057c0:	4013      	ands	r3, r2
 80057c2:	d004      	beq.n	80057ce <USB_EPStartXfer+0x642>
 80057c4:	187b      	adds	r3, r7, r1
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3301      	adds	r3, #1
 80057ca:	187a      	adds	r2, r7, r1
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	23f4      	movs	r3, #244	; 0xf4
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	029b      	lsls	r3, r3, #10
 80057de:	b29b      	uxth	r3, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	e01a      	b.n	8005820 <USB_EPStartXfer+0x694>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d116      	bne.n	8005820 <USB_EPStartXfer+0x694>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2250      	movs	r2, #80	; 0x50
 80057f6:	5a9b      	ldrh	r3, [r3, r2]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	001a      	movs	r2, r3
 80057fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fe:	189b      	adds	r3, r3, r2
 8005800:	643b      	str	r3, [r7, #64]	; 0x40
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	00da      	lsls	r2, r3, #3
 8005808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800580a:	18d3      	adds	r3, r2, r3
 800580c:	4a33      	ldr	r2, [pc, #204]	; (80058dc <USB_EPStartXfer+0x750>)
 800580e:	4694      	mov	ip, r2
 8005810:	4463      	add	r3, ip
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005814:	1d7b      	adds	r3, r7, #5
 8005816:	33ff      	adds	r3, #255	; 0xff
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	b29a      	uxth	r2, r3
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005820:	2076      	movs	r0, #118	; 0x76
 8005822:	183b      	adds	r3, r7, r0
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	8952      	ldrh	r2, [r2, #10]
 8005828:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6959      	ldr	r1, [r3, #20]
 800582e:	1d7b      	adds	r3, r7, #5
 8005830:	33ff      	adds	r3, #255	; 0xff
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	b29c      	uxth	r4, r3
 8005836:	183b      	adds	r3, r7, r0
 8005838:	881a      	ldrh	r2, [r3, #0]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	0023      	movs	r3, r4
 800583e:	f000 ff17 	bl	8006670 <USB_WritePMA>
 8005842:	e1b6      	b.n	8005bb2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	1d7a      	adds	r2, r7, #5
 800584a:	32ff      	adds	r2, #255	; 0xff
 800584c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	18d3      	adds	r3, r2, r3
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29a      	uxth	r2, r3
 800585c:	2062      	movs	r0, #98	; 0x62
 800585e:	183b      	adds	r3, r7, r0
 8005860:	491f      	ldr	r1, [pc, #124]	; (80058e0 <USB_EPStartXfer+0x754>)
 8005862:	400a      	ands	r2, r1
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	18d3      	adds	r3, r2, r3
 8005870:	183a      	adds	r2, r7, r0
 8005872:	8812      	ldrh	r2, [r2, #0]
 8005874:	491b      	ldr	r1, [pc, #108]	; (80058e4 <USB_EPStartXfer+0x758>)
 8005876:	430a      	orrs	r2, r1
 8005878:	b292      	uxth	r2, r2
 800587a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2250      	movs	r2, #80	; 0x50
 8005884:	5a9b      	ldrh	r3, [r3, r2]
 8005886:	b29b      	uxth	r3, r3
 8005888:	001a      	movs	r2, r3
 800588a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588c:	189b      	adds	r3, r3, r2
 800588e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	00da      	lsls	r2, r3, #3
 8005896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005898:	18d3      	adds	r3, r2, r3
 800589a:	4a0e      	ldr	r2, [pc, #56]	; (80058d4 <USB_EPStartXfer+0x748>)
 800589c:	4694      	mov	ip, r2
 800589e:	4463      	add	r3, ip
 80058a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80058a2:	1d7b      	adds	r3, r7, #5
 80058a4:	33ff      	adds	r3, #255	; 0xff
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058ae:	2076      	movs	r0, #118	; 0x76
 80058b0:	183b      	adds	r3, r7, r0
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	8912      	ldrh	r2, [r2, #8]
 80058b6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	6959      	ldr	r1, [r3, #20]
 80058bc:	1d7b      	adds	r3, r7, #5
 80058be:	33ff      	adds	r3, #255	; 0xff
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	b29c      	uxth	r4, r3
 80058c4:	183b      	adds	r3, r7, r0
 80058c6:	881a      	ldrh	r2, [r3, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	0023      	movs	r3, r4
 80058cc:	f000 fed0 	bl	8006670 <USB_WritePMA>
 80058d0:	e16f      	b.n	8005bb2 <USB_EPStartXfer+0xa26>
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	00000402 	.word	0x00000402
 80058d8:	ffff8000 	.word	0xffff8000
 80058dc:	00000406 	.word	0x00000406
 80058e0:	ffff8e8f 	.word	0xffff8e8f
 80058e4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6a1a      	ldr	r2, [r3, #32]
 80058ec:	1d7b      	adds	r3, r7, #5
 80058ee:	33ff      	adds	r3, #255	; 0xff
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	1ad2      	subs	r2, r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	18d3      	adds	r3, r2, r3
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	001a      	movs	r2, r3
 8005908:	2340      	movs	r3, #64	; 0x40
 800590a:	4013      	ands	r3, r2
 800590c:	d100      	bne.n	8005910 <USB_EPStartXfer+0x784>
 800590e:	e0a4      	b.n	8005a5a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	673b      	str	r3, [r7, #112]	; 0x70
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	785b      	ldrb	r3, [r3, #1]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d000      	beq.n	800591e <USB_EPStartXfer+0x792>
 800591c:	e070      	b.n	8005a00 <USB_EPStartXfer+0x874>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	66bb      	str	r3, [r7, #104]	; 0x68
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2250      	movs	r2, #80	; 0x50
 8005926:	5a9b      	ldrh	r3, [r3, r2]
 8005928:	b29b      	uxth	r3, r3
 800592a:	001a      	movs	r2, r3
 800592c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800592e:	189b      	adds	r3, r3, r2
 8005930:	66bb      	str	r3, [r7, #104]	; 0x68
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	00da      	lsls	r2, r3, #3
 8005938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800593a:	18d3      	adds	r3, r2, r3
 800593c:	4abc      	ldr	r2, [pc, #752]	; (8005c30 <USB_EPStartXfer+0xaa4>)
 800593e:	4694      	mov	ip, r2
 8005940:	4463      	add	r3, ip
 8005942:	667b      	str	r3, [r7, #100]	; 0x64
 8005944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	059b      	lsls	r3, r3, #22
 800594c:	0d9b      	lsrs	r3, r3, #22
 800594e:	b29a      	uxth	r2, r3
 8005950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	1d7b      	adds	r3, r7, #5
 8005956:	33ff      	adds	r3, #255	; 0xff
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b3e      	cmp	r3, #62	; 0x3e
 800595c:	d922      	bls.n	80059a4 <USB_EPStartXfer+0x818>
 800595e:	1d7b      	adds	r3, r7, #5
 8005960:	33ff      	adds	r3, #255	; 0xff
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	095b      	lsrs	r3, r3, #5
 8005966:	21f0      	movs	r1, #240	; 0xf0
 8005968:	187a      	adds	r2, r7, r1
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	1d7b      	adds	r3, r7, #5
 800596e:	33ff      	adds	r3, #255	; 0xff
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	221f      	movs	r2, #31
 8005974:	4013      	ands	r3, r2
 8005976:	d104      	bne.n	8005982 <USB_EPStartXfer+0x7f6>
 8005978:	187b      	adds	r3, r7, r1
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	187a      	adds	r2, r7, r1
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29a      	uxth	r2, r3
 8005988:	23f0      	movs	r3, #240	; 0xf0
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29b      	uxth	r3, r3
 8005994:	4313      	orrs	r3, r2
 8005996:	b29b      	uxth	r3, r3
 8005998:	4aa6      	ldr	r2, [pc, #664]	; (8005c34 <USB_EPStartXfer+0xaa8>)
 800599a:	4313      	orrs	r3, r2
 800599c:	b29a      	uxth	r2, r3
 800599e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e048      	b.n	8005a36 <USB_EPStartXfer+0x8aa>
 80059a4:	1d7b      	adds	r3, r7, #5
 80059a6:	33ff      	adds	r3, #255	; 0xff
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d108      	bne.n	80059c0 <USB_EPStartXfer+0x834>
 80059ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4a9f      	ldr	r2, [pc, #636]	; (8005c34 <USB_EPStartXfer+0xaa8>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e03a      	b.n	8005a36 <USB_EPStartXfer+0x8aa>
 80059c0:	1d7b      	adds	r3, r7, #5
 80059c2:	33ff      	adds	r3, #255	; 0xff
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	21f0      	movs	r1, #240	; 0xf0
 80059ca:	187a      	adds	r2, r7, r1
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	1d7b      	adds	r3, r7, #5
 80059d0:	33ff      	adds	r3, #255	; 0xff
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2201      	movs	r2, #1
 80059d6:	4013      	ands	r3, r2
 80059d8:	d004      	beq.n	80059e4 <USB_EPStartXfer+0x858>
 80059da:	187b      	adds	r3, r7, r1
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	187a      	adds	r2, r7, r1
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	23f0      	movs	r3, #240	; 0xf0
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	029b      	lsls	r3, r3, #10
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	4313      	orrs	r3, r2
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059fc:	801a      	strh	r2, [r3, #0]
 80059fe:	e01a      	b.n	8005a36 <USB_EPStartXfer+0x8aa>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d116      	bne.n	8005a36 <USB_EPStartXfer+0x8aa>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2250      	movs	r2, #80	; 0x50
 8005a0c:	5a9b      	ldrh	r3, [r3, r2]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	001a      	movs	r2, r3
 8005a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a14:	189b      	adds	r3, r3, r2
 8005a16:	673b      	str	r3, [r7, #112]	; 0x70
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	00da      	lsls	r2, r3, #3
 8005a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a20:	18d3      	adds	r3, r2, r3
 8005a22:	4a83      	ldr	r2, [pc, #524]	; (8005c30 <USB_EPStartXfer+0xaa4>)
 8005a24:	4694      	mov	ip, r2
 8005a26:	4463      	add	r3, ip
 8005a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a2a:	1d7b      	adds	r3, r7, #5
 8005a2c:	33ff      	adds	r3, #255	; 0xff
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a36:	2076      	movs	r0, #118	; 0x76
 8005a38:	183b      	adds	r3, r7, r0
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	8952      	ldrh	r2, [r2, #10]
 8005a3e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6959      	ldr	r1, [r3, #20]
 8005a44:	1d7b      	adds	r3, r7, #5
 8005a46:	33ff      	adds	r3, #255	; 0xff
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b29c      	uxth	r4, r3
 8005a4c:	183b      	adds	r3, r7, r0
 8005a4e:	881a      	ldrh	r2, [r3, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	0023      	movs	r3, r4
 8005a54:	f000 fe0c 	bl	8006670 <USB_WritePMA>
 8005a58:	e0ab      	b.n	8005bb2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d000      	beq.n	8005a64 <USB_EPStartXfer+0x8d8>
 8005a62:	e070      	b.n	8005b46 <USB_EPStartXfer+0x9ba>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2250      	movs	r2, #80	; 0x50
 8005a6c:	5a9b      	ldrh	r3, [r3, r2]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	001a      	movs	r2, r3
 8005a72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a74:	189b      	adds	r3, r3, r2
 8005a76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	00da      	lsls	r2, r3, #3
 8005a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a80:	18d3      	adds	r3, r2, r3
 8005a82:	4a6d      	ldr	r2, [pc, #436]	; (8005c38 <USB_EPStartXfer+0xaac>)
 8005a84:	4694      	mov	ip, r2
 8005a86:	4463      	add	r3, ip
 8005a88:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	059b      	lsls	r3, r3, #22
 8005a92:	0d9b      	lsrs	r3, r3, #22
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	1d7b      	adds	r3, r7, #5
 8005a9c:	33ff      	adds	r3, #255	; 0xff
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa2:	d922      	bls.n	8005aea <USB_EPStartXfer+0x95e>
 8005aa4:	1d7b      	adds	r3, r7, #5
 8005aa6:	33ff      	adds	r3, #255	; 0xff
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	21ec      	movs	r1, #236	; 0xec
 8005aae:	187a      	adds	r2, r7, r1
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	1d7b      	adds	r3, r7, #5
 8005ab4:	33ff      	adds	r3, #255	; 0xff
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	221f      	movs	r2, #31
 8005aba:	4013      	ands	r3, r2
 8005abc:	d104      	bne.n	8005ac8 <USB_EPStartXfer+0x93c>
 8005abe:	187b      	adds	r3, r7, r1
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	187a      	adds	r2, r7, r1
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	23ec      	movs	r3, #236	; 0xec
 8005ad0:	18fb      	adds	r3, r7, r3
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	029b      	lsls	r3, r3, #10
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	4313      	orrs	r3, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4a55      	ldr	r2, [pc, #340]	; (8005c34 <USB_EPStartXfer+0xaa8>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ae6:	801a      	strh	r2, [r3, #0]
 8005ae8:	e052      	b.n	8005b90 <USB_EPStartXfer+0xa04>
 8005aea:	1d7b      	adds	r3, r7, #5
 8005aec:	33ff      	adds	r3, #255	; 0xff
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d108      	bne.n	8005b06 <USB_EPStartXfer+0x97a>
 8005af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	4a4e      	ldr	r2, [pc, #312]	; (8005c34 <USB_EPStartXfer+0xaa8>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e044      	b.n	8005b90 <USB_EPStartXfer+0xa04>
 8005b06:	1d7b      	adds	r3, r7, #5
 8005b08:	33ff      	adds	r3, #255	; 0xff
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	21ec      	movs	r1, #236	; 0xec
 8005b10:	187a      	adds	r2, r7, r1
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	1d7b      	adds	r3, r7, #5
 8005b16:	33ff      	adds	r3, #255	; 0xff
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <USB_EPStartXfer+0x99e>
 8005b20:	187b      	adds	r3, r7, r1
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	187a      	adds	r2, r7, r1
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	23ec      	movs	r3, #236	; 0xec
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	e024      	b.n	8005b90 <USB_EPStartXfer+0xa04>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d120      	bne.n	8005b90 <USB_EPStartXfer+0xa04>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2184      	movs	r1, #132	; 0x84
 8005b52:	187a      	adds	r2, r7, r1
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2250      	movs	r2, #80	; 0x50
 8005b5a:	5a9b      	ldrh	r3, [r3, r2]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	001a      	movs	r2, r3
 8005b60:	187b      	adds	r3, r7, r1
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	189b      	adds	r3, r3, r2
 8005b66:	187a      	adds	r2, r7, r1
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	00da      	lsls	r2, r3, #3
 8005b70:	187b      	adds	r3, r7, r1
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	18d3      	adds	r3, r2, r3
 8005b76:	4a30      	ldr	r2, [pc, #192]	; (8005c38 <USB_EPStartXfer+0xaac>)
 8005b78:	4694      	mov	ip, r2
 8005b7a:	4463      	add	r3, ip
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	187a      	adds	r2, r7, r1
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	1d7b      	adds	r3, r7, #5
 8005b84:	33ff      	adds	r3, #255	; 0xff
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	187b      	adds	r3, r7, r1
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b90:	2076      	movs	r0, #118	; 0x76
 8005b92:	183b      	adds	r3, r7, r0
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	8912      	ldrh	r2, [r2, #8]
 8005b98:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6959      	ldr	r1, [r3, #20]
 8005b9e:	1d7b      	adds	r3, r7, #5
 8005ba0:	33ff      	adds	r3, #255	; 0xff
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	b29c      	uxth	r4, r3
 8005ba6:	183b      	adds	r3, r7, r0
 8005ba8:	881a      	ldrh	r2, [r3, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	0023      	movs	r3, r4
 8005bae:	f000 fd5f 	bl	8006670 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	18d3      	adds	r3, r2, r3
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	200a      	movs	r0, #10
 8005bc2:	183b      	adds	r3, r7, r0
 8005bc4:	491d      	ldr	r1, [pc, #116]	; (8005c3c <USB_EPStartXfer+0xab0>)
 8005bc6:	400a      	ands	r2, r1
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	183b      	adds	r3, r7, r0
 8005bcc:	183a      	adds	r2, r7, r0
 8005bce:	8812      	ldrh	r2, [r2, #0]
 8005bd0:	2110      	movs	r1, #16
 8005bd2:	404a      	eors	r2, r1
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	183b      	adds	r3, r7, r0
 8005bd8:	183a      	adds	r2, r7, r0
 8005bda:	8812      	ldrh	r2, [r2, #0]
 8005bdc:	2120      	movs	r1, #32
 8005bde:	404a      	eors	r2, r1
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	18d3      	adds	r3, r2, r3
 8005bec:	183a      	adds	r2, r7, r0
 8005bee:	8812      	ldrh	r2, [r2, #0]
 8005bf0:	4913      	ldr	r1, [pc, #76]	; (8005c40 <USB_EPStartXfer+0xab4>)
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	b292      	uxth	r2, r2
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	f000 fbf4 	bl	80063e4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	7b1b      	ldrb	r3, [r3, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d000      	beq.n	8005c06 <USB_EPStartXfer+0xa7a>
 8005c04:	e0a9      	b.n	8005d5a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d918      	bls.n	8005c44 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	1d7a      	adds	r2, r7, #5
 8005c18:	32ff      	adds	r2, #255	; 0xff
 8005c1a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	1d7b      	adds	r3, r7, #5
 8005c22:	33ff      	adds	r3, #255	; 0xff
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	619a      	str	r2, [r3, #24]
 8005c2c:	e012      	b.n	8005c54 <USB_EPStartXfer+0xac8>
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	00000406 	.word	0x00000406
 8005c34:	ffff8000 	.word	0xffff8000
 8005c38:	00000402 	.word	0x00000402
 8005c3c:	ffff8fbf 	.word	0xffff8fbf
 8005c40:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	1d7a      	adds	r2, r7, #5
 8005c4a:	32ff      	adds	r2, #255	; 0xff
 8005c4c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2200      	movs	r2, #0
 8005c52:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2190      	movs	r1, #144	; 0x90
 8005c58:	187a      	adds	r2, r7, r1
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2250      	movs	r2, #80	; 0x50
 8005c60:	5a9b      	ldrh	r3, [r3, r2]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	001a      	movs	r2, r3
 8005c66:	187b      	adds	r3, r7, r1
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	189b      	adds	r3, r3, r2
 8005c6c:	187a      	adds	r2, r7, r1
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	00da      	lsls	r2, r3, #3
 8005c76:	187b      	adds	r3, r7, r1
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	18d3      	adds	r3, r2, r3
 8005c7c:	4acf      	ldr	r2, [pc, #828]	; (8005fbc <USB_EPStartXfer+0xe30>)
 8005c7e:	4694      	mov	ip, r2
 8005c80:	4463      	add	r3, ip
 8005c82:	218c      	movs	r1, #140	; 0x8c
 8005c84:	187a      	adds	r2, r7, r1
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	187b      	adds	r3, r7, r1
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	059b      	lsls	r3, r3, #22
 8005c92:	0d9b      	lsrs	r3, r3, #22
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	187b      	adds	r3, r7, r1
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	1d7b      	adds	r3, r7, #5
 8005c9e:	33ff      	adds	r3, #255	; 0xff
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ca4:	d925      	bls.n	8005cf2 <USB_EPStartXfer+0xb66>
 8005ca6:	1d7b      	adds	r3, r7, #5
 8005ca8:	33ff      	adds	r3, #255	; 0xff
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	21e8      	movs	r1, #232	; 0xe8
 8005cb0:	187a      	adds	r2, r7, r1
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	1d7b      	adds	r3, r7, #5
 8005cb6:	33ff      	adds	r3, #255	; 0xff
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	221f      	movs	r2, #31
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d104      	bne.n	8005cca <USB_EPStartXfer+0xb3e>
 8005cc0:	187b      	adds	r3, r7, r1
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	187a      	adds	r2, r7, r1
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	218c      	movs	r1, #140	; 0x8c
 8005ccc:	187b      	adds	r3, r7, r1
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	23e8      	movs	r3, #232	; 0xe8
 8005cd6:	18fb      	adds	r3, r7, r3
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	029b      	lsls	r3, r3, #10
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	4ab6      	ldr	r2, [pc, #728]	; (8005fc0 <USB_EPStartXfer+0xe34>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	187b      	adds	r3, r7, r1
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	e353      	b.n	800639a <USB_EPStartXfer+0x120e>
 8005cf2:	1d7b      	adds	r3, r7, #5
 8005cf4:	33ff      	adds	r3, #255	; 0xff
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <USB_EPStartXfer+0xb88>
 8005cfc:	218c      	movs	r1, #140	; 0x8c
 8005cfe:	187b      	adds	r3, r7, r1
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	4aae      	ldr	r2, [pc, #696]	; (8005fc0 <USB_EPStartXfer+0xe34>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	187b      	adds	r3, r7, r1
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	e342      	b.n	800639a <USB_EPStartXfer+0x120e>
 8005d14:	1d7b      	adds	r3, r7, #5
 8005d16:	33ff      	adds	r3, #255	; 0xff
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	21e8      	movs	r1, #232	; 0xe8
 8005d1e:	187a      	adds	r2, r7, r1
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	1d7b      	adds	r3, r7, #5
 8005d24:	33ff      	adds	r3, #255	; 0xff
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <USB_EPStartXfer+0xbac>
 8005d2e:	187b      	adds	r3, r7, r1
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	187a      	adds	r2, r7, r1
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	218c      	movs	r1, #140	; 0x8c
 8005d3a:	187b      	adds	r3, r7, r1
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	23e8      	movs	r3, #232	; 0xe8
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	187b      	adds	r3, r7, r1
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e31f      	b.n	800639a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d000      	beq.n	8005d64 <USB_EPStartXfer+0xbd8>
 8005d62:	e191      	b.n	8006088 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d000      	beq.n	8005d6e <USB_EPStartXfer+0xbe2>
 8005d6c:	e07c      	b.n	8005e68 <USB_EPStartXfer+0xcdc>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	21ac      	movs	r1, #172	; 0xac
 8005d72:	187a      	adds	r2, r7, r1
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2250      	movs	r2, #80	; 0x50
 8005d7a:	5a9b      	ldrh	r3, [r3, r2]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	001a      	movs	r2, r3
 8005d80:	187b      	adds	r3, r7, r1
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	189b      	adds	r3, r3, r2
 8005d86:	187a      	adds	r2, r7, r1
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	00da      	lsls	r2, r3, #3
 8005d90:	187b      	adds	r3, r7, r1
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	18d3      	adds	r3, r2, r3
 8005d96:	4a8b      	ldr	r2, [pc, #556]	; (8005fc4 <USB_EPStartXfer+0xe38>)
 8005d98:	4694      	mov	ip, r2
 8005d9a:	4463      	add	r3, ip
 8005d9c:	21a8      	movs	r1, #168	; 0xa8
 8005d9e:	187a      	adds	r2, r7, r1
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	187b      	adds	r3, r7, r1
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	059b      	lsls	r3, r3, #22
 8005dac:	0d9b      	lsrs	r3, r3, #22
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b3e      	cmp	r3, #62	; 0x3e
 8005dbc:	d923      	bls.n	8005e06 <USB_EPStartXfer+0xc7a>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	21e4      	movs	r1, #228	; 0xe4
 8005dc6:	187a      	adds	r2, r7, r1
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	221f      	movs	r2, #31
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d104      	bne.n	8005dde <USB_EPStartXfer+0xc52>
 8005dd4:	187b      	adds	r3, r7, r1
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	187a      	adds	r2, r7, r1
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	21a8      	movs	r1, #168	; 0xa8
 8005de0:	187b      	adds	r3, r7, r1
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	23e4      	movs	r3, #228	; 0xe4
 8005dea:	18fb      	adds	r3, r7, r3
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	029b      	lsls	r3, r3, #10
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	4313      	orrs	r3, r2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4a71      	ldr	r2, [pc, #452]	; (8005fc0 <USB_EPStartXfer+0xe34>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	187b      	adds	r3, r7, r1
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	e054      	b.n	8005eb0 <USB_EPStartXfer+0xd24>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <USB_EPStartXfer+0xc9a>
 8005e0e:	21a8      	movs	r1, #168	; 0xa8
 8005e10:	187b      	adds	r3, r7, r1
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4a69      	ldr	r2, [pc, #420]	; (8005fc0 <USB_EPStartXfer+0xe34>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	187b      	adds	r3, r7, r1
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e044      	b.n	8005eb0 <USB_EPStartXfer+0xd24>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	21e4      	movs	r1, #228	; 0xe4
 8005e2e:	187a      	adds	r2, r7, r1
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2201      	movs	r2, #1
 8005e38:	4013      	ands	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <USB_EPStartXfer+0xcba>
 8005e3c:	187b      	adds	r3, r7, r1
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3301      	adds	r3, #1
 8005e42:	187a      	adds	r2, r7, r1
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	21a8      	movs	r1, #168	; 0xa8
 8005e48:	187b      	adds	r3, r7, r1
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	23e4      	movs	r3, #228	; 0xe4
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	029b      	lsls	r3, r3, #10
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	187b      	adds	r3, r7, r1
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	e023      	b.n	8005eb0 <USB_EPStartXfer+0xd24>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d11f      	bne.n	8005eb0 <USB_EPStartXfer+0xd24>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	21b4      	movs	r1, #180	; 0xb4
 8005e74:	187a      	adds	r2, r7, r1
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2250      	movs	r2, #80	; 0x50
 8005e7c:	5a9b      	ldrh	r3, [r3, r2]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	001a      	movs	r2, r3
 8005e82:	187b      	adds	r3, r7, r1
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	187a      	adds	r2, r7, r1
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	00da      	lsls	r2, r3, #3
 8005e92:	187b      	adds	r3, r7, r1
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	18d3      	adds	r3, r2, r3
 8005e98:	4a4a      	ldr	r2, [pc, #296]	; (8005fc4 <USB_EPStartXfer+0xe38>)
 8005e9a:	4694      	mov	ip, r2
 8005e9c:	4463      	add	r3, ip
 8005e9e:	21b0      	movs	r1, #176	; 0xb0
 8005ea0:	187a      	adds	r2, r7, r1
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	187b      	adds	r3, r7, r1
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	801a      	strh	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	22a4      	movs	r2, #164	; 0xa4
 8005eb4:	18ba      	adds	r2, r7, r2
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d000      	beq.n	8005ec2 <USB_EPStartXfer+0xd36>
 8005ec0:	e082      	b.n	8005fc8 <USB_EPStartXfer+0xe3c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	219c      	movs	r1, #156	; 0x9c
 8005ec6:	187a      	adds	r2, r7, r1
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2250      	movs	r2, #80	; 0x50
 8005ece:	5a9b      	ldrh	r3, [r3, r2]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	001a      	movs	r2, r3
 8005ed4:	187b      	adds	r3, r7, r1
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	189b      	adds	r3, r3, r2
 8005eda:	187a      	adds	r2, r7, r1
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	00da      	lsls	r2, r3, #3
 8005ee4:	187b      	adds	r3, r7, r1
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	18d3      	adds	r3, r2, r3
 8005eea:	4a34      	ldr	r2, [pc, #208]	; (8005fbc <USB_EPStartXfer+0xe30>)
 8005eec:	4694      	mov	ip, r2
 8005eee:	4463      	add	r3, ip
 8005ef0:	2198      	movs	r1, #152	; 0x98
 8005ef2:	187a      	adds	r2, r7, r1
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	187b      	adds	r3, r7, r1
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	059b      	lsls	r3, r3, #22
 8005f00:	0d9b      	lsrs	r3, r3, #22
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	187b      	adds	r3, r7, r1
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f10:	d923      	bls.n	8005f5a <USB_EPStartXfer+0xdce>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	21e0      	movs	r1, #224	; 0xe0
 8005f1a:	187a      	adds	r2, r7, r1
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	221f      	movs	r2, #31
 8005f24:	4013      	ands	r3, r2
 8005f26:	d104      	bne.n	8005f32 <USB_EPStartXfer+0xda6>
 8005f28:	187b      	adds	r3, r7, r1
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	187a      	adds	r2, r7, r1
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	2198      	movs	r1, #152	; 0x98
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	23e0      	movs	r3, #224	; 0xe0
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	029b      	lsls	r3, r3, #10
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4a1c      	ldr	r2, [pc, #112]	; (8005fc0 <USB_EPStartXfer+0xe34>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	187b      	adds	r3, r7, r1
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e057      	b.n	800600a <USB_EPStartXfer+0xe7e>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10b      	bne.n	8005f7a <USB_EPStartXfer+0xdee>
 8005f62:	2198      	movs	r1, #152	; 0x98
 8005f64:	187b      	adds	r3, r7, r1
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4a14      	ldr	r2, [pc, #80]	; (8005fc0 <USB_EPStartXfer+0xe34>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	e047      	b.n	800600a <USB_EPStartXfer+0xe7e>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	21e0      	movs	r1, #224	; 0xe0
 8005f82:	187a      	adds	r2, r7, r1
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <USB_EPStartXfer+0xe0e>
 8005f90:	187b      	adds	r3, r7, r1
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	187a      	adds	r2, r7, r1
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	2198      	movs	r1, #152	; 0x98
 8005f9c:	187b      	adds	r3, r7, r1
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	23e0      	movs	r3, #224	; 0xe0
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	029b      	lsls	r3, r3, #10
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	187b      	adds	r3, r7, r1
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	e026      	b.n	800600a <USB_EPStartXfer+0xe7e>
 8005fbc:	00000406 	.word	0x00000406
 8005fc0:	ffff8000 	.word	0xffff8000
 8005fc4:	00000402 	.word	0x00000402
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d11c      	bne.n	800600a <USB_EPStartXfer+0xe7e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2250      	movs	r2, #80	; 0x50
 8005fd4:	5a9b      	ldrh	r3, [r3, r2]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	001a      	movs	r2, r3
 8005fda:	21a4      	movs	r1, #164	; 0xa4
 8005fdc:	187b      	adds	r3, r7, r1
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	189b      	adds	r3, r3, r2
 8005fe2:	187a      	adds	r2, r7, r1
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	00da      	lsls	r2, r3, #3
 8005fec:	187b      	adds	r3, r7, r1
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	18d3      	adds	r3, r2, r3
 8005ff2:	4ad2      	ldr	r2, [pc, #840]	; (800633c <USB_EPStartXfer+0x11b0>)
 8005ff4:	4694      	mov	ip, r2
 8005ff6:	4463      	add	r3, ip
 8005ff8:	21a0      	movs	r1, #160	; 0xa0
 8005ffa:	187a      	adds	r2, r7, r1
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	b29a      	uxth	r2, r3
 8006004:	187b      	adds	r3, r7, r1
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d100      	bne.n	8006014 <USB_EPStartXfer+0xe88>
 8006012:	e1c2      	b.n	800639a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	18d2      	adds	r2, r2, r3
 800601e:	2196      	movs	r1, #150	; 0x96
 8006020:	187b      	adds	r3, r7, r1
 8006022:	8812      	ldrh	r2, [r2, #0]
 8006024:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006026:	187b      	adds	r3, r7, r1
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	2380      	movs	r3, #128	; 0x80
 800602c:	01db      	lsls	r3, r3, #7
 800602e:	4013      	ands	r3, r2
 8006030:	d004      	beq.n	800603c <USB_EPStartXfer+0xeb0>
 8006032:	187b      	adds	r3, r7, r1
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	2240      	movs	r2, #64	; 0x40
 8006038:	4013      	ands	r3, r2
 800603a:	d10d      	bne.n	8006058 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800603c:	2196      	movs	r1, #150	; 0x96
 800603e:	187b      	adds	r3, r7, r1
 8006040:	881a      	ldrh	r2, [r3, #0]
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	01db      	lsls	r3, r3, #7
 8006046:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006048:	d000      	beq.n	800604c <USB_EPStartXfer+0xec0>
 800604a:	e1a6      	b.n	800639a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800604c:	187b      	adds	r3, r7, r1
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	2240      	movs	r2, #64	; 0x40
 8006052:	4013      	ands	r3, r2
 8006054:	d000      	beq.n	8006058 <USB_EPStartXfer+0xecc>
 8006056:	e1a0      	b.n	800639a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	18d3      	adds	r3, r2, r3
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29a      	uxth	r2, r3
 8006066:	2094      	movs	r0, #148	; 0x94
 8006068:	183b      	adds	r3, r7, r0
 800606a:	49b5      	ldr	r1, [pc, #724]	; (8006340 <USB_EPStartXfer+0x11b4>)
 800606c:	400a      	ands	r2, r1
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	18d3      	adds	r3, r2, r3
 800607a:	183a      	adds	r2, r7, r0
 800607c:	8812      	ldrh	r2, [r2, #0]
 800607e:	49b1      	ldr	r1, [pc, #708]	; (8006344 <USB_EPStartXfer+0x11b8>)
 8006080:	430a      	orrs	r2, r1
 8006082:	b292      	uxth	r2, r2
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e188      	b.n	800639a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	78db      	ldrb	r3, [r3, #3]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d000      	beq.n	8006092 <USB_EPStartXfer+0xf06>
 8006090:	e181      	b.n	8006396 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	429a      	cmp	r2, r3
 800609c:	d90d      	bls.n	80060ba <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	1d7a      	adds	r2, r7, #5
 80060a4:	32ff      	adds	r2, #255	; 0xff
 80060a6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	1d7b      	adds	r3, r7, #5
 80060ae:	33ff      	adds	r3, #255	; 0xff
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	1ad2      	subs	r2, r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	619a      	str	r2, [r3, #24]
 80060b8:	e007      	b.n	80060ca <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	1d7a      	adds	r2, r7, #5
 80060c0:	32ff      	adds	r2, #255	; 0xff
 80060c2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	785b      	ldrb	r3, [r3, #1]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d000      	beq.n	80060d4 <USB_EPStartXfer+0xf48>
 80060d2:	e082      	b.n	80061da <USB_EPStartXfer+0x104e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	21cc      	movs	r1, #204	; 0xcc
 80060d8:	187a      	adds	r2, r7, r1
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2250      	movs	r2, #80	; 0x50
 80060e0:	5a9b      	ldrh	r3, [r3, r2]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	001a      	movs	r2, r3
 80060e6:	187b      	adds	r3, r7, r1
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	189b      	adds	r3, r3, r2
 80060ec:	187a      	adds	r2, r7, r1
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	00da      	lsls	r2, r3, #3
 80060f6:	187b      	adds	r3, r7, r1
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	18d3      	adds	r3, r2, r3
 80060fc:	4a92      	ldr	r2, [pc, #584]	; (8006348 <USB_EPStartXfer+0x11bc>)
 80060fe:	4694      	mov	ip, r2
 8006100:	4463      	add	r3, ip
 8006102:	21c8      	movs	r1, #200	; 0xc8
 8006104:	187a      	adds	r2, r7, r1
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	187b      	adds	r3, r7, r1
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	059b      	lsls	r3, r3, #22
 8006112:	0d9b      	lsrs	r3, r3, #22
 8006114:	b29a      	uxth	r2, r3
 8006116:	187b      	adds	r3, r7, r1
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	1d7b      	adds	r3, r7, #5
 800611e:	33ff      	adds	r3, #255	; 0xff
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b3e      	cmp	r3, #62	; 0x3e
 8006124:	d925      	bls.n	8006172 <USB_EPStartXfer+0xfe6>
 8006126:	1d7b      	adds	r3, r7, #5
 8006128:	33ff      	adds	r3, #255	; 0xff
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	095b      	lsrs	r3, r3, #5
 800612e:	21dc      	movs	r1, #220	; 0xdc
 8006130:	187a      	adds	r2, r7, r1
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	1d7b      	adds	r3, r7, #5
 8006136:	33ff      	adds	r3, #255	; 0xff
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	221f      	movs	r2, #31
 800613c:	4013      	ands	r3, r2
 800613e:	d104      	bne.n	800614a <USB_EPStartXfer+0xfbe>
 8006140:	187b      	adds	r3, r7, r1
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3b01      	subs	r3, #1
 8006146:	187a      	adds	r2, r7, r1
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	21c8      	movs	r1, #200	; 0xc8
 800614c:	187b      	adds	r3, r7, r1
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29a      	uxth	r2, r3
 8006154:	23dc      	movs	r3, #220	; 0xdc
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	b29b      	uxth	r3, r3
 8006160:	4313      	orrs	r3, r2
 8006162:	b29b      	uxth	r3, r3
 8006164:	4a79      	ldr	r2, [pc, #484]	; (800634c <USB_EPStartXfer+0x11c0>)
 8006166:	4313      	orrs	r3, r2
 8006168:	b29a      	uxth	r2, r3
 800616a:	187b      	adds	r3, r7, r1
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	e058      	b.n	8006224 <USB_EPStartXfer+0x1098>
 8006172:	1d7b      	adds	r3, r7, #5
 8006174:	33ff      	adds	r3, #255	; 0xff
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10b      	bne.n	8006194 <USB_EPStartXfer+0x1008>
 800617c:	21c8      	movs	r1, #200	; 0xc8
 800617e:	187b      	adds	r3, r7, r1
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	4a71      	ldr	r2, [pc, #452]	; (800634c <USB_EPStartXfer+0x11c0>)
 8006188:	4313      	orrs	r3, r2
 800618a:	b29a      	uxth	r2, r3
 800618c:	187b      	adds	r3, r7, r1
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e047      	b.n	8006224 <USB_EPStartXfer+0x1098>
 8006194:	1d7b      	adds	r3, r7, #5
 8006196:	33ff      	adds	r3, #255	; 0xff
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	21dc      	movs	r1, #220	; 0xdc
 800619e:	187a      	adds	r2, r7, r1
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	1d7b      	adds	r3, r7, #5
 80061a4:	33ff      	adds	r3, #255	; 0xff
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2201      	movs	r2, #1
 80061aa:	4013      	ands	r3, r2
 80061ac:	d004      	beq.n	80061b8 <USB_EPStartXfer+0x102c>
 80061ae:	187b      	adds	r3, r7, r1
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	187a      	adds	r2, r7, r1
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	21c8      	movs	r1, #200	; 0xc8
 80061ba:	187b      	adds	r3, r7, r1
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	23dc      	movs	r3, #220	; 0xdc
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	029b      	lsls	r3, r3, #10
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	4313      	orrs	r3, r2
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	187b      	adds	r3, r7, r1
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e024      	b.n	8006224 <USB_EPStartXfer+0x1098>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d120      	bne.n	8006224 <USB_EPStartXfer+0x1098>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	21d4      	movs	r1, #212	; 0xd4
 80061e6:	187a      	adds	r2, r7, r1
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2250      	movs	r2, #80	; 0x50
 80061ee:	5a9b      	ldrh	r3, [r3, r2]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	001a      	movs	r2, r3
 80061f4:	187b      	adds	r3, r7, r1
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	189b      	adds	r3, r3, r2
 80061fa:	187a      	adds	r2, r7, r1
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	00da      	lsls	r2, r3, #3
 8006204:	187b      	adds	r3, r7, r1
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	18d3      	adds	r3, r2, r3
 800620a:	4a4f      	ldr	r2, [pc, #316]	; (8006348 <USB_EPStartXfer+0x11bc>)
 800620c:	4694      	mov	ip, r2
 800620e:	4463      	add	r3, ip
 8006210:	21d0      	movs	r1, #208	; 0xd0
 8006212:	187a      	adds	r2, r7, r1
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	1d7b      	adds	r3, r7, #5
 8006218:	33ff      	adds	r3, #255	; 0xff
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	b29a      	uxth	r2, r3
 800621e:	187b      	adds	r3, r7, r1
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	22c4      	movs	r2, #196	; 0xc4
 8006228:	18ba      	adds	r2, r7, r2
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d000      	beq.n	8006236 <USB_EPStartXfer+0x10aa>
 8006234:	e08c      	b.n	8006350 <USB_EPStartXfer+0x11c4>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	21bc      	movs	r1, #188	; 0xbc
 800623a:	187a      	adds	r2, r7, r1
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2250      	movs	r2, #80	; 0x50
 8006242:	5a9b      	ldrh	r3, [r3, r2]
 8006244:	b29b      	uxth	r3, r3
 8006246:	001a      	movs	r2, r3
 8006248:	187b      	adds	r3, r7, r1
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	189b      	adds	r3, r3, r2
 800624e:	187a      	adds	r2, r7, r1
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	00da      	lsls	r2, r3, #3
 8006258:	187b      	adds	r3, r7, r1
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	18d3      	adds	r3, r2, r3
 800625e:	4a37      	ldr	r2, [pc, #220]	; (800633c <USB_EPStartXfer+0x11b0>)
 8006260:	4694      	mov	ip, r2
 8006262:	4463      	add	r3, ip
 8006264:	21b8      	movs	r1, #184	; 0xb8
 8006266:	187a      	adds	r2, r7, r1
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	187b      	adds	r3, r7, r1
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	059b      	lsls	r3, r3, #22
 8006274:	0d9b      	lsrs	r3, r3, #22
 8006276:	b29a      	uxth	r2, r3
 8006278:	187b      	adds	r3, r7, r1
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	801a      	strh	r2, [r3, #0]
 800627e:	1d7b      	adds	r3, r7, #5
 8006280:	33ff      	adds	r3, #255	; 0xff
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b3e      	cmp	r3, #62	; 0x3e
 8006286:	d925      	bls.n	80062d4 <USB_EPStartXfer+0x1148>
 8006288:	1d7b      	adds	r3, r7, #5
 800628a:	33ff      	adds	r3, #255	; 0xff
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	21d8      	movs	r1, #216	; 0xd8
 8006292:	187a      	adds	r2, r7, r1
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	1d7b      	adds	r3, r7, #5
 8006298:	33ff      	adds	r3, #255	; 0xff
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	221f      	movs	r2, #31
 800629e:	4013      	ands	r3, r2
 80062a0:	d104      	bne.n	80062ac <USB_EPStartXfer+0x1120>
 80062a2:	187b      	adds	r3, r7, r1
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	187a      	adds	r2, r7, r1
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	21b8      	movs	r1, #184	; 0xb8
 80062ae:	187b      	adds	r3, r7, r1
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	23d8      	movs	r3, #216	; 0xd8
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	029b      	lsls	r3, r3, #10
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	4313      	orrs	r3, r2
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	4a21      	ldr	r2, [pc, #132]	; (800634c <USB_EPStartXfer+0x11c0>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	187b      	adds	r3, r7, r1
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e062      	b.n	800639a <USB_EPStartXfer+0x120e>
 80062d4:	1d7b      	adds	r3, r7, #5
 80062d6:	33ff      	adds	r3, #255	; 0xff
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10b      	bne.n	80062f6 <USB_EPStartXfer+0x116a>
 80062de:	21b8      	movs	r1, #184	; 0xb8
 80062e0:	187b      	adds	r3, r7, r1
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	4a18      	ldr	r2, [pc, #96]	; (800634c <USB_EPStartXfer+0x11c0>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	187b      	adds	r3, r7, r1
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	e051      	b.n	800639a <USB_EPStartXfer+0x120e>
 80062f6:	1d7b      	adds	r3, r7, #5
 80062f8:	33ff      	adds	r3, #255	; 0xff
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	21d8      	movs	r1, #216	; 0xd8
 8006300:	187a      	adds	r2, r7, r1
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	1d7b      	adds	r3, r7, #5
 8006306:	33ff      	adds	r3, #255	; 0xff
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	4013      	ands	r3, r2
 800630e:	d004      	beq.n	800631a <USB_EPStartXfer+0x118e>
 8006310:	187b      	adds	r3, r7, r1
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	187a      	adds	r2, r7, r1
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	21b8      	movs	r1, #184	; 0xb8
 800631c:	187b      	adds	r3, r7, r1
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29a      	uxth	r2, r3
 8006324:	23d8      	movs	r3, #216	; 0xd8
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	029b      	lsls	r3, r3, #10
 800632e:	b29b      	uxth	r3, r3
 8006330:	4313      	orrs	r3, r2
 8006332:	b29a      	uxth	r2, r3
 8006334:	187b      	adds	r3, r7, r1
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	e02e      	b.n	800639a <USB_EPStartXfer+0x120e>
 800633c:	00000406 	.word	0x00000406
 8006340:	ffff8f8f 	.word	0xffff8f8f
 8006344:	ffff80c0 	.word	0xffff80c0
 8006348:	00000402 	.word	0x00000402
 800634c:	ffff8000 	.word	0xffff8000
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d120      	bne.n	800639a <USB_EPStartXfer+0x120e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2250      	movs	r2, #80	; 0x50
 800635c:	5a9b      	ldrh	r3, [r3, r2]
 800635e:	b29b      	uxth	r3, r3
 8006360:	001a      	movs	r2, r3
 8006362:	21c4      	movs	r1, #196	; 0xc4
 8006364:	187b      	adds	r3, r7, r1
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	189b      	adds	r3, r3, r2
 800636a:	187a      	adds	r2, r7, r1
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	00da      	lsls	r2, r3, #3
 8006374:	187b      	adds	r3, r7, r1
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	18d3      	adds	r3, r2, r3
 800637a:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <USB_EPStartXfer+0x1264>)
 800637c:	4694      	mov	ip, r2
 800637e:	4463      	add	r3, ip
 8006380:	21c0      	movs	r1, #192	; 0xc0
 8006382:	187a      	adds	r2, r7, r1
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	1d7b      	adds	r3, r7, #5
 8006388:	33ff      	adds	r3, #255	; 0xff
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	187b      	adds	r3, r7, r1
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e001      	b.n	800639a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e025      	b.n	80063e6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	18d3      	adds	r3, r2, r3
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	208a      	movs	r0, #138	; 0x8a
 80063aa:	183b      	adds	r3, r7, r0
 80063ac:	4911      	ldr	r1, [pc, #68]	; (80063f4 <USB_EPStartXfer+0x1268>)
 80063ae:	400a      	ands	r2, r1
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	183b      	adds	r3, r7, r0
 80063b4:	183a      	adds	r2, r7, r0
 80063b6:	8812      	ldrh	r2, [r2, #0]
 80063b8:	2180      	movs	r1, #128	; 0x80
 80063ba:	0149      	lsls	r1, r1, #5
 80063bc:	404a      	eors	r2, r1
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	183b      	adds	r3, r7, r0
 80063c2:	183a      	adds	r2, r7, r0
 80063c4:	8812      	ldrh	r2, [r2, #0]
 80063c6:	2180      	movs	r1, #128	; 0x80
 80063c8:	0189      	lsls	r1, r1, #6
 80063ca:	404a      	eors	r2, r1
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	18d3      	adds	r3, r2, r3
 80063d8:	183a      	adds	r2, r7, r0
 80063da:	8812      	ldrh	r2, [r2, #0]
 80063dc:	4906      	ldr	r1, [pc, #24]	; (80063f8 <USB_EPStartXfer+0x126c>)
 80063de:	430a      	orrs	r2, r1
 80063e0:	b292      	uxth	r2, r2
 80063e2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	0018      	movs	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b043      	add	sp, #268	; 0x10c
 80063ec:	bd90      	pop	{r4, r7, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	00000406 	.word	0x00000406
 80063f4:	ffffbf8f 	.word	0xffffbf8f
 80063f8:	ffff8080 	.word	0xffff8080

080063fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01d      	beq.n	800644a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	18d3      	adds	r3, r2, r3
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29a      	uxth	r2, r3
 800641c:	200c      	movs	r0, #12
 800641e:	183b      	adds	r3, r7, r0
 8006420:	491b      	ldr	r1, [pc, #108]	; (8006490 <USB_EPSetStall+0x94>)
 8006422:	400a      	ands	r2, r1
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	183b      	adds	r3, r7, r0
 8006428:	183a      	adds	r2, r7, r0
 800642a:	8812      	ldrh	r2, [r2, #0]
 800642c:	2110      	movs	r1, #16
 800642e:	404a      	eors	r2, r1
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	18d3      	adds	r3, r2, r3
 800643c:	183a      	adds	r2, r7, r0
 800643e:	8812      	ldrh	r2, [r2, #0]
 8006440:	4914      	ldr	r1, [pc, #80]	; (8006494 <USB_EPSetStall+0x98>)
 8006442:	430a      	orrs	r2, r1
 8006444:	b292      	uxth	r2, r2
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	e01d      	b.n	8006486 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	18d3      	adds	r3, r2, r3
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29a      	uxth	r2, r3
 8006458:	200e      	movs	r0, #14
 800645a:	183b      	adds	r3, r7, r0
 800645c:	490e      	ldr	r1, [pc, #56]	; (8006498 <USB_EPSetStall+0x9c>)
 800645e:	400a      	ands	r2, r1
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	183b      	adds	r3, r7, r0
 8006464:	183a      	adds	r2, r7, r0
 8006466:	8812      	ldrh	r2, [r2, #0]
 8006468:	2180      	movs	r1, #128	; 0x80
 800646a:	0149      	lsls	r1, r1, #5
 800646c:	404a      	eors	r2, r1
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	18d3      	adds	r3, r2, r3
 800647a:	183a      	adds	r2, r7, r0
 800647c:	8812      	ldrh	r2, [r2, #0]
 800647e:	4905      	ldr	r1, [pc, #20]	; (8006494 <USB_EPSetStall+0x98>)
 8006480:	430a      	orrs	r2, r1
 8006482:	b292      	uxth	r2, r2
 8006484:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	0018      	movs	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	b004      	add	sp, #16
 800648e:	bd80      	pop	{r7, pc}
 8006490:	ffff8fbf 	.word	0xffff8fbf
 8006494:	ffff8080 	.word	0xffff8080
 8006498:	ffffbf8f 	.word	0xffffbf8f

0800649c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	7b1b      	ldrb	r3, [r3, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d000      	beq.n	80064b0 <USB_EPClearStall+0x14>
 80064ae:	e095      	b.n	80065dc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d046      	beq.n	8006546 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	18d2      	adds	r2, r2, r3
 80064c2:	2110      	movs	r1, #16
 80064c4:	187b      	adds	r3, r7, r1
 80064c6:	8812      	ldrh	r2, [r2, #0]
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	187b      	adds	r3, r7, r1
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	2240      	movs	r2, #64	; 0x40
 80064d0:	4013      	ands	r3, r2
 80064d2:	d016      	beq.n	8006502 <USB_EPClearStall+0x66>
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	18d3      	adds	r3, r2, r3
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	200e      	movs	r0, #14
 80064e4:	183b      	adds	r3, r7, r0
 80064e6:	4940      	ldr	r1, [pc, #256]	; (80065e8 <USB_EPClearStall+0x14c>)
 80064e8:	400a      	ands	r2, r1
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	18d3      	adds	r3, r2, r3
 80064f6:	183a      	adds	r2, r7, r0
 80064f8:	8812      	ldrh	r2, [r2, #0]
 80064fa:	493c      	ldr	r1, [pc, #240]	; (80065ec <USB_EPClearStall+0x150>)
 80064fc:	430a      	orrs	r2, r1
 80064fe:	b292      	uxth	r2, r2
 8006500:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	78db      	ldrb	r3, [r3, #3]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d068      	beq.n	80065dc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	18d3      	adds	r3, r2, r3
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29a      	uxth	r2, r3
 8006518:	200c      	movs	r0, #12
 800651a:	183b      	adds	r3, r7, r0
 800651c:	4934      	ldr	r1, [pc, #208]	; (80065f0 <USB_EPClearStall+0x154>)
 800651e:	400a      	ands	r2, r1
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	183b      	adds	r3, r7, r0
 8006524:	183a      	adds	r2, r7, r0
 8006526:	8812      	ldrh	r2, [r2, #0]
 8006528:	2120      	movs	r1, #32
 800652a:	404a      	eors	r2, r1
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	18d3      	adds	r3, r2, r3
 8006538:	183a      	adds	r2, r7, r0
 800653a:	8812      	ldrh	r2, [r2, #0]
 800653c:	492d      	ldr	r1, [pc, #180]	; (80065f4 <USB_EPClearStall+0x158>)
 800653e:	430a      	orrs	r2, r1
 8006540:	b292      	uxth	r2, r2
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e04a      	b.n	80065dc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	18d2      	adds	r2, r2, r3
 8006550:	2116      	movs	r1, #22
 8006552:	187b      	adds	r3, r7, r1
 8006554:	8812      	ldrh	r2, [r2, #0]
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	187b      	adds	r3, r7, r1
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	4013      	ands	r3, r2
 8006562:	d016      	beq.n	8006592 <USB_EPClearStall+0xf6>
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	18d3      	adds	r3, r2, r3
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29a      	uxth	r2, r3
 8006572:	2014      	movs	r0, #20
 8006574:	183b      	adds	r3, r7, r0
 8006576:	491c      	ldr	r1, [pc, #112]	; (80065e8 <USB_EPClearStall+0x14c>)
 8006578:	400a      	ands	r2, r1
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	18d3      	adds	r3, r2, r3
 8006586:	183a      	adds	r2, r7, r0
 8006588:	8812      	ldrh	r2, [r2, #0]
 800658a:	491b      	ldr	r1, [pc, #108]	; (80065f8 <USB_EPClearStall+0x15c>)
 800658c:	430a      	orrs	r2, r1
 800658e:	b292      	uxth	r2, r2
 8006590:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	18d3      	adds	r3, r2, r3
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29a      	uxth	r2, r3
 80065a0:	2012      	movs	r0, #18
 80065a2:	183b      	adds	r3, r7, r0
 80065a4:	4915      	ldr	r1, [pc, #84]	; (80065fc <USB_EPClearStall+0x160>)
 80065a6:	400a      	ands	r2, r1
 80065a8:	801a      	strh	r2, [r3, #0]
 80065aa:	183b      	adds	r3, r7, r0
 80065ac:	183a      	adds	r2, r7, r0
 80065ae:	8812      	ldrh	r2, [r2, #0]
 80065b0:	2180      	movs	r1, #128	; 0x80
 80065b2:	0149      	lsls	r1, r1, #5
 80065b4:	404a      	eors	r2, r1
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	183b      	adds	r3, r7, r0
 80065ba:	183a      	adds	r2, r7, r0
 80065bc:	8812      	ldrh	r2, [r2, #0]
 80065be:	2180      	movs	r1, #128	; 0x80
 80065c0:	0189      	lsls	r1, r1, #6
 80065c2:	404a      	eors	r2, r1
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	18d3      	adds	r3, r2, r3
 80065d0:	183a      	adds	r2, r7, r0
 80065d2:	8812      	ldrh	r2, [r2, #0]
 80065d4:	4907      	ldr	r1, [pc, #28]	; (80065f4 <USB_EPClearStall+0x158>)
 80065d6:	430a      	orrs	r2, r1
 80065d8:	b292      	uxth	r2, r2
 80065da:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	0018      	movs	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b006      	add	sp, #24
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	ffff8f8f 	.word	0xffff8f8f
 80065ec:	ffff80c0 	.word	0xffff80c0
 80065f0:	ffff8fbf 	.word	0xffff8fbf
 80065f4:	ffff8080 	.word	0xffff8080
 80065f8:	ffffc080 	.word	0xffffc080
 80065fc:	ffffbf8f 	.word	0xffffbf8f

08006600 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	000a      	movs	r2, r1
 800660a:	1cfb      	adds	r3, r7, #3
 800660c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800660e:	1cfb      	adds	r3, r7, #3
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	224c      	movs	r2, #76	; 0x4c
 800661a:	2180      	movs	r1, #128	; 0x80
 800661c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	0018      	movs	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}

08006628 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2258      	movs	r2, #88	; 0x58
 8006634:	5a9b      	ldrh	r3, [r3, r2]
 8006636:	b29b      	uxth	r3, r3
 8006638:	4a05      	ldr	r2, [pc, #20]	; (8006650 <USB_DevConnect+0x28>)
 800663a:	4313      	orrs	r3, r2
 800663c:	b299      	uxth	r1, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2258      	movs	r2, #88	; 0x58
 8006642:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	0018      	movs	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	b002      	add	sp, #8
 800664c:	bd80      	pop	{r7, pc}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	ffff8000 	.word	0xffff8000

08006654 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2244      	movs	r2, #68	; 0x44
 8006660:	5a9b      	ldrh	r3, [r3, r2]
 8006662:	b29b      	uxth	r3, r3
 8006664:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006666:	68fb      	ldr	r3, [r7, #12]
}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	b004      	add	sp, #16
 800666e:	bd80      	pop	{r7, pc}

08006670 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	; 0x28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	0019      	movs	r1, r3
 800667c:	1dbb      	adds	r3, r7, #6
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	1d3b      	adds	r3, r7, #4
 8006682:	1c0a      	adds	r2, r1, #0
 8006684:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006686:	1d3b      	adds	r3, r7, #4
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	3301      	adds	r3, #1
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006698:	1dbb      	adds	r3, r7, #6
 800669a:	881a      	ldrh	r2, [r3, #0]
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	18d3      	adds	r3, r2, r3
 80066a0:	2280      	movs	r2, #128	; 0x80
 80066a2:	00d2      	lsls	r2, r2, #3
 80066a4:	4694      	mov	ip, r2
 80066a6:	4463      	add	r3, ip
 80066a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
 80066ae:	e020      	b.n	80066f2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	781a      	ldrb	r2, [r3, #0]
 80066b4:	2112      	movs	r1, #18
 80066b6:	187b      	adds	r3, r7, r1
 80066b8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	3301      	adds	r3, #1
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	b21a      	sxth	r2, r3
 80066c4:	187b      	adds	r3, r7, r1
 80066c6:	2000      	movs	r0, #0
 80066c8:	5e1b      	ldrsh	r3, [r3, r0]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	b21a      	sxth	r2, r3
 80066ce:	187b      	adds	r3, r7, r1
 80066d0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	187a      	adds	r2, r7, r1
 80066d6:	8812      	ldrh	r2, [r2, #0]
 80066d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	3302      	adds	r3, #2
 80066de:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	3301      	adds	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	3301      	adds	r3, #1
 80066ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	3b01      	subs	r3, #1
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1db      	bne.n	80066b0 <USB_WritePMA+0x40>
  }
}
 80066f8:	46c0      	nop			; (mov r8, r8)
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b00a      	add	sp, #40	; 0x28
 8006700:	bd80      	pop	{r7, pc}

08006702 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b08a      	sub	sp, #40	; 0x28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	0019      	movs	r1, r3
 800670e:	1dbb      	adds	r3, r7, #6
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	1d3b      	adds	r3, r7, #4
 8006714:	1c0a      	adds	r2, r1, #0
 8006716:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006718:	1d3b      	adds	r3, r7, #4
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	b29b      	uxth	r3, r3
 8006720:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800672a:	1dbb      	adds	r3, r7, #6
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	18d3      	adds	r3, r2, r3
 8006732:	2280      	movs	r2, #128	; 0x80
 8006734:	00d2      	lsls	r2, r2, #3
 8006736:	4694      	mov	ip, r2
 8006738:	4463      	add	r3, ip
 800673a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
 8006740:	e018      	b.n	8006774 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	3302      	adds	r3, #2
 800674e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	b2da      	uxtb	r2, r3
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	3301      	adds	r3, #1
 800675c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	0a1b      	lsrs	r3, r3, #8
 8006762:	b2da      	uxtb	r2, r3
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	3301      	adds	r3, #1
 800676c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	3b01      	subs	r3, #1
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e3      	bne.n	8006742 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	2201      	movs	r2, #1
 8006780:	4013      	ands	r3, r2
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	b2da      	uxtb	r2, r3
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	701a      	strb	r2, [r3, #0]
  }
}
 8006798:	46c0      	nop			; (mov r8, r8)
 800679a:	46bd      	mov	sp, r7
 800679c:	b00a      	add	sp, #40	; 0x28
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	000a      	movs	r2, r1
 80067aa:	1cfb      	adds	r3, r7, #3
 80067ac:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	2304      	movs	r3, #4
 80067b2:	2203      	movs	r2, #3
 80067b4:	2181      	movs	r1, #129	; 0x81
 80067b6:	f001 fe34 	bl	8008422 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80067c0:	2010      	movs	r0, #16
 80067c2:	f001 ffb1 	bl	8008728 <USBD_static_malloc>
 80067c6:	0001      	movs	r1, r0
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	23ae      	movs	r3, #174	; 0xae
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	23ae      	movs	r3, #174	; 0xae
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	58d3      	ldr	r3, [r2, r3]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 80067dc:	2302      	movs	r3, #2
 80067de:	e006      	b.n	80067ee <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	23ae      	movs	r3, #174	; 0xae
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	58d3      	ldr	r3, [r2, r3]
 80067e8:	2200      	movs	r2, #0
 80067ea:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	0018      	movs	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b002      	add	sp, #8
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	000a      	movs	r2, r1
 8006800:	1cfb      	adds	r3, r7, #3
 8006802:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2181      	movs	r1, #129	; 0x81
 8006808:	0018      	movs	r0, r3
 800680a:	f001 fe41 	bl	8008490 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	23ae      	movs	r3, #174	; 0xae
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	58d3      	ldr	r3, [r2, r3]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	23ae      	movs	r3, #174	; 0xae
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	58d3      	ldr	r3, [r2, r3]
 8006828:	0018      	movs	r0, r3
 800682a:	f001 ff89 	bl	8008740 <USBD_static_free>
    pdev->pClassData = NULL;
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	23ae      	movs	r3, #174	; 0xae
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	2100      	movs	r1, #0
 8006836:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	0018      	movs	r0, r3
 800683c:	46bd      	mov	sp, r7
 800683e:	b002      	add	sp, #8
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	23ae      	movs	r3, #174	; 0xae
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	58d3      	ldr	r3, [r2, r3]
 8006856:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006858:	231e      	movs	r3, #30
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	2200      	movs	r2, #0
 800685e:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006864:	230e      	movs	r3, #14
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	2200      	movs	r2, #0
 800686a:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800686c:	2317      	movs	r3, #23
 800686e:	18fb      	adds	r3, r7, r3
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	001a      	movs	r2, r3
 800687a:	2360      	movs	r3, #96	; 0x60
 800687c:	4013      	ands	r3, r2
 800687e:	d03a      	beq.n	80068f6 <USBD_HID_Setup+0xb2>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d000      	beq.n	8006886 <USBD_HID_Setup+0x42>
 8006884:	e0d6      	b.n	8006a34 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	2b0b      	cmp	r3, #11
 800688c:	d008      	beq.n	80068a0 <USBD_HID_Setup+0x5c>
 800688e:	dc26      	bgt.n	80068de <USBD_HID_Setup+0x9a>
 8006890:	2b0a      	cmp	r3, #10
 8006892:	d013      	beq.n	80068bc <USBD_HID_Setup+0x78>
 8006894:	dc23      	bgt.n	80068de <USBD_HID_Setup+0x9a>
 8006896:	2b02      	cmp	r3, #2
 8006898:	d019      	beq.n	80068ce <USBD_HID_Setup+0x8a>
 800689a:	2b03      	cmp	r3, #3
 800689c:	d007      	beq.n	80068ae <USBD_HID_Setup+0x6a>
 800689e:	e01e      	b.n	80068de <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	885b      	ldrh	r3, [r3, #2]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	001a      	movs	r2, r3
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	601a      	str	r2, [r3, #0]
          break;
 80068ac:	e022      	b.n	80068f4 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80068ae:	6939      	ldr	r1, [r7, #16]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	0018      	movs	r0, r3
 80068b6:	f001 fa99 	bl	8007dec <USBD_CtlSendData>
          break;
 80068ba:	e01b      	b.n	80068f4 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	885b      	ldrh	r3, [r3, #2]
 80068c0:	0a1b      	lsrs	r3, r3, #8
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	001a      	movs	r2, r3
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	605a      	str	r2, [r3, #4]
          break;
 80068cc:	e012      	b.n	80068f4 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	0018      	movs	r0, r3
 80068d8:	f001 fa88 	bl	8007dec <USBD_CtlSendData>
          break;
 80068dc:	e00a      	b.n	80068f4 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	0011      	movs	r1, r2
 80068e4:	0018      	movs	r0, r3
 80068e6:	f001 fa03 	bl	8007cf0 <USBD_CtlError>
          ret = USBD_FAIL;
 80068ea:	2317      	movs	r3, #23
 80068ec:	18fb      	adds	r3, r7, r3
 80068ee:	2202      	movs	r2, #2
 80068f0:	701a      	strb	r2, [r3, #0]
          break;
 80068f2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80068f4:	e0a9      	b.n	8006a4a <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	785b      	ldrb	r3, [r3, #1]
 80068fa:	2b0b      	cmp	r3, #11
 80068fc:	d100      	bne.n	8006900 <USBD_HID_Setup+0xbc>
 80068fe:	e075      	b.n	80069ec <USBD_HID_Setup+0x1a8>
 8006900:	dd00      	ble.n	8006904 <USBD_HID_Setup+0xc0>
 8006902:	e08b      	b.n	8006a1c <USBD_HID_Setup+0x1d8>
 8006904:	2b0a      	cmp	r3, #10
 8006906:	d057      	beq.n	80069b8 <USBD_HID_Setup+0x174>
 8006908:	dd00      	ble.n	800690c <USBD_HID_Setup+0xc8>
 800690a:	e087      	b.n	8006a1c <USBD_HID_Setup+0x1d8>
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <USBD_HID_Setup+0xd2>
 8006910:	2b06      	cmp	r3, #6
 8006912:	d019      	beq.n	8006948 <USBD_HID_Setup+0x104>
 8006914:	e082      	b.n	8006a1c <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	23a7      	movs	r3, #167	; 0xa7
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	5cd3      	ldrb	r3, [r2, r3]
 800691e:	2b03      	cmp	r3, #3
 8006920:	d107      	bne.n	8006932 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006922:	230e      	movs	r3, #14
 8006924:	18f9      	adds	r1, r7, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2202      	movs	r2, #2
 800692a:	0018      	movs	r0, r3
 800692c:	f001 fa5e 	bl	8007dec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006930:	e07f      	b.n	8006a32 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	0011      	movs	r1, r2
 8006938:	0018      	movs	r0, r3
 800693a:	f001 f9d9 	bl	8007cf0 <USBD_CtlError>
            ret = USBD_FAIL;
 800693e:	2317      	movs	r3, #23
 8006940:	18fb      	adds	r3, r7, r3
 8006942:	2202      	movs	r2, #2
 8006944:	701a      	strb	r2, [r3, #0]
          break;
 8006946:	e074      	b.n	8006a32 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	885b      	ldrh	r3, [r3, #2]
 800694c:	0a1b      	lsrs	r3, r3, #8
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b22      	cmp	r3, #34	; 0x22
 8006952:	d10b      	bne.n	800696c <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	88db      	ldrh	r3, [r3, #6]
 8006958:	221e      	movs	r2, #30
 800695a:	18ba      	adds	r2, r7, r2
 800695c:	b299      	uxth	r1, r3
 800695e:	293f      	cmp	r1, #63	; 0x3f
 8006960:	d900      	bls.n	8006964 <USBD_HID_Setup+0x120>
 8006962:	233f      	movs	r3, #63	; 0x3f
 8006964:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8006966:	4b3c      	ldr	r3, [pc, #240]	; (8006a58 <USBD_HID_Setup+0x214>)
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	e01c      	b.n	80069a6 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	885b      	ldrh	r3, [r3, #2]
 8006970:	0a1b      	lsrs	r3, r3, #8
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b21      	cmp	r3, #33	; 0x21
 8006976:	d10b      	bne.n	8006990 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8006978:	4b38      	ldr	r3, [pc, #224]	; (8006a5c <USBD_HID_Setup+0x218>)
 800697a:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	88db      	ldrh	r3, [r3, #6]
 8006980:	221e      	movs	r2, #30
 8006982:	18ba      	adds	r2, r7, r2
 8006984:	b299      	uxth	r1, r3
 8006986:	2909      	cmp	r1, #9
 8006988:	d900      	bls.n	800698c <USBD_HID_Setup+0x148>
 800698a:	2309      	movs	r3, #9
 800698c:	8013      	strh	r3, [r2, #0]
 800698e:	e00a      	b.n	80069a6 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	0011      	movs	r1, r2
 8006996:	0018      	movs	r0, r3
 8006998:	f001 f9aa 	bl	8007cf0 <USBD_CtlError>
            ret = USBD_FAIL;
 800699c:	2317      	movs	r3, #23
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	2202      	movs	r2, #2
 80069a2:	701a      	strb	r2, [r3, #0]
            break;
 80069a4:	e045      	b.n	8006a32 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80069a6:	231e      	movs	r3, #30
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	881a      	ldrh	r2, [r3, #0]
 80069ac:	69b9      	ldr	r1, [r7, #24]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0018      	movs	r0, r3
 80069b2:	f001 fa1b 	bl	8007dec <USBD_CtlSendData>
          break;
 80069b6:	e03c      	b.n	8006a32 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	23a7      	movs	r3, #167	; 0xa7
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	5cd3      	ldrb	r3, [r2, r3]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d108      	bne.n	80069d6 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	3308      	adds	r3, #8
 80069c8:	0019      	movs	r1, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	0018      	movs	r0, r3
 80069d0:	f001 fa0c 	bl	8007dec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069d4:	e02d      	b.n	8006a32 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	0011      	movs	r1, r2
 80069dc:	0018      	movs	r0, r3
 80069de:	f001 f987 	bl	8007cf0 <USBD_CtlError>
            ret = USBD_FAIL;
 80069e2:	2317      	movs	r3, #23
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	2202      	movs	r2, #2
 80069e8:	701a      	strb	r2, [r3, #0]
          break;
 80069ea:	e022      	b.n	8006a32 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	23a7      	movs	r3, #167	; 0xa7
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	5cd3      	ldrb	r3, [r2, r3]
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d106      	bne.n	8006a06 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	885b      	ldrh	r3, [r3, #2]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	001a      	movs	r2, r3
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a04:	e015      	b.n	8006a32 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	0011      	movs	r1, r2
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f001 f96f 	bl	8007cf0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a12:	2317      	movs	r3, #23
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	2202      	movs	r2, #2
 8006a18:	701a      	strb	r2, [r3, #0]
          break;
 8006a1a:	e00a      	b.n	8006a32 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	0011      	movs	r1, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f001 f964 	bl	8007cf0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a28:	2317      	movs	r3, #23
 8006a2a:	18fb      	adds	r3, r7, r3
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	701a      	strb	r2, [r3, #0]
          break;
 8006a30:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006a32:	e00a      	b.n	8006a4a <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f001 f958 	bl	8007cf0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a40:	2317      	movs	r3, #23
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	2202      	movs	r2, #2
 8006a46:	701a      	strb	r2, [r3, #0]
      break;
 8006a48:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006a4a:	2317      	movs	r3, #23
 8006a4c:	18fb      	adds	r3, r7, r3
 8006a4e:	781b      	ldrb	r3, [r3, #0]
}
 8006a50:	0018      	movs	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b008      	add	sp, #32
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	200000c8 	.word	0x200000c8
 8006a5c:	200000b0 	.word	0x200000b0

08006a60 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2222      	movs	r2, #34	; 0x22
 8006a6c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006a6e:	4b02      	ldr	r3, [pc, #8]	; (8006a78 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8006a70:	0018      	movs	r0, r3
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b002      	add	sp, #8
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20000044 	.word	0x20000044

08006a7c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2222      	movs	r2, #34	; 0x22
 8006a88:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006a8a:	4b02      	ldr	r3, [pc, #8]	; (8006a94 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b002      	add	sp, #8
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000068 	.word	0x20000068

08006a98 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2222      	movs	r2, #34	; 0x22
 8006aa4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006aa6:	4b02      	ldr	r3, [pc, #8]	; (8006ab0 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	b002      	add	sp, #8
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	2000008c 	.word	0x2000008c

08006ab4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	000a      	movs	r2, r1
 8006abe:	1cfb      	adds	r3, r7, #3
 8006ac0:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	23ae      	movs	r3, #174	; 0xae
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	58d3      	ldr	r3, [r2, r3]
 8006aca:	2200      	movs	r2, #0
 8006acc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b002      	add	sp, #8
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006ae6:	4b02      	ldr	r3, [pc, #8]	; (8006af0 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8006ae8:	0018      	movs	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b002      	add	sp, #8
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	200000bc 	.word	0x200000bc

08006af4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	1dfb      	adds	r3, r7, #7
 8006b00:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e020      	b.n	8006b4e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	23ad      	movs	r3, #173	; 0xad
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	58d3      	ldr	r3, [r2, r3]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	23ad      	movs	r3, #173	; 0xad
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	2100      	movs	r1, #0
 8006b20:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	23ac      	movs	r3, #172	; 0xac
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	23a7      	movs	r3, #167	; 0xa7
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	2101      	movs	r1, #1
 8006b3a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	1dfa      	adds	r2, r7, #7
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f001 fbf6 	bl	8008338 <USBD_LL_Init>

  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	0018      	movs	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b004      	add	sp, #16
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b60:	200f      	movs	r0, #15
 8006b62:	183b      	adds	r3, r7, r0
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	23ad      	movs	r3, #173	; 0xad
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006b78:	183b      	adds	r3, r7, r0
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e003      	b.n	8006b88 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b80:	230f      	movs	r3, #15
 8006b82:	18fb      	adds	r3, r7, r3
 8006b84:	2202      	movs	r2, #2
 8006b86:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006b88:	230f      	movs	r3, #15
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	781b      	ldrb	r3, [r3, #0]
}
 8006b8e:	0018      	movs	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b004      	add	sp, #16
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f001 fc19 	bl	80083d8 <USBD_LL_Start>

  return USBD_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	0018      	movs	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b002      	add	sp, #8
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	0018      	movs	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b002      	add	sp, #8
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bc2:	b590      	push	{r4, r7, lr}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	000a      	movs	r2, r1
 8006bcc:	1cfb      	adds	r3, r7, #3
 8006bce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006bd0:	240f      	movs	r4, #15
 8006bd2:	193b      	adds	r3, r7, r4
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	23ad      	movs	r3, #173	; 0xad
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	58d3      	ldr	r3, [r2, r3]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00e      	beq.n	8006c02 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	23ad      	movs	r3, #173	; 0xad
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	58d3      	ldr	r3, [r2, r3]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1cfa      	adds	r2, r7, #3
 8006bf0:	7811      	ldrb	r1, [r2, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	0010      	movs	r0, r2
 8006bf6:	4798      	blx	r3
 8006bf8:	1e03      	subs	r3, r0, #0
 8006bfa:	d102      	bne.n	8006c02 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8006bfc:	193b      	adds	r3, r7, r4
 8006bfe:	2200      	movs	r2, #0
 8006c00:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006c02:	230f      	movs	r3, #15
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	781b      	ldrb	r3, [r3, #0]
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b005      	add	sp, #20
 8006c0e:	bd90      	pop	{r4, r7, pc}

08006c10 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	000a      	movs	r2, r1
 8006c1a:	1cfb      	adds	r3, r7, #3
 8006c1c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	23ad      	movs	r3, #173	; 0xad
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	58d3      	ldr	r3, [r2, r3]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	1cfa      	adds	r2, r7, #3
 8006c2a:	7811      	ldrb	r1, [r2, #0]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	0010      	movs	r0, r2
 8006c30:	4798      	blx	r3

  return USBD_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	0018      	movs	r0, r3
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b002      	add	sp, #8
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	22aa      	movs	r2, #170	; 0xaa
 8006c4a:	0092      	lsls	r2, r2, #2
 8006c4c:	4694      	mov	ip, r2
 8006c4e:	4463      	add	r3, ip
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	0011      	movs	r1, r2
 8006c54:	0018      	movs	r0, r3
 8006c56:	f001 f810 	bl	8007c7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	23a5      	movs	r3, #165	; 0xa5
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	2101      	movs	r1, #1
 8006c62:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a23      	ldr	r2, [pc, #140]	; (8006cf4 <USBD_LL_SetupStage+0xb8>)
 8006c68:	5a9b      	ldrh	r3, [r3, r2]
 8006c6a:	0019      	movs	r1, r3
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	23a6      	movs	r3, #166	; 0xa6
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	23aa      	movs	r3, #170	; 0xaa
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	5cd3      	ldrb	r3, [r2, r3]
 8006c7c:	001a      	movs	r2, r3
 8006c7e:	231f      	movs	r3, #31
 8006c80:	4013      	ands	r3, r2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d019      	beq.n	8006cba <USBD_LL_SetupStage+0x7e>
 8006c86:	d822      	bhi.n	8006cce <USBD_LL_SetupStage+0x92>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <USBD_LL_SetupStage+0x56>
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d00a      	beq.n	8006ca6 <USBD_LL_SetupStage+0x6a>
 8006c90:	e01d      	b.n	8006cce <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	22aa      	movs	r2, #170	; 0xaa
 8006c96:	0092      	lsls	r2, r2, #2
 8006c98:	189a      	adds	r2, r3, r2
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	0011      	movs	r1, r2
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 fa10 	bl	80070c4 <USBD_StdDevReq>
      break;
 8006ca4:	e020      	b.n	8006ce8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	22aa      	movs	r2, #170	; 0xaa
 8006caa:	0092      	lsls	r2, r2, #2
 8006cac:	189a      	adds	r2, r3, r2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	0011      	movs	r1, r2
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	f000 fa78 	bl	80071a8 <USBD_StdItfReq>
      break;
 8006cb8:	e016      	b.n	8006ce8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	22aa      	movs	r2, #170	; 0xaa
 8006cbe:	0092      	lsls	r2, r2, #2
 8006cc0:	189a      	adds	r2, r3, r2
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0011      	movs	r1, r2
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f000 fac5 	bl	8007256 <USBD_StdEPReq>
      break;
 8006ccc:	e00c      	b.n	8006ce8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	23aa      	movs	r3, #170	; 0xaa
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	5cd3      	ldrb	r3, [r2, r3]
 8006cd6:	227f      	movs	r2, #127	; 0x7f
 8006cd8:	4393      	bics	r3, r2
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	0011      	movs	r1, r2
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f001 fc00 	bl	80084e6 <USBD_LL_StallEP>
      break;
 8006ce6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	0018      	movs	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b002      	add	sp, #8
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	000002ae 	.word	0x000002ae

08006cf8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	607a      	str	r2, [r7, #4]
 8006d02:	200b      	movs	r0, #11
 8006d04:	183b      	adds	r3, r7, r0
 8006d06:	1c0a      	adds	r2, r1, #0
 8006d08:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d0a:	183b      	adds	r3, r7, r0
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d154      	bne.n	8006dbc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3355      	adds	r3, #85	; 0x55
 8006d16:	33ff      	adds	r3, #255	; 0xff
 8006d18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	23a5      	movs	r3, #165	; 0xa5
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	58d3      	ldr	r3, [r2, r3]
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d139      	bne.n	8006d9a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d919      	bls.n	8006d66 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d203      	bcs.n	8006d54 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	e002      	b.n	8006d5a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	001a      	movs	r2, r3
 8006d60:	f001 f877 	bl	8007e52 <USBD_CtlContinueRx>
 8006d64:	e045      	b.n	8006df2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	23ad      	movs	r3, #173	; 0xad
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	58d3      	ldr	r3, [r2, r3]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00d      	beq.n	8006d90 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	23a7      	movs	r3, #167	; 0xa7
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d107      	bne.n	8006d90 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	23ad      	movs	r3, #173	; 0xad
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	58d3      	ldr	r3, [r2, r3]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	0010      	movs	r0, r2
 8006d8e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	0018      	movs	r0, r3
 8006d94:	f001 f870 	bl	8007e78 <USBD_CtlSendStatus>
 8006d98:	e02b      	b.n	8006df2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	23a5      	movs	r3, #165	; 0xa5
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	58d3      	ldr	r3, [r2, r3]
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d125      	bne.n	8006df2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	23a5      	movs	r3, #165	; 0xa5
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	2100      	movs	r1, #0
 8006dae:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2100      	movs	r1, #0
 8006db4:	0018      	movs	r0, r3
 8006db6:	f001 fb96 	bl	80084e6 <USBD_LL_StallEP>
 8006dba:	e01a      	b.n	8006df2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	23ad      	movs	r3, #173	; 0xad
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	58d3      	ldr	r3, [r2, r3]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d011      	beq.n	8006dee <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	23a7      	movs	r3, #167	; 0xa7
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d10b      	bne.n	8006dee <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	23ad      	movs	r3, #173	; 0xad
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	58d3      	ldr	r3, [r2, r3]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	220b      	movs	r2, #11
 8006de2:	18ba      	adds	r2, r7, r2
 8006de4:	7811      	ldrb	r1, [r2, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	0010      	movs	r0, r2
 8006dea:	4798      	blx	r3
 8006dec:	e001      	b.n	8006df2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006dee:	2302      	movs	r3, #2
 8006df0:	e000      	b.n	8006df4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	0018      	movs	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b006      	add	sp, #24
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	200b      	movs	r0, #11
 8006e08:	183b      	adds	r3, r7, r0
 8006e0a:	1c0a      	adds	r2, r1, #0
 8006e0c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e0e:	183b      	adds	r3, r7, r0
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d000      	beq.n	8006e18 <USBD_LL_DataInStage+0x1c>
 8006e16:	e08e      	b.n	8006f36 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3314      	adds	r3, #20
 8006e1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	23a5      	movs	r3, #165	; 0xa5
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	58d3      	ldr	r3, [r2, r3]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d164      	bne.n	8006ef4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d915      	bls.n	8006e62 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	1ad2      	subs	r2, r2, r3
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f000 ffec 	bl	8007e2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f001 fc2c 	bl	80086b8 <USBD_LL_PrepareReceive>
 8006e60:	e059      	b.n	8006f16 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	0019      	movs	r1, r3
 8006e6c:	0010      	movs	r0, r2
 8006e6e:	f7f9 f9db 	bl	8000228 <__aeabi_uidivmod>
 8006e72:	1e0b      	subs	r3, r1, #0
 8006e74:	d11f      	bne.n	8006eb6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d319      	bcc.n	8006eb6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	23a6      	movs	r3, #166	; 0xa6
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d211      	bcs.n	8006eb6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	2100      	movs	r1, #0
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f000 ffc7 	bl	8007e2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	23a6      	movs	r3, #166	; 0xa6
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2200      	movs	r2, #0
 8006eae:	2100      	movs	r1, #0
 8006eb0:	f001 fc02 	bl	80086b8 <USBD_LL_PrepareReceive>
 8006eb4:	e02f      	b.n	8006f16 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	23ad      	movs	r3, #173	; 0xad
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	58d3      	ldr	r3, [r2, r3]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00d      	beq.n	8006ee0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	23a7      	movs	r3, #167	; 0xa7
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d107      	bne.n	8006ee0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	23ad      	movs	r3, #173	; 0xad
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	58d3      	ldr	r3, [r2, r3]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	0010      	movs	r0, r2
 8006ede:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2180      	movs	r1, #128	; 0x80
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f001 fafe 	bl	80084e6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	0018      	movs	r0, r3
 8006eee:	f000 ffd7 	bl	8007ea0 <USBD_CtlReceiveStatus>
 8006ef2:	e010      	b.n	8006f16 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	23a5      	movs	r3, #165	; 0xa5
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	58d3      	ldr	r3, [r2, r3]
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d005      	beq.n	8006f0c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	23a5      	movs	r3, #165	; 0xa5
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2180      	movs	r1, #128	; 0x80
 8006f10:	0018      	movs	r0, r3
 8006f12:	f001 fae8 	bl	80084e6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	23a8      	movs	r3, #168	; 0xa8
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	5cd3      	ldrb	r3, [r2, r3]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d124      	bne.n	8006f6c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	0018      	movs	r0, r3
 8006f26:	f7ff fe43 	bl	8006bb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	23a8      	movs	r3, #168	; 0xa8
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	2100      	movs	r1, #0
 8006f32:	54d1      	strb	r1, [r2, r3]
 8006f34:	e01a      	b.n	8006f6c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	23ad      	movs	r3, #173	; 0xad
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	58d3      	ldr	r3, [r2, r3]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d011      	beq.n	8006f68 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	23a7      	movs	r3, #167	; 0xa7
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d10b      	bne.n	8006f68 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	23ad      	movs	r3, #173	; 0xad
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	58d3      	ldr	r3, [r2, r3]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	220b      	movs	r2, #11
 8006f5c:	18ba      	adds	r2, r7, r2
 8006f5e:	7811      	ldrb	r1, [r2, #0]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	0010      	movs	r0, r2
 8006f64:	4798      	blx	r3
 8006f66:	e001      	b.n	8006f6c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e000      	b.n	8006f6e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	0018      	movs	r0, r3
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b006      	add	sp, #24
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	2340      	movs	r3, #64	; 0x40
 8006f82:	2200      	movs	r2, #0
 8006f84:	2100      	movs	r1, #0
 8006f86:	f001 fa4c 	bl	8008422 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	23ac      	movs	r3, #172	; 0xac
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	2101      	movs	r1, #1
 8006f92:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	23b2      	movs	r3, #178	; 0xb2
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	2140      	movs	r1, #64	; 0x40
 8006f9c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	2340      	movs	r3, #64	; 0x40
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2180      	movs	r1, #128	; 0x80
 8006fa6:	f001 fa3c 	bl	8008422 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2240      	movs	r2, #64	; 0x40
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	23a7      	movs	r3, #167	; 0xa7
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	23a5      	movs	r3, #165	; 0xa5
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	23a9      	movs	r3, #169	; 0xa9
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	23ae      	movs	r3, #174	; 0xae
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	58d3      	ldr	r3, [r2, r3]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	23ad      	movs	r3, #173	; 0xad
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	58d3      	ldr	r3, [r2, r3]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	b2d9      	uxtb	r1, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	4790      	blx	r2
  }

  return USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	0018      	movs	r0, r3
 8007000:	46bd      	mov	sp, r7
 8007002:	b002      	add	sp, #8
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	000a      	movs	r2, r1
 8007010:	1cfb      	adds	r3, r7, #3
 8007012:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	1cfa      	adds	r2, r7, #3
 8007018:	7812      	ldrb	r2, [r2, #0]
 800701a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	0018      	movs	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	b002      	add	sp, #8
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	23a7      	movs	r3, #167	; 0xa7
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	5cd1      	ldrb	r1, [r2, r3]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a06      	ldr	r2, [pc, #24]	; (8007054 <USBD_LL_Suspend+0x2c>)
 800703c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	23a7      	movs	r3, #167	; 0xa7
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	2104      	movs	r1, #4
 8007046:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	0018      	movs	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	b002      	add	sp, #8
 8007050:	bd80      	pop	{r7, pc}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	0000029d 	.word	0x0000029d

08007058 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	23a7      	movs	r3, #167	; 0xa7
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	5cd3      	ldrb	r3, [r2, r3]
 8007068:	2b04      	cmp	r3, #4
 800706a:	d106      	bne.n	800707a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a05      	ldr	r2, [pc, #20]	; (8007084 <USBD_LL_Resume+0x2c>)
 8007070:	5c99      	ldrb	r1, [r3, r2]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	23a7      	movs	r3, #167	; 0xa7
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	0018      	movs	r0, r3
 800707e:	46bd      	mov	sp, r7
 8007080:	b002      	add	sp, #8
 8007082:	bd80      	pop	{r7, pc}
 8007084:	0000029d 	.word	0x0000029d

08007088 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	23a7      	movs	r3, #167	; 0xa7
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	5cd3      	ldrb	r3, [r2, r3]
 8007098:	2b03      	cmp	r3, #3
 800709a:	d10e      	bne.n	80070ba <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	23ad      	movs	r3, #173	; 0xad
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	58d3      	ldr	r3, [r2, r3]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	23ad      	movs	r3, #173	; 0xad
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	58d3      	ldr	r3, [r2, r3]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	0010      	movs	r0, r2
 80070b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	0018      	movs	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	b002      	add	sp, #8
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ce:	230f      	movs	r3, #15
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	2200      	movs	r2, #0
 80070d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	001a      	movs	r2, r3
 80070dc:	2360      	movs	r3, #96	; 0x60
 80070de:	4013      	ands	r3, r2
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d004      	beq.n	80070ee <USBD_StdDevReq+0x2a>
 80070e4:	d84f      	bhi.n	8007186 <USBD_StdDevReq+0xc2>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <USBD_StdDevReq+0x3e>
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d14b      	bne.n	8007186 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	23ad      	movs	r3, #173	; 0xad
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	58d3      	ldr	r3, [r2, r3]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	0010      	movs	r0, r2
 80070fe:	4798      	blx	r3
      break;
 8007100:	e048      	b.n	8007194 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b09      	cmp	r3, #9
 8007108:	d835      	bhi.n	8007176 <USBD_StdDevReq+0xb2>
 800710a:	009a      	lsls	r2, r3, #2
 800710c:	4b25      	ldr	r3, [pc, #148]	; (80071a4 <USBD_StdDevReq+0xe0>)
 800710e:	18d3      	adds	r3, r2, r3
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	0011      	movs	r1, r2
 800711a:	0018      	movs	r0, r3
 800711c:	f000 fa52 	bl	80075c4 <USBD_GetDescriptor>
          break;
 8007120:	e030      	b.n	8007184 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	0011      	movs	r1, r2
 8007128:	0018      	movs	r0, r3
 800712a:	f000 fbfd 	bl	8007928 <USBD_SetAddress>
          break;
 800712e:	e029      	b.n	8007184 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0011      	movs	r1, r2
 8007136:	0018      	movs	r0, r3
 8007138:	f000 fc4a 	bl	80079d0 <USBD_SetConfig>
          break;
 800713c:	e022      	b.n	8007184 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	0011      	movs	r1, r2
 8007144:	0018      	movs	r0, r3
 8007146:	f000 fce7 	bl	8007b18 <USBD_GetConfig>
          break;
 800714a:	e01b      	b.n	8007184 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f000 fd1b 	bl	8007b8e <USBD_GetStatus>
          break;
 8007158:	e014      	b.n	8007184 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	0011      	movs	r1, r2
 8007160:	0018      	movs	r0, r3
 8007162:	f000 fd4e 	bl	8007c02 <USBD_SetFeature>
          break;
 8007166:	e00d      	b.n	8007184 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	0011      	movs	r1, r2
 800716e:	0018      	movs	r0, r3
 8007170:	f000 fd5d 	bl	8007c2e <USBD_ClrFeature>
          break;
 8007174:	e006      	b.n	8007184 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	0011      	movs	r1, r2
 800717c:	0018      	movs	r0, r3
 800717e:	f000 fdb7 	bl	8007cf0 <USBD_CtlError>
          break;
 8007182:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007184:	e006      	b.n	8007194 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	0011      	movs	r1, r2
 800718c:	0018      	movs	r0, r3
 800718e:	f000 fdaf 	bl	8007cf0 <USBD_CtlError>
      break;
 8007192:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007194:	230f      	movs	r3, #15
 8007196:	18fb      	adds	r3, r7, r3
 8007198:	781b      	ldrb	r3, [r3, #0]
}
 800719a:	0018      	movs	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	b004      	add	sp, #16
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	080098d4 	.word	0x080098d4

080071a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80071a8:	b5b0      	push	{r4, r5, r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071b2:	230f      	movs	r3, #15
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	2200      	movs	r2, #0
 80071b8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	001a      	movs	r2, r3
 80071c0:	2360      	movs	r3, #96	; 0x60
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	d004      	beq.n	80071d2 <USBD_StdItfReq+0x2a>
 80071c8:	d839      	bhi.n	800723e <USBD_StdItfReq+0x96>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <USBD_StdItfReq+0x2a>
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d135      	bne.n	800723e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	23a7      	movs	r3, #167	; 0xa7
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	5cd3      	ldrb	r3, [r2, r3]
 80071da:	3b01      	subs	r3, #1
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d825      	bhi.n	800722c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	889b      	ldrh	r3, [r3, #4]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d819      	bhi.n	800721e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	23ad      	movs	r3, #173	; 0xad
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	58d3      	ldr	r3, [r2, r3]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	250f      	movs	r5, #15
 80071f6:	197c      	adds	r4, r7, r5
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	0010      	movs	r0, r2
 80071fe:	4798      	blx	r3
 8007200:	0003      	movs	r3, r0
 8007202:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	88db      	ldrh	r3, [r3, #6]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d116      	bne.n	800723a <USBD_StdItfReq+0x92>
 800720c:	197b      	adds	r3, r7, r5
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d112      	bne.n	800723a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	0018      	movs	r0, r3
 8007218:	f000 fe2e 	bl	8007e78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800721c:	e00d      	b.n	800723a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	0011      	movs	r1, r2
 8007224:	0018      	movs	r0, r3
 8007226:	f000 fd63 	bl	8007cf0 <USBD_CtlError>
          break;
 800722a:	e006      	b.n	800723a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	0011      	movs	r1, r2
 8007232:	0018      	movs	r0, r3
 8007234:	f000 fd5c 	bl	8007cf0 <USBD_CtlError>
          break;
 8007238:	e000      	b.n	800723c <USBD_StdItfReq+0x94>
          break;
 800723a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800723c:	e006      	b.n	800724c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	0011      	movs	r1, r2
 8007244:	0018      	movs	r0, r3
 8007246:	f000 fd53 	bl	8007cf0 <USBD_CtlError>
      break;
 800724a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	0018      	movs	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	b004      	add	sp, #16
 8007254:	bdb0      	pop	{r4, r5, r7, pc}

08007256 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007256:	b5b0      	push	{r4, r5, r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007260:	230f      	movs	r3, #15
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	889a      	ldrh	r2, [r3, #4]
 800726c:	230e      	movs	r3, #14
 800726e:	18fb      	adds	r3, r7, r3
 8007270:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	001a      	movs	r2, r3
 8007278:	2360      	movs	r3, #96	; 0x60
 800727a:	4013      	ands	r3, r2
 800727c:	2b40      	cmp	r3, #64	; 0x40
 800727e:	d006      	beq.n	800728e <USBD_StdEPReq+0x38>
 8007280:	d900      	bls.n	8007284 <USBD_StdEPReq+0x2e>
 8007282:	e190      	b.n	80075a6 <USBD_StdEPReq+0x350>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00c      	beq.n	80072a2 <USBD_StdEPReq+0x4c>
 8007288:	2b20      	cmp	r3, #32
 800728a:	d000      	beq.n	800728e <USBD_StdEPReq+0x38>
 800728c:	e18b      	b.n	80075a6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	23ad      	movs	r3, #173	; 0xad
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	58d3      	ldr	r3, [r2, r3]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	0010      	movs	r0, r2
 800729e:	4798      	blx	r3
      break;
 80072a0:	e188      	b.n	80075b4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	001a      	movs	r2, r3
 80072a8:	2360      	movs	r3, #96	; 0x60
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d10f      	bne.n	80072d0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	23ad      	movs	r3, #173	; 0xad
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	58d3      	ldr	r3, [r2, r3]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	250f      	movs	r5, #15
 80072bc:	197c      	adds	r4, r7, r5
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	0010      	movs	r0, r2
 80072c4:	4798      	blx	r3
 80072c6:	0003      	movs	r3, r0
 80072c8:	7023      	strb	r3, [r4, #0]

        return ret;
 80072ca:	197b      	adds	r3, r7, r5
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	e174      	b.n	80075ba <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d007      	beq.n	80072e8 <USBD_StdEPReq+0x92>
 80072d8:	dd00      	ble.n	80072dc <USBD_StdEPReq+0x86>
 80072da:	e15c      	b.n	8007596 <USBD_StdEPReq+0x340>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d100      	bne.n	80072e2 <USBD_StdEPReq+0x8c>
 80072e0:	e092      	b.n	8007408 <USBD_StdEPReq+0x1b2>
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d04b      	beq.n	800737e <USBD_StdEPReq+0x128>
 80072e6:	e156      	b.n	8007596 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	23a7      	movs	r3, #167	; 0xa7
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d002      	beq.n	80072fa <USBD_StdEPReq+0xa4>
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d01d      	beq.n	8007334 <USBD_StdEPReq+0xde>
 80072f8:	e039      	b.n	800736e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072fa:	220e      	movs	r2, #14
 80072fc:	18bb      	adds	r3, r7, r2
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d010      	beq.n	8007326 <USBD_StdEPReq+0xd0>
 8007304:	18bb      	adds	r3, r7, r2
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b80      	cmp	r3, #128	; 0x80
 800730a:	d00c      	beq.n	8007326 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800730c:	18bb      	adds	r3, r7, r2
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	0011      	movs	r1, r2
 8007314:	0018      	movs	r0, r3
 8007316:	f001 f8e6 	bl	80084e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2180      	movs	r1, #128	; 0x80
 800731e:	0018      	movs	r0, r3
 8007320:	f001 f8e1 	bl	80084e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007324:	e02a      	b.n	800737c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	0011      	movs	r1, r2
 800732c:	0018      	movs	r0, r3
 800732e:	f000 fcdf 	bl	8007cf0 <USBD_CtlError>
              break;
 8007332:	e023      	b.n	800737c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	885b      	ldrh	r3, [r3, #2]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d113      	bne.n	8007364 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800733c:	220e      	movs	r2, #14
 800733e:	18bb      	adds	r3, r7, r2
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00e      	beq.n	8007364 <USBD_StdEPReq+0x10e>
 8007346:	18bb      	adds	r3, r7, r2
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b80      	cmp	r3, #128	; 0x80
 800734c:	d00a      	beq.n	8007364 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	88db      	ldrh	r3, [r3, #6]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007356:	18bb      	adds	r3, r7, r2
 8007358:	781a      	ldrb	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	0011      	movs	r1, r2
 800735e:	0018      	movs	r0, r3
 8007360:	f001 f8c1 	bl	80084e6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	0018      	movs	r0, r3
 8007368:	f000 fd86 	bl	8007e78 <USBD_CtlSendStatus>

              break;
 800736c:	e006      	b.n	800737c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	0011      	movs	r1, r2
 8007374:	0018      	movs	r0, r3
 8007376:	f000 fcbb 	bl	8007cf0 <USBD_CtlError>
              break;
 800737a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800737c:	e112      	b.n	80075a4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	23a7      	movs	r3, #167	; 0xa7
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	5cd3      	ldrb	r3, [r2, r3]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d002      	beq.n	8007390 <USBD_StdEPReq+0x13a>
 800738a:	2b03      	cmp	r3, #3
 800738c:	d01d      	beq.n	80073ca <USBD_StdEPReq+0x174>
 800738e:	e032      	b.n	80073f6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007390:	220e      	movs	r2, #14
 8007392:	18bb      	adds	r3, r7, r2
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d010      	beq.n	80073bc <USBD_StdEPReq+0x166>
 800739a:	18bb      	adds	r3, r7, r2
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b80      	cmp	r3, #128	; 0x80
 80073a0:	d00c      	beq.n	80073bc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073a2:	18bb      	adds	r3, r7, r2
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	0011      	movs	r1, r2
 80073aa:	0018      	movs	r0, r3
 80073ac:	f001 f89b 	bl	80084e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	0018      	movs	r0, r3
 80073b6:	f001 f896 	bl	80084e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073ba:	e024      	b.n	8007406 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	0011      	movs	r1, r2
 80073c2:	0018      	movs	r0, r3
 80073c4:	f000 fc94 	bl	8007cf0 <USBD_CtlError>
              break;
 80073c8:	e01d      	b.n	8007406 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	885b      	ldrh	r3, [r3, #2]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d118      	bne.n	8007404 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073d2:	210e      	movs	r1, #14
 80073d4:	187b      	adds	r3, r7, r1
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	227f      	movs	r2, #127	; 0x7f
 80073da:	4013      	ands	r3, r2
 80073dc:	d006      	beq.n	80073ec <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80073de:	187b      	adds	r3, r7, r1
 80073e0:	781a      	ldrb	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	0011      	movs	r1, r2
 80073e6:	0018      	movs	r0, r3
 80073e8:	f001 f8a8 	bl	800853c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 fd42 	bl	8007e78 <USBD_CtlSendStatus>
              }
              break;
 80073f4:	e006      	b.n	8007404 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	0011      	movs	r1, r2
 80073fc:	0018      	movs	r0, r3
 80073fe:	f000 fc77 	bl	8007cf0 <USBD_CtlError>
              break;
 8007402:	e000      	b.n	8007406 <USBD_StdEPReq+0x1b0>
              break;
 8007404:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007406:	e0cd      	b.n	80075a4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	23a7      	movs	r3, #167	; 0xa7
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	5cd3      	ldrb	r3, [r2, r3]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d002      	beq.n	800741a <USBD_StdEPReq+0x1c4>
 8007414:	2b03      	cmp	r3, #3
 8007416:	d03c      	beq.n	8007492 <USBD_StdEPReq+0x23c>
 8007418:	e0b5      	b.n	8007586 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800741a:	220e      	movs	r2, #14
 800741c:	18bb      	adds	r3, r7, r2
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <USBD_StdEPReq+0x1e4>
 8007424:	18bb      	adds	r3, r7, r2
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b80      	cmp	r3, #128	; 0x80
 800742a:	d006      	beq.n	800743a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	0011      	movs	r1, r2
 8007432:	0018      	movs	r0, r3
 8007434:	f000 fc5c 	bl	8007cf0 <USBD_CtlError>
                break;
 8007438:	e0ac      	b.n	8007594 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800743a:	220e      	movs	r2, #14
 800743c:	18bb      	adds	r3, r7, r2
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b25b      	sxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	da0c      	bge.n	8007460 <USBD_StdEPReq+0x20a>
 8007446:	18bb      	adds	r3, r7, r2
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	227f      	movs	r2, #127	; 0x7f
 800744c:	401a      	ands	r2, r3
 800744e:	0013      	movs	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	189b      	adds	r3, r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	3310      	adds	r3, #16
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	18d3      	adds	r3, r2, r3
 800745c:	3304      	adds	r3, #4
 800745e:	e00d      	b.n	800747c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007460:	230e      	movs	r3, #14
 8007462:	18fb      	adds	r3, r7, r3
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	227f      	movs	r2, #127	; 0x7f
 8007468:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800746a:	0013      	movs	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	189b      	adds	r3, r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	3351      	adds	r3, #81	; 0x51
 8007474:	33ff      	adds	r3, #255	; 0xff
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	18d3      	adds	r3, r2, r3
 800747a:	3304      	adds	r3, #4
 800747c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2202      	movs	r2, #2
 800748a:	0018      	movs	r0, r3
 800748c:	f000 fcae 	bl	8007dec <USBD_CtlSendData>
              break;
 8007490:	e080      	b.n	8007594 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007492:	220e      	movs	r2, #14
 8007494:	18bb      	adds	r3, r7, r2
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	b25b      	sxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	da14      	bge.n	80074c8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800749e:	18bb      	adds	r3, r7, r2
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	220f      	movs	r2, #15
 80074a4:	401a      	ands	r2, r3
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	0013      	movs	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	189b      	adds	r3, r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	18cb      	adds	r3, r1, r3
 80074b2:	3318      	adds	r3, #24
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d11e      	bne.n	80074f8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	0011      	movs	r1, r2
 80074c0:	0018      	movs	r0, r3
 80074c2:	f000 fc15 	bl	8007cf0 <USBD_CtlError>
                  break;
 80074c6:	e065      	b.n	8007594 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074c8:	230e      	movs	r3, #14
 80074ca:	18fb      	adds	r3, r7, r3
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	220f      	movs	r2, #15
 80074d0:	401a      	ands	r2, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	23ac      	movs	r3, #172	; 0xac
 80074d6:	0059      	lsls	r1, r3, #1
 80074d8:	0013      	movs	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	189b      	adds	r3, r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	18c3      	adds	r3, r0, r3
 80074e2:	185b      	adds	r3, r3, r1
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	0011      	movs	r1, r2
 80074f0:	0018      	movs	r0, r3
 80074f2:	f000 fbfd 	bl	8007cf0 <USBD_CtlError>
                  break;
 80074f6:	e04d      	b.n	8007594 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f8:	220e      	movs	r2, #14
 80074fa:	18bb      	adds	r3, r7, r2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b25b      	sxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	da0c      	bge.n	800751e <USBD_StdEPReq+0x2c8>
 8007504:	18bb      	adds	r3, r7, r2
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	227f      	movs	r2, #127	; 0x7f
 800750a:	401a      	ands	r2, r3
 800750c:	0013      	movs	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	189b      	adds	r3, r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	3310      	adds	r3, #16
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	18d3      	adds	r3, r2, r3
 800751a:	3304      	adds	r3, #4
 800751c:	e00d      	b.n	800753a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800751e:	230e      	movs	r3, #14
 8007520:	18fb      	adds	r3, r7, r3
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	227f      	movs	r2, #127	; 0x7f
 8007526:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007528:	0013      	movs	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	189b      	adds	r3, r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	3351      	adds	r3, #81	; 0x51
 8007532:	33ff      	adds	r3, #255	; 0xff
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	18d3      	adds	r3, r2, r3
 8007538:	3304      	adds	r3, #4
 800753a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800753c:	220e      	movs	r2, #14
 800753e:	18bb      	adds	r3, r7, r2
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <USBD_StdEPReq+0x2f8>
 8007546:	18bb      	adds	r3, r7, r2
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b80      	cmp	r3, #128	; 0x80
 800754c:	d103      	bne.n	8007556 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e010      	b.n	8007578 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007556:	230e      	movs	r3, #14
 8007558:	18fb      	adds	r3, r7, r3
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	0011      	movs	r1, r2
 8007560:	0018      	movs	r0, r3
 8007562:	f001 f816 	bl	8008592 <USBD_LL_IsStallEP>
 8007566:	1e03      	subs	r3, r0, #0
 8007568:	d003      	beq.n	8007572 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2201      	movs	r2, #1
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	e002      	b.n	8007578 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2202      	movs	r2, #2
 800757e:	0018      	movs	r0, r3
 8007580:	f000 fc34 	bl	8007dec <USBD_CtlSendData>
              break;
 8007584:	e006      	b.n	8007594 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	0011      	movs	r1, r2
 800758c:	0018      	movs	r0, r3
 800758e:	f000 fbaf 	bl	8007cf0 <USBD_CtlError>
              break;
 8007592:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007594:	e006      	b.n	80075a4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	0011      	movs	r1, r2
 800759c:	0018      	movs	r0, r3
 800759e:	f000 fba7 	bl	8007cf0 <USBD_CtlError>
          break;
 80075a2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80075a4:	e006      	b.n	80075b4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	0011      	movs	r1, r2
 80075ac:	0018      	movs	r0, r3
 80075ae:	f000 fb9f 	bl	8007cf0 <USBD_CtlError>
      break;
 80075b2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80075b4:	230f      	movs	r3, #15
 80075b6:	18fb      	adds	r3, r7, r3
 80075b8:	781b      	ldrb	r3, [r3, #0]
}
 80075ba:	0018      	movs	r0, r3
 80075bc:	46bd      	mov	sp, r7
 80075be:	b004      	add	sp, #16
 80075c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080075c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ce:	2308      	movs	r3, #8
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	2200      	movs	r2, #0
 80075d4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075da:	230b      	movs	r3, #11
 80075dc:	18fb      	adds	r3, r7, r3
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	885b      	ldrh	r3, [r3, #2]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b07      	cmp	r3, #7
 80075ec:	d900      	bls.n	80075f0 <USBD_GetDescriptor+0x2c>
 80075ee:	e159      	b.n	80078a4 <USBD_GetDescriptor+0x2e0>
 80075f0:	009a      	lsls	r2, r3, #2
 80075f2:	4bcb      	ldr	r3, [pc, #812]	; (8007920 <USBD_GetDescriptor+0x35c>)
 80075f4:	18d3      	adds	r3, r2, r3
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	23ac      	movs	r3, #172	; 0xac
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	58d3      	ldr	r3, [r2, r3]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	7c12      	ldrb	r2, [r2, #16]
 8007608:	2108      	movs	r1, #8
 800760a:	1879      	adds	r1, r7, r1
 800760c:	0010      	movs	r0, r2
 800760e:	4798      	blx	r3
 8007610:	0003      	movs	r3, r0
 8007612:	60fb      	str	r3, [r7, #12]
      break;
 8007614:	e153      	b.n	80078be <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7c1b      	ldrb	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10f      	bne.n	800763e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	23ad      	movs	r3, #173	; 0xad
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	58d3      	ldr	r3, [r2, r3]
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	2208      	movs	r2, #8
 800762a:	18ba      	adds	r2, r7, r2
 800762c:	0010      	movs	r0, r2
 800762e:	4798      	blx	r3
 8007630:	0003      	movs	r3, r0
 8007632:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	2202      	movs	r2, #2
 800763a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800763c:	e13f      	b.n	80078be <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	23ad      	movs	r3, #173	; 0xad
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	58d3      	ldr	r3, [r2, r3]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	2208      	movs	r2, #8
 800764a:	18ba      	adds	r2, r7, r2
 800764c:	0010      	movs	r0, r2
 800764e:	4798      	blx	r3
 8007650:	0003      	movs	r3, r0
 8007652:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	2202      	movs	r2, #2
 800765a:	701a      	strb	r2, [r3, #0]
      break;
 800765c:	e12f      	b.n	80078be <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	885b      	ldrh	r3, [r3, #2]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b05      	cmp	r3, #5
 8007666:	d900      	bls.n	800766a <USBD_GetDescriptor+0xa6>
 8007668:	e0d0      	b.n	800780c <USBD_GetDescriptor+0x248>
 800766a:	009a      	lsls	r2, r3, #2
 800766c:	4bad      	ldr	r3, [pc, #692]	; (8007924 <USBD_GetDescriptor+0x360>)
 800766e:	18d3      	adds	r3, r2, r3
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	23ac      	movs	r3, #172	; 0xac
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	58d3      	ldr	r3, [r2, r3]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00d      	beq.n	800769e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	23ac      	movs	r3, #172	; 0xac
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	58d3      	ldr	r3, [r2, r3]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	7c12      	ldrb	r2, [r2, #16]
 8007690:	2108      	movs	r1, #8
 8007692:	1879      	adds	r1, r7, r1
 8007694:	0010      	movs	r0, r2
 8007696:	4798      	blx	r3
 8007698:	0003      	movs	r3, r0
 800769a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769c:	e0c3      	b.n	8007826 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	0011      	movs	r1, r2
 80076a4:	0018      	movs	r0, r3
 80076a6:	f000 fb23 	bl	8007cf0 <USBD_CtlError>
            err++;
 80076aa:	210b      	movs	r1, #11
 80076ac:	187b      	adds	r3, r7, r1
 80076ae:	781a      	ldrb	r2, [r3, #0]
 80076b0:	187b      	adds	r3, r7, r1
 80076b2:	3201      	adds	r2, #1
 80076b4:	701a      	strb	r2, [r3, #0]
          break;
 80076b6:	e0b6      	b.n	8007826 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	23ac      	movs	r3, #172	; 0xac
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	58d3      	ldr	r3, [r2, r3]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00d      	beq.n	80076e2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	23ac      	movs	r3, #172	; 0xac
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	58d3      	ldr	r3, [r2, r3]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7c12      	ldrb	r2, [r2, #16]
 80076d4:	2108      	movs	r1, #8
 80076d6:	1879      	adds	r1, r7, r1
 80076d8:	0010      	movs	r0, r2
 80076da:	4798      	blx	r3
 80076dc:	0003      	movs	r3, r0
 80076de:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e0:	e0a1      	b.n	8007826 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	0011      	movs	r1, r2
 80076e8:	0018      	movs	r0, r3
 80076ea:	f000 fb01 	bl	8007cf0 <USBD_CtlError>
            err++;
 80076ee:	210b      	movs	r1, #11
 80076f0:	187b      	adds	r3, r7, r1
 80076f2:	781a      	ldrb	r2, [r3, #0]
 80076f4:	187b      	adds	r3, r7, r1
 80076f6:	3201      	adds	r2, #1
 80076f8:	701a      	strb	r2, [r3, #0]
          break;
 80076fa:	e094      	b.n	8007826 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	23ac      	movs	r3, #172	; 0xac
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	58d3      	ldr	r3, [r2, r3]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00d      	beq.n	8007726 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	23ac      	movs	r3, #172	; 0xac
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	58d3      	ldr	r3, [r2, r3]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	7c12      	ldrb	r2, [r2, #16]
 8007718:	2108      	movs	r1, #8
 800771a:	1879      	adds	r1, r7, r1
 800771c:	0010      	movs	r0, r2
 800771e:	4798      	blx	r3
 8007720:	0003      	movs	r3, r0
 8007722:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007724:	e07f      	b.n	8007826 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	0011      	movs	r1, r2
 800772c:	0018      	movs	r0, r3
 800772e:	f000 fadf 	bl	8007cf0 <USBD_CtlError>
            err++;
 8007732:	210b      	movs	r1, #11
 8007734:	187b      	adds	r3, r7, r1
 8007736:	781a      	ldrb	r2, [r3, #0]
 8007738:	187b      	adds	r3, r7, r1
 800773a:	3201      	adds	r2, #1
 800773c:	701a      	strb	r2, [r3, #0]
          break;
 800773e:	e072      	b.n	8007826 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	23ac      	movs	r3, #172	; 0xac
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	58d3      	ldr	r3, [r2, r3]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	23ac      	movs	r3, #172	; 0xac
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	58d3      	ldr	r3, [r2, r3]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7c12      	ldrb	r2, [r2, #16]
 800775c:	2108      	movs	r1, #8
 800775e:	1879      	adds	r1, r7, r1
 8007760:	0010      	movs	r0, r2
 8007762:	4798      	blx	r3
 8007764:	0003      	movs	r3, r0
 8007766:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007768:	e05d      	b.n	8007826 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	0011      	movs	r1, r2
 8007770:	0018      	movs	r0, r3
 8007772:	f000 fabd 	bl	8007cf0 <USBD_CtlError>
            err++;
 8007776:	210b      	movs	r1, #11
 8007778:	187b      	adds	r3, r7, r1
 800777a:	781a      	ldrb	r2, [r3, #0]
 800777c:	187b      	adds	r3, r7, r1
 800777e:	3201      	adds	r2, #1
 8007780:	701a      	strb	r2, [r3, #0]
          break;
 8007782:	e050      	b.n	8007826 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	23ac      	movs	r3, #172	; 0xac
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	58d3      	ldr	r3, [r2, r3]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00d      	beq.n	80077ae <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	23ac      	movs	r3, #172	; 0xac
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	58d3      	ldr	r3, [r2, r3]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	7c12      	ldrb	r2, [r2, #16]
 80077a0:	2108      	movs	r1, #8
 80077a2:	1879      	adds	r1, r7, r1
 80077a4:	0010      	movs	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	0003      	movs	r3, r0
 80077aa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ac:	e03b      	b.n	8007826 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	0011      	movs	r1, r2
 80077b4:	0018      	movs	r0, r3
 80077b6:	f000 fa9b 	bl	8007cf0 <USBD_CtlError>
            err++;
 80077ba:	210b      	movs	r1, #11
 80077bc:	187b      	adds	r3, r7, r1
 80077be:	781a      	ldrb	r2, [r3, #0]
 80077c0:	187b      	adds	r3, r7, r1
 80077c2:	3201      	adds	r2, #1
 80077c4:	701a      	strb	r2, [r3, #0]
          break;
 80077c6:	e02e      	b.n	8007826 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	23ac      	movs	r3, #172	; 0xac
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	58d3      	ldr	r3, [r2, r3]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00d      	beq.n	80077f2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	23ac      	movs	r3, #172	; 0xac
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	58d3      	ldr	r3, [r2, r3]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7c12      	ldrb	r2, [r2, #16]
 80077e4:	2108      	movs	r1, #8
 80077e6:	1879      	adds	r1, r7, r1
 80077e8:	0010      	movs	r0, r2
 80077ea:	4798      	blx	r3
 80077ec:	0003      	movs	r3, r0
 80077ee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f0:	e019      	b.n	8007826 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	0011      	movs	r1, r2
 80077f8:	0018      	movs	r0, r3
 80077fa:	f000 fa79 	bl	8007cf0 <USBD_CtlError>
            err++;
 80077fe:	210b      	movs	r1, #11
 8007800:	187b      	adds	r3, r7, r1
 8007802:	781a      	ldrb	r2, [r3, #0]
 8007804:	187b      	adds	r3, r7, r1
 8007806:	3201      	adds	r2, #1
 8007808:	701a      	strb	r2, [r3, #0]
          break;
 800780a:	e00c      	b.n	8007826 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	0011      	movs	r1, r2
 8007812:	0018      	movs	r0, r3
 8007814:	f000 fa6c 	bl	8007cf0 <USBD_CtlError>
          err++;
 8007818:	210b      	movs	r1, #11
 800781a:	187b      	adds	r3, r7, r1
 800781c:	781a      	ldrb	r2, [r3, #0]
 800781e:	187b      	adds	r3, r7, r1
 8007820:	3201      	adds	r2, #1
 8007822:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8007824:	e04b      	b.n	80078be <USBD_GetDescriptor+0x2fa>
 8007826:	e04a      	b.n	80078be <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	7c1b      	ldrb	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10b      	bne.n	8007848 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	23ad      	movs	r3, #173	; 0xad
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	58d3      	ldr	r3, [r2, r3]
 8007838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783a:	2208      	movs	r2, #8
 800783c:	18ba      	adds	r2, r7, r2
 800783e:	0010      	movs	r0, r2
 8007840:	4798      	blx	r3
 8007842:	0003      	movs	r3, r0
 8007844:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007846:	e03a      	b.n	80078be <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	0011      	movs	r1, r2
 800784e:	0018      	movs	r0, r3
 8007850:	f000 fa4e 	bl	8007cf0 <USBD_CtlError>
        err++;
 8007854:	210b      	movs	r1, #11
 8007856:	187b      	adds	r3, r7, r1
 8007858:	781a      	ldrb	r2, [r3, #0]
 800785a:	187b      	adds	r3, r7, r1
 800785c:	3201      	adds	r2, #1
 800785e:	701a      	strb	r2, [r3, #0]
      break;
 8007860:	e02d      	b.n	80078be <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7c1b      	ldrb	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10f      	bne.n	800788a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	23ad      	movs	r3, #173	; 0xad
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	58d3      	ldr	r3, [r2, r3]
 8007872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007874:	2208      	movs	r2, #8
 8007876:	18ba      	adds	r2, r7, r2
 8007878:	0010      	movs	r0, r2
 800787a:	4798      	blx	r3
 800787c:	0003      	movs	r3, r0
 800787e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3301      	adds	r3, #1
 8007884:	2207      	movs	r2, #7
 8007886:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007888:	e019      	b.n	80078be <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	0011      	movs	r1, r2
 8007890:	0018      	movs	r0, r3
 8007892:	f000 fa2d 	bl	8007cf0 <USBD_CtlError>
        err++;
 8007896:	210b      	movs	r1, #11
 8007898:	187b      	adds	r3, r7, r1
 800789a:	781a      	ldrb	r2, [r3, #0]
 800789c:	187b      	adds	r3, r7, r1
 800789e:	3201      	adds	r2, #1
 80078a0:	701a      	strb	r2, [r3, #0]
      break;
 80078a2:	e00c      	b.n	80078be <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	0011      	movs	r1, r2
 80078aa:	0018      	movs	r0, r3
 80078ac:	f000 fa20 	bl	8007cf0 <USBD_CtlError>
      err++;
 80078b0:	210b      	movs	r1, #11
 80078b2:	187b      	adds	r3, r7, r1
 80078b4:	781a      	ldrb	r2, [r3, #0]
 80078b6:	187b      	adds	r3, r7, r1
 80078b8:	3201      	adds	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
      break;
 80078bc:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80078be:	230b      	movs	r3, #11
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d127      	bne.n	8007918 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80078c8:	2108      	movs	r1, #8
 80078ca:	187b      	adds	r3, r7, r1
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d019      	beq.n	8007906 <USBD_GetDescriptor+0x342>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	88db      	ldrh	r3, [r3, #6]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d015      	beq.n	8007906 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	88da      	ldrh	r2, [r3, #6]
 80078de:	187b      	adds	r3, r7, r1
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	1c18      	adds	r0, r3, #0
 80078e4:	1c11      	adds	r1, r2, #0
 80078e6:	b28a      	uxth	r2, r1
 80078e8:	b283      	uxth	r3, r0
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d900      	bls.n	80078f0 <USBD_GetDescriptor+0x32c>
 80078ee:	1c01      	adds	r1, r0, #0
 80078f0:	b28a      	uxth	r2, r1
 80078f2:	2108      	movs	r1, #8
 80078f4:	187b      	adds	r3, r7, r1
 80078f6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078f8:	187b      	adds	r3, r7, r1
 80078fa:	881a      	ldrh	r2, [r3, #0]
 80078fc:	68f9      	ldr	r1, [r7, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	0018      	movs	r0, r3
 8007902:	f000 fa73 	bl	8007dec <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	88db      	ldrh	r3, [r3, #6]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d105      	bne.n	800791a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	0018      	movs	r0, r3
 8007912:	f000 fab1 	bl	8007e78 <USBD_CtlSendStatus>
 8007916:	e000      	b.n	800791a <USBD_GetDescriptor+0x356>
    return;
 8007918:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800791a:	46bd      	mov	sp, r7
 800791c:	b004      	add	sp, #16
 800791e:	bd80      	pop	{r7, pc}
 8007920:	080098fc 	.word	0x080098fc
 8007924:	0800991c 	.word	0x0800991c

08007928 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	889b      	ldrh	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d13d      	bne.n	80079b6 <USBD_SetAddress+0x8e>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	88db      	ldrh	r3, [r3, #6]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d139      	bne.n	80079b6 <USBD_SetAddress+0x8e>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	885b      	ldrh	r3, [r3, #2]
 8007946:	2b7f      	cmp	r3, #127	; 0x7f
 8007948:	d835      	bhi.n	80079b6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	b2da      	uxtb	r2, r3
 8007950:	230f      	movs	r3, #15
 8007952:	18fb      	adds	r3, r7, r3
 8007954:	217f      	movs	r1, #127	; 0x7f
 8007956:	400a      	ands	r2, r1
 8007958:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	23a7      	movs	r3, #167	; 0xa7
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	5cd3      	ldrb	r3, [r2, r3]
 8007962:	2b03      	cmp	r3, #3
 8007964:	d106      	bne.n	8007974 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	0011      	movs	r1, r2
 800796c:	0018      	movs	r0, r3
 800796e:	f000 f9bf 	bl	8007cf0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007972:	e027      	b.n	80079c4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	240f      	movs	r4, #15
 8007978:	193a      	adds	r2, r7, r4
 800797a:	4914      	ldr	r1, [pc, #80]	; (80079cc <USBD_SetAddress+0xa4>)
 800797c:	7812      	ldrb	r2, [r2, #0]
 800797e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007980:	193b      	adds	r3, r7, r4
 8007982:	781a      	ldrb	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	0011      	movs	r1, r2
 8007988:	0018      	movs	r0, r3
 800798a:	f000 fe33 	bl	80085f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	0018      	movs	r0, r3
 8007992:	f000 fa71 	bl	8007e78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007996:	193b      	adds	r3, r7, r4
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d005      	beq.n	80079aa <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	23a7      	movs	r3, #167	; 0xa7
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	2102      	movs	r1, #2
 80079a6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a8:	e00c      	b.n	80079c4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	23a7      	movs	r3, #167	; 0xa7
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	2101      	movs	r1, #1
 80079b2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b4:	e006      	b.n	80079c4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	0011      	movs	r1, r2
 80079bc:	0018      	movs	r0, r3
 80079be:	f000 f997 	bl	8007cf0 <USBD_CtlError>
  }
}
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b005      	add	sp, #20
 80079ca:	bd90      	pop	{r4, r7, pc}
 80079cc:	0000029e 	.word	0x0000029e

080079d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	885b      	ldrh	r3, [r3, #2]
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	4b4c      	ldr	r3, [pc, #304]	; (8007b14 <USBD_SetConfig+0x144>)
 80079e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079e4:	4b4b      	ldr	r3, [pc, #300]	; (8007b14 <USBD_SetConfig+0x144>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d906      	bls.n	80079fa <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	0011      	movs	r1, r2
 80079f2:	0018      	movs	r0, r3
 80079f4:	f000 f97c 	bl	8007cf0 <USBD_CtlError>
 80079f8:	e088      	b.n	8007b0c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	23a7      	movs	r3, #167	; 0xa7
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	5cd3      	ldrb	r3, [r2, r3]
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d002      	beq.n	8007a0c <USBD_SetConfig+0x3c>
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d029      	beq.n	8007a5e <USBD_SetConfig+0x8e>
 8007a0a:	e071      	b.n	8007af0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007a0c:	4b41      	ldr	r3, [pc, #260]	; (8007b14 <USBD_SetConfig+0x144>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d01f      	beq.n	8007a54 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007a14:	4b3f      	ldr	r3, [pc, #252]	; (8007b14 <USBD_SetConfig+0x144>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	001a      	movs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	23a7      	movs	r3, #167	; 0xa7
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	2103      	movs	r1, #3
 8007a26:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a28:	4b3a      	ldr	r3, [pc, #232]	; (8007b14 <USBD_SetConfig+0x144>)
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	0011      	movs	r1, r2
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7ff f8c6 	bl	8006bc2 <USBD_SetClassConfig>
 8007a36:	0003      	movs	r3, r0
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d106      	bne.n	8007a4a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	0011      	movs	r1, r2
 8007a42:	0018      	movs	r0, r3
 8007a44:	f000 f954 	bl	8007cf0 <USBD_CtlError>
            return;
 8007a48:	e060      	b.n	8007b0c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f000 fa13 	bl	8007e78 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a52:	e05b      	b.n	8007b0c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	0018      	movs	r0, r3
 8007a58:	f000 fa0e 	bl	8007e78 <USBD_CtlSendStatus>
        break;
 8007a5c:	e056      	b.n	8007b0c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007a5e:	4b2d      	ldr	r3, [pc, #180]	; (8007b14 <USBD_SetConfig+0x144>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d115      	bne.n	8007a92 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	23a7      	movs	r3, #167	; 0xa7
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	2102      	movs	r1, #2
 8007a6e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007a70:	4b28      	ldr	r3, [pc, #160]	; (8007b14 <USBD_SetConfig+0x144>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	001a      	movs	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007a7a:	4b26      	ldr	r3, [pc, #152]	; (8007b14 <USBD_SetConfig+0x144>)
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	0011      	movs	r1, r2
 8007a82:	0018      	movs	r0, r3
 8007a84:	f7ff f8c4 	bl	8006c10 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f000 f9f4 	bl	8007e78 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a90:	e03c      	b.n	8007b0c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8007a92:	4b20      	ldr	r3, [pc, #128]	; (8007b14 <USBD_SetConfig+0x144>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	001a      	movs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d022      	beq.n	8007ae6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	0011      	movs	r1, r2
 8007aaa:	0018      	movs	r0, r3
 8007aac:	f7ff f8b0 	bl	8006c10 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007ab0:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <USBD_SetConfig+0x144>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	001a      	movs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007aba:	4b16      	ldr	r3, [pc, #88]	; (8007b14 <USBD_SetConfig+0x144>)
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	0011      	movs	r1, r2
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	f7ff f87d 	bl	8006bc2 <USBD_SetClassConfig>
 8007ac8:	0003      	movs	r3, r0
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d106      	bne.n	8007adc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	0011      	movs	r1, r2
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f000 f90b 	bl	8007cf0 <USBD_CtlError>
            return;
 8007ada:	e017      	b.n	8007b0c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f000 f9ca 	bl	8007e78 <USBD_CtlSendStatus>
        break;
 8007ae4:	e012      	b.n	8007b0c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	0018      	movs	r0, r3
 8007aea:	f000 f9c5 	bl	8007e78 <USBD_CtlSendStatus>
        break;
 8007aee:	e00d      	b.n	8007b0c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	0011      	movs	r1, r2
 8007af6:	0018      	movs	r0, r3
 8007af8:	f000 f8fa 	bl	8007cf0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007afc:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <USBD_SetConfig+0x144>)
 8007afe:	781a      	ldrb	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	0011      	movs	r1, r2
 8007b04:	0018      	movs	r0, r3
 8007b06:	f7ff f883 	bl	8006c10 <USBD_ClrClassConfig>
        break;
 8007b0a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	b002      	add	sp, #8
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	200001d8 	.word	0x200001d8

08007b18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	88db      	ldrh	r3, [r3, #6]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d006      	beq.n	8007b38 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	0011      	movs	r1, r2
 8007b30:	0018      	movs	r0, r3
 8007b32:	f000 f8dd 	bl	8007cf0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b36:	e026      	b.n	8007b86 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	23a7      	movs	r3, #167	; 0xa7
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	5cd3      	ldrb	r3, [r2, r3]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	dc02      	bgt.n	8007b4a <USBD_GetConfig+0x32>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dc03      	bgt.n	8007b50 <USBD_GetConfig+0x38>
 8007b48:	e016      	b.n	8007b78 <USBD_GetConfig+0x60>
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d00c      	beq.n	8007b68 <USBD_GetConfig+0x50>
 8007b4e:	e013      	b.n	8007b78 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3308      	adds	r3, #8
 8007b5a:	0019      	movs	r1, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	0018      	movs	r0, r3
 8007b62:	f000 f943 	bl	8007dec <USBD_CtlSendData>
        break;
 8007b66:	e00e      	b.n	8007b86 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	1d19      	adds	r1, r3, #4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	0018      	movs	r0, r3
 8007b72:	f000 f93b 	bl	8007dec <USBD_CtlSendData>
        break;
 8007b76:	e006      	b.n	8007b86 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	0011      	movs	r1, r2
 8007b7e:	0018      	movs	r0, r3
 8007b80:	f000 f8b6 	bl	8007cf0 <USBD_CtlError>
        break;
 8007b84:	46c0      	nop			; (mov r8, r8)
}
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	b002      	add	sp, #8
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	23a7      	movs	r3, #167	; 0xa7
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	5cd3      	ldrb	r3, [r2, r3]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d822      	bhi.n	8007bec <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88db      	ldrh	r3, [r3, #6]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d006      	beq.n	8007bbc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	0011      	movs	r1, r2
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f000 f89b 	bl	8007cf0 <USBD_CtlError>
        break;
 8007bba:	e01e      	b.n	8007bfa <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	23a9      	movs	r3, #169	; 0xa9
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	58d3      	ldr	r3, [r2, r3]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	330c      	adds	r3, #12
 8007bde:	0019      	movs	r1, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	0018      	movs	r0, r3
 8007be6:	f000 f901 	bl	8007dec <USBD_CtlSendData>
      break;
 8007bea:	e006      	b.n	8007bfa <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	0011      	movs	r1, r2
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f000 f87c 	bl	8007cf0 <USBD_CtlError>
      break;
 8007bf8:	46c0      	nop			; (mov r8, r8)
  }
}
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b002      	add	sp, #8
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	885b      	ldrh	r3, [r3, #2]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d108      	bne.n	8007c26 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	23a9      	movs	r3, #169	; 0xa9
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	0018      	movs	r0, r3
 8007c22:	f000 f929 	bl	8007e78 <USBD_CtlSendStatus>
  }
}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	b002      	add	sp, #8
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	23a7      	movs	r3, #167	; 0xa7
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	5cd3      	ldrb	r3, [r2, r3]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d80d      	bhi.n	8007c62 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	885b      	ldrh	r3, [r3, #2]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d110      	bne.n	8007c70 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	23a9      	movs	r3, #169	; 0xa9
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	2100      	movs	r1, #0
 8007c56:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f000 f90c 	bl	8007e78 <USBD_CtlSendStatus>
      }
      break;
 8007c60:	e006      	b.n	8007c70 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	0011      	movs	r1, r2
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f000 f841 	bl	8007cf0 <USBD_CtlError>
      break;
 8007c6e:	e000      	b.n	8007c72 <USBD_ClrFeature+0x44>
      break;
 8007c70:	46c0      	nop			; (mov r8, r8)
  }
}
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	46bd      	mov	sp, r7
 8007c76:	b002      	add	sp, #8
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	785a      	ldrb	r2, [r3, #1]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	3302      	adds	r3, #2
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	3303      	adds	r3, #3
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	18d3      	adds	r3, r2, r3
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	3305      	adds	r3, #5
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	18d3      	adds	r3, r2, r3
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	3306      	adds	r3, #6
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	3307      	adds	r3, #7
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	18d3      	adds	r3, r2, r3
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	80da      	strh	r2, [r3, #6]

}
 8007ce8:	46c0      	nop			; (mov r8, r8)
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b002      	add	sp, #8
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2180      	movs	r1, #128	; 0x80
 8007cfe:	0018      	movs	r0, r3
 8007d00:	f000 fbf1 	bl	80084e6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2100      	movs	r1, #0
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f000 fbec 	bl	80084e6 <USBD_LL_StallEP>
}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b002      	add	sp, #8
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d16:	b590      	push	{r4, r7, lr}
 8007d18:	b087      	sub	sp, #28
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d22:	2417      	movs	r4, #23
 8007d24:	193b      	adds	r3, r7, r4
 8007d26:	2200      	movs	r2, #0
 8007d28:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d03c      	beq.n	8007daa <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	0018      	movs	r0, r3
 8007d34:	f000 f83d 	bl	8007db2 <USBD_GetLen>
 8007d38:	0003      	movs	r3, r0
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	18db      	adds	r3, r3, r3
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d46:	193b      	adds	r3, r7, r4
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	193a      	adds	r2, r7, r4
 8007d4c:	1c59      	adds	r1, r3, #1
 8007d4e:	7011      	strb	r1, [r2, #0]
 8007d50:	001a      	movs	r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	189b      	adds	r3, r3, r2
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d5c:	193b      	adds	r3, r7, r4
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	193a      	adds	r2, r7, r4
 8007d62:	1c59      	adds	r1, r3, #1
 8007d64:	7011      	strb	r1, [r2, #0]
 8007d66:	001a      	movs	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	189b      	adds	r3, r3, r2
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d70:	e017      	b.n	8007da2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	60fa      	str	r2, [r7, #12]
 8007d78:	2417      	movs	r4, #23
 8007d7a:	193a      	adds	r2, r7, r4
 8007d7c:	7812      	ldrb	r2, [r2, #0]
 8007d7e:	1939      	adds	r1, r7, r4
 8007d80:	1c50      	adds	r0, r2, #1
 8007d82:	7008      	strb	r0, [r1, #0]
 8007d84:	0011      	movs	r1, r2
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	1852      	adds	r2, r2, r1
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d8e:	193b      	adds	r3, r7, r4
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	193a      	adds	r2, r7, r4
 8007d94:	1c59      	adds	r1, r3, #1
 8007d96:	7011      	strb	r1, [r2, #0]
 8007d98:	001a      	movs	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	189b      	adds	r3, r3, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e3      	bne.n	8007d72 <USBD_GetString+0x5c>
    }
  }
}
 8007daa:	46c0      	nop			; (mov r8, r8)
 8007dac:	46bd      	mov	sp, r7
 8007dae:	b007      	add	sp, #28
 8007db0:	bd90      	pop	{r4, r7, pc}

08007db2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dba:	230f      	movs	r3, #15
 8007dbc:	18fb      	adds	r3, r7, r3
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8007dc2:	e008      	b.n	8007dd6 <USBD_GetLen+0x24>
  {
    len++;
 8007dc4:	210f      	movs	r1, #15
 8007dc6:	187b      	adds	r3, r7, r1
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	187b      	adds	r3, r7, r1
 8007dcc:	3201      	adds	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
    buf++;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f2      	bne.n	8007dc4 <USBD_GetLen+0x12>
  }

  return len;
 8007dde:	230f      	movs	r3, #15
 8007de0:	18fb      	adds	r3, r7, r3
 8007de2:	781b      	ldrb	r3, [r3, #0]
}
 8007de4:	0018      	movs	r0, r3
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b004      	add	sp, #16
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	1dbb      	adds	r3, r7, #6
 8007df8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	23a5      	movs	r3, #165	; 0xa5
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	2102      	movs	r1, #2
 8007e02:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007e04:	1dbb      	adds	r3, r7, #6
 8007e06:	881a      	ldrh	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e0c:	1dbb      	adds	r3, r7, #6
 8007e0e:	881a      	ldrh	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e14:	1dbb      	adds	r3, r7, #6
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	f000 fc14 	bl	800864a <USBD_LL_Transmit>

  return USBD_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	0018      	movs	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b004      	add	sp, #16
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	1dbb      	adds	r3, r7, #6
 8007e38:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e3a:	1dbb      	adds	r3, r7, #6
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	2100      	movs	r1, #0
 8007e44:	f000 fc01 	bl	800864a <USBD_LL_Transmit>

  return USBD_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b004      	add	sp, #16
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	1dbb      	adds	r3, r7, #6
 8007e5e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e60:	1dbb      	adds	r3, r7, #6
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	2100      	movs	r1, #0
 8007e6a:	f000 fc25 	bl	80086b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	0018      	movs	r0, r3
 8007e72:	46bd      	mov	sp, r7
 8007e74:	b004      	add	sp, #16
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	23a5      	movs	r3, #165	; 0xa5
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	2104      	movs	r1, #4
 8007e88:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	f000 fbda 	bl	800864a <USBD_LL_Transmit>

  return USBD_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	0018      	movs	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b002      	add	sp, #8
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	23a5      	movs	r3, #165	; 0xa5
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	2105      	movs	r1, #5
 8007eb0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2100      	movs	r1, #0
 8007eba:	f000 fbfd 	bl	80086b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	b002      	add	sp, #8
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ecc:	490f      	ldr	r1, [pc, #60]	; (8007f0c <MX_USB_DEVICE_Init+0x44>)
 8007ece:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <MX_USB_DEVICE_Init+0x48>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	f7fe fe0e 	bl	8006af4 <USBD_Init>
 8007ed8:	1e03      	subs	r3, r0, #0
 8007eda:	d001      	beq.n	8007ee0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007edc:	f7f9 fa5e 	bl	800139c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007ee0:	4a0c      	ldr	r2, [pc, #48]	; (8007f14 <MX_USB_DEVICE_Init+0x4c>)
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <MX_USB_DEVICE_Init+0x48>)
 8007ee4:	0011      	movs	r1, r2
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f7fe fe35 	bl	8006b56 <USBD_RegisterClass>
 8007eec:	1e03      	subs	r3, r0, #0
 8007eee:	d001      	beq.n	8007ef4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007ef0:	f7f9 fa54 	bl	800139c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <MX_USB_DEVICE_Init+0x48>)
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f7fe fe4d 	bl	8006b96 <USBD_Start>
 8007efc:	1e03      	subs	r3, r0, #0
 8007efe:	d001      	beq.n	8007f04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f00:	f7f9 fa4c 	bl	800139c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f04:	46c0      	nop			; (mov r8, r8)
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	46c0      	nop			; (mov r8, r8)
 8007f0c:	20000108 	.word	0x20000108
 8007f10:	200001dc 	.word	0x200001dc
 8007f14:	2000000c 	.word	0x2000000c

08007f18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	0002      	movs	r2, r0
 8007f20:	6039      	str	r1, [r7, #0]
 8007f22:	1dfb      	adds	r3, r7, #7
 8007f24:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2212      	movs	r2, #18
 8007f2a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f2c:	4b02      	ldr	r3, [pc, #8]	; (8007f38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f2e:	0018      	movs	r0, r3
 8007f30:	46bd      	mov	sp, r7
 8007f32:	b002      	add	sp, #8
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	20000124 	.word	0x20000124

08007f3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	0002      	movs	r2, r0
 8007f44:	6039      	str	r1, [r7, #0]
 8007f46:	1dfb      	adds	r3, r7, #7
 8007f48:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2204      	movs	r2, #4
 8007f4e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f50:	4b02      	ldr	r3, [pc, #8]	; (8007f5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f52:	0018      	movs	r0, r3
 8007f54:	46bd      	mov	sp, r7
 8007f56:	b002      	add	sp, #8
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	20000138 	.word	0x20000138

08007f60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	0002      	movs	r2, r0
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	1dfb      	adds	r3, r7, #7
 8007f6c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007f6e:	1dfb      	adds	r3, r7, #7
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4908      	ldr	r1, [pc, #32]	; (8007f9c <USBD_FS_ProductStrDescriptor+0x3c>)
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <USBD_FS_ProductStrDescriptor+0x40>)
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f7ff feca 	bl	8007d16 <USBD_GetString>
 8007f82:	e005      	b.n	8007f90 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	4905      	ldr	r1, [pc, #20]	; (8007f9c <USBD_FS_ProductStrDescriptor+0x3c>)
 8007f88:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <USBD_FS_ProductStrDescriptor+0x40>)
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	f7ff fec3 	bl	8007d16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007f92:	0018      	movs	r0, r3
 8007f94:	46bd      	mov	sp, r7
 8007f96:	b002      	add	sp, #8
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	200004a0 	.word	0x200004a0
 8007fa0:	08009878 	.word	0x08009878

08007fa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	0002      	movs	r2, r0
 8007fac:	6039      	str	r1, [r7, #0]
 8007fae:	1dfb      	adds	r3, r7, #7
 8007fb0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4904      	ldr	r1, [pc, #16]	; (8007fc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fb6:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f7ff feac 	bl	8007d16 <USBD_GetString>
  return USBD_StrDesc;
 8007fbe:	4b02      	ldr	r3, [pc, #8]	; (8007fc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007fc0:	0018      	movs	r0, r3
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	b002      	add	sp, #8
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	200004a0 	.word	0x200004a0
 8007fcc:	08009888 	.word	0x08009888

08007fd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	0002      	movs	r2, r0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	1dfb      	adds	r3, r7, #7
 8007fdc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	221a      	movs	r2, #26
 8007fe2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fe4:	f000 f84c 	bl	8008080 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fe8:	4b02      	ldr	r3, [pc, #8]	; (8007ff4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007fea:	0018      	movs	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b002      	add	sp, #8
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	2000013c 	.word	0x2000013c

08007ff8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	0002      	movs	r2, r0
 8008000:	6039      	str	r1, [r7, #0]
 8008002:	1dfb      	adds	r3, r7, #7
 8008004:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8008006:	1dfb      	adds	r3, r7, #7
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d106      	bne.n	800801c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4908      	ldr	r1, [pc, #32]	; (8008034 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008012:	4b09      	ldr	r3, [pc, #36]	; (8008038 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008014:	0018      	movs	r0, r3
 8008016:	f7ff fe7e 	bl	8007d16 <USBD_GetString>
 800801a:	e005      	b.n	8008028 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	4905      	ldr	r1, [pc, #20]	; (8008034 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008020:	4b05      	ldr	r3, [pc, #20]	; (8008038 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008022:	0018      	movs	r0, r3
 8008024:	f7ff fe77 	bl	8007d16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008028:	4b02      	ldr	r3, [pc, #8]	; (8008034 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800802a:	0018      	movs	r0, r3
 800802c:	46bd      	mov	sp, r7
 800802e:	b002      	add	sp, #8
 8008030:	bd80      	pop	{r7, pc}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	200004a0 	.word	0x200004a0
 8008038:	0800989c 	.word	0x0800989c

0800803c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	0002      	movs	r2, r0
 8008044:	6039      	str	r1, [r7, #0]
 8008046:	1dfb      	adds	r3, r7, #7
 8008048:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800804a:	1dfb      	adds	r3, r7, #7
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	4908      	ldr	r1, [pc, #32]	; (8008078 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008058:	0018      	movs	r0, r3
 800805a:	f7ff fe5c 	bl	8007d16 <USBD_GetString>
 800805e:	e005      	b.n	800806c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	4905      	ldr	r1, [pc, #20]	; (8008078 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008066:	0018      	movs	r0, r3
 8008068:	f7ff fe55 	bl	8007d16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800806e:	0018      	movs	r0, r3
 8008070:	46bd      	mov	sp, r7
 8008072:	b002      	add	sp, #8
 8008074:	bd80      	pop	{r7, pc}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	200004a0 	.word	0x200004a0
 800807c:	080098a8 	.word	0x080098a8

08008080 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <Get_SerialNum+0x48>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800808c:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <Get_SerialNum+0x4c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008092:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <Get_SerialNum+0x50>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	18d3      	adds	r3, r2, r3
 800809e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080a6:	490b      	ldr	r1, [pc, #44]	; (80080d4 <Get_SerialNum+0x54>)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2208      	movs	r2, #8
 80080ac:	0018      	movs	r0, r3
 80080ae:	f000 f815 	bl	80080dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080b2:	4909      	ldr	r1, [pc, #36]	; (80080d8 <Get_SerialNum+0x58>)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2204      	movs	r2, #4
 80080b8:	0018      	movs	r0, r3
 80080ba:	f000 f80f 	bl	80080dc <IntToUnicode>
  }
}
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b004      	add	sp, #16
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	1ff80050 	.word	0x1ff80050
 80080cc:	1ff80054 	.word	0x1ff80054
 80080d0:	1ff80058 	.word	0x1ff80058
 80080d4:	2000013e 	.word	0x2000013e
 80080d8:	2000014e 	.word	0x2000014e

080080dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	1dfb      	adds	r3, r7, #7
 80080e8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80080ea:	2117      	movs	r1, #23
 80080ec:	187b      	adds	r3, r7, r1
 80080ee:	2200      	movs	r2, #0
 80080f0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80080f2:	187b      	adds	r3, r7, r1
 80080f4:	2200      	movs	r2, #0
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	e02f      	b.n	800815a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	0f1b      	lsrs	r3, r3, #28
 80080fe:	2b09      	cmp	r3, #9
 8008100:	d80d      	bhi.n	800811e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	0f1b      	lsrs	r3, r3, #28
 8008106:	b2da      	uxtb	r2, r3
 8008108:	2317      	movs	r3, #23
 800810a:	18fb      	adds	r3, r7, r3
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	0019      	movs	r1, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	185b      	adds	r3, r3, r1
 8008116:	3230      	adds	r2, #48	; 0x30
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e00c      	b.n	8008138 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	0f1b      	lsrs	r3, r3, #28
 8008122:	b2da      	uxtb	r2, r3
 8008124:	2317      	movs	r3, #23
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	0019      	movs	r1, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	185b      	adds	r3, r3, r1
 8008132:	3237      	adds	r2, #55	; 0x37
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800813e:	2117      	movs	r1, #23
 8008140:	187b      	adds	r3, r7, r1
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	3301      	adds	r3, #1
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	18d3      	adds	r3, r2, r3
 800814c:	2200      	movs	r2, #0
 800814e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008150:	187b      	adds	r3, r7, r1
 8008152:	781a      	ldrb	r2, [r3, #0]
 8008154:	187b      	adds	r3, r7, r1
 8008156:	3201      	adds	r2, #1
 8008158:	701a      	strb	r2, [r3, #0]
 800815a:	2317      	movs	r3, #23
 800815c:	18fa      	adds	r2, r7, r3
 800815e:	1dfb      	adds	r3, r7, #7
 8008160:	7812      	ldrb	r2, [r2, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	d3c8      	bcc.n	80080fa <IntToUnicode+0x1e>
  }
}
 8008168:	46c0      	nop			; (mov r8, r8)
 800816a:	46c0      	nop			; (mov r8, r8)
 800816c:	46bd      	mov	sp, r7
 800816e:	b006      	add	sp, #24
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a0a      	ldr	r2, [pc, #40]	; (80081ac <HAL_PCD_MspInit+0x38>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d10e      	bne.n	80081a4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008186:	4b0a      	ldr	r3, [pc, #40]	; (80081b0 <HAL_PCD_MspInit+0x3c>)
 8008188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <HAL_PCD_MspInit+0x3c>)
 800818c:	2180      	movs	r1, #128	; 0x80
 800818e:	0409      	lsls	r1, r1, #16
 8008190:	430a      	orrs	r2, r1
 8008192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008194:	2200      	movs	r2, #0
 8008196:	2100      	movs	r1, #0
 8008198:	201f      	movs	r0, #31
 800819a:	f7f9 fb25 	bl	80017e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800819e:	201f      	movs	r0, #31
 80081a0:	f7f9 fb37 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80081a4:	46c0      	nop			; (mov r8, r8)
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b002      	add	sp, #8
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40005c00 	.word	0x40005c00
 80081b0:	40021000 	.word	0x40021000

080081b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	23bc      	movs	r3, #188	; 0xbc
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	58d2      	ldr	r2, [r2, r3]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	21ac      	movs	r1, #172	; 0xac
 80081c8:	0089      	lsls	r1, r1, #2
 80081ca:	468c      	mov	ip, r1
 80081cc:	4463      	add	r3, ip
 80081ce:	0019      	movs	r1, r3
 80081d0:	0010      	movs	r0, r2
 80081d2:	f7fe fd33 	bl	8006c3c <USBD_LL_SetupStage>
}
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	46bd      	mov	sp, r7
 80081da:	b002      	add	sp, #8
 80081dc:	bd80      	pop	{r7, pc}

080081de <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081de:	b590      	push	{r4, r7, lr}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	000a      	movs	r2, r1
 80081e8:	1cfb      	adds	r3, r7, #3
 80081ea:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	23bc      	movs	r3, #188	; 0xbc
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	58d4      	ldr	r4, [r2, r3]
 80081f4:	1cfb      	adds	r3, r7, #3
 80081f6:	781a      	ldrb	r2, [r3, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	23be      	movs	r3, #190	; 0xbe
 80081fc:	0059      	lsls	r1, r3, #1
 80081fe:	0013      	movs	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	189b      	adds	r3, r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	18c3      	adds	r3, r0, r3
 8008208:	185b      	adds	r3, r3, r1
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	1cfb      	adds	r3, r7, #3
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	0019      	movs	r1, r3
 8008212:	0020      	movs	r0, r4
 8008214:	f7fe fd70 	bl	8006cf8 <USBD_LL_DataOutStage>
}
 8008218:	46c0      	nop			; (mov r8, r8)
 800821a:	46bd      	mov	sp, r7
 800821c:	b003      	add	sp, #12
 800821e:	bd90      	pop	{r4, r7, pc}

08008220 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	000a      	movs	r2, r1
 800822a:	1cfb      	adds	r3, r7, #3
 800822c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	23bc      	movs	r3, #188	; 0xbc
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	58d0      	ldr	r0, [r2, r3]
 8008236:	1cfb      	adds	r3, r7, #3
 8008238:	781a      	ldrb	r2, [r3, #0]
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	0013      	movs	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	189b      	adds	r3, r3, r2
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	18cb      	adds	r3, r1, r3
 8008246:	333c      	adds	r3, #60	; 0x3c
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	1cfb      	adds	r3, r7, #3
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	0019      	movs	r1, r3
 8008250:	f7fe fdd4 	bl	8006dfc <USBD_LL_DataInStage>
}
 8008254:	46c0      	nop			; (mov r8, r8)
 8008256:	46bd      	mov	sp, r7
 8008258:	b002      	add	sp, #8
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	23bc      	movs	r3, #188	; 0xbc
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	58d3      	ldr	r3, [r2, r3]
 800826c:	0018      	movs	r0, r3
 800826e:	f7fe ff0b 	bl	8007088 <USBD_LL_SOF>
}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	46bd      	mov	sp, r7
 8008276:	b002      	add	sp, #8
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008282:	230f      	movs	r3, #15
 8008284:	18fb      	adds	r3, r7, r3
 8008286:	2201      	movs	r2, #1
 8008288:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d001      	beq.n	8008296 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008292:	f7f9 f883 	bl	800139c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	23bc      	movs	r3, #188	; 0xbc
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	58d2      	ldr	r2, [r2, r3]
 800829e:	230f      	movs	r3, #15
 80082a0:	18fb      	adds	r3, r7, r3
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	0019      	movs	r1, r3
 80082a6:	0010      	movs	r0, r2
 80082a8:	f7fe fead 	bl	8007006 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	23bc      	movs	r3, #188	; 0xbc
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	58d3      	ldr	r3, [r2, r3]
 80082b4:	0018      	movs	r0, r3
 80082b6:	f7fe fe5e 	bl	8006f76 <USBD_LL_Reset>
}
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	46bd      	mov	sp, r7
 80082be:	b004      	add	sp, #16
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	23bc      	movs	r3, #188	; 0xbc
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	58d3      	ldr	r3, [r2, r3]
 80082d4:	0018      	movs	r0, r3
 80082d6:	f7fe fea7 	bl	8007028 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082e2:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <HAL_PCD_SuspendCallback+0x34>)
 80082e4:	691a      	ldr	r2, [r3, #16]
 80082e6:	4b04      	ldr	r3, [pc, #16]	; (80082f8 <HAL_PCD_SuspendCallback+0x34>)
 80082e8:	2106      	movs	r1, #6
 80082ea:	430a      	orrs	r2, r1
 80082ec:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	46bd      	mov	sp, r7
 80082f2:	b002      	add	sp, #8
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	e000ed00 	.word	0xe000ed00

080082fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d007      	beq.n	800831c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800830c:	4b09      	ldr	r3, [pc, #36]	; (8008334 <HAL_PCD_ResumeCallback+0x38>)
 800830e:	691a      	ldr	r2, [r3, #16]
 8008310:	4b08      	ldr	r3, [pc, #32]	; (8008334 <HAL_PCD_ResumeCallback+0x38>)
 8008312:	2106      	movs	r1, #6
 8008314:	438a      	bics	r2, r1
 8008316:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008318:	f000 fa1a 	bl	8008750 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	23bc      	movs	r3, #188	; 0xbc
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	58d3      	ldr	r3, [r2, r3]
 8008324:	0018      	movs	r0, r3
 8008326:	f7fe fe97 	bl	8007058 <USBD_LL_Resume>
}
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	46bd      	mov	sp, r7
 800832e:	b002      	add	sp, #8
 8008330:	bd80      	pop	{r7, pc}
 8008332:	46c0      	nop			; (mov r8, r8)
 8008334:	e000ed00 	.word	0xe000ed00

08008338 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008340:	4a23      	ldr	r2, [pc, #140]	; (80083d0 <USBD_LL_Init+0x98>)
 8008342:	23bc      	movs	r3, #188	; 0xbc
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	23b0      	movs	r3, #176	; 0xb0
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	491f      	ldr	r1, [pc, #124]	; (80083d0 <USBD_LL_Init+0x98>)
 8008352:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008354:	4b1e      	ldr	r3, [pc, #120]	; (80083d0 <USBD_LL_Init+0x98>)
 8008356:	4a1f      	ldr	r2, [pc, #124]	; (80083d4 <USBD_LL_Init+0x9c>)
 8008358:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800835a:	4b1d      	ldr	r3, [pc, #116]	; (80083d0 <USBD_LL_Init+0x98>)
 800835c:	2208      	movs	r2, #8
 800835e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008360:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <USBD_LL_Init+0x98>)
 8008362:	2202      	movs	r2, #2
 8008364:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008366:	4b1a      	ldr	r3, [pc, #104]	; (80083d0 <USBD_LL_Init+0x98>)
 8008368:	2202      	movs	r2, #2
 800836a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800836c:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <USBD_LL_Init+0x98>)
 800836e:	2200      	movs	r2, #0
 8008370:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008372:	4b17      	ldr	r3, [pc, #92]	; (80083d0 <USBD_LL_Init+0x98>)
 8008374:	2200      	movs	r2, #0
 8008376:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008378:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <USBD_LL_Init+0x98>)
 800837a:	2200      	movs	r2, #0
 800837c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800837e:	4b14      	ldr	r3, [pc, #80]	; (80083d0 <USBD_LL_Init+0x98>)
 8008380:	0018      	movs	r0, r3
 8008382:	f7f9 fc13 	bl	8001bac <HAL_PCD_Init>
 8008386:	1e03      	subs	r3, r0, #0
 8008388:	d001      	beq.n	800838e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800838a:	f7f9 f807 	bl	800139c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	23b0      	movs	r3, #176	; 0xb0
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	58d0      	ldr	r0, [r2, r3]
 8008396:	2318      	movs	r3, #24
 8008398:	2200      	movs	r2, #0
 800839a:	2100      	movs	r1, #0
 800839c:	f7fb f9ba 	bl	8003714 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	23b0      	movs	r3, #176	; 0xb0
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	58d0      	ldr	r0, [r2, r3]
 80083a8:	2358      	movs	r3, #88	; 0x58
 80083aa:	2200      	movs	r2, #0
 80083ac:	2180      	movs	r1, #128	; 0x80
 80083ae:	f7fb f9b1 	bl	8003714 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	23b0      	movs	r3, #176	; 0xb0
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	58d0      	ldr	r0, [r2, r3]
 80083ba:	2380      	movs	r3, #128	; 0x80
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	2200      	movs	r2, #0
 80083c0:	2181      	movs	r1, #129	; 0x81
 80083c2:	f7fb f9a7 	bl	8003714 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	0018      	movs	r0, r3
 80083ca:	46bd      	mov	sp, r7
 80083cc:	b002      	add	sp, #8
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	200006a0 	.word	0x200006a0
 80083d4:	40005c00 	.word	0x40005c00

080083d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e0:	210f      	movs	r1, #15
 80083e2:	187b      	adds	r3, r7, r1
 80083e4:	2200      	movs	r2, #0
 80083e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e8:	260e      	movs	r6, #14
 80083ea:	19bb      	adds	r3, r7, r6
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	23b0      	movs	r3, #176	; 0xb0
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	58d3      	ldr	r3, [r2, r3]
 80083f8:	000d      	movs	r5, r1
 80083fa:	187c      	adds	r4, r7, r1
 80083fc:	0018      	movs	r0, r3
 80083fe:	f7f9 fcd5 	bl	8001dac <HAL_PCD_Start>
 8008402:	0003      	movs	r3, r0
 8008404:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008406:	19bc      	adds	r4, r7, r6
 8008408:	197b      	adds	r3, r7, r5
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	0018      	movs	r0, r3
 800840e:	f000 f9a6 	bl	800875e <USBD_Get_USB_Status>
 8008412:	0003      	movs	r3, r0
 8008414:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008416:	19bb      	adds	r3, r7, r6
 8008418:	781b      	ldrb	r3, [r3, #0]
}
 800841a:	0018      	movs	r0, r3
 800841c:	46bd      	mov	sp, r7
 800841e:	b005      	add	sp, #20
 8008420:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008422 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008422:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	000c      	movs	r4, r1
 800842c:	0010      	movs	r0, r2
 800842e:	0019      	movs	r1, r3
 8008430:	1cfb      	adds	r3, r7, #3
 8008432:	1c22      	adds	r2, r4, #0
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	1cbb      	adds	r3, r7, #2
 8008438:	1c02      	adds	r2, r0, #0
 800843a:	701a      	strb	r2, [r3, #0]
 800843c:	003b      	movs	r3, r7
 800843e:	1c0a      	adds	r2, r1, #0
 8008440:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008442:	260f      	movs	r6, #15
 8008444:	19bb      	adds	r3, r7, r6
 8008446:	2200      	movs	r2, #0
 8008448:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844a:	250e      	movs	r5, #14
 800844c:	197b      	adds	r3, r7, r5
 800844e:	2200      	movs	r2, #0
 8008450:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	23b0      	movs	r3, #176	; 0xb0
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	58d0      	ldr	r0, [r2, r3]
 800845a:	19bc      	adds	r4, r7, r6
 800845c:	1cbb      	adds	r3, r7, #2
 800845e:	781d      	ldrb	r5, [r3, #0]
 8008460:	003b      	movs	r3, r7
 8008462:	881a      	ldrh	r2, [r3, #0]
 8008464:	1cfb      	adds	r3, r7, #3
 8008466:	7819      	ldrb	r1, [r3, #0]
 8008468:	002b      	movs	r3, r5
 800846a:	f7f9 fe34 	bl	80020d6 <HAL_PCD_EP_Open>
 800846e:	0003      	movs	r3, r0
 8008470:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008472:	250e      	movs	r5, #14
 8008474:	197c      	adds	r4, r7, r5
 8008476:	19bb      	adds	r3, r7, r6
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	0018      	movs	r0, r3
 800847c:	f000 f96f 	bl	800875e <USBD_Get_USB_Status>
 8008480:	0003      	movs	r3, r0
 8008482:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008484:	197b      	adds	r3, r7, r5
 8008486:	781b      	ldrb	r3, [r3, #0]
}
 8008488:	0018      	movs	r0, r3
 800848a:	46bd      	mov	sp, r7
 800848c:	b005      	add	sp, #20
 800848e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008490 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	000a      	movs	r2, r1
 800849a:	1cfb      	adds	r3, r7, #3
 800849c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849e:	210f      	movs	r1, #15
 80084a0:	187b      	adds	r3, r7, r1
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a6:	260e      	movs	r6, #14
 80084a8:	19bb      	adds	r3, r7, r6
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	23b0      	movs	r3, #176	; 0xb0
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	58d2      	ldr	r2, [r2, r3]
 80084b6:	000d      	movs	r5, r1
 80084b8:	187c      	adds	r4, r7, r1
 80084ba:	1cfb      	adds	r3, r7, #3
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	0019      	movs	r1, r3
 80084c0:	0010      	movs	r0, r2
 80084c2:	f7f9 fe77 	bl	80021b4 <HAL_PCD_EP_Close>
 80084c6:	0003      	movs	r3, r0
 80084c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ca:	19bc      	adds	r4, r7, r6
 80084cc:	197b      	adds	r3, r7, r5
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	0018      	movs	r0, r3
 80084d2:	f000 f944 	bl	800875e <USBD_Get_USB_Status>
 80084d6:	0003      	movs	r3, r0
 80084d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80084da:	19bb      	adds	r3, r7, r6
 80084dc:	781b      	ldrb	r3, [r3, #0]
}
 80084de:	0018      	movs	r0, r3
 80084e0:	46bd      	mov	sp, r7
 80084e2:	b005      	add	sp, #20
 80084e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	000a      	movs	r2, r1
 80084f0:	1cfb      	adds	r3, r7, #3
 80084f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f4:	210f      	movs	r1, #15
 80084f6:	187b      	adds	r3, r7, r1
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084fc:	260e      	movs	r6, #14
 80084fe:	19bb      	adds	r3, r7, r6
 8008500:	2200      	movs	r2, #0
 8008502:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	23b0      	movs	r3, #176	; 0xb0
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	58d2      	ldr	r2, [r2, r3]
 800850c:	000d      	movs	r5, r1
 800850e:	187c      	adds	r4, r7, r1
 8008510:	1cfb      	adds	r3, r7, #3
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	0019      	movs	r1, r3
 8008516:	0010      	movs	r0, r2
 8008518:	f7f9 ff10 	bl	800233c <HAL_PCD_EP_SetStall>
 800851c:	0003      	movs	r3, r0
 800851e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008520:	19bc      	adds	r4, r7, r6
 8008522:	197b      	adds	r3, r7, r5
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	0018      	movs	r0, r3
 8008528:	f000 f919 	bl	800875e <USBD_Get_USB_Status>
 800852c:	0003      	movs	r3, r0
 800852e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008530:	19bb      	adds	r3, r7, r6
 8008532:	781b      	ldrb	r3, [r3, #0]
}
 8008534:	0018      	movs	r0, r3
 8008536:	46bd      	mov	sp, r7
 8008538:	b005      	add	sp, #20
 800853a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800853c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800853c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	000a      	movs	r2, r1
 8008546:	1cfb      	adds	r3, r7, #3
 8008548:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854a:	210f      	movs	r1, #15
 800854c:	187b      	adds	r3, r7, r1
 800854e:	2200      	movs	r2, #0
 8008550:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008552:	260e      	movs	r6, #14
 8008554:	19bb      	adds	r3, r7, r6
 8008556:	2200      	movs	r2, #0
 8008558:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	23b0      	movs	r3, #176	; 0xb0
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	58d2      	ldr	r2, [r2, r3]
 8008562:	000d      	movs	r5, r1
 8008564:	187c      	adds	r4, r7, r1
 8008566:	1cfb      	adds	r3, r7, #3
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	0019      	movs	r1, r3
 800856c:	0010      	movs	r0, r2
 800856e:	f7f9 ff41 	bl	80023f4 <HAL_PCD_EP_ClrStall>
 8008572:	0003      	movs	r3, r0
 8008574:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008576:	19bc      	adds	r4, r7, r6
 8008578:	197b      	adds	r3, r7, r5
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	0018      	movs	r0, r3
 800857e:	f000 f8ee 	bl	800875e <USBD_Get_USB_Status>
 8008582:	0003      	movs	r3, r0
 8008584:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008586:	19bb      	adds	r3, r7, r6
 8008588:	781b      	ldrb	r3, [r3, #0]
}
 800858a:	0018      	movs	r0, r3
 800858c:	46bd      	mov	sp, r7
 800858e:	b005      	add	sp, #20
 8008590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008592 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	000a      	movs	r2, r1
 800859c:	1cfb      	adds	r3, r7, #3
 800859e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	23b0      	movs	r3, #176	; 0xb0
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	58d3      	ldr	r3, [r2, r3]
 80085a8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085aa:	1cfb      	adds	r3, r7, #3
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	b25b      	sxtb	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da0d      	bge.n	80085d0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085b4:	1cfb      	adds	r3, r7, #3
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	227f      	movs	r2, #127	; 0x7f
 80085ba:	4013      	ands	r3, r2
 80085bc:	68f9      	ldr	r1, [r7, #12]
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	0013      	movs	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	189b      	adds	r3, r3, r2
 80085c6:	00db      	lsls	r3, r3, #3
 80085c8:	18cb      	adds	r3, r1, r3
 80085ca:	3302      	adds	r3, #2
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	e00d      	b.n	80085ec <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085d0:	1cfb      	adds	r3, r7, #3
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	227f      	movs	r2, #127	; 0x7f
 80085d6:	401a      	ands	r2, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	23b5      	movs	r3, #181	; 0xb5
 80085dc:	0059      	lsls	r1, r3, #1
 80085de:	0013      	movs	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	189b      	adds	r3, r3, r2
 80085e4:	00db      	lsls	r3, r3, #3
 80085e6:	18c3      	adds	r3, r0, r3
 80085e8:	185b      	adds	r3, r3, r1
 80085ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085ec:	0018      	movs	r0, r3
 80085ee:	46bd      	mov	sp, r7
 80085f0:	b004      	add	sp, #16
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	000a      	movs	r2, r1
 80085fe:	1cfb      	adds	r3, r7, #3
 8008600:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008602:	210f      	movs	r1, #15
 8008604:	187b      	adds	r3, r7, r1
 8008606:	2200      	movs	r2, #0
 8008608:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800860a:	260e      	movs	r6, #14
 800860c:	19bb      	adds	r3, r7, r6
 800860e:	2200      	movs	r2, #0
 8008610:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	23b0      	movs	r3, #176	; 0xb0
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	58d2      	ldr	r2, [r2, r3]
 800861a:	000d      	movs	r5, r1
 800861c:	187c      	adds	r4, r7, r1
 800861e:	1cfb      	adds	r3, r7, #3
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	0019      	movs	r1, r3
 8008624:	0010      	movs	r0, r2
 8008626:	f7f9 fd2b 	bl	8002080 <HAL_PCD_SetAddress>
 800862a:	0003      	movs	r3, r0
 800862c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800862e:	19bc      	adds	r4, r7, r6
 8008630:	197b      	adds	r3, r7, r5
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	0018      	movs	r0, r3
 8008636:	f000 f892 	bl	800875e <USBD_Get_USB_Status>
 800863a:	0003      	movs	r3, r0
 800863c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800863e:	19bb      	adds	r3, r7, r6
 8008640:	781b      	ldrb	r3, [r3, #0]
}
 8008642:	0018      	movs	r0, r3
 8008644:	46bd      	mov	sp, r7
 8008646:	b005      	add	sp, #20
 8008648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800864a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800864a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800864c:	b087      	sub	sp, #28
 800864e:	af00      	add	r7, sp, #0
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	0008      	movs	r0, r1
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	0019      	movs	r1, r3
 8008658:	230b      	movs	r3, #11
 800865a:	18fb      	adds	r3, r7, r3
 800865c:	1c02      	adds	r2, r0, #0
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	2408      	movs	r4, #8
 8008662:	193b      	adds	r3, r7, r4
 8008664:	1c0a      	adds	r2, r1, #0
 8008666:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008668:	2117      	movs	r1, #23
 800866a:	187b      	adds	r3, r7, r1
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008670:	2516      	movs	r5, #22
 8008672:	197b      	adds	r3, r7, r5
 8008674:	2200      	movs	r2, #0
 8008676:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	23b0      	movs	r3, #176	; 0xb0
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	58d0      	ldr	r0, [r2, r3]
 8008680:	193b      	adds	r3, r7, r4
 8008682:	881d      	ldrh	r5, [r3, #0]
 8008684:	000e      	movs	r6, r1
 8008686:	187c      	adds	r4, r7, r1
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	230b      	movs	r3, #11
 800868c:	18fb      	adds	r3, r7, r3
 800868e:	7819      	ldrb	r1, [r3, #0]
 8008690:	002b      	movs	r3, r5
 8008692:	f7f9 fe17 	bl	80022c4 <HAL_PCD_EP_Transmit>
 8008696:	0003      	movs	r3, r0
 8008698:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800869a:	2516      	movs	r5, #22
 800869c:	197c      	adds	r4, r7, r5
 800869e:	19bb      	adds	r3, r7, r6
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	0018      	movs	r0, r3
 80086a4:	f000 f85b 	bl	800875e <USBD_Get_USB_Status>
 80086a8:	0003      	movs	r3, r0
 80086aa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80086ac:	197b      	adds	r3, r7, r5
 80086ae:	781b      	ldrb	r3, [r3, #0]
}
 80086b0:	0018      	movs	r0, r3
 80086b2:	46bd      	mov	sp, r7
 80086b4:	b007      	add	sp, #28
 80086b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	0008      	movs	r0, r1
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	0019      	movs	r1, r3
 80086c6:	230b      	movs	r3, #11
 80086c8:	18fb      	adds	r3, r7, r3
 80086ca:	1c02      	adds	r2, r0, #0
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	2408      	movs	r4, #8
 80086d0:	193b      	adds	r3, r7, r4
 80086d2:	1c0a      	adds	r2, r1, #0
 80086d4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d6:	2117      	movs	r1, #23
 80086d8:	187b      	adds	r3, r7, r1
 80086da:	2200      	movs	r2, #0
 80086dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086de:	2516      	movs	r5, #22
 80086e0:	197b      	adds	r3, r7, r5
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	23b0      	movs	r3, #176	; 0xb0
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	58d0      	ldr	r0, [r2, r3]
 80086ee:	193b      	adds	r3, r7, r4
 80086f0:	881d      	ldrh	r5, [r3, #0]
 80086f2:	000e      	movs	r6, r1
 80086f4:	187c      	adds	r4, r7, r1
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	230b      	movs	r3, #11
 80086fa:	18fb      	adds	r3, r7, r3
 80086fc:	7819      	ldrb	r1, [r3, #0]
 80086fe:	002b      	movs	r3, r5
 8008700:	f7f9 fda9 	bl	8002256 <HAL_PCD_EP_Receive>
 8008704:	0003      	movs	r3, r0
 8008706:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008708:	2516      	movs	r5, #22
 800870a:	197c      	adds	r4, r7, r5
 800870c:	19bb      	adds	r3, r7, r6
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	0018      	movs	r0, r3
 8008712:	f000 f824 	bl	800875e <USBD_Get_USB_Status>
 8008716:	0003      	movs	r3, r0
 8008718:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800871a:	197b      	adds	r3, r7, r5
 800871c:	781b      	ldrb	r3, [r3, #0]
}
 800871e:	0018      	movs	r0, r3
 8008720:	46bd      	mov	sp, r7
 8008722:	b007      	add	sp, #28
 8008724:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008728 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <USBD_static_malloc+0x14>)
}
 8008732:	0018      	movs	r0, r3
 8008734:	46bd      	mov	sp, r7
 8008736:	b002      	add	sp, #8
 8008738:	bd80      	pop	{r7, pc}
 800873a:	46c0      	nop			; (mov r8, r8)
 800873c:	20000994 	.word	0x20000994

08008740 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

}
 8008748:	46c0      	nop			; (mov r8, r8)
 800874a:	46bd      	mov	sp, r7
 800874c:	b002      	add	sp, #8
 800874e:	bd80      	pop	{r7, pc}

08008750 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008754:	f7f8 fd3c 	bl	80011d0 <SystemClock_Config>
}
 8008758:	46c0      	nop			; (mov r8, r8)
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	0002      	movs	r2, r0
 8008766:	1dfb      	adds	r3, r7, #7
 8008768:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876a:	230f      	movs	r3, #15
 800876c:	18fb      	adds	r3, r7, r3
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008772:	1dfb      	adds	r3, r7, #7
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b03      	cmp	r3, #3
 8008778:	d017      	beq.n	80087aa <USBD_Get_USB_Status+0x4c>
 800877a:	dc1b      	bgt.n	80087b4 <USBD_Get_USB_Status+0x56>
 800877c:	2b02      	cmp	r3, #2
 800877e:	d00f      	beq.n	80087a0 <USBD_Get_USB_Status+0x42>
 8008780:	dc18      	bgt.n	80087b4 <USBD_Get_USB_Status+0x56>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <USBD_Get_USB_Status+0x2e>
 8008786:	2b01      	cmp	r3, #1
 8008788:	d005      	beq.n	8008796 <USBD_Get_USB_Status+0x38>
 800878a:	e013      	b.n	80087b4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800878c:	230f      	movs	r3, #15
 800878e:	18fb      	adds	r3, r7, r3
 8008790:	2200      	movs	r2, #0
 8008792:	701a      	strb	r2, [r3, #0]
    break;
 8008794:	e013      	b.n	80087be <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008796:	230f      	movs	r3, #15
 8008798:	18fb      	adds	r3, r7, r3
 800879a:	2202      	movs	r2, #2
 800879c:	701a      	strb	r2, [r3, #0]
    break;
 800879e:	e00e      	b.n	80087be <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087a0:	230f      	movs	r3, #15
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	2201      	movs	r2, #1
 80087a6:	701a      	strb	r2, [r3, #0]
    break;
 80087a8:	e009      	b.n	80087be <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087aa:	230f      	movs	r3, #15
 80087ac:	18fb      	adds	r3, r7, r3
 80087ae:	2202      	movs	r2, #2
 80087b0:	701a      	strb	r2, [r3, #0]
    break;
 80087b2:	e004      	b.n	80087be <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80087b4:	230f      	movs	r3, #15
 80087b6:	18fb      	adds	r3, r7, r3
 80087b8:	2202      	movs	r2, #2
 80087ba:	701a      	strb	r2, [r3, #0]
    break;
 80087bc:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80087be:	230f      	movs	r3, #15
 80087c0:	18fb      	adds	r3, r7, r3
 80087c2:	781b      	ldrb	r3, [r3, #0]
}
 80087c4:	0018      	movs	r0, r3
 80087c6:	46bd      	mov	sp, r7
 80087c8:	b004      	add	sp, #16
 80087ca:	bd80      	pop	{r7, pc}

080087cc <std>:
 80087cc:	2300      	movs	r3, #0
 80087ce:	b510      	push	{r4, lr}
 80087d0:	0004      	movs	r4, r0
 80087d2:	6003      	str	r3, [r0, #0]
 80087d4:	6043      	str	r3, [r0, #4]
 80087d6:	6083      	str	r3, [r0, #8]
 80087d8:	8181      	strh	r1, [r0, #12]
 80087da:	6643      	str	r3, [r0, #100]	; 0x64
 80087dc:	81c2      	strh	r2, [r0, #14]
 80087de:	6103      	str	r3, [r0, #16]
 80087e0:	6143      	str	r3, [r0, #20]
 80087e2:	6183      	str	r3, [r0, #24]
 80087e4:	0019      	movs	r1, r3
 80087e6:	2208      	movs	r2, #8
 80087e8:	305c      	adds	r0, #92	; 0x5c
 80087ea:	f000 f90f 	bl	8008a0c <memset>
 80087ee:	4b0b      	ldr	r3, [pc, #44]	; (800881c <std+0x50>)
 80087f0:	6224      	str	r4, [r4, #32]
 80087f2:	6263      	str	r3, [r4, #36]	; 0x24
 80087f4:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <std+0x54>)
 80087f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80087f8:	4b0a      	ldr	r3, [pc, #40]	; (8008824 <std+0x58>)
 80087fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087fc:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <std+0x5c>)
 80087fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008800:	4b0a      	ldr	r3, [pc, #40]	; (800882c <std+0x60>)
 8008802:	429c      	cmp	r4, r3
 8008804:	d005      	beq.n	8008812 <std+0x46>
 8008806:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <std+0x64>)
 8008808:	429c      	cmp	r4, r3
 800880a:	d002      	beq.n	8008812 <std+0x46>
 800880c:	4b09      	ldr	r3, [pc, #36]	; (8008834 <std+0x68>)
 800880e:	429c      	cmp	r4, r3
 8008810:	d103      	bne.n	800881a <std+0x4e>
 8008812:	0020      	movs	r0, r4
 8008814:	3058      	adds	r0, #88	; 0x58
 8008816:	f000 f979 	bl	8008b0c <__retarget_lock_init_recursive>
 800881a:	bd10      	pop	{r4, pc}
 800881c:	08008975 	.word	0x08008975
 8008820:	0800899d 	.word	0x0800899d
 8008824:	080089d5 	.word	0x080089d5
 8008828:	08008a01 	.word	0x08008a01
 800882c:	200009a8 	.word	0x200009a8
 8008830:	20000a10 	.word	0x20000a10
 8008834:	20000a78 	.word	0x20000a78

08008838 <stdio_exit_handler>:
 8008838:	b510      	push	{r4, lr}
 800883a:	4a03      	ldr	r2, [pc, #12]	; (8008848 <stdio_exit_handler+0x10>)
 800883c:	4903      	ldr	r1, [pc, #12]	; (800884c <stdio_exit_handler+0x14>)
 800883e:	4804      	ldr	r0, [pc, #16]	; (8008850 <stdio_exit_handler+0x18>)
 8008840:	f000 f86c 	bl	800891c <_fwalk_sglue>
 8008844:	bd10      	pop	{r4, pc}
 8008846:	46c0      	nop			; (mov r8, r8)
 8008848:	20000158 	.word	0x20000158
 800884c:	080093ad 	.word	0x080093ad
 8008850:	20000164 	.word	0x20000164

08008854 <cleanup_stdio>:
 8008854:	6841      	ldr	r1, [r0, #4]
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <cleanup_stdio+0x30>)
 8008858:	b510      	push	{r4, lr}
 800885a:	0004      	movs	r4, r0
 800885c:	4299      	cmp	r1, r3
 800885e:	d001      	beq.n	8008864 <cleanup_stdio+0x10>
 8008860:	f000 fda4 	bl	80093ac <_fflush_r>
 8008864:	68a1      	ldr	r1, [r4, #8]
 8008866:	4b08      	ldr	r3, [pc, #32]	; (8008888 <cleanup_stdio+0x34>)
 8008868:	4299      	cmp	r1, r3
 800886a:	d002      	beq.n	8008872 <cleanup_stdio+0x1e>
 800886c:	0020      	movs	r0, r4
 800886e:	f000 fd9d 	bl	80093ac <_fflush_r>
 8008872:	68e1      	ldr	r1, [r4, #12]
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <cleanup_stdio+0x38>)
 8008876:	4299      	cmp	r1, r3
 8008878:	d002      	beq.n	8008880 <cleanup_stdio+0x2c>
 800887a:	0020      	movs	r0, r4
 800887c:	f000 fd96 	bl	80093ac <_fflush_r>
 8008880:	bd10      	pop	{r4, pc}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	200009a8 	.word	0x200009a8
 8008888:	20000a10 	.word	0x20000a10
 800888c:	20000a78 	.word	0x20000a78

08008890 <global_stdio_init.part.0>:
 8008890:	b510      	push	{r4, lr}
 8008892:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <global_stdio_init.part.0+0x28>)
 8008894:	4a09      	ldr	r2, [pc, #36]	; (80088bc <global_stdio_init.part.0+0x2c>)
 8008896:	2104      	movs	r1, #4
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	4809      	ldr	r0, [pc, #36]	; (80088c0 <global_stdio_init.part.0+0x30>)
 800889c:	2200      	movs	r2, #0
 800889e:	f7ff ff95 	bl	80087cc <std>
 80088a2:	2201      	movs	r2, #1
 80088a4:	2109      	movs	r1, #9
 80088a6:	4807      	ldr	r0, [pc, #28]	; (80088c4 <global_stdio_init.part.0+0x34>)
 80088a8:	f7ff ff90 	bl	80087cc <std>
 80088ac:	2202      	movs	r2, #2
 80088ae:	2112      	movs	r1, #18
 80088b0:	4805      	ldr	r0, [pc, #20]	; (80088c8 <global_stdio_init.part.0+0x38>)
 80088b2:	f7ff ff8b 	bl	80087cc <std>
 80088b6:	bd10      	pop	{r4, pc}
 80088b8:	20000ae0 	.word	0x20000ae0
 80088bc:	08008839 	.word	0x08008839
 80088c0:	200009a8 	.word	0x200009a8
 80088c4:	20000a10 	.word	0x20000a10
 80088c8:	20000a78 	.word	0x20000a78

080088cc <__sfp_lock_acquire>:
 80088cc:	b510      	push	{r4, lr}
 80088ce:	4802      	ldr	r0, [pc, #8]	; (80088d8 <__sfp_lock_acquire+0xc>)
 80088d0:	f000 f91d 	bl	8008b0e <__retarget_lock_acquire_recursive>
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	20000ae9 	.word	0x20000ae9

080088dc <__sfp_lock_release>:
 80088dc:	b510      	push	{r4, lr}
 80088de:	4802      	ldr	r0, [pc, #8]	; (80088e8 <__sfp_lock_release+0xc>)
 80088e0:	f000 f916 	bl	8008b10 <__retarget_lock_release_recursive>
 80088e4:	bd10      	pop	{r4, pc}
 80088e6:	46c0      	nop			; (mov r8, r8)
 80088e8:	20000ae9 	.word	0x20000ae9

080088ec <__sinit>:
 80088ec:	b510      	push	{r4, lr}
 80088ee:	0004      	movs	r4, r0
 80088f0:	f7ff ffec 	bl	80088cc <__sfp_lock_acquire>
 80088f4:	6a23      	ldr	r3, [r4, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <__sinit+0x14>
 80088fa:	f7ff ffef 	bl	80088dc <__sfp_lock_release>
 80088fe:	bd10      	pop	{r4, pc}
 8008900:	4b04      	ldr	r3, [pc, #16]	; (8008914 <__sinit+0x28>)
 8008902:	6223      	str	r3, [r4, #32]
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <__sinit+0x2c>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1f6      	bne.n	80088fa <__sinit+0xe>
 800890c:	f7ff ffc0 	bl	8008890 <global_stdio_init.part.0>
 8008910:	e7f3      	b.n	80088fa <__sinit+0xe>
 8008912:	46c0      	nop			; (mov r8, r8)
 8008914:	08008855 	.word	0x08008855
 8008918:	20000ae0 	.word	0x20000ae0

0800891c <_fwalk_sglue>:
 800891c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800891e:	0014      	movs	r4, r2
 8008920:	2600      	movs	r6, #0
 8008922:	9000      	str	r0, [sp, #0]
 8008924:	9101      	str	r1, [sp, #4]
 8008926:	68a5      	ldr	r5, [r4, #8]
 8008928:	6867      	ldr	r7, [r4, #4]
 800892a:	3f01      	subs	r7, #1
 800892c:	d504      	bpl.n	8008938 <_fwalk_sglue+0x1c>
 800892e:	6824      	ldr	r4, [r4, #0]
 8008930:	2c00      	cmp	r4, #0
 8008932:	d1f8      	bne.n	8008926 <_fwalk_sglue+0xa>
 8008934:	0030      	movs	r0, r6
 8008936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008938:	89ab      	ldrh	r3, [r5, #12]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d908      	bls.n	8008950 <_fwalk_sglue+0x34>
 800893e:	220e      	movs	r2, #14
 8008940:	5eab      	ldrsh	r3, [r5, r2]
 8008942:	3301      	adds	r3, #1
 8008944:	d004      	beq.n	8008950 <_fwalk_sglue+0x34>
 8008946:	0029      	movs	r1, r5
 8008948:	9800      	ldr	r0, [sp, #0]
 800894a:	9b01      	ldr	r3, [sp, #4]
 800894c:	4798      	blx	r3
 800894e:	4306      	orrs	r6, r0
 8008950:	3568      	adds	r5, #104	; 0x68
 8008952:	e7ea      	b.n	800892a <_fwalk_sglue+0xe>

08008954 <iprintf>:
 8008954:	b40f      	push	{r0, r1, r2, r3}
 8008956:	b507      	push	{r0, r1, r2, lr}
 8008958:	4905      	ldr	r1, [pc, #20]	; (8008970 <iprintf+0x1c>)
 800895a:	ab04      	add	r3, sp, #16
 800895c:	6808      	ldr	r0, [r1, #0]
 800895e:	cb04      	ldmia	r3!, {r2}
 8008960:	6881      	ldr	r1, [r0, #8]
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	f000 f9fc 	bl	8008d60 <_vfiprintf_r>
 8008968:	b003      	add	sp, #12
 800896a:	bc08      	pop	{r3}
 800896c:	b004      	add	sp, #16
 800896e:	4718      	bx	r3
 8008970:	200001b0 	.word	0x200001b0

08008974 <__sread>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	000c      	movs	r4, r1
 8008978:	250e      	movs	r5, #14
 800897a:	5f49      	ldrsh	r1, [r1, r5]
 800897c:	f000 f874 	bl	8008a68 <_read_r>
 8008980:	2800      	cmp	r0, #0
 8008982:	db03      	blt.n	800898c <__sread+0x18>
 8008984:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008986:	181b      	adds	r3, r3, r0
 8008988:	6563      	str	r3, [r4, #84]	; 0x54
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	4a02      	ldr	r2, [pc, #8]	; (8008998 <__sread+0x24>)
 8008990:	4013      	ands	r3, r2
 8008992:	81a3      	strh	r3, [r4, #12]
 8008994:	e7f9      	b.n	800898a <__sread+0x16>
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	ffffefff 	.word	0xffffefff

0800899c <__swrite>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	001f      	movs	r7, r3
 80089a0:	898b      	ldrh	r3, [r1, #12]
 80089a2:	0005      	movs	r5, r0
 80089a4:	000c      	movs	r4, r1
 80089a6:	0016      	movs	r6, r2
 80089a8:	05db      	lsls	r3, r3, #23
 80089aa:	d505      	bpl.n	80089b8 <__swrite+0x1c>
 80089ac:	230e      	movs	r3, #14
 80089ae:	5ec9      	ldrsh	r1, [r1, r3]
 80089b0:	2200      	movs	r2, #0
 80089b2:	2302      	movs	r3, #2
 80089b4:	f000 f844 	bl	8008a40 <_lseek_r>
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	4a05      	ldr	r2, [pc, #20]	; (80089d0 <__swrite+0x34>)
 80089bc:	0028      	movs	r0, r5
 80089be:	4013      	ands	r3, r2
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	0032      	movs	r2, r6
 80089c4:	230e      	movs	r3, #14
 80089c6:	5ee1      	ldrsh	r1, [r4, r3]
 80089c8:	003b      	movs	r3, r7
 80089ca:	f000 f861 	bl	8008a90 <_write_r>
 80089ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d0:	ffffefff 	.word	0xffffefff

080089d4 <__sseek>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	000c      	movs	r4, r1
 80089d8:	250e      	movs	r5, #14
 80089da:	5f49      	ldrsh	r1, [r1, r5]
 80089dc:	f000 f830 	bl	8008a40 <_lseek_r>
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	1c42      	adds	r2, r0, #1
 80089e4:	d103      	bne.n	80089ee <__sseek+0x1a>
 80089e6:	4a05      	ldr	r2, [pc, #20]	; (80089fc <__sseek+0x28>)
 80089e8:	4013      	ands	r3, r2
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	bd70      	pop	{r4, r5, r6, pc}
 80089ee:	2280      	movs	r2, #128	; 0x80
 80089f0:	0152      	lsls	r2, r2, #5
 80089f2:	4313      	orrs	r3, r2
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	6560      	str	r0, [r4, #84]	; 0x54
 80089f8:	e7f8      	b.n	80089ec <__sseek+0x18>
 80089fa:	46c0      	nop			; (mov r8, r8)
 80089fc:	ffffefff 	.word	0xffffefff

08008a00 <__sclose>:
 8008a00:	b510      	push	{r4, lr}
 8008a02:	230e      	movs	r3, #14
 8008a04:	5ec9      	ldrsh	r1, [r1, r3]
 8008a06:	f000 f809 	bl	8008a1c <_close_r>
 8008a0a:	bd10      	pop	{r4, pc}

08008a0c <memset>:
 8008a0c:	0003      	movs	r3, r0
 8008a0e:	1882      	adds	r2, r0, r2
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d100      	bne.n	8008a16 <memset+0xa>
 8008a14:	4770      	bx	lr
 8008a16:	7019      	strb	r1, [r3, #0]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	e7f9      	b.n	8008a10 <memset+0x4>

08008a1c <_close_r>:
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	b570      	push	{r4, r5, r6, lr}
 8008a20:	4d06      	ldr	r5, [pc, #24]	; (8008a3c <_close_r+0x20>)
 8008a22:	0004      	movs	r4, r0
 8008a24:	0008      	movs	r0, r1
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	f7f8 fd2f 	bl	800148a <_close>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d103      	bne.n	8008a38 <_close_r+0x1c>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d000      	beq.n	8008a38 <_close_r+0x1c>
 8008a36:	6023      	str	r3, [r4, #0]
 8008a38:	bd70      	pop	{r4, r5, r6, pc}
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	20000ae4 	.word	0x20000ae4

08008a40 <_lseek_r>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	0004      	movs	r4, r0
 8008a44:	0008      	movs	r0, r1
 8008a46:	0011      	movs	r1, r2
 8008a48:	001a      	movs	r2, r3
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4d05      	ldr	r5, [pc, #20]	; (8008a64 <_lseek_r+0x24>)
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	f7f8 fd3c 	bl	80014cc <_lseek>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d103      	bne.n	8008a60 <_lseek_r+0x20>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d000      	beq.n	8008a60 <_lseek_r+0x20>
 8008a5e:	6023      	str	r3, [r4, #0]
 8008a60:	bd70      	pop	{r4, r5, r6, pc}
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	20000ae4 	.word	0x20000ae4

08008a68 <_read_r>:
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	0004      	movs	r4, r0
 8008a6c:	0008      	movs	r0, r1
 8008a6e:	0011      	movs	r1, r2
 8008a70:	001a      	movs	r2, r3
 8008a72:	2300      	movs	r3, #0
 8008a74:	4d05      	ldr	r5, [pc, #20]	; (8008a8c <_read_r+0x24>)
 8008a76:	602b      	str	r3, [r5, #0]
 8008a78:	f7f8 fcce 	bl	8001418 <_read>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d103      	bne.n	8008a88 <_read_r+0x20>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d000      	beq.n	8008a88 <_read_r+0x20>
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	bd70      	pop	{r4, r5, r6, pc}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	20000ae4 	.word	0x20000ae4

08008a90 <_write_r>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	0004      	movs	r4, r0
 8008a94:	0008      	movs	r0, r1
 8008a96:	0011      	movs	r1, r2
 8008a98:	001a      	movs	r2, r3
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	4d05      	ldr	r5, [pc, #20]	; (8008ab4 <_write_r+0x24>)
 8008a9e:	602b      	str	r3, [r5, #0]
 8008aa0:	f7f8 fcd7 	bl	8001452 <_write>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d103      	bne.n	8008ab0 <_write_r+0x20>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d000      	beq.n	8008ab0 <_write_r+0x20>
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	bd70      	pop	{r4, r5, r6, pc}
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	20000ae4 	.word	0x20000ae4

08008ab8 <__errno>:
 8008ab8:	4b01      	ldr	r3, [pc, #4]	; (8008ac0 <__errno+0x8>)
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	4770      	bx	lr
 8008abe:	46c0      	nop			; (mov r8, r8)
 8008ac0:	200001b0 	.word	0x200001b0

08008ac4 <__libc_init_array>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	2600      	movs	r6, #0
 8008ac8:	4c0c      	ldr	r4, [pc, #48]	; (8008afc <__libc_init_array+0x38>)
 8008aca:	4d0d      	ldr	r5, [pc, #52]	; (8008b00 <__libc_init_array+0x3c>)
 8008acc:	1b64      	subs	r4, r4, r5
 8008ace:	10a4      	asrs	r4, r4, #2
 8008ad0:	42a6      	cmp	r6, r4
 8008ad2:	d109      	bne.n	8008ae8 <__libc_init_array+0x24>
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	f000 fde3 	bl	80096a0 <_init>
 8008ada:	4c0a      	ldr	r4, [pc, #40]	; (8008b04 <__libc_init_array+0x40>)
 8008adc:	4d0a      	ldr	r5, [pc, #40]	; (8008b08 <__libc_init_array+0x44>)
 8008ade:	1b64      	subs	r4, r4, r5
 8008ae0:	10a4      	asrs	r4, r4, #2
 8008ae2:	42a6      	cmp	r6, r4
 8008ae4:	d105      	bne.n	8008af2 <__libc_init_array+0x2e>
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	00b3      	lsls	r3, r6, #2
 8008aea:	58eb      	ldr	r3, [r5, r3]
 8008aec:	4798      	blx	r3
 8008aee:	3601      	adds	r6, #1
 8008af0:	e7ee      	b.n	8008ad0 <__libc_init_array+0xc>
 8008af2:	00b3      	lsls	r3, r6, #2
 8008af4:	58eb      	ldr	r3, [r5, r3]
 8008af6:	4798      	blx	r3
 8008af8:	3601      	adds	r6, #1
 8008afa:	e7f2      	b.n	8008ae2 <__libc_init_array+0x1e>
 8008afc:	08009970 	.word	0x08009970
 8008b00:	08009970 	.word	0x08009970
 8008b04:	08009974 	.word	0x08009974
 8008b08:	08009970 	.word	0x08009970

08008b0c <__retarget_lock_init_recursive>:
 8008b0c:	4770      	bx	lr

08008b0e <__retarget_lock_acquire_recursive>:
 8008b0e:	4770      	bx	lr

08008b10 <__retarget_lock_release_recursive>:
 8008b10:	4770      	bx	lr
	...

08008b14 <_free_r>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	0005      	movs	r5, r0
 8008b18:	2900      	cmp	r1, #0
 8008b1a:	d010      	beq.n	8008b3e <_free_r+0x2a>
 8008b1c:	1f0c      	subs	r4, r1, #4
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	da00      	bge.n	8008b26 <_free_r+0x12>
 8008b24:	18e4      	adds	r4, r4, r3
 8008b26:	0028      	movs	r0, r5
 8008b28:	f000 f8e2 	bl	8008cf0 <__malloc_lock>
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <_free_r+0x90>)
 8008b2e:	6813      	ldr	r3, [r2, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d105      	bne.n	8008b40 <_free_r+0x2c>
 8008b34:	6063      	str	r3, [r4, #4]
 8008b36:	6014      	str	r4, [r2, #0]
 8008b38:	0028      	movs	r0, r5
 8008b3a:	f000 f8e1 	bl	8008d00 <__malloc_unlock>
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d908      	bls.n	8008b56 <_free_r+0x42>
 8008b44:	6820      	ldr	r0, [r4, #0]
 8008b46:	1821      	adds	r1, r4, r0
 8008b48:	428b      	cmp	r3, r1
 8008b4a:	d1f3      	bne.n	8008b34 <_free_r+0x20>
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	1809      	adds	r1, r1, r0
 8008b52:	6021      	str	r1, [r4, #0]
 8008b54:	e7ee      	b.n	8008b34 <_free_r+0x20>
 8008b56:	001a      	movs	r2, r3
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <_free_r+0x4e>
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	d9f9      	bls.n	8008b56 <_free_r+0x42>
 8008b62:	6811      	ldr	r1, [r2, #0]
 8008b64:	1850      	adds	r0, r2, r1
 8008b66:	42a0      	cmp	r0, r4
 8008b68:	d10b      	bne.n	8008b82 <_free_r+0x6e>
 8008b6a:	6820      	ldr	r0, [r4, #0]
 8008b6c:	1809      	adds	r1, r1, r0
 8008b6e:	1850      	adds	r0, r2, r1
 8008b70:	6011      	str	r1, [r2, #0]
 8008b72:	4283      	cmp	r3, r0
 8008b74:	d1e0      	bne.n	8008b38 <_free_r+0x24>
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	1841      	adds	r1, r0, r1
 8008b7c:	6011      	str	r1, [r2, #0]
 8008b7e:	6053      	str	r3, [r2, #4]
 8008b80:	e7da      	b.n	8008b38 <_free_r+0x24>
 8008b82:	42a0      	cmp	r0, r4
 8008b84:	d902      	bls.n	8008b8c <_free_r+0x78>
 8008b86:	230c      	movs	r3, #12
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	e7d5      	b.n	8008b38 <_free_r+0x24>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	1821      	adds	r1, r4, r0
 8008b90:	428b      	cmp	r3, r1
 8008b92:	d103      	bne.n	8008b9c <_free_r+0x88>
 8008b94:	6819      	ldr	r1, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	1809      	adds	r1, r1, r0
 8008b9a:	6021      	str	r1, [r4, #0]
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	6054      	str	r4, [r2, #4]
 8008ba0:	e7ca      	b.n	8008b38 <_free_r+0x24>
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	20000aec 	.word	0x20000aec

08008ba8 <sbrk_aligned>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	4e0f      	ldr	r6, [pc, #60]	; (8008be8 <sbrk_aligned+0x40>)
 8008bac:	000d      	movs	r5, r1
 8008bae:	6831      	ldr	r1, [r6, #0]
 8008bb0:	0004      	movs	r4, r0
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	d102      	bne.n	8008bbc <sbrk_aligned+0x14>
 8008bb6:	f000 fccb 	bl	8009550 <_sbrk_r>
 8008bba:	6030      	str	r0, [r6, #0]
 8008bbc:	0029      	movs	r1, r5
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	f000 fcc6 	bl	8009550 <_sbrk_r>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d00a      	beq.n	8008bde <sbrk_aligned+0x36>
 8008bc8:	2303      	movs	r3, #3
 8008bca:	1cc5      	adds	r5, r0, #3
 8008bcc:	439d      	bics	r5, r3
 8008bce:	42a8      	cmp	r0, r5
 8008bd0:	d007      	beq.n	8008be2 <sbrk_aligned+0x3a>
 8008bd2:	1a29      	subs	r1, r5, r0
 8008bd4:	0020      	movs	r0, r4
 8008bd6:	f000 fcbb 	bl	8009550 <_sbrk_r>
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d101      	bne.n	8008be2 <sbrk_aligned+0x3a>
 8008bde:	2501      	movs	r5, #1
 8008be0:	426d      	negs	r5, r5
 8008be2:	0028      	movs	r0, r5
 8008be4:	bd70      	pop	{r4, r5, r6, pc}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	20000af0 	.word	0x20000af0

08008bec <_malloc_r>:
 8008bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bee:	2203      	movs	r2, #3
 8008bf0:	1ccb      	adds	r3, r1, #3
 8008bf2:	4393      	bics	r3, r2
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	0006      	movs	r6, r0
 8008bf8:	001f      	movs	r7, r3
 8008bfa:	2b0c      	cmp	r3, #12
 8008bfc:	d238      	bcs.n	8008c70 <_malloc_r+0x84>
 8008bfe:	270c      	movs	r7, #12
 8008c00:	42b9      	cmp	r1, r7
 8008c02:	d837      	bhi.n	8008c74 <_malloc_r+0x88>
 8008c04:	0030      	movs	r0, r6
 8008c06:	f000 f873 	bl	8008cf0 <__malloc_lock>
 8008c0a:	4b38      	ldr	r3, [pc, #224]	; (8008cec <_malloc_r+0x100>)
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	001c      	movs	r4, r3
 8008c12:	2c00      	cmp	r4, #0
 8008c14:	d133      	bne.n	8008c7e <_malloc_r+0x92>
 8008c16:	0039      	movs	r1, r7
 8008c18:	0030      	movs	r0, r6
 8008c1a:	f7ff ffc5 	bl	8008ba8 <sbrk_aligned>
 8008c1e:	0004      	movs	r4, r0
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d15e      	bne.n	8008ce2 <_malloc_r+0xf6>
 8008c24:	9b00      	ldr	r3, [sp, #0]
 8008c26:	681c      	ldr	r4, [r3, #0]
 8008c28:	0025      	movs	r5, r4
 8008c2a:	2d00      	cmp	r5, #0
 8008c2c:	d14e      	bne.n	8008ccc <_malloc_r+0xe0>
 8008c2e:	2c00      	cmp	r4, #0
 8008c30:	d051      	beq.n	8008cd6 <_malloc_r+0xea>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	0029      	movs	r1, r5
 8008c36:	18e3      	adds	r3, r4, r3
 8008c38:	0030      	movs	r0, r6
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	f000 fc88 	bl	8009550 <_sbrk_r>
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	4283      	cmp	r3, r0
 8008c44:	d147      	bne.n	8008cd6 <_malloc_r+0xea>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	0030      	movs	r0, r6
 8008c4a:	1aff      	subs	r7, r7, r3
 8008c4c:	0039      	movs	r1, r7
 8008c4e:	f7ff ffab 	bl	8008ba8 <sbrk_aligned>
 8008c52:	3001      	adds	r0, #1
 8008c54:	d03f      	beq.n	8008cd6 <_malloc_r+0xea>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	19db      	adds	r3, r3, r7
 8008c5a:	6023      	str	r3, [r4, #0]
 8008c5c:	9b00      	ldr	r3, [sp, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d040      	beq.n	8008ce6 <_malloc_r+0xfa>
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	42a2      	cmp	r2, r4
 8008c68:	d133      	bne.n	8008cd2 <_malloc_r+0xe6>
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	e014      	b.n	8008c9a <_malloc_r+0xae>
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dac5      	bge.n	8008c00 <_malloc_r+0x14>
 8008c74:	230c      	movs	r3, #12
 8008c76:	2500      	movs	r5, #0
 8008c78:	6033      	str	r3, [r6, #0]
 8008c7a:	0028      	movs	r0, r5
 8008c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c7e:	6821      	ldr	r1, [r4, #0]
 8008c80:	1bc9      	subs	r1, r1, r7
 8008c82:	d420      	bmi.n	8008cc6 <_malloc_r+0xda>
 8008c84:	290b      	cmp	r1, #11
 8008c86:	d918      	bls.n	8008cba <_malloc_r+0xce>
 8008c88:	19e2      	adds	r2, r4, r7
 8008c8a:	6027      	str	r7, [r4, #0]
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	d112      	bne.n	8008cb6 <_malloc_r+0xca>
 8008c90:	9b00      	ldr	r3, [sp, #0]
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	6011      	str	r1, [r2, #0]
 8008c98:	6053      	str	r3, [r2, #4]
 8008c9a:	0030      	movs	r0, r6
 8008c9c:	0025      	movs	r5, r4
 8008c9e:	f000 f82f 	bl	8008d00 <__malloc_unlock>
 8008ca2:	2207      	movs	r2, #7
 8008ca4:	350b      	adds	r5, #11
 8008ca6:	1d23      	adds	r3, r4, #4
 8008ca8:	4395      	bics	r5, r2
 8008caa:	1aea      	subs	r2, r5, r3
 8008cac:	429d      	cmp	r5, r3
 8008cae:	d0e4      	beq.n	8008c7a <_malloc_r+0x8e>
 8008cb0:	1b5b      	subs	r3, r3, r5
 8008cb2:	50a3      	str	r3, [r4, r2]
 8008cb4:	e7e1      	b.n	8008c7a <_malloc_r+0x8e>
 8008cb6:	605a      	str	r2, [r3, #4]
 8008cb8:	e7ec      	b.n	8008c94 <_malloc_r+0xa8>
 8008cba:	6862      	ldr	r2, [r4, #4]
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	d1d5      	bne.n	8008c6c <_malloc_r+0x80>
 8008cc0:	9b00      	ldr	r3, [sp, #0]
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	e7e9      	b.n	8008c9a <_malloc_r+0xae>
 8008cc6:	0023      	movs	r3, r4
 8008cc8:	6864      	ldr	r4, [r4, #4]
 8008cca:	e7a2      	b.n	8008c12 <_malloc_r+0x26>
 8008ccc:	002c      	movs	r4, r5
 8008cce:	686d      	ldr	r5, [r5, #4]
 8008cd0:	e7ab      	b.n	8008c2a <_malloc_r+0x3e>
 8008cd2:	0013      	movs	r3, r2
 8008cd4:	e7c4      	b.n	8008c60 <_malloc_r+0x74>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	0030      	movs	r0, r6
 8008cda:	6033      	str	r3, [r6, #0]
 8008cdc:	f000 f810 	bl	8008d00 <__malloc_unlock>
 8008ce0:	e7cb      	b.n	8008c7a <_malloc_r+0x8e>
 8008ce2:	6027      	str	r7, [r4, #0]
 8008ce4:	e7d9      	b.n	8008c9a <_malloc_r+0xae>
 8008ce6:	605b      	str	r3, [r3, #4]
 8008ce8:	deff      	udf	#255	; 0xff
 8008cea:	46c0      	nop			; (mov r8, r8)
 8008cec:	20000aec 	.word	0x20000aec

08008cf0 <__malloc_lock>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	4802      	ldr	r0, [pc, #8]	; (8008cfc <__malloc_lock+0xc>)
 8008cf4:	f7ff ff0b 	bl	8008b0e <__retarget_lock_acquire_recursive>
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	46c0      	nop			; (mov r8, r8)
 8008cfc:	20000ae8 	.word	0x20000ae8

08008d00 <__malloc_unlock>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	4802      	ldr	r0, [pc, #8]	; (8008d0c <__malloc_unlock+0xc>)
 8008d04:	f7ff ff04 	bl	8008b10 <__retarget_lock_release_recursive>
 8008d08:	bd10      	pop	{r4, pc}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	20000ae8 	.word	0x20000ae8

08008d10 <__sfputc_r>:
 8008d10:	6893      	ldr	r3, [r2, #8]
 8008d12:	b510      	push	{r4, lr}
 8008d14:	3b01      	subs	r3, #1
 8008d16:	6093      	str	r3, [r2, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da04      	bge.n	8008d26 <__sfputc_r+0x16>
 8008d1c:	6994      	ldr	r4, [r2, #24]
 8008d1e:	42a3      	cmp	r3, r4
 8008d20:	db07      	blt.n	8008d32 <__sfputc_r+0x22>
 8008d22:	290a      	cmp	r1, #10
 8008d24:	d005      	beq.n	8008d32 <__sfputc_r+0x22>
 8008d26:	6813      	ldr	r3, [r2, #0]
 8008d28:	1c58      	adds	r0, r3, #1
 8008d2a:	6010      	str	r0, [r2, #0]
 8008d2c:	7019      	strb	r1, [r3, #0]
 8008d2e:	0008      	movs	r0, r1
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	f000 fb66 	bl	8009402 <__swbuf_r>
 8008d36:	0001      	movs	r1, r0
 8008d38:	e7f9      	b.n	8008d2e <__sfputc_r+0x1e>

08008d3a <__sfputs_r>:
 8008d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3c:	0006      	movs	r6, r0
 8008d3e:	000f      	movs	r7, r1
 8008d40:	0014      	movs	r4, r2
 8008d42:	18d5      	adds	r5, r2, r3
 8008d44:	42ac      	cmp	r4, r5
 8008d46:	d101      	bne.n	8008d4c <__sfputs_r+0x12>
 8008d48:	2000      	movs	r0, #0
 8008d4a:	e007      	b.n	8008d5c <__sfputs_r+0x22>
 8008d4c:	7821      	ldrb	r1, [r4, #0]
 8008d4e:	003a      	movs	r2, r7
 8008d50:	0030      	movs	r0, r6
 8008d52:	f7ff ffdd 	bl	8008d10 <__sfputc_r>
 8008d56:	3401      	adds	r4, #1
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d1f3      	bne.n	8008d44 <__sfputs_r+0xa>
 8008d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d60 <_vfiprintf_r>:
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	b0a1      	sub	sp, #132	; 0x84
 8008d64:	000f      	movs	r7, r1
 8008d66:	0015      	movs	r5, r2
 8008d68:	001e      	movs	r6, r3
 8008d6a:	9003      	str	r0, [sp, #12]
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d004      	beq.n	8008d7a <_vfiprintf_r+0x1a>
 8008d70:	6a03      	ldr	r3, [r0, #32]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <_vfiprintf_r+0x1a>
 8008d76:	f7ff fdb9 	bl	80088ec <__sinit>
 8008d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d7c:	07db      	lsls	r3, r3, #31
 8008d7e:	d405      	bmi.n	8008d8c <_vfiprintf_r+0x2c>
 8008d80:	89bb      	ldrh	r3, [r7, #12]
 8008d82:	059b      	lsls	r3, r3, #22
 8008d84:	d402      	bmi.n	8008d8c <_vfiprintf_r+0x2c>
 8008d86:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008d88:	f7ff fec1 	bl	8008b0e <__retarget_lock_acquire_recursive>
 8008d8c:	89bb      	ldrh	r3, [r7, #12]
 8008d8e:	071b      	lsls	r3, r3, #28
 8008d90:	d502      	bpl.n	8008d98 <_vfiprintf_r+0x38>
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d113      	bne.n	8008dc0 <_vfiprintf_r+0x60>
 8008d98:	0039      	movs	r1, r7
 8008d9a:	9803      	ldr	r0, [sp, #12]
 8008d9c:	f000 fb74 	bl	8009488 <__swsetup_r>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d00d      	beq.n	8008dc0 <_vfiprintf_r+0x60>
 8008da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008da6:	07db      	lsls	r3, r3, #31
 8008da8:	d503      	bpl.n	8008db2 <_vfiprintf_r+0x52>
 8008daa:	2001      	movs	r0, #1
 8008dac:	4240      	negs	r0, r0
 8008dae:	b021      	add	sp, #132	; 0x84
 8008db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db2:	89bb      	ldrh	r3, [r7, #12]
 8008db4:	059b      	lsls	r3, r3, #22
 8008db6:	d4f8      	bmi.n	8008daa <_vfiprintf_r+0x4a>
 8008db8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008dba:	f7ff fea9 	bl	8008b10 <__retarget_lock_release_recursive>
 8008dbe:	e7f4      	b.n	8008daa <_vfiprintf_r+0x4a>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	ac08      	add	r4, sp, #32
 8008dc4:	6163      	str	r3, [r4, #20]
 8008dc6:	3320      	adds	r3, #32
 8008dc8:	7663      	strb	r3, [r4, #25]
 8008dca:	3310      	adds	r3, #16
 8008dcc:	76a3      	strb	r3, [r4, #26]
 8008dce:	9607      	str	r6, [sp, #28]
 8008dd0:	002e      	movs	r6, r5
 8008dd2:	7833      	ldrb	r3, [r6, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <_vfiprintf_r+0x7c>
 8008dd8:	2b25      	cmp	r3, #37	; 0x25
 8008dda:	d148      	bne.n	8008e6e <_vfiprintf_r+0x10e>
 8008ddc:	1b73      	subs	r3, r6, r5
 8008dde:	9305      	str	r3, [sp, #20]
 8008de0:	42ae      	cmp	r6, r5
 8008de2:	d00b      	beq.n	8008dfc <_vfiprintf_r+0x9c>
 8008de4:	002a      	movs	r2, r5
 8008de6:	0039      	movs	r1, r7
 8008de8:	9803      	ldr	r0, [sp, #12]
 8008dea:	f7ff ffa6 	bl	8008d3a <__sfputs_r>
 8008dee:	3001      	adds	r0, #1
 8008df0:	d100      	bne.n	8008df4 <_vfiprintf_r+0x94>
 8008df2:	e0af      	b.n	8008f54 <_vfiprintf_r+0x1f4>
 8008df4:	6963      	ldr	r3, [r4, #20]
 8008df6:	9a05      	ldr	r2, [sp, #20]
 8008df8:	189b      	adds	r3, r3, r2
 8008dfa:	6163      	str	r3, [r4, #20]
 8008dfc:	7833      	ldrb	r3, [r6, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d100      	bne.n	8008e04 <_vfiprintf_r+0xa4>
 8008e02:	e0a7      	b.n	8008f54 <_vfiprintf_r+0x1f4>
 8008e04:	2201      	movs	r2, #1
 8008e06:	2300      	movs	r3, #0
 8008e08:	4252      	negs	r2, r2
 8008e0a:	6062      	str	r2, [r4, #4]
 8008e0c:	a904      	add	r1, sp, #16
 8008e0e:	3254      	adds	r2, #84	; 0x54
 8008e10:	1852      	adds	r2, r2, r1
 8008e12:	1c75      	adds	r5, r6, #1
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	60e3      	str	r3, [r4, #12]
 8008e18:	60a3      	str	r3, [r4, #8]
 8008e1a:	7013      	strb	r3, [r2, #0]
 8008e1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8008e1e:	4b59      	ldr	r3, [pc, #356]	; (8008f84 <_vfiprintf_r+0x224>)
 8008e20:	2205      	movs	r2, #5
 8008e22:	0018      	movs	r0, r3
 8008e24:	7829      	ldrb	r1, [r5, #0]
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	f000 fba4 	bl	8009574 <memchr>
 8008e2c:	1c6e      	adds	r6, r5, #1
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d11f      	bne.n	8008e72 <_vfiprintf_r+0x112>
 8008e32:	6822      	ldr	r2, [r4, #0]
 8008e34:	06d3      	lsls	r3, r2, #27
 8008e36:	d504      	bpl.n	8008e42 <_vfiprintf_r+0xe2>
 8008e38:	2353      	movs	r3, #83	; 0x53
 8008e3a:	a904      	add	r1, sp, #16
 8008e3c:	185b      	adds	r3, r3, r1
 8008e3e:	2120      	movs	r1, #32
 8008e40:	7019      	strb	r1, [r3, #0]
 8008e42:	0713      	lsls	r3, r2, #28
 8008e44:	d504      	bpl.n	8008e50 <_vfiprintf_r+0xf0>
 8008e46:	2353      	movs	r3, #83	; 0x53
 8008e48:	a904      	add	r1, sp, #16
 8008e4a:	185b      	adds	r3, r3, r1
 8008e4c:	212b      	movs	r1, #43	; 0x2b
 8008e4e:	7019      	strb	r1, [r3, #0]
 8008e50:	782b      	ldrb	r3, [r5, #0]
 8008e52:	2b2a      	cmp	r3, #42	; 0x2a
 8008e54:	d016      	beq.n	8008e84 <_vfiprintf_r+0x124>
 8008e56:	002e      	movs	r6, r5
 8008e58:	2100      	movs	r1, #0
 8008e5a:	200a      	movs	r0, #10
 8008e5c:	68e3      	ldr	r3, [r4, #12]
 8008e5e:	7832      	ldrb	r2, [r6, #0]
 8008e60:	1c75      	adds	r5, r6, #1
 8008e62:	3a30      	subs	r2, #48	; 0x30
 8008e64:	2a09      	cmp	r2, #9
 8008e66:	d94e      	bls.n	8008f06 <_vfiprintf_r+0x1a6>
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	d111      	bne.n	8008e90 <_vfiprintf_r+0x130>
 8008e6c:	e017      	b.n	8008e9e <_vfiprintf_r+0x13e>
 8008e6e:	3601      	adds	r6, #1
 8008e70:	e7af      	b.n	8008dd2 <_vfiprintf_r+0x72>
 8008e72:	9b05      	ldr	r3, [sp, #20]
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	1ac0      	subs	r0, r0, r3
 8008e78:	2301      	movs	r3, #1
 8008e7a:	4083      	lsls	r3, r0
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	0035      	movs	r5, r6
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	e7cc      	b.n	8008e1e <_vfiprintf_r+0xbe>
 8008e84:	9b07      	ldr	r3, [sp, #28]
 8008e86:	1d19      	adds	r1, r3, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	9107      	str	r1, [sp, #28]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	db01      	blt.n	8008e94 <_vfiprintf_r+0x134>
 8008e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e92:	e004      	b.n	8008e9e <_vfiprintf_r+0x13e>
 8008e94:	425b      	negs	r3, r3
 8008e96:	60e3      	str	r3, [r4, #12]
 8008e98:	2302      	movs	r3, #2
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	7833      	ldrb	r3, [r6, #0]
 8008ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ea2:	d10a      	bne.n	8008eba <_vfiprintf_r+0x15a>
 8008ea4:	7873      	ldrb	r3, [r6, #1]
 8008ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea8:	d135      	bne.n	8008f16 <_vfiprintf_r+0x1b6>
 8008eaa:	9b07      	ldr	r3, [sp, #28]
 8008eac:	3602      	adds	r6, #2
 8008eae:	1d1a      	adds	r2, r3, #4
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	9207      	str	r2, [sp, #28]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	db2b      	blt.n	8008f10 <_vfiprintf_r+0x1b0>
 8008eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eba:	4d33      	ldr	r5, [pc, #204]	; (8008f88 <_vfiprintf_r+0x228>)
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	0028      	movs	r0, r5
 8008ec0:	7831      	ldrb	r1, [r6, #0]
 8008ec2:	f000 fb57 	bl	8009574 <memchr>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d006      	beq.n	8008ed8 <_vfiprintf_r+0x178>
 8008eca:	2340      	movs	r3, #64	; 0x40
 8008ecc:	1b40      	subs	r0, r0, r5
 8008ece:	4083      	lsls	r3, r0
 8008ed0:	6822      	ldr	r2, [r4, #0]
 8008ed2:	3601      	adds	r6, #1
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	6023      	str	r3, [r4, #0]
 8008ed8:	7831      	ldrb	r1, [r6, #0]
 8008eda:	2206      	movs	r2, #6
 8008edc:	482b      	ldr	r0, [pc, #172]	; (8008f8c <_vfiprintf_r+0x22c>)
 8008ede:	1c75      	adds	r5, r6, #1
 8008ee0:	7621      	strb	r1, [r4, #24]
 8008ee2:	f000 fb47 	bl	8009574 <memchr>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d043      	beq.n	8008f72 <_vfiprintf_r+0x212>
 8008eea:	4b29      	ldr	r3, [pc, #164]	; (8008f90 <_vfiprintf_r+0x230>)
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d125      	bne.n	8008f3c <_vfiprintf_r+0x1dc>
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	9b07      	ldr	r3, [sp, #28]
 8008ef4:	3307      	adds	r3, #7
 8008ef6:	4393      	bics	r3, r2
 8008ef8:	3308      	adds	r3, #8
 8008efa:	9307      	str	r3, [sp, #28]
 8008efc:	6963      	ldr	r3, [r4, #20]
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	189b      	adds	r3, r3, r2
 8008f02:	6163      	str	r3, [r4, #20]
 8008f04:	e764      	b.n	8008dd0 <_vfiprintf_r+0x70>
 8008f06:	4343      	muls	r3, r0
 8008f08:	002e      	movs	r6, r5
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	189b      	adds	r3, r3, r2
 8008f0e:	e7a6      	b.n	8008e5e <_vfiprintf_r+0xfe>
 8008f10:	2301      	movs	r3, #1
 8008f12:	425b      	negs	r3, r3
 8008f14:	e7d0      	b.n	8008eb8 <_vfiprintf_r+0x158>
 8008f16:	2300      	movs	r3, #0
 8008f18:	200a      	movs	r0, #10
 8008f1a:	001a      	movs	r2, r3
 8008f1c:	3601      	adds	r6, #1
 8008f1e:	6063      	str	r3, [r4, #4]
 8008f20:	7831      	ldrb	r1, [r6, #0]
 8008f22:	1c75      	adds	r5, r6, #1
 8008f24:	3930      	subs	r1, #48	; 0x30
 8008f26:	2909      	cmp	r1, #9
 8008f28:	d903      	bls.n	8008f32 <_vfiprintf_r+0x1d2>
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0c5      	beq.n	8008eba <_vfiprintf_r+0x15a>
 8008f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f30:	e7c3      	b.n	8008eba <_vfiprintf_r+0x15a>
 8008f32:	4342      	muls	r2, r0
 8008f34:	002e      	movs	r6, r5
 8008f36:	2301      	movs	r3, #1
 8008f38:	1852      	adds	r2, r2, r1
 8008f3a:	e7f1      	b.n	8008f20 <_vfiprintf_r+0x1c0>
 8008f3c:	aa07      	add	r2, sp, #28
 8008f3e:	9200      	str	r2, [sp, #0]
 8008f40:	0021      	movs	r1, r4
 8008f42:	003a      	movs	r2, r7
 8008f44:	4b13      	ldr	r3, [pc, #76]	; (8008f94 <_vfiprintf_r+0x234>)
 8008f46:	9803      	ldr	r0, [sp, #12]
 8008f48:	e000      	b.n	8008f4c <_vfiprintf_r+0x1ec>
 8008f4a:	bf00      	nop
 8008f4c:	9004      	str	r0, [sp, #16]
 8008f4e:	9b04      	ldr	r3, [sp, #16]
 8008f50:	3301      	adds	r3, #1
 8008f52:	d1d3      	bne.n	8008efc <_vfiprintf_r+0x19c>
 8008f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f56:	07db      	lsls	r3, r3, #31
 8008f58:	d405      	bmi.n	8008f66 <_vfiprintf_r+0x206>
 8008f5a:	89bb      	ldrh	r3, [r7, #12]
 8008f5c:	059b      	lsls	r3, r3, #22
 8008f5e:	d402      	bmi.n	8008f66 <_vfiprintf_r+0x206>
 8008f60:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008f62:	f7ff fdd5 	bl	8008b10 <__retarget_lock_release_recursive>
 8008f66:	89bb      	ldrh	r3, [r7, #12]
 8008f68:	065b      	lsls	r3, r3, #25
 8008f6a:	d500      	bpl.n	8008f6e <_vfiprintf_r+0x20e>
 8008f6c:	e71d      	b.n	8008daa <_vfiprintf_r+0x4a>
 8008f6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f70:	e71d      	b.n	8008dae <_vfiprintf_r+0x4e>
 8008f72:	aa07      	add	r2, sp, #28
 8008f74:	9200      	str	r2, [sp, #0]
 8008f76:	0021      	movs	r1, r4
 8008f78:	003a      	movs	r2, r7
 8008f7a:	4b06      	ldr	r3, [pc, #24]	; (8008f94 <_vfiprintf_r+0x234>)
 8008f7c:	9803      	ldr	r0, [sp, #12]
 8008f7e:	f000 f87b 	bl	8009078 <_printf_i>
 8008f82:	e7e3      	b.n	8008f4c <_vfiprintf_r+0x1ec>
 8008f84:	08009934 	.word	0x08009934
 8008f88:	0800993a 	.word	0x0800993a
 8008f8c:	0800993e 	.word	0x0800993e
 8008f90:	00000000 	.word	0x00000000
 8008f94:	08008d3b 	.word	0x08008d3b

08008f98 <_printf_common>:
 8008f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f9a:	0016      	movs	r6, r2
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	688a      	ldr	r2, [r1, #8]
 8008fa0:	690b      	ldr	r3, [r1, #16]
 8008fa2:	000c      	movs	r4, r1
 8008fa4:	9000      	str	r0, [sp, #0]
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	da00      	bge.n	8008fac <_printf_common+0x14>
 8008faa:	0013      	movs	r3, r2
 8008fac:	0022      	movs	r2, r4
 8008fae:	6033      	str	r3, [r6, #0]
 8008fb0:	3243      	adds	r2, #67	; 0x43
 8008fb2:	7812      	ldrb	r2, [r2, #0]
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	d001      	beq.n	8008fbc <_printf_common+0x24>
 8008fb8:	3301      	adds	r3, #1
 8008fba:	6033      	str	r3, [r6, #0]
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	069b      	lsls	r3, r3, #26
 8008fc0:	d502      	bpl.n	8008fc8 <_printf_common+0x30>
 8008fc2:	6833      	ldr	r3, [r6, #0]
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	6033      	str	r3, [r6, #0]
 8008fc8:	6822      	ldr	r2, [r4, #0]
 8008fca:	2306      	movs	r3, #6
 8008fcc:	0015      	movs	r5, r2
 8008fce:	401d      	ands	r5, r3
 8008fd0:	421a      	tst	r2, r3
 8008fd2:	d027      	beq.n	8009024 <_printf_common+0x8c>
 8008fd4:	0023      	movs	r3, r4
 8008fd6:	3343      	adds	r3, #67	; 0x43
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	1e5a      	subs	r2, r3, #1
 8008fdc:	4193      	sbcs	r3, r2
 8008fde:	6822      	ldr	r2, [r4, #0]
 8008fe0:	0692      	lsls	r2, r2, #26
 8008fe2:	d430      	bmi.n	8009046 <_printf_common+0xae>
 8008fe4:	0022      	movs	r2, r4
 8008fe6:	9901      	ldr	r1, [sp, #4]
 8008fe8:	9800      	ldr	r0, [sp, #0]
 8008fea:	9d08      	ldr	r5, [sp, #32]
 8008fec:	3243      	adds	r2, #67	; 0x43
 8008fee:	47a8      	blx	r5
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d025      	beq.n	8009040 <_printf_common+0xa8>
 8008ff4:	2206      	movs	r2, #6
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	2500      	movs	r5, #0
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d105      	bne.n	800900c <_printf_common+0x74>
 8009000:	6833      	ldr	r3, [r6, #0]
 8009002:	68e5      	ldr	r5, [r4, #12]
 8009004:	1aed      	subs	r5, r5, r3
 8009006:	43eb      	mvns	r3, r5
 8009008:	17db      	asrs	r3, r3, #31
 800900a:	401d      	ands	r5, r3
 800900c:	68a3      	ldr	r3, [r4, #8]
 800900e:	6922      	ldr	r2, [r4, #16]
 8009010:	4293      	cmp	r3, r2
 8009012:	dd01      	ble.n	8009018 <_printf_common+0x80>
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	18ed      	adds	r5, r5, r3
 8009018:	2600      	movs	r6, #0
 800901a:	42b5      	cmp	r5, r6
 800901c:	d120      	bne.n	8009060 <_printf_common+0xc8>
 800901e:	2000      	movs	r0, #0
 8009020:	e010      	b.n	8009044 <_printf_common+0xac>
 8009022:	3501      	adds	r5, #1
 8009024:	68e3      	ldr	r3, [r4, #12]
 8009026:	6832      	ldr	r2, [r6, #0]
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	42ab      	cmp	r3, r5
 800902c:	ddd2      	ble.n	8008fd4 <_printf_common+0x3c>
 800902e:	0022      	movs	r2, r4
 8009030:	2301      	movs	r3, #1
 8009032:	9901      	ldr	r1, [sp, #4]
 8009034:	9800      	ldr	r0, [sp, #0]
 8009036:	9f08      	ldr	r7, [sp, #32]
 8009038:	3219      	adds	r2, #25
 800903a:	47b8      	blx	r7
 800903c:	3001      	adds	r0, #1
 800903e:	d1f0      	bne.n	8009022 <_printf_common+0x8a>
 8009040:	2001      	movs	r0, #1
 8009042:	4240      	negs	r0, r0
 8009044:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009046:	2030      	movs	r0, #48	; 0x30
 8009048:	18e1      	adds	r1, r4, r3
 800904a:	3143      	adds	r1, #67	; 0x43
 800904c:	7008      	strb	r0, [r1, #0]
 800904e:	0021      	movs	r1, r4
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	3145      	adds	r1, #69	; 0x45
 8009054:	7809      	ldrb	r1, [r1, #0]
 8009056:	18a2      	adds	r2, r4, r2
 8009058:	3243      	adds	r2, #67	; 0x43
 800905a:	3302      	adds	r3, #2
 800905c:	7011      	strb	r1, [r2, #0]
 800905e:	e7c1      	b.n	8008fe4 <_printf_common+0x4c>
 8009060:	0022      	movs	r2, r4
 8009062:	2301      	movs	r3, #1
 8009064:	9901      	ldr	r1, [sp, #4]
 8009066:	9800      	ldr	r0, [sp, #0]
 8009068:	9f08      	ldr	r7, [sp, #32]
 800906a:	321a      	adds	r2, #26
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	d0e6      	beq.n	8009040 <_printf_common+0xa8>
 8009072:	3601      	adds	r6, #1
 8009074:	e7d1      	b.n	800901a <_printf_common+0x82>
	...

08009078 <_printf_i>:
 8009078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800907a:	b08b      	sub	sp, #44	; 0x2c
 800907c:	9206      	str	r2, [sp, #24]
 800907e:	000a      	movs	r2, r1
 8009080:	3243      	adds	r2, #67	; 0x43
 8009082:	9307      	str	r3, [sp, #28]
 8009084:	9005      	str	r0, [sp, #20]
 8009086:	9204      	str	r2, [sp, #16]
 8009088:	7e0a      	ldrb	r2, [r1, #24]
 800908a:	000c      	movs	r4, r1
 800908c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800908e:	2a78      	cmp	r2, #120	; 0x78
 8009090:	d809      	bhi.n	80090a6 <_printf_i+0x2e>
 8009092:	2a62      	cmp	r2, #98	; 0x62
 8009094:	d80b      	bhi.n	80090ae <_printf_i+0x36>
 8009096:	2a00      	cmp	r2, #0
 8009098:	d100      	bne.n	800909c <_printf_i+0x24>
 800909a:	e0be      	b.n	800921a <_printf_i+0x1a2>
 800909c:	497c      	ldr	r1, [pc, #496]	; (8009290 <_printf_i+0x218>)
 800909e:	9103      	str	r1, [sp, #12]
 80090a0:	2a58      	cmp	r2, #88	; 0x58
 80090a2:	d100      	bne.n	80090a6 <_printf_i+0x2e>
 80090a4:	e093      	b.n	80091ce <_printf_i+0x156>
 80090a6:	0026      	movs	r6, r4
 80090a8:	3642      	adds	r6, #66	; 0x42
 80090aa:	7032      	strb	r2, [r6, #0]
 80090ac:	e022      	b.n	80090f4 <_printf_i+0x7c>
 80090ae:	0010      	movs	r0, r2
 80090b0:	3863      	subs	r0, #99	; 0x63
 80090b2:	2815      	cmp	r0, #21
 80090b4:	d8f7      	bhi.n	80090a6 <_printf_i+0x2e>
 80090b6:	f7f7 f827 	bl	8000108 <__gnu_thumb1_case_shi>
 80090ba:	0016      	.short	0x0016
 80090bc:	fff6001f 	.word	0xfff6001f
 80090c0:	fff6fff6 	.word	0xfff6fff6
 80090c4:	001ffff6 	.word	0x001ffff6
 80090c8:	fff6fff6 	.word	0xfff6fff6
 80090cc:	fff6fff6 	.word	0xfff6fff6
 80090d0:	003600a3 	.word	0x003600a3
 80090d4:	fff60083 	.word	0xfff60083
 80090d8:	00b4fff6 	.word	0x00b4fff6
 80090dc:	0036fff6 	.word	0x0036fff6
 80090e0:	fff6fff6 	.word	0xfff6fff6
 80090e4:	0087      	.short	0x0087
 80090e6:	0026      	movs	r6, r4
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	3642      	adds	r6, #66	; 0x42
 80090ec:	1d11      	adds	r1, r2, #4
 80090ee:	6019      	str	r1, [r3, #0]
 80090f0:	6813      	ldr	r3, [r2, #0]
 80090f2:	7033      	strb	r3, [r6, #0]
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0a2      	b.n	800923e <_printf_i+0x1c6>
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	6809      	ldr	r1, [r1, #0]
 80090fc:	1d02      	adds	r2, r0, #4
 80090fe:	060d      	lsls	r5, r1, #24
 8009100:	d50b      	bpl.n	800911a <_printf_i+0xa2>
 8009102:	6805      	ldr	r5, [r0, #0]
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	2d00      	cmp	r5, #0
 8009108:	da03      	bge.n	8009112 <_printf_i+0x9a>
 800910a:	232d      	movs	r3, #45	; 0x2d
 800910c:	9a04      	ldr	r2, [sp, #16]
 800910e:	426d      	negs	r5, r5
 8009110:	7013      	strb	r3, [r2, #0]
 8009112:	4b5f      	ldr	r3, [pc, #380]	; (8009290 <_printf_i+0x218>)
 8009114:	270a      	movs	r7, #10
 8009116:	9303      	str	r3, [sp, #12]
 8009118:	e01b      	b.n	8009152 <_printf_i+0xda>
 800911a:	6805      	ldr	r5, [r0, #0]
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	0649      	lsls	r1, r1, #25
 8009120:	d5f1      	bpl.n	8009106 <_printf_i+0x8e>
 8009122:	b22d      	sxth	r5, r5
 8009124:	e7ef      	b.n	8009106 <_printf_i+0x8e>
 8009126:	680d      	ldr	r5, [r1, #0]
 8009128:	6819      	ldr	r1, [r3, #0]
 800912a:	1d08      	adds	r0, r1, #4
 800912c:	6018      	str	r0, [r3, #0]
 800912e:	062e      	lsls	r6, r5, #24
 8009130:	d501      	bpl.n	8009136 <_printf_i+0xbe>
 8009132:	680d      	ldr	r5, [r1, #0]
 8009134:	e003      	b.n	800913e <_printf_i+0xc6>
 8009136:	066d      	lsls	r5, r5, #25
 8009138:	d5fb      	bpl.n	8009132 <_printf_i+0xba>
 800913a:	680d      	ldr	r5, [r1, #0]
 800913c:	b2ad      	uxth	r5, r5
 800913e:	4b54      	ldr	r3, [pc, #336]	; (8009290 <_printf_i+0x218>)
 8009140:	2708      	movs	r7, #8
 8009142:	9303      	str	r3, [sp, #12]
 8009144:	2a6f      	cmp	r2, #111	; 0x6f
 8009146:	d000      	beq.n	800914a <_printf_i+0xd2>
 8009148:	3702      	adds	r7, #2
 800914a:	0023      	movs	r3, r4
 800914c:	2200      	movs	r2, #0
 800914e:	3343      	adds	r3, #67	; 0x43
 8009150:	701a      	strb	r2, [r3, #0]
 8009152:	6863      	ldr	r3, [r4, #4]
 8009154:	60a3      	str	r3, [r4, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	db03      	blt.n	8009162 <_printf_i+0xea>
 800915a:	2104      	movs	r1, #4
 800915c:	6822      	ldr	r2, [r4, #0]
 800915e:	438a      	bics	r2, r1
 8009160:	6022      	str	r2, [r4, #0]
 8009162:	2d00      	cmp	r5, #0
 8009164:	d102      	bne.n	800916c <_printf_i+0xf4>
 8009166:	9e04      	ldr	r6, [sp, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00c      	beq.n	8009186 <_printf_i+0x10e>
 800916c:	9e04      	ldr	r6, [sp, #16]
 800916e:	0028      	movs	r0, r5
 8009170:	0039      	movs	r1, r7
 8009172:	f7f7 f859 	bl	8000228 <__aeabi_uidivmod>
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	3e01      	subs	r6, #1
 800917a:	5c5b      	ldrb	r3, [r3, r1]
 800917c:	7033      	strb	r3, [r6, #0]
 800917e:	002b      	movs	r3, r5
 8009180:	0005      	movs	r5, r0
 8009182:	429f      	cmp	r7, r3
 8009184:	d9f3      	bls.n	800916e <_printf_i+0xf6>
 8009186:	2f08      	cmp	r7, #8
 8009188:	d109      	bne.n	800919e <_printf_i+0x126>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	07db      	lsls	r3, r3, #31
 800918e:	d506      	bpl.n	800919e <_printf_i+0x126>
 8009190:	6862      	ldr	r2, [r4, #4]
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	429a      	cmp	r2, r3
 8009196:	dc02      	bgt.n	800919e <_printf_i+0x126>
 8009198:	2330      	movs	r3, #48	; 0x30
 800919a:	3e01      	subs	r6, #1
 800919c:	7033      	strb	r3, [r6, #0]
 800919e:	9b04      	ldr	r3, [sp, #16]
 80091a0:	1b9b      	subs	r3, r3, r6
 80091a2:	6123      	str	r3, [r4, #16]
 80091a4:	9b07      	ldr	r3, [sp, #28]
 80091a6:	0021      	movs	r1, r4
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	9805      	ldr	r0, [sp, #20]
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	aa09      	add	r2, sp, #36	; 0x24
 80091b0:	f7ff fef2 	bl	8008f98 <_printf_common>
 80091b4:	3001      	adds	r0, #1
 80091b6:	d147      	bne.n	8009248 <_printf_i+0x1d0>
 80091b8:	2001      	movs	r0, #1
 80091ba:	4240      	negs	r0, r0
 80091bc:	b00b      	add	sp, #44	; 0x2c
 80091be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c0:	2220      	movs	r2, #32
 80091c2:	6809      	ldr	r1, [r1, #0]
 80091c4:	430a      	orrs	r2, r1
 80091c6:	6022      	str	r2, [r4, #0]
 80091c8:	2278      	movs	r2, #120	; 0x78
 80091ca:	4932      	ldr	r1, [pc, #200]	; (8009294 <_printf_i+0x21c>)
 80091cc:	9103      	str	r1, [sp, #12]
 80091ce:	0021      	movs	r1, r4
 80091d0:	3145      	adds	r1, #69	; 0x45
 80091d2:	700a      	strb	r2, [r1, #0]
 80091d4:	6819      	ldr	r1, [r3, #0]
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	c920      	ldmia	r1!, {r5}
 80091da:	0610      	lsls	r0, r2, #24
 80091dc:	d402      	bmi.n	80091e4 <_printf_i+0x16c>
 80091de:	0650      	lsls	r0, r2, #25
 80091e0:	d500      	bpl.n	80091e4 <_printf_i+0x16c>
 80091e2:	b2ad      	uxth	r5, r5
 80091e4:	6019      	str	r1, [r3, #0]
 80091e6:	07d3      	lsls	r3, r2, #31
 80091e8:	d502      	bpl.n	80091f0 <_printf_i+0x178>
 80091ea:	2320      	movs	r3, #32
 80091ec:	4313      	orrs	r3, r2
 80091ee:	6023      	str	r3, [r4, #0]
 80091f0:	2710      	movs	r7, #16
 80091f2:	2d00      	cmp	r5, #0
 80091f4:	d1a9      	bne.n	800914a <_printf_i+0xd2>
 80091f6:	2220      	movs	r2, #32
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	4393      	bics	r3, r2
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	e7a4      	b.n	800914a <_printf_i+0xd2>
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	680d      	ldr	r5, [r1, #0]
 8009204:	1d10      	adds	r0, r2, #4
 8009206:	6949      	ldr	r1, [r1, #20]
 8009208:	6018      	str	r0, [r3, #0]
 800920a:	6813      	ldr	r3, [r2, #0]
 800920c:	062e      	lsls	r6, r5, #24
 800920e:	d501      	bpl.n	8009214 <_printf_i+0x19c>
 8009210:	6019      	str	r1, [r3, #0]
 8009212:	e002      	b.n	800921a <_printf_i+0x1a2>
 8009214:	066d      	lsls	r5, r5, #25
 8009216:	d5fb      	bpl.n	8009210 <_printf_i+0x198>
 8009218:	8019      	strh	r1, [r3, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	9e04      	ldr	r6, [sp, #16]
 800921e:	6123      	str	r3, [r4, #16]
 8009220:	e7c0      	b.n	80091a4 <_printf_i+0x12c>
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	1d11      	adds	r1, r2, #4
 8009226:	6019      	str	r1, [r3, #0]
 8009228:	6816      	ldr	r6, [r2, #0]
 800922a:	2100      	movs	r1, #0
 800922c:	0030      	movs	r0, r6
 800922e:	6862      	ldr	r2, [r4, #4]
 8009230:	f000 f9a0 	bl	8009574 <memchr>
 8009234:	2800      	cmp	r0, #0
 8009236:	d001      	beq.n	800923c <_printf_i+0x1c4>
 8009238:	1b80      	subs	r0, r0, r6
 800923a:	6060      	str	r0, [r4, #4]
 800923c:	6863      	ldr	r3, [r4, #4]
 800923e:	6123      	str	r3, [r4, #16]
 8009240:	2300      	movs	r3, #0
 8009242:	9a04      	ldr	r2, [sp, #16]
 8009244:	7013      	strb	r3, [r2, #0]
 8009246:	e7ad      	b.n	80091a4 <_printf_i+0x12c>
 8009248:	0032      	movs	r2, r6
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	9906      	ldr	r1, [sp, #24]
 800924e:	9805      	ldr	r0, [sp, #20]
 8009250:	9d07      	ldr	r5, [sp, #28]
 8009252:	47a8      	blx	r5
 8009254:	3001      	adds	r0, #1
 8009256:	d0af      	beq.n	80091b8 <_printf_i+0x140>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	079b      	lsls	r3, r3, #30
 800925c:	d415      	bmi.n	800928a <_printf_i+0x212>
 800925e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009260:	68e0      	ldr	r0, [r4, #12]
 8009262:	4298      	cmp	r0, r3
 8009264:	daaa      	bge.n	80091bc <_printf_i+0x144>
 8009266:	0018      	movs	r0, r3
 8009268:	e7a8      	b.n	80091bc <_printf_i+0x144>
 800926a:	0022      	movs	r2, r4
 800926c:	2301      	movs	r3, #1
 800926e:	9906      	ldr	r1, [sp, #24]
 8009270:	9805      	ldr	r0, [sp, #20]
 8009272:	9e07      	ldr	r6, [sp, #28]
 8009274:	3219      	adds	r2, #25
 8009276:	47b0      	blx	r6
 8009278:	3001      	adds	r0, #1
 800927a:	d09d      	beq.n	80091b8 <_printf_i+0x140>
 800927c:	3501      	adds	r5, #1
 800927e:	68e3      	ldr	r3, [r4, #12]
 8009280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	42ab      	cmp	r3, r5
 8009286:	dcf0      	bgt.n	800926a <_printf_i+0x1f2>
 8009288:	e7e9      	b.n	800925e <_printf_i+0x1e6>
 800928a:	2500      	movs	r5, #0
 800928c:	e7f7      	b.n	800927e <_printf_i+0x206>
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	08009945 	.word	0x08009945
 8009294:	08009956 	.word	0x08009956

08009298 <__sflush_r>:
 8009298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800929a:	898b      	ldrh	r3, [r1, #12]
 800929c:	0005      	movs	r5, r0
 800929e:	000c      	movs	r4, r1
 80092a0:	071a      	lsls	r2, r3, #28
 80092a2:	d45c      	bmi.n	800935e <__sflush_r+0xc6>
 80092a4:	684a      	ldr	r2, [r1, #4]
 80092a6:	2a00      	cmp	r2, #0
 80092a8:	dc04      	bgt.n	80092b4 <__sflush_r+0x1c>
 80092aa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	dc01      	bgt.n	80092b4 <__sflush_r+0x1c>
 80092b0:	2000      	movs	r0, #0
 80092b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80092b6:	2f00      	cmp	r7, #0
 80092b8:	d0fa      	beq.n	80092b0 <__sflush_r+0x18>
 80092ba:	2200      	movs	r2, #0
 80092bc:	2080      	movs	r0, #128	; 0x80
 80092be:	682e      	ldr	r6, [r5, #0]
 80092c0:	602a      	str	r2, [r5, #0]
 80092c2:	001a      	movs	r2, r3
 80092c4:	0140      	lsls	r0, r0, #5
 80092c6:	6a21      	ldr	r1, [r4, #32]
 80092c8:	4002      	ands	r2, r0
 80092ca:	4203      	tst	r3, r0
 80092cc:	d034      	beq.n	8009338 <__sflush_r+0xa0>
 80092ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	075b      	lsls	r3, r3, #29
 80092d4:	d506      	bpl.n	80092e4 <__sflush_r+0x4c>
 80092d6:	6863      	ldr	r3, [r4, #4]
 80092d8:	1ac0      	subs	r0, r0, r3
 80092da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <__sflush_r+0x4c>
 80092e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092e2:	1ac0      	subs	r0, r0, r3
 80092e4:	0002      	movs	r2, r0
 80092e6:	2300      	movs	r3, #0
 80092e8:	0028      	movs	r0, r5
 80092ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80092ec:	6a21      	ldr	r1, [r4, #32]
 80092ee:	47b8      	blx	r7
 80092f0:	89a2      	ldrh	r2, [r4, #12]
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d106      	bne.n	8009304 <__sflush_r+0x6c>
 80092f6:	6829      	ldr	r1, [r5, #0]
 80092f8:	291d      	cmp	r1, #29
 80092fa:	d82c      	bhi.n	8009356 <__sflush_r+0xbe>
 80092fc:	4b2a      	ldr	r3, [pc, #168]	; (80093a8 <__sflush_r+0x110>)
 80092fe:	410b      	asrs	r3, r1
 8009300:	07db      	lsls	r3, r3, #31
 8009302:	d428      	bmi.n	8009356 <__sflush_r+0xbe>
 8009304:	2300      	movs	r3, #0
 8009306:	6063      	str	r3, [r4, #4]
 8009308:	6923      	ldr	r3, [r4, #16]
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	04d2      	lsls	r2, r2, #19
 800930e:	d505      	bpl.n	800931c <__sflush_r+0x84>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d102      	bne.n	800931a <__sflush_r+0x82>
 8009314:	682b      	ldr	r3, [r5, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d100      	bne.n	800931c <__sflush_r+0x84>
 800931a:	6560      	str	r0, [r4, #84]	; 0x54
 800931c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800931e:	602e      	str	r6, [r5, #0]
 8009320:	2900      	cmp	r1, #0
 8009322:	d0c5      	beq.n	80092b0 <__sflush_r+0x18>
 8009324:	0023      	movs	r3, r4
 8009326:	3344      	adds	r3, #68	; 0x44
 8009328:	4299      	cmp	r1, r3
 800932a:	d002      	beq.n	8009332 <__sflush_r+0x9a>
 800932c:	0028      	movs	r0, r5
 800932e:	f7ff fbf1 	bl	8008b14 <_free_r>
 8009332:	2000      	movs	r0, #0
 8009334:	6360      	str	r0, [r4, #52]	; 0x34
 8009336:	e7bc      	b.n	80092b2 <__sflush_r+0x1a>
 8009338:	2301      	movs	r3, #1
 800933a:	0028      	movs	r0, r5
 800933c:	47b8      	blx	r7
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	d1c6      	bne.n	80092d0 <__sflush_r+0x38>
 8009342:	682b      	ldr	r3, [r5, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0c3      	beq.n	80092d0 <__sflush_r+0x38>
 8009348:	2b1d      	cmp	r3, #29
 800934a:	d001      	beq.n	8009350 <__sflush_r+0xb8>
 800934c:	2b16      	cmp	r3, #22
 800934e:	d101      	bne.n	8009354 <__sflush_r+0xbc>
 8009350:	602e      	str	r6, [r5, #0]
 8009352:	e7ad      	b.n	80092b0 <__sflush_r+0x18>
 8009354:	89a2      	ldrh	r2, [r4, #12]
 8009356:	2340      	movs	r3, #64	; 0x40
 8009358:	4313      	orrs	r3, r2
 800935a:	81a3      	strh	r3, [r4, #12]
 800935c:	e7a9      	b.n	80092b2 <__sflush_r+0x1a>
 800935e:	690e      	ldr	r6, [r1, #16]
 8009360:	2e00      	cmp	r6, #0
 8009362:	d0a5      	beq.n	80092b0 <__sflush_r+0x18>
 8009364:	680f      	ldr	r7, [r1, #0]
 8009366:	600e      	str	r6, [r1, #0]
 8009368:	1bba      	subs	r2, r7, r6
 800936a:	9201      	str	r2, [sp, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	079b      	lsls	r3, r3, #30
 8009370:	d100      	bne.n	8009374 <__sflush_r+0xdc>
 8009372:	694a      	ldr	r2, [r1, #20]
 8009374:	60a2      	str	r2, [r4, #8]
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	dd99      	ble.n	80092b0 <__sflush_r+0x18>
 800937c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800937e:	0032      	movs	r2, r6
 8009380:	001f      	movs	r7, r3
 8009382:	0028      	movs	r0, r5
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	6a21      	ldr	r1, [r4, #32]
 8009388:	47b8      	blx	r7
 800938a:	2800      	cmp	r0, #0
 800938c:	dc06      	bgt.n	800939c <__sflush_r+0x104>
 800938e:	2340      	movs	r3, #64	; 0x40
 8009390:	2001      	movs	r0, #1
 8009392:	89a2      	ldrh	r2, [r4, #12]
 8009394:	4240      	negs	r0, r0
 8009396:	4313      	orrs	r3, r2
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	e78a      	b.n	80092b2 <__sflush_r+0x1a>
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	1836      	adds	r6, r6, r0
 80093a0:	1a1b      	subs	r3, r3, r0
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	e7e7      	b.n	8009376 <__sflush_r+0xde>
 80093a6:	46c0      	nop			; (mov r8, r8)
 80093a8:	dfbffffe 	.word	0xdfbffffe

080093ac <_fflush_r>:
 80093ac:	690b      	ldr	r3, [r1, #16]
 80093ae:	b570      	push	{r4, r5, r6, lr}
 80093b0:	0005      	movs	r5, r0
 80093b2:	000c      	movs	r4, r1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d102      	bne.n	80093be <_fflush_r+0x12>
 80093b8:	2500      	movs	r5, #0
 80093ba:	0028      	movs	r0, r5
 80093bc:	bd70      	pop	{r4, r5, r6, pc}
 80093be:	2800      	cmp	r0, #0
 80093c0:	d004      	beq.n	80093cc <_fflush_r+0x20>
 80093c2:	6a03      	ldr	r3, [r0, #32]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <_fflush_r+0x20>
 80093c8:	f7ff fa90 	bl	80088ec <__sinit>
 80093cc:	220c      	movs	r2, #12
 80093ce:	5ea3      	ldrsh	r3, [r4, r2]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0f1      	beq.n	80093b8 <_fflush_r+0xc>
 80093d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093d6:	07d2      	lsls	r2, r2, #31
 80093d8:	d404      	bmi.n	80093e4 <_fflush_r+0x38>
 80093da:	059b      	lsls	r3, r3, #22
 80093dc:	d402      	bmi.n	80093e4 <_fflush_r+0x38>
 80093de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093e0:	f7ff fb95 	bl	8008b0e <__retarget_lock_acquire_recursive>
 80093e4:	0028      	movs	r0, r5
 80093e6:	0021      	movs	r1, r4
 80093e8:	f7ff ff56 	bl	8009298 <__sflush_r>
 80093ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093ee:	0005      	movs	r5, r0
 80093f0:	07db      	lsls	r3, r3, #31
 80093f2:	d4e2      	bmi.n	80093ba <_fflush_r+0xe>
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	059b      	lsls	r3, r3, #22
 80093f8:	d4df      	bmi.n	80093ba <_fflush_r+0xe>
 80093fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093fc:	f7ff fb88 	bl	8008b10 <__retarget_lock_release_recursive>
 8009400:	e7db      	b.n	80093ba <_fflush_r+0xe>

08009402 <__swbuf_r>:
 8009402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009404:	0006      	movs	r6, r0
 8009406:	000d      	movs	r5, r1
 8009408:	0014      	movs	r4, r2
 800940a:	2800      	cmp	r0, #0
 800940c:	d004      	beq.n	8009418 <__swbuf_r+0x16>
 800940e:	6a03      	ldr	r3, [r0, #32]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <__swbuf_r+0x16>
 8009414:	f7ff fa6a 	bl	80088ec <__sinit>
 8009418:	69a3      	ldr	r3, [r4, #24]
 800941a:	60a3      	str	r3, [r4, #8]
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	071b      	lsls	r3, r3, #28
 8009420:	d528      	bpl.n	8009474 <__swbuf_r+0x72>
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d025      	beq.n	8009474 <__swbuf_r+0x72>
 8009428:	6923      	ldr	r3, [r4, #16]
 800942a:	6820      	ldr	r0, [r4, #0]
 800942c:	b2ef      	uxtb	r7, r5
 800942e:	1ac0      	subs	r0, r0, r3
 8009430:	6963      	ldr	r3, [r4, #20]
 8009432:	b2ed      	uxtb	r5, r5
 8009434:	4283      	cmp	r3, r0
 8009436:	dc05      	bgt.n	8009444 <__swbuf_r+0x42>
 8009438:	0021      	movs	r1, r4
 800943a:	0030      	movs	r0, r6
 800943c:	f7ff ffb6 	bl	80093ac <_fflush_r>
 8009440:	2800      	cmp	r0, #0
 8009442:	d11d      	bne.n	8009480 <__swbuf_r+0x7e>
 8009444:	68a3      	ldr	r3, [r4, #8]
 8009446:	3001      	adds	r0, #1
 8009448:	3b01      	subs	r3, #1
 800944a:	60a3      	str	r3, [r4, #8]
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	6022      	str	r2, [r4, #0]
 8009452:	701f      	strb	r7, [r3, #0]
 8009454:	6963      	ldr	r3, [r4, #20]
 8009456:	4283      	cmp	r3, r0
 8009458:	d004      	beq.n	8009464 <__swbuf_r+0x62>
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	07db      	lsls	r3, r3, #31
 800945e:	d507      	bpl.n	8009470 <__swbuf_r+0x6e>
 8009460:	2d0a      	cmp	r5, #10
 8009462:	d105      	bne.n	8009470 <__swbuf_r+0x6e>
 8009464:	0021      	movs	r1, r4
 8009466:	0030      	movs	r0, r6
 8009468:	f7ff ffa0 	bl	80093ac <_fflush_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	d107      	bne.n	8009480 <__swbuf_r+0x7e>
 8009470:	0028      	movs	r0, r5
 8009472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009474:	0021      	movs	r1, r4
 8009476:	0030      	movs	r0, r6
 8009478:	f000 f806 	bl	8009488 <__swsetup_r>
 800947c:	2800      	cmp	r0, #0
 800947e:	d0d3      	beq.n	8009428 <__swbuf_r+0x26>
 8009480:	2501      	movs	r5, #1
 8009482:	426d      	negs	r5, r5
 8009484:	e7f4      	b.n	8009470 <__swbuf_r+0x6e>
	...

08009488 <__swsetup_r>:
 8009488:	4b30      	ldr	r3, [pc, #192]	; (800954c <__swsetup_r+0xc4>)
 800948a:	b570      	push	{r4, r5, r6, lr}
 800948c:	0005      	movs	r5, r0
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	000c      	movs	r4, r1
 8009492:	2800      	cmp	r0, #0
 8009494:	d004      	beq.n	80094a0 <__swsetup_r+0x18>
 8009496:	6a03      	ldr	r3, [r0, #32]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <__swsetup_r+0x18>
 800949c:	f7ff fa26 	bl	80088ec <__sinit>
 80094a0:	230c      	movs	r3, #12
 80094a2:	5ee2      	ldrsh	r2, [r4, r3]
 80094a4:	b293      	uxth	r3, r2
 80094a6:	0711      	lsls	r1, r2, #28
 80094a8:	d423      	bmi.n	80094f2 <__swsetup_r+0x6a>
 80094aa:	06d9      	lsls	r1, r3, #27
 80094ac:	d407      	bmi.n	80094be <__swsetup_r+0x36>
 80094ae:	2309      	movs	r3, #9
 80094b0:	2001      	movs	r0, #1
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	3337      	adds	r3, #55	; 0x37
 80094b6:	4313      	orrs	r3, r2
 80094b8:	81a3      	strh	r3, [r4, #12]
 80094ba:	4240      	negs	r0, r0
 80094bc:	bd70      	pop	{r4, r5, r6, pc}
 80094be:	075b      	lsls	r3, r3, #29
 80094c0:	d513      	bpl.n	80094ea <__swsetup_r+0x62>
 80094c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094c4:	2900      	cmp	r1, #0
 80094c6:	d008      	beq.n	80094da <__swsetup_r+0x52>
 80094c8:	0023      	movs	r3, r4
 80094ca:	3344      	adds	r3, #68	; 0x44
 80094cc:	4299      	cmp	r1, r3
 80094ce:	d002      	beq.n	80094d6 <__swsetup_r+0x4e>
 80094d0:	0028      	movs	r0, r5
 80094d2:	f7ff fb1f 	bl	8008b14 <_free_r>
 80094d6:	2300      	movs	r3, #0
 80094d8:	6363      	str	r3, [r4, #52]	; 0x34
 80094da:	2224      	movs	r2, #36	; 0x24
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	4393      	bics	r3, r2
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	2300      	movs	r3, #0
 80094e4:	6063      	str	r3, [r4, #4]
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	2308      	movs	r3, #8
 80094ec:	89a2      	ldrh	r2, [r4, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10b      	bne.n	8009510 <__swsetup_r+0x88>
 80094f8:	21a0      	movs	r1, #160	; 0xa0
 80094fa:	2280      	movs	r2, #128	; 0x80
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	0089      	lsls	r1, r1, #2
 8009500:	0092      	lsls	r2, r2, #2
 8009502:	400b      	ands	r3, r1
 8009504:	4293      	cmp	r3, r2
 8009506:	d003      	beq.n	8009510 <__swsetup_r+0x88>
 8009508:	0021      	movs	r1, r4
 800950a:	0028      	movs	r0, r5
 800950c:	f000 f866 	bl	80095dc <__smakebuf_r>
 8009510:	220c      	movs	r2, #12
 8009512:	5ea3      	ldrsh	r3, [r4, r2]
 8009514:	2001      	movs	r0, #1
 8009516:	001a      	movs	r2, r3
 8009518:	b299      	uxth	r1, r3
 800951a:	4002      	ands	r2, r0
 800951c:	4203      	tst	r3, r0
 800951e:	d00f      	beq.n	8009540 <__swsetup_r+0xb8>
 8009520:	2200      	movs	r2, #0
 8009522:	60a2      	str	r2, [r4, #8]
 8009524:	6962      	ldr	r2, [r4, #20]
 8009526:	4252      	negs	r2, r2
 8009528:	61a2      	str	r2, [r4, #24]
 800952a:	2000      	movs	r0, #0
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	4282      	cmp	r2, r0
 8009530:	d1c4      	bne.n	80094bc <__swsetup_r+0x34>
 8009532:	0609      	lsls	r1, r1, #24
 8009534:	d5c2      	bpl.n	80094bc <__swsetup_r+0x34>
 8009536:	2240      	movs	r2, #64	; 0x40
 8009538:	4313      	orrs	r3, r2
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	3801      	subs	r0, #1
 800953e:	e7bd      	b.n	80094bc <__swsetup_r+0x34>
 8009540:	0788      	lsls	r0, r1, #30
 8009542:	d400      	bmi.n	8009546 <__swsetup_r+0xbe>
 8009544:	6962      	ldr	r2, [r4, #20]
 8009546:	60a2      	str	r2, [r4, #8]
 8009548:	e7ef      	b.n	800952a <__swsetup_r+0xa2>
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	200001b0 	.word	0x200001b0

08009550 <_sbrk_r>:
 8009550:	2300      	movs	r3, #0
 8009552:	b570      	push	{r4, r5, r6, lr}
 8009554:	4d06      	ldr	r5, [pc, #24]	; (8009570 <_sbrk_r+0x20>)
 8009556:	0004      	movs	r4, r0
 8009558:	0008      	movs	r0, r1
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	f7f7 ffc2 	bl	80014e4 <_sbrk>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d103      	bne.n	800956c <_sbrk_r+0x1c>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d000      	beq.n	800956c <_sbrk_r+0x1c>
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	bd70      	pop	{r4, r5, r6, pc}
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	20000ae4 	.word	0x20000ae4

08009574 <memchr>:
 8009574:	b2c9      	uxtb	r1, r1
 8009576:	1882      	adds	r2, r0, r2
 8009578:	4290      	cmp	r0, r2
 800957a:	d101      	bne.n	8009580 <memchr+0xc>
 800957c:	2000      	movs	r0, #0
 800957e:	4770      	bx	lr
 8009580:	7803      	ldrb	r3, [r0, #0]
 8009582:	428b      	cmp	r3, r1
 8009584:	d0fb      	beq.n	800957e <memchr+0xa>
 8009586:	3001      	adds	r0, #1
 8009588:	e7f6      	b.n	8009578 <memchr+0x4>
	...

0800958c <__swhatbuf_r>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	000e      	movs	r6, r1
 8009590:	001d      	movs	r5, r3
 8009592:	230e      	movs	r3, #14
 8009594:	5ec9      	ldrsh	r1, [r1, r3]
 8009596:	0014      	movs	r4, r2
 8009598:	b096      	sub	sp, #88	; 0x58
 800959a:	2900      	cmp	r1, #0
 800959c:	da0c      	bge.n	80095b8 <__swhatbuf_r+0x2c>
 800959e:	89b2      	ldrh	r2, [r6, #12]
 80095a0:	2380      	movs	r3, #128	; 0x80
 80095a2:	0011      	movs	r1, r2
 80095a4:	4019      	ands	r1, r3
 80095a6:	421a      	tst	r2, r3
 80095a8:	d013      	beq.n	80095d2 <__swhatbuf_r+0x46>
 80095aa:	2100      	movs	r1, #0
 80095ac:	3b40      	subs	r3, #64	; 0x40
 80095ae:	2000      	movs	r0, #0
 80095b0:	6029      	str	r1, [r5, #0]
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	b016      	add	sp, #88	; 0x58
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	466a      	mov	r2, sp
 80095ba:	f000 f84d 	bl	8009658 <_fstat_r>
 80095be:	2800      	cmp	r0, #0
 80095c0:	dbed      	blt.n	800959e <__swhatbuf_r+0x12>
 80095c2:	23f0      	movs	r3, #240	; 0xf0
 80095c4:	9901      	ldr	r1, [sp, #4]
 80095c6:	021b      	lsls	r3, r3, #8
 80095c8:	4019      	ands	r1, r3
 80095ca:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <__swhatbuf_r+0x4c>)
 80095cc:	18c9      	adds	r1, r1, r3
 80095ce:	424b      	negs	r3, r1
 80095d0:	4159      	adcs	r1, r3
 80095d2:	2380      	movs	r3, #128	; 0x80
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	e7ea      	b.n	80095ae <__swhatbuf_r+0x22>
 80095d8:	ffffe000 	.word	0xffffe000

080095dc <__smakebuf_r>:
 80095dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095de:	2602      	movs	r6, #2
 80095e0:	898b      	ldrh	r3, [r1, #12]
 80095e2:	0005      	movs	r5, r0
 80095e4:	000c      	movs	r4, r1
 80095e6:	4233      	tst	r3, r6
 80095e8:	d006      	beq.n	80095f8 <__smakebuf_r+0x1c>
 80095ea:	0023      	movs	r3, r4
 80095ec:	3347      	adds	r3, #71	; 0x47
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	6123      	str	r3, [r4, #16]
 80095f2:	2301      	movs	r3, #1
 80095f4:	6163      	str	r3, [r4, #20]
 80095f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80095f8:	466a      	mov	r2, sp
 80095fa:	ab01      	add	r3, sp, #4
 80095fc:	f7ff ffc6 	bl	800958c <__swhatbuf_r>
 8009600:	9900      	ldr	r1, [sp, #0]
 8009602:	0007      	movs	r7, r0
 8009604:	0028      	movs	r0, r5
 8009606:	f7ff faf1 	bl	8008bec <_malloc_r>
 800960a:	2800      	cmp	r0, #0
 800960c:	d108      	bne.n	8009620 <__smakebuf_r+0x44>
 800960e:	220c      	movs	r2, #12
 8009610:	5ea3      	ldrsh	r3, [r4, r2]
 8009612:	059a      	lsls	r2, r3, #22
 8009614:	d4ef      	bmi.n	80095f6 <__smakebuf_r+0x1a>
 8009616:	2203      	movs	r2, #3
 8009618:	4393      	bics	r3, r2
 800961a:	431e      	orrs	r6, r3
 800961c:	81a6      	strh	r6, [r4, #12]
 800961e:	e7e4      	b.n	80095ea <__smakebuf_r+0xe>
 8009620:	2380      	movs	r3, #128	; 0x80
 8009622:	89a2      	ldrh	r2, [r4, #12]
 8009624:	6020      	str	r0, [r4, #0]
 8009626:	4313      	orrs	r3, r2
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	9b00      	ldr	r3, [sp, #0]
 800962c:	6120      	str	r0, [r4, #16]
 800962e:	6163      	str	r3, [r4, #20]
 8009630:	9b01      	ldr	r3, [sp, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00c      	beq.n	8009650 <__smakebuf_r+0x74>
 8009636:	0028      	movs	r0, r5
 8009638:	230e      	movs	r3, #14
 800963a:	5ee1      	ldrsh	r1, [r4, r3]
 800963c:	f000 f81e 	bl	800967c <_isatty_r>
 8009640:	2800      	cmp	r0, #0
 8009642:	d005      	beq.n	8009650 <__smakebuf_r+0x74>
 8009644:	2303      	movs	r3, #3
 8009646:	89a2      	ldrh	r2, [r4, #12]
 8009648:	439a      	bics	r2, r3
 800964a:	3b02      	subs	r3, #2
 800964c:	4313      	orrs	r3, r2
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	433b      	orrs	r3, r7
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	e7ce      	b.n	80095f6 <__smakebuf_r+0x1a>

08009658 <_fstat_r>:
 8009658:	2300      	movs	r3, #0
 800965a:	b570      	push	{r4, r5, r6, lr}
 800965c:	4d06      	ldr	r5, [pc, #24]	; (8009678 <_fstat_r+0x20>)
 800965e:	0004      	movs	r4, r0
 8009660:	0008      	movs	r0, r1
 8009662:	0011      	movs	r1, r2
 8009664:	602b      	str	r3, [r5, #0]
 8009666:	f7f7 ff1a 	bl	800149e <_fstat>
 800966a:	1c43      	adds	r3, r0, #1
 800966c:	d103      	bne.n	8009676 <_fstat_r+0x1e>
 800966e:	682b      	ldr	r3, [r5, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d000      	beq.n	8009676 <_fstat_r+0x1e>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	bd70      	pop	{r4, r5, r6, pc}
 8009678:	20000ae4 	.word	0x20000ae4

0800967c <_isatty_r>:
 800967c:	2300      	movs	r3, #0
 800967e:	b570      	push	{r4, r5, r6, lr}
 8009680:	4d06      	ldr	r5, [pc, #24]	; (800969c <_isatty_r+0x20>)
 8009682:	0004      	movs	r4, r0
 8009684:	0008      	movs	r0, r1
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	f7f7 ff17 	bl	80014ba <_isatty>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d103      	bne.n	8009698 <_isatty_r+0x1c>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d000      	beq.n	8009698 <_isatty_r+0x1c>
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	bd70      	pop	{r4, r5, r6, pc}
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	20000ae4 	.word	0x20000ae4

080096a0 <_init>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a6:	bc08      	pop	{r3}
 80096a8:	469e      	mov	lr, r3
 80096aa:	4770      	bx	lr

080096ac <_fini>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	46c0      	nop			; (mov r8, r8)
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr
