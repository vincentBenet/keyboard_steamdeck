
bla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d0c  08007d0c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d14  08007d14  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d14  08007d14  00017d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08007d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  200001fc  08007f18  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  08007f18  000209f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8c1  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000285a  00000000  00000000  0002bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002e388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000788  00000000  00000000  0002edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000154f6  00000000  00000000  0002f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e676  00000000  00000000  00044a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076418  00000000  00000000  000530c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022e4  00000000  00000000  000c94dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cb7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007c44 	.word	0x08007c44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	08007c44 	.word	0x08007c44

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <readLine>:

GPIO_TypeDef *GPIOPORTS_L[4] = {GPIOB, GPIOB, GPIOB, GPIOB};
int PINS_L[4] = {GPIO_PIN_2, GPIO_PIN_1, GPIO_PIN_7, GPIO_PIN_6};

void readLine(int line, GPIO_TypeDef *inputPort, int inputPin, subKeyBoard *keyBoardHIDsub)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
 80004b4:	603b      	str	r3, [r7, #0]
	  if(HAL_GPIO_ReadPin (inputPort, inputPin))
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	0011      	movs	r1, r2
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fd24 	bl	8000f0c <HAL_GPIO_ReadPin>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d050      	beq.n	800056a <readLine+0xc2>
	  {
		  for (int c=0; c<11; c++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
 80004cc:	e00f      	b.n	80004ee <readLine+0x46>
		  {
			  HAL_GPIO_WritePin(GPIOPORTS_C[c], PINS_C[c], GPIO_PIN_RESET);
 80004ce:	4b29      	ldr	r3, [pc, #164]	; (8000574 <readLine+0xcc>)
 80004d0:	69fa      	ldr	r2, [r7, #28]
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	58d0      	ldr	r0, [r2, r3]
 80004d6:	4b28      	ldr	r3, [pc, #160]	; (8000578 <readLine+0xd0>)
 80004d8:	69fa      	ldr	r2, [r7, #28]
 80004da:	0092      	lsls	r2, r2, #2
 80004dc:	58d3      	ldr	r3, [r2, r3]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	2200      	movs	r2, #0
 80004e2:	0019      	movs	r1, r3
 80004e4:	f000 fd2f 	bl	8000f46 <HAL_GPIO_WritePin>
		  for (int c=0; c<11; c++)
 80004e8:	69fb      	ldr	r3, [r7, #28]
 80004ea:	3301      	adds	r3, #1
 80004ec:	61fb      	str	r3, [r7, #28]
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	2b0a      	cmp	r3, #10
 80004f2:	ddec      	ble.n	80004ce <readLine+0x26>
		  }

		  for (int c=0; c<11; c++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	e034      	b.n	8000564 <readLine+0xbc>
		  {
			  HAL_GPIO_WritePin(GPIOPORTS_C[c], PINS_C[c], GPIO_PIN_SET);
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <readLine+0xcc>)
 80004fc:	69ba      	ldr	r2, [r7, #24]
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	58d0      	ldr	r0, [r2, r3]
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <readLine+0xd0>)
 8000504:	69ba      	ldr	r2, [r7, #24]
 8000506:	0092      	lsls	r2, r2, #2
 8000508:	58d3      	ldr	r3, [r2, r3]
 800050a:	b29b      	uxth	r3, r3
 800050c:	2201      	movs	r2, #1
 800050e:	0019      	movs	r1, r3
 8000510:	f000 fd19 	bl	8000f46 <HAL_GPIO_WritePin>
			  if(HAL_GPIO_ReadPin (inputPort, inputPin)){  // L1xC1
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	b29a      	uxth	r2, r3
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fcf5 	bl	8000f0c <HAL_GPIO_ReadPin>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d00e      	beq.n	8000544 <readLine+0x9c>
				  int index = line * 11 + c;
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	0013      	movs	r3, r2
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	189b      	adds	r3, r3, r2
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	189b      	adds	r3, r3, r2
 8000532:	69ba      	ldr	r2, [r7, #24]
 8000534:	18d3      	adds	r3, r2, r3
 8000536:	617b      	str	r3, [r7, #20]
				  keyBoardHIDsub->KEYCODE2=(uint8_t)INPUTKEYS[index];
 8000538:	4a10      	ldr	r2, [pc, #64]	; (800057c <readLine+0xd4>)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	18d3      	adds	r3, r2, r3
 800053e:	781a      	ldrb	r2, [r3, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	70da      	strb	r2, [r3, #3]
			  };
			  HAL_GPIO_WritePin(GPIOPORTS_C[c], PINS_C[c], GPIO_PIN_RESET);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <readLine+0xcc>)
 8000546:	69ba      	ldr	r2, [r7, #24]
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	58d0      	ldr	r0, [r2, r3]
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <readLine+0xd0>)
 800054e:	69ba      	ldr	r2, [r7, #24]
 8000550:	0092      	lsls	r2, r2, #2
 8000552:	58d3      	ldr	r3, [r2, r3]
 8000554:	b29b      	uxth	r3, r3
 8000556:	2200      	movs	r2, #0
 8000558:	0019      	movs	r1, r3
 800055a:	f000 fcf4 	bl	8000f46 <HAL_GPIO_WritePin>
		  for (int c=0; c<11; c++)
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	3301      	adds	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	2b0a      	cmp	r3, #10
 8000568:	ddc7      	ble.n	80004fa <readLine+0x52>
		  }

	  }
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b008      	add	sp, #32
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	2000002c 	.word	0x2000002c
 8000578:	20000058 	.word	0x20000058
 800057c:	20000000 	.word	0x20000000

08000580 <send_keys>:

void send_keys(subKeyBoard *keyBoardHIDsub) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	USBD_HID_SendReport(&hUsbDeviceFS, keyBoardHIDsub,sizeof(*keyBoardHIDsub));
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <send_keys+0x60>)
 800058c:	2208      	movs	r2, #8
 800058e:	0018      	movs	r0, r3
 8000590:	f005 fc50 	bl	8005e34 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000594:	2032      	movs	r0, #50	; 0x32
 8000596:	f000 fa41 	bl	8000a1c <HAL_Delay>
	keyBoardHIDsub->MODIFIER=0x00;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
	keyBoardHIDsub->KEYCODE1=0x00;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	709a      	strb	r2, [r3, #2]
	keyBoardHIDsub->KEYCODE2=0x00;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	70da      	strb	r2, [r3, #3]
	keyBoardHIDsub->KEYCODE3=0x00;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	711a      	strb	r2, [r3, #4]
	keyBoardHIDsub->KEYCODE4=0x00;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	715a      	strb	r2, [r3, #5]
	keyBoardHIDsub->KEYCODE5=0x00;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	719a      	strb	r2, [r3, #6]
	keyBoardHIDsub->KEYCODE6=0x00;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	71da      	strb	r2, [r3, #7]
	USBD_HID_SendReport(&hUsbDeviceFS, keyBoardHIDsub,sizeof(*keyBoardHIDsub));
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <send_keys+0x60>)
 80005c8:	2208      	movs	r2, #8
 80005ca:	0018      	movs	r0, r3
 80005cc:	f005 fc32 	bl	8005e34 <USBD_HID_SendReport>
	HAL_Delay(20);
 80005d0:	2014      	movs	r0, #20
 80005d2:	f000 fa23 	bl	8000a1c <HAL_Delay>
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	20000228 	.word	0x20000228

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 f9a7 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f83f 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f8b3 	bl	800075c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005f6:	f006 fe77 	bl	80072e8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (int c=0; c<11; c++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e00f      	b.n	8000620 <main+0x3c>
		  HAL_GPIO_WritePin(GPIOPORTS_C[c], PINS_C[c], GPIO_PIN_SET);
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <main+0x78>)
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	0092      	lsls	r2, r2, #2
 8000606:	58d0      	ldr	r0, [r2, r3]
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <main+0x7c>)
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	0092      	lsls	r2, r2, #2
 800060e:	58d3      	ldr	r3, [r2, r3]
 8000610:	b29b      	uxth	r3, r3
 8000612:	2201      	movs	r2, #1
 8000614:	0019      	movs	r1, r3
 8000616:	f000 fc96 	bl	8000f46 <HAL_GPIO_WritePin>
	  for (int c=0; c<11; c++) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b0a      	cmp	r3, #10
 8000624:	ddec      	ble.n	8000600 <main+0x1c>
	  }
	  for (int l=0; l<4; l++) {
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	e00e      	b.n	800064a <main+0x66>
		  readLine(l, GPIOPORTS_L[l], PINS_L[l], &keyBoardHIDsub);
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <main+0x80>)
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	58d1      	ldr	r1, [r2, r3]
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <main+0x84>)
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	0092      	lsls	r2, r2, #2
 800063a:	58d2      	ldr	r2, [r2, r3]
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <main+0x88>)
 800063e:	6838      	ldr	r0, [r7, #0]
 8000640:	f7ff ff32 	bl	80004a8 <readLine>
	  for (int l=0; l<4; l++) {
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b03      	cmp	r3, #3
 800064e:	dded      	ble.n	800062c <main+0x48>
	  }

	  send_keys(&keyBoardHIDsub);
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <main+0x88>)
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff ff94 	bl	8000580 <send_keys>
	  for (int c=0; c<11; c++) {
 8000658:	e7cf      	b.n	80005fa <main+0x16>
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	2000002c 	.word	0x2000002c
 8000660:	20000058 	.word	0x20000058
 8000664:	20000084 	.word	0x20000084
 8000668:	20000094 	.word	0x20000094
 800066c:	20000218 	.word	0x20000218

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b09d      	sub	sp, #116	; 0x74
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	2438      	movs	r4, #56	; 0x38
 8000678:	193b      	adds	r3, r7, r4
 800067a:	0018      	movs	r0, r3
 800067c:	2338      	movs	r3, #56	; 0x38
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f007 fab3 	bl	8007bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000686:	2324      	movs	r3, #36	; 0x24
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	0018      	movs	r0, r3
 800068c:	2314      	movs	r3, #20
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f007 faab 	bl	8007bec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	0018      	movs	r0, r3
 800069a:	2320      	movs	r3, #32
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f007 faa4 	bl	8007bec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemClock_Config+0xe4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <SystemClock_Config+0xe8>)
 80006aa:	401a      	ands	r2, r3
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <SystemClock_Config+0xe4>)
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	0109      	lsls	r1, r1, #4
 80006b2:	430a      	orrs	r2, r1
 80006b4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80006b6:	0021      	movs	r1, r4
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2222      	movs	r2, #34	; 0x22
 80006bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2201      	movs	r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2210      	movs	r2, #16
 80006c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2201      	movs	r2, #1
 80006ce:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2202      	movs	r2, #2
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	03d2      	lsls	r2, r2, #15
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f002 fa7f 	bl	8002bf0 <HAL_RCC_OscConfig>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006f6:	f000 f8b3 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	2124      	movs	r1, #36	; 0x24
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	220f      	movs	r2, #15
 8000700:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2203      	movs	r2, #3
 8000706:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2101      	movs	r1, #1
 800071e:	0018      	movs	r0, r3
 8000720:	f002 fe2a 	bl	8003378 <HAL_RCC_ClockConfig>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000728:	f000 f89a 	bl	8000860 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2240      	movs	r2, #64	; 0x40
 8000730:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	04d2      	lsls	r2, r2, #19
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	0018      	movs	r0, r3
 800073e:	f003 f809 	bl	8003754 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000746:	f000 f88b 	bl	8000860 <Error_Handler>
  }
}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b01d      	add	sp, #116	; 0x74
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40007000 	.word	0x40007000
 8000758:	ffffe7ff 	.word	0xffffe7ff

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	240c      	movs	r4, #12
 8000764:	193b      	adds	r3, r7, r4
 8000766:	0018      	movs	r0, r3
 8000768:	2314      	movs	r3, #20
 800076a:	001a      	movs	r2, r3
 800076c:	2100      	movs	r1, #0
 800076e:	f007 fa3d 	bl	8007bec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b39      	ldr	r3, [pc, #228]	; (8000858 <MX_GPIO_Init+0xfc>)
 8000774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000776:	4b38      	ldr	r3, [pc, #224]	; (8000858 <MX_GPIO_Init+0xfc>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
 800077e:	4b36      	ldr	r3, [pc, #216]	; (8000858 <MX_GPIO_Init+0xfc>)
 8000780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <MX_GPIO_Init+0xfc>)
 800078c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078e:	4b32      	ldr	r3, [pc, #200]	; (8000858 <MX_GPIO_Init+0xfc>)
 8000790:	2102      	movs	r1, #2
 8000792:	430a      	orrs	r2, r1
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <MX_GPIO_Init+0xfc>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	2202      	movs	r2, #2
 800079c:	4013      	ands	r3, r2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007a2:	23ff      	movs	r3, #255	; 0xff
 80007a4:	00d9      	lsls	r1, r3, #3
 80007a6:	23a0      	movs	r3, #160	; 0xa0
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	2200      	movs	r2, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 fbca 	bl	8000f46 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <MX_GPIO_Init+0x100>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	2121      	movs	r1, #33	; 0x21
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fbc4 	bl	8000f46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2204      	movs	r2, #4
 80007c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2202      	movs	r2, #2
 80007ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	193a      	adds	r2, r7, r4
 80007d2:	23a0      	movs	r3, #160	; 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fa21 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007de:	0021      	movs	r1, r4
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	22ff      	movs	r2, #255	; 0xff
 80007e4:	00d2      	lsls	r2, r2, #3
 80007e6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	000c      	movs	r4, r1
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	193a      	adds	r2, r7, r4
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fa0b 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2221      	movs	r2, #33	; 0x21
 800080e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2201      	movs	r2, #1
 8000814:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	193b      	adds	r3, r7, r4
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <MX_GPIO_Init+0x100>)
 8000826:	0019      	movs	r1, r3
 8000828:	0010      	movs	r0, r2
 800082a:	f000 f9f9 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 800082e:	0021      	movs	r1, r4
 8000830:	187b      	adds	r3, r7, r1
 8000832:	22c6      	movs	r2, #198	; 0xc6
 8000834:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2202      	movs	r2, #2
 8000840:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	187b      	adds	r3, r7, r1
 8000844:	4a05      	ldr	r2, [pc, #20]	; (800085c <MX_GPIO_Init+0x100>)
 8000846:	0019      	movs	r1, r3
 8000848:	0010      	movs	r0, r2
 800084a:	f000 f9e9 	bl	8000c20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b009      	add	sp, #36	; 0x24
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40021000 	.word	0x40021000
 800085c:	50000400 	.word	0x50000400

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <HAL_MspInit+0x24>)
 8000872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x24>)
 8000876:	2101      	movs	r1, #1
 8000878:	430a      	orrs	r2, r1
 800087a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <HAL_MspInit+0x24>)
 800087e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HAL_MspInit+0x24>)
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	0549      	lsls	r1, r1, #21
 8000886:	430a      	orrs	r2, r1
 8000888:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 f894 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <USB_IRQHandler+0x14>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fc7e 	bl	80011cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	200006ec 	.word	0x200006ec

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008ea:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ec:	f7ff fff6 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f007 f971 	bl	8007bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091a:	f7ff fe63 	bl	80005e4 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
   ldr   r0, =_estack
 8000920:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800092c:	08007d1c 	.word	0x08007d1c
  ldr r2, =_sbss
 8000930:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000934:	200009f4 	.word	0x200009f4

08000938 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_COMP_IRQHandler>
	...

0800093c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_Init+0x3c>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_Init+0x3c>)
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	430a      	orrs	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f811 	bl	800097c <HAL_InitTick>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d003      	beq.n	8000966 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e001      	b.n	800096a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000966:	f7ff ff81 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_InitTick+0x5c>)
 8000986:	681c      	ldr	r4, [r3, #0]
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_InitTick+0x60>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	0019      	movs	r1, r3
 800098e:	23fa      	movs	r3, #250	; 0xfa
 8000990:	0098      	lsls	r0, r3, #2
 8000992:	f7ff fbb9 	bl	8000108 <__udivsi3>
 8000996:	0003      	movs	r3, r0
 8000998:	0019      	movs	r1, r3
 800099a:	0020      	movs	r0, r4
 800099c:	f7ff fbb4 	bl	8000108 <__udivsi3>
 80009a0:	0003      	movs	r3, r0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 f92f 	bl	8000c06 <HAL_SYSTICK_Config>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e00f      	b.n	80009d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d80b      	bhi.n	80009ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	2301      	movs	r3, #1
 80009ba:	425b      	negs	r3, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f8fc 	bl	8000bbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_InitTick+0x64>)
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b003      	add	sp, #12
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	200000a4 	.word	0x200000a4
 80009dc:	200000ac 	.word	0x200000ac
 80009e0:	200000a8 	.word	0x200000a8

080009e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	18d2      	adds	r2, r2, r3
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_IncTick+0x20>)
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	200000ac 	.word	0x200000ac
 8000a04:	20000220 	.word	0x20000220

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	20000220 	.word	0x20000220

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff fff0 	bl	8000a08 <HAL_GetTick>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3301      	adds	r3, #1
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	189b      	adds	r3, r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	f7ff ffe0 	bl	8000a08 <HAL_GetTick>
 8000a48:	0002      	movs	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	200000ac 	.word	0x200000ac

08000a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	0002      	movs	r2, r0
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b7f      	cmp	r3, #127	; 0x7f
 8000a76:	d809      	bhi.n	8000a8c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	231f      	movs	r3, #31
 8000a80:	401a      	ands	r2, r3
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_EnableIRQ+0x30>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	4091      	lsls	r1, r2
 8000a88:	000a      	movs	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]
  }
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8000aac:	d828      	bhi.n	8000b00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aae:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <__NVIC_SetPriority+0xd4>)
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	33c0      	adds	r3, #192	; 0xc0
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	589b      	ldr	r3, [r3, r2]
 8000abe:	1dfa      	adds	r2, r7, #7
 8000ac0:	7812      	ldrb	r2, [r2, #0]
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	400a      	ands	r2, r1
 8000ac8:	00d2      	lsls	r2, r2, #3
 8000aca:	21ff      	movs	r1, #255	; 0xff
 8000acc:	4091      	lsls	r1, r2
 8000ace:	000a      	movs	r2, r1
 8000ad0:	43d2      	mvns	r2, r2
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	22ff      	movs	r2, #255	; 0xff
 8000adc:	401a      	ands	r2, r3
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	4003      	ands	r3, r0
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	481f      	ldr	r0, [pc, #124]	; (8000b6c <__NVIC_SetPriority+0xd4>)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	430a      	orrs	r2, r1
 8000af8:	33c0      	adds	r3, #192	; 0xc0
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000afe:	e031      	b.n	8000b64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <__NVIC_SetPriority+0xd8>)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	0019      	movs	r1, r3
 8000b08:	230f      	movs	r3, #15
 8000b0a:	400b      	ands	r3, r1
 8000b0c:	3b08      	subs	r3, #8
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	3306      	adds	r3, #6
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	18d3      	adds	r3, r2, r3
 8000b16:	3304      	adds	r3, #4
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1dfa      	adds	r2, r7, #7
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	2203      	movs	r2, #3
 8000b22:	400a      	ands	r2, r1
 8000b24:	00d2      	lsls	r2, r2, #3
 8000b26:	21ff      	movs	r1, #255	; 0xff
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	401a      	ands	r2, r3
 8000b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	401a      	ands	r2, r3
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2303      	movs	r3, #3
 8000b42:	4003      	ands	r3, r0
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <__NVIC_SetPriority+0xd8>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	001c      	movs	r4, r3
 8000b50:	230f      	movs	r3, #15
 8000b52:	4023      	ands	r3, r4
 8000b54:	3b08      	subs	r3, #8
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	3306      	adds	r3, #6
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	18c3      	adds	r3, r0, r3
 8000b60:	3304      	adds	r3, #4
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b003      	add	sp, #12
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	045b      	lsls	r3, r3, #17
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d301      	bcc.n	8000b8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e010      	b.n	8000bae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SysTick_Config+0x44>)
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	3a01      	subs	r2, #1
 8000b92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	2103      	movs	r1, #3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff ff7c 	bl	8000a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SysTick_Config+0x44>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SysTick_Config+0x44>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	0018      	movs	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	1c02      	adds	r2, r0, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ff5d 	bl	8000a98 <__NVIC_SetPriority>
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b004      	add	sp, #16
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	0002      	movs	r2, r0
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ff33 	bl	8000a64 <__NVIC_EnableIRQ>
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ffaf 	bl	8000b74 <SysTick_Config>
 8000c16:	0003      	movs	r3, r0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c36:	e14f      	b.n	8000ed8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4091      	lsls	r1, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <HAL_GPIO_Init+0x30>
 8000c4e:	e140      	b.n	8000ed2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2203      	movs	r2, #3
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d005      	beq.n	8000c68 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2203      	movs	r2, #3
 8000c62:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d130      	bne.n	8000cca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	43da      	mvns	r2, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	0013      	movs	r3, r2
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d017      	beq.n	8000d06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d123      	bne.n	8000d5a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	58d3      	ldr	r3, [r2, r3]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2207      	movs	r2, #7
 8000d24:	4013      	ands	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	691a      	ldr	r2, [r3, #16]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	400b      	ands	r3, r1
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	6939      	ldr	r1, [r7, #16]
 8000d58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	401a      	ands	r2, r3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	23c0      	movs	r3, #192	; 0xc0
 8000d94:	029b      	lsls	r3, r3, #10
 8000d96:	4013      	ands	r3, r2
 8000d98:	d100      	bne.n	8000d9c <HAL_GPIO_Init+0x17c>
 8000d9a:	e09a      	b.n	8000ed2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	4b54      	ldr	r3, [pc, #336]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da0:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	430a      	orrs	r2, r1
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da8:	4a52      	ldr	r2, [pc, #328]	; (8000ef4 <HAL_GPIO_Init+0x2d4>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	589b      	ldr	r3, [r3, r2]
 8000db4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2203      	movs	r2, #3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	43da      	mvns	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d019      	beq.n	8000e0a <HAL_GPIO_Init+0x1ea>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a47      	ldr	r2, [pc, #284]	; (8000ef8 <HAL_GPIO_Init+0x2d8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0x1e6>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a46      	ldr	r2, [pc, #280]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00d      	beq.n	8000e02 <HAL_GPIO_Init+0x1e2>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x1de>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a44      	ldr	r2, [pc, #272]	; (8000f04 <HAL_GPIO_Init+0x2e4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_GPIO_Init+0x1da>
 8000df6:	2305      	movs	r3, #5
 8000df8:	e008      	b.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e004      	b.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	2103      	movs	r1, #3
 8000e10:	400a      	ands	r2, r1
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	4093      	lsls	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e1c:	4935      	ldr	r1, [pc, #212]	; (8000ef4 <HAL_GPIO_Init+0x2d4>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2a:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	035b      	lsls	r3, r3, #13
 8000e42:	4013      	ands	r3, r2
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43da      	mvns	r2, r3
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	039b      	lsls	r3, r3, #14
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e78:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	029b      	lsls	r3, r3, #10
 8000e96:	4013      	ands	r3, r2
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	40da      	lsrs	r2, r3
 8000ee0:	1e13      	subs	r3, r2, #0
 8000ee2:	d000      	beq.n	8000ee6 <HAL_GPIO_Init+0x2c6>
 8000ee4:	e6a8      	b.n	8000c38 <HAL_GPIO_Init+0x18>
  }
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b006      	add	sp, #24
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	50000400 	.word	0x50000400
 8000efc:	50000800 	.word	0x50000800
 8000f00:	50000c00 	.word	0x50000c00
 8000f04:	50001c00 	.word	0x50001c00
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	000a      	movs	r2, r1
 8000f16:	1cbb      	adds	r3, r7, #2
 8000f18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	1cba      	adds	r2, r7, #2
 8000f20:	8812      	ldrh	r2, [r2, #0]
 8000f22:	4013      	ands	r3, r2
 8000f24:	d004      	beq.n	8000f30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000f26:	230f      	movs	r3, #15
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e003      	b.n	8000f38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f30:	230f      	movs	r3, #15
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f38:	230f      	movs	r3, #15
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
}
 8000f3e:	0018      	movs	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	0008      	movs	r0, r1
 8000f50:	0011      	movs	r1, r2
 8000f52:	1cbb      	adds	r3, r7, #2
 8000f54:	1c02      	adds	r2, r0, #0
 8000f56:	801a      	strh	r2, [r3, #0]
 8000f58:	1c7b      	adds	r3, r7, #1
 8000f5a:	1c0a      	adds	r2, r1, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f5e:	1c7b      	adds	r3, r7, #1
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f66:	1cbb      	adds	r3, r7, #2
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f6e:	e003      	b.n	8000f78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f70:	1cbb      	adds	r3, r7, #2
 8000f72:	881a      	ldrh	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f82:	b08b      	sub	sp, #44	; 0x2c
 8000f84:	af06      	add	r7, sp, #24
 8000f86:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e0f0      	b.n	8001174 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a79      	ldr	r2, [pc, #484]	; (800117c <HAL_PCD_Init+0x1fc>)
 8000f96:	5c9b      	ldrb	r3, [r3, r2]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d108      	bne.n	8000fb0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	23aa      	movs	r3, #170	; 0xaa
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	0018      	movs	r0, r3
 8000fac:	f006 faf2 	bl	8007594 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a72      	ldr	r2, [pc, #456]	; (800117c <HAL_PCD_Init+0x1fc>)
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f002 fd2b 	bl	8003a18 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e049      	b.n	8001060 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fcc:	200f      	movs	r0, #15
 8000fce:	183b      	adds	r3, r7, r0
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	189b      	adds	r3, r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	18cb      	adds	r3, r1, r3
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fe6:	183b      	adds	r3, r7, r0
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	0013      	movs	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	189b      	adds	r3, r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	183a      	adds	r2, r7, r0
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ffc:	183b      	adds	r3, r7, r0
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	0013      	movs	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	189b      	adds	r3, r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	18cb      	adds	r3, r1, r3
 800100e:	3303      	adds	r3, #3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001014:	183b      	adds	r3, r7, r0
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	0013      	movs	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	189b      	adds	r3, r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	18cb      	adds	r3, r1, r3
 8001024:	3338      	adds	r3, #56	; 0x38
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800102a:	183b      	adds	r3, r7, r0
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	0013      	movs	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	189b      	adds	r3, r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	18cb      	adds	r3, r1, r3
 800103a:	333c      	adds	r3, #60	; 0x3c
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001040:	183b      	adds	r3, r7, r0
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	0013      	movs	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	189b      	adds	r3, r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	18cb      	adds	r3, r1, r3
 8001050:	3340      	adds	r3, #64	; 0x40
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001056:	183b      	adds	r3, r7, r0
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	183b      	adds	r3, r7, r0
 800105c:	3201      	adds	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	210f      	movs	r1, #15
 8001062:	187b      	adds	r3, r7, r1
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	d3ae      	bcc.n	8000fcc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	e056      	b.n	8001124 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001076:	240f      	movs	r4, #15
 8001078:	193b      	adds	r3, r7, r4
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	236a      	movs	r3, #106	; 0x6a
 8001080:	33ff      	adds	r3, #255	; 0xff
 8001082:	0019      	movs	r1, r3
 8001084:	0013      	movs	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	189b      	adds	r3, r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	18c3      	adds	r3, r0, r3
 800108e:	185b      	adds	r3, r3, r1
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	23b4      	movs	r3, #180	; 0xb4
 800109c:	0059      	lsls	r1, r3, #1
 800109e:	0013      	movs	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	189b      	adds	r3, r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	18c3      	adds	r3, r0, r3
 80010a8:	185b      	adds	r3, r3, r1
 80010aa:	193a      	adds	r2, r7, r4
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	236c      	movs	r3, #108	; 0x6c
 80010b8:	33ff      	adds	r3, #255	; 0xff
 80010ba:	0019      	movs	r1, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	18c3      	adds	r3, r0, r3
 80010c6:	185b      	adds	r3, r3, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	23bc      	movs	r3, #188	; 0xbc
 80010d4:	0059      	lsls	r1, r3, #1
 80010d6:	0013      	movs	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	189b      	adds	r3, r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	18c3      	adds	r3, r0, r3
 80010e0:	185b      	adds	r3, r3, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	23be      	movs	r3, #190	; 0xbe
 80010ee:	0059      	lsls	r1, r3, #1
 80010f0:	0013      	movs	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	189b      	adds	r3, r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	18c3      	adds	r3, r0, r3
 80010fa:	185b      	adds	r3, r3, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001100:	193b      	adds	r3, r7, r4
 8001102:	781a      	ldrb	r2, [r3, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	23c0      	movs	r3, #192	; 0xc0
 8001108:	0059      	lsls	r1, r3, #1
 800110a:	0013      	movs	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	189b      	adds	r3, r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	18c3      	adds	r3, r0, r3
 8001114:	185b      	adds	r3, r3, r1
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111a:	193b      	adds	r3, r7, r4
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	193b      	adds	r3, r7, r4
 8001120:	3201      	adds	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	230f      	movs	r3, #15
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	d3a1      	bcc.n	8001076 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	466a      	mov	r2, sp
 800113a:	0011      	movs	r1, r2
 800113c:	001a      	movs	r2, r3
 800113e:	3210      	adds	r2, #16
 8001140:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001142:	c170      	stmia	r1!, {r4, r5, r6}
 8001144:	ca30      	ldmia	r2!, {r4, r5}
 8001146:	c130      	stmia	r1!, {r4, r5}
 8001148:	6859      	ldr	r1, [r3, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f002 fc7d 	bl	8003a4c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2224      	movs	r2, #36	; 0x24
 8001156:	2100      	movs	r1, #0
 8001158:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_PCD_Init+0x1fc>)
 800115e:	2101      	movs	r1, #1
 8001160:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d103      	bne.n	8001172 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	0018      	movs	r0, r3
 800116e:	f001 fd09 	bl	8002b84 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b005      	add	sp, #20
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117c:	000002a9 	.word	0x000002a9

08001180 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	23aa      	movs	r3, #170	; 0xaa
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_PCD_Start+0x18>
 8001194:	2302      	movs	r3, #2
 8001196:	e014      	b.n	80011c2 <HAL_PCD_Start+0x42>
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	23aa      	movs	r3, #170	; 0xaa
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	2101      	movs	r1, #1
 80011a0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	0018      	movs	r0, r3
 80011a8:	f002 fc20 	bl	80039ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f004 fc23 	bl	80059fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	23aa      	movs	r3, #170	; 0xaa
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	2100      	movs	r1, #0
 80011be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	f004 fc25 	bl	8005a28 <USB_ReadInterrupts>
 80011de:	0003      	movs	r3, r0
 80011e0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	4013      	ands	r3, r2
 80011ea:	d004      	beq.n	80011f6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 fb48 	bl	8001884 <PCD_EP_ISR_Handler>

    return;
 80011f4:	e11d      	b.n	8001432 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4013      	ands	r3, r2
 80011fe:	d015      	beq.n	800122c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2244      	movs	r2, #68	; 0x44
 8001206:	5a9b      	ldrh	r3, [r3, r2]
 8001208:	b29a      	uxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	498a      	ldr	r1, [pc, #552]	; (8001438 <HAL_PCD_IRQHandler+0x26c>)
 8001210:	400a      	ands	r2, r1
 8001212:	b291      	uxth	r1, r2
 8001214:	2244      	movs	r2, #68	; 0x44
 8001216:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0018      	movs	r0, r3
 800121c:	f006 fa3d 	bl	800769a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2100      	movs	r1, #0
 8001224:	0018      	movs	r0, r3
 8001226:	f000 f915 	bl	8001454 <HAL_PCD_SetAddress>

    return;
 800122a:	e102      	b.n	8001432 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	01db      	lsls	r3, r3, #7
 8001232:	4013      	ands	r3, r2
 8001234:	d00c      	beq.n	8001250 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2244      	movs	r2, #68	; 0x44
 800123c:	5a9b      	ldrh	r3, [r3, r2]
 800123e:	b29a      	uxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	497d      	ldr	r1, [pc, #500]	; (800143c <HAL_PCD_IRQHandler+0x270>)
 8001246:	400a      	ands	r2, r1
 8001248:	b291      	uxth	r1, r2
 800124a:	2244      	movs	r2, #68	; 0x44
 800124c:	5299      	strh	r1, [r3, r2]

    return;
 800124e:	e0f0      	b.n	8001432 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	019b      	lsls	r3, r3, #6
 8001256:	4013      	ands	r3, r2
 8001258:	d00c      	beq.n	8001274 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2244      	movs	r2, #68	; 0x44
 8001260:	5a9b      	ldrh	r3, [r3, r2]
 8001262:	b29a      	uxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4975      	ldr	r1, [pc, #468]	; (8001440 <HAL_PCD_IRQHandler+0x274>)
 800126a:	400a      	ands	r2, r1
 800126c:	b291      	uxth	r1, r2
 800126e:	2244      	movs	r2, #68	; 0x44
 8001270:	5299      	strh	r1, [r3, r2]

    return;
 8001272:	e0de      	b.n	8001432 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	015b      	lsls	r3, r3, #5
 800127a:	4013      	ands	r3, r2
 800127c:	d038      	beq.n	80012f0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	5a9b      	ldrh	r3, [r3, r2]
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2104      	movs	r1, #4
 800128e:	438a      	bics	r2, r1
 8001290:	b291      	uxth	r1, r2
 8001292:	2240      	movs	r2, #64	; 0x40
 8001294:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2240      	movs	r2, #64	; 0x40
 800129c:	5a9b      	ldrh	r3, [r3, r2]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2108      	movs	r1, #8
 80012a6:	438a      	bics	r2, r1
 80012a8:	b291      	uxth	r1, r2
 80012aa:	2240      	movs	r2, #64	; 0x40
 80012ac:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	23b8      	movs	r3, #184	; 0xb8
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d109      	bne.n	80012ce <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	23b8      	movs	r3, #184	; 0xb8
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	2100      	movs	r1, #0
 80012c2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2100      	movs	r1, #0
 80012c8:	0018      	movs	r0, r3
 80012ca:	f001 fc85 	bl	8002bd8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f006 fa23 	bl	800771c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2244      	movs	r2, #68	; 0x44
 80012dc:	5a9b      	ldrh	r3, [r3, r2]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4957      	ldr	r1, [pc, #348]	; (8001444 <HAL_PCD_IRQHandler+0x278>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	b291      	uxth	r1, r2
 80012ea:	2244      	movs	r2, #68	; 0x44
 80012ec:	5299      	strh	r1, [r3, r2]

    return;
 80012ee:	e0a0      	b.n	8001432 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4013      	ands	r3, r2
 80012f8:	d028      	beq.n	800134c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2240      	movs	r2, #64	; 0x40
 8001300:	5a9b      	ldrh	r3, [r3, r2]
 8001302:	b29a      	uxth	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2108      	movs	r1, #8
 800130a:	430a      	orrs	r2, r1
 800130c:	b291      	uxth	r1, r2
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2244      	movs	r2, #68	; 0x44
 8001318:	5a9b      	ldrh	r3, [r3, r2]
 800131a:	b29a      	uxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4949      	ldr	r1, [pc, #292]	; (8001448 <HAL_PCD_IRQHandler+0x27c>)
 8001322:	400a      	ands	r2, r1
 8001324:	b291      	uxth	r1, r2
 8001326:	2244      	movs	r2, #68	; 0x44
 8001328:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2240      	movs	r2, #64	; 0x40
 8001330:	5a9b      	ldrh	r3, [r3, r2]
 8001332:	b29a      	uxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2104      	movs	r1, #4
 800133a:	430a      	orrs	r2, r1
 800133c:	b291      	uxth	r1, r2
 800133e:	2240      	movs	r2, #64	; 0x40
 8001340:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0018      	movs	r0, r3
 8001346:	f006 f9cd 	bl	80076e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800134a:	e072      	b.n	8001432 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	4013      	ands	r3, r2
 8001352:	d046      	beq.n	80013e2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2244      	movs	r2, #68	; 0x44
 800135a:	5a9b      	ldrh	r3, [r3, r2]
 800135c:	b29a      	uxth	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	438a      	bics	r2, r1
 8001366:	b291      	uxth	r1, r2
 8001368:	2244      	movs	r2, #68	; 0x44
 800136a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	23b8      	movs	r3, #184	; 0xb8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d12f      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2240      	movs	r2, #64	; 0x40
 800137e:	5a9b      	ldrh	r3, [r3, r2]
 8001380:	b29a      	uxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2104      	movs	r1, #4
 8001388:	430a      	orrs	r2, r1
 800138a:	b291      	uxth	r1, r2
 800138c:	2240      	movs	r2, #64	; 0x40
 800138e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2240      	movs	r2, #64	; 0x40
 8001396:	5a9b      	ldrh	r3, [r3, r2]
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2108      	movs	r1, #8
 80013a0:	430a      	orrs	r2, r1
 80013a2:	b291      	uxth	r1, r2
 80013a4:	2240      	movs	r2, #64	; 0x40
 80013a6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	23b8      	movs	r3, #184	; 0xb8
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	2101      	movs	r1, #1
 80013b0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2254      	movs	r2, #84	; 0x54
 80013b8:	5a9b      	ldrh	r3, [r3, r2]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	223c      	movs	r2, #60	; 0x3c
 80013c0:	4013      	ands	r3, r2
 80013c2:	0019      	movs	r1, r3
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	23b9      	movs	r3, #185	; 0xb9
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2101      	movs	r1, #1
 80013d0:	0018      	movs	r0, r3
 80013d2:	f001 fc01 	bl	8002bd8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80013d6:	e02c      	b.n	8001432 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	0018      	movs	r0, r3
 80013dc:	f006 f982 	bl	80076e4 <HAL_PCD_SuspendCallback>
    return;
 80013e0:	e027      	b.n	8001432 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d010      	beq.n	800140e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2244      	movs	r2, #68	; 0x44
 80013f2:	5a9b      	ldrh	r3, [r3, r2]
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4914      	ldr	r1, [pc, #80]	; (800144c <HAL_PCD_IRQHandler+0x280>)
 80013fc:	400a      	ands	r2, r1
 80013fe:	b291      	uxth	r1, r2
 8001400:	2244      	movs	r2, #68	; 0x44
 8001402:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	0018      	movs	r0, r3
 8001408:	f006 f938 	bl	800767c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800140c:	e011      	b.n	8001432 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4013      	ands	r3, r2
 8001416:	d00c      	beq.n	8001432 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2244      	movs	r2, #68	; 0x44
 800141e:	5a9b      	ldrh	r3, [r3, r2]
 8001420:	b29a      	uxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	490a      	ldr	r1, [pc, #40]	; (8001450 <HAL_PCD_IRQHandler+0x284>)
 8001428:	400a      	ands	r2, r1
 800142a:	b291      	uxth	r1, r2
 800142c:	2244      	movs	r2, #68	; 0x44
 800142e:	5299      	strh	r1, [r3, r2]

    return;
 8001430:	46c0      	nop			; (mov r8, r8)
  }
}
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bd80      	pop	{r7, pc}
 8001438:	fffffbff 	.word	0xfffffbff
 800143c:	ffffbfff 	.word	0xffffbfff
 8001440:	ffffdfff 	.word	0xffffdfff
 8001444:	ffffefff 	.word	0xffffefff
 8001448:	fffff7ff 	.word	0xfffff7ff
 800144c:	fffffdff 	.word	0xfffffdff
 8001450:	fffffeff 	.word	0xfffffeff

08001454 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	000a      	movs	r2, r1
 800145e:	1cfb      	adds	r3, r7, #3
 8001460:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	23aa      	movs	r3, #170	; 0xaa
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	5cd3      	ldrb	r3, [r2, r3]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_PCD_SetAddress+0x1e>
 800146e:	2302      	movs	r3, #2
 8001470:	e017      	b.n	80014a2 <HAL_PCD_SetAddress+0x4e>
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	23aa      	movs	r3, #170	; 0xaa
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	2101      	movs	r1, #1
 800147a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	1cfa      	adds	r2, r7, #3
 8001480:	2124      	movs	r1, #36	; 0x24
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	1cfb      	adds	r3, r7, #3
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	0019      	movs	r1, r3
 8001490:	0010      	movs	r0, r2
 8001492:	f004 fa9f 	bl	80059d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	23aa      	movs	r3, #170	; 0xaa
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	2100      	movs	r1, #0
 800149e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014aa:	b590      	push	{r4, r7, lr}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	000c      	movs	r4, r1
 80014b4:	0010      	movs	r0, r2
 80014b6:	0019      	movs	r1, r3
 80014b8:	1cfb      	adds	r3, r7, #3
 80014ba:	1c22      	adds	r2, r4, #0
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	003b      	movs	r3, r7
 80014c0:	1c02      	adds	r2, r0, #0
 80014c2:	801a      	strh	r2, [r3, #0]
 80014c4:	1cbb      	adds	r3, r7, #2
 80014c6:	1c0a      	adds	r2, r1, #0
 80014c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014ca:	230b      	movs	r3, #11
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014d2:	1cfb      	adds	r3, r7, #3
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da0f      	bge.n	80014fc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014dc:	1cfb      	adds	r3, r7, #3
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2207      	movs	r2, #7
 80014e2:	4013      	ands	r3, r2
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	0013      	movs	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	189b      	adds	r3, r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	705a      	strb	r2, [r3, #1]
 80014fa:	e00f      	b.n	800151c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014fc:	1cfb      	adds	r3, r7, #3
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2207      	movs	r2, #7
 8001502:	401a      	ands	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	189b      	adds	r3, r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	3369      	adds	r3, #105	; 0x69
 800150e:	33ff      	adds	r3, #255	; 0xff
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	18d3      	adds	r3, r2, r3
 8001514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800151c:	1cfb      	adds	r3, r7, #3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2207      	movs	r2, #7
 8001522:	4013      	ands	r3, r2
 8001524:	b2da      	uxtb	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800152a:	003b      	movs	r3, r7
 800152c:	881a      	ldrh	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1cba      	adds	r2, r7, #2
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800153a:	1cbb      	adds	r3, r7, #2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d102      	bne.n	8001548 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	23aa      	movs	r3, #170	; 0xaa
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	5cd3      	ldrb	r3, [r2, r3]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_PCD_EP_Open+0xae>
 8001554:	2302      	movs	r3, #2
 8001556:	e013      	b.n	8001580 <HAL_PCD_EP_Open+0xd6>
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	23aa      	movs	r3, #170	; 0xaa
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	2101      	movs	r1, #1
 8001560:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	0011      	movs	r1, r2
 800156a:	0018      	movs	r0, r3
 800156c:	f002 fa96 	bl	8003a9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	23aa      	movs	r3, #170	; 0xaa
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	2100      	movs	r1, #0
 8001578:	54d1      	strb	r1, [r2, r3]

  return ret;
 800157a:	230b      	movs	r3, #11
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	781b      	ldrb	r3, [r3, #0]
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b005      	add	sp, #20
 8001586:	bd90      	pop	{r4, r7, pc}

08001588 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	000a      	movs	r2, r1
 8001592:	1cfb      	adds	r3, r7, #3
 8001594:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001596:	1cfb      	adds	r3, r7, #3
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b25b      	sxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	da0f      	bge.n	80015c0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a0:	1cfb      	adds	r3, r7, #3
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2207      	movs	r2, #7
 80015a6:	4013      	ands	r3, r2
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	0013      	movs	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	189b      	adds	r3, r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2201      	movs	r2, #1
 80015bc:	705a      	strb	r2, [r3, #1]
 80015be:	e00f      	b.n	80015e0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c0:	1cfb      	adds	r3, r7, #3
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2207      	movs	r2, #7
 80015c6:	401a      	ands	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	189b      	adds	r3, r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	3369      	adds	r3, #105	; 0x69
 80015d2:	33ff      	adds	r3, #255	; 0xff
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	18d3      	adds	r3, r2, r3
 80015d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e0:	1cfb      	adds	r3, r7, #3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2207      	movs	r2, #7
 80015e6:	4013      	ands	r3, r2
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	23aa      	movs	r3, #170	; 0xaa
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_PCD_EP_Close+0x76>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e011      	b.n	8001622 <HAL_PCD_EP_Close+0x9a>
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	23aa      	movs	r3, #170	; 0xaa
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	2101      	movs	r1, #1
 8001606:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	0011      	movs	r1, r2
 8001610:	0018      	movs	r0, r3
 8001612:	f002 fde5 	bl	80041e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	23aa      	movs	r3, #170	; 0xaa
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	2100      	movs	r1, #0
 800161e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b004      	add	sp, #16
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	200b      	movs	r0, #11
 8001638:	183b      	adds	r3, r7, r0
 800163a:	1c0a      	adds	r2, r1, #0
 800163c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800163e:	0001      	movs	r1, r0
 8001640:	187b      	adds	r3, r7, r1
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2207      	movs	r2, #7
 8001646:	401a      	ands	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	189b      	adds	r3, r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	3369      	adds	r3, #105	; 0x69
 8001652:	33ff      	adds	r3, #255	; 0xff
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	18d3      	adds	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2200      	movs	r2, #0
 8001670:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2207      	movs	r2, #7
 8001678:	4013      	ands	r3, r2
 800167a:	b2da      	uxtb	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f002 ff69 	bl	8004560 <USB_EPStartXfer>

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b006      	add	sp, #24
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	200b      	movs	r0, #11
 80016a6:	183b      	adds	r3, r7, r0
 80016a8:	1c0a      	adds	r2, r1, #0
 80016aa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2207      	movs	r2, #7
 80016b2:	4013      	ands	r3, r2
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	0013      	movs	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	189b      	adds	r3, r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	18d3      	adds	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2224      	movs	r2, #36	; 0x24
 80016d4:	2101      	movs	r1, #1
 80016d6:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2200      	movs	r2, #0
 80016e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2201      	movs	r2, #1
 80016e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2207      	movs	r2, #7
 80016f0:	4013      	ands	r3, r2
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	0011      	movs	r1, r2
 8001700:	0018      	movs	r0, r3
 8001702:	f002 ff2d 	bl	8004560 <USB_EPStartXfer>

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b006      	add	sp, #24
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	000a      	movs	r2, r1
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800171e:	1cfb      	adds	r3, r7, #3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2207      	movs	r2, #7
 8001724:	401a      	ands	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	d901      	bls.n	8001732 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e046      	b.n	80017c0 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001732:	1cfb      	adds	r3, r7, #3
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b25b      	sxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	da0f      	bge.n	800175c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800173c:	1cfb      	adds	r3, r7, #3
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2207      	movs	r2, #7
 8001742:	4013      	ands	r3, r2
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	0013      	movs	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	189b      	adds	r3, r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	18d3      	adds	r3, r2, r3
 8001752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	705a      	strb	r2, [r3, #1]
 800175a:	e00d      	b.n	8001778 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800175c:	1cfb      	adds	r3, r7, #3
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	0013      	movs	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	189b      	adds	r3, r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	3369      	adds	r3, #105	; 0x69
 800176a:	33ff      	adds	r3, #255	; 0xff
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	18d3      	adds	r3, r2, r3
 8001770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800177e:	1cfb      	adds	r3, r7, #3
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2207      	movs	r2, #7
 8001784:	4013      	ands	r3, r2
 8001786:	b2da      	uxtb	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	23aa      	movs	r3, #170	; 0xaa
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_PCD_EP_SetStall+0x8c>
 8001798:	2302      	movs	r3, #2
 800179a:	e011      	b.n	80017c0 <HAL_PCD_EP_SetStall+0xb0>
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	23aa      	movs	r3, #170	; 0xaa
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	2101      	movs	r1, #1
 80017a4:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	0011      	movs	r1, r2
 80017ae:	0018      	movs	r0, r3
 80017b0:	f004 f80e 	bl	80057d0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	23aa      	movs	r3, #170	; 0xaa
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	2100      	movs	r1, #0
 80017bc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b004      	add	sp, #16
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	000a      	movs	r2, r1
 80017d2:	1cfb      	adds	r3, r7, #3
 80017d4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017d6:	1cfb      	adds	r3, r7, #3
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	220f      	movs	r2, #15
 80017dc:	401a      	ands	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d901      	bls.n	80017ea <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e048      	b.n	800187c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017ea:	1cfb      	adds	r3, r7, #3
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	da0f      	bge.n	8001814 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f4:	1cfb      	adds	r3, r7, #3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2207      	movs	r2, #7
 80017fa:	4013      	ands	r3, r2
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	0013      	movs	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	189b      	adds	r3, r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	18d3      	adds	r3, r2, r3
 800180a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2201      	movs	r2, #1
 8001810:	705a      	strb	r2, [r3, #1]
 8001812:	e00f      	b.n	8001834 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001814:	1cfb      	adds	r3, r7, #3
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2207      	movs	r2, #7
 800181a:	401a      	ands	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	189b      	adds	r3, r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	3369      	adds	r3, #105	; 0x69
 8001826:	33ff      	adds	r3, #255	; 0xff
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	18d3      	adds	r3, r2, r3
 800182c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800183a:	1cfb      	adds	r3, r7, #3
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2207      	movs	r2, #7
 8001840:	4013      	ands	r3, r2
 8001842:	b2da      	uxtb	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	23aa      	movs	r3, #170	; 0xaa
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_PCD_EP_ClrStall+0x90>
 8001854:	2302      	movs	r3, #2
 8001856:	e011      	b.n	800187c <HAL_PCD_EP_ClrStall+0xb4>
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	23aa      	movs	r3, #170	; 0xaa
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	2101      	movs	r1, #1
 8001860:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f004 f800 	bl	8005870 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	23aa      	movs	r3, #170	; 0xaa
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	2100      	movs	r1, #0
 8001878:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}

08001884 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b096      	sub	sp, #88	; 0x58
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800188c:	f000 fbec 	bl	8002068 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	204e      	movs	r0, #78	; 0x4e
 8001896:	183b      	adds	r3, r7, r0
 8001898:	2144      	movs	r1, #68	; 0x44
 800189a:	5a52      	ldrh	r2, [r2, r1]
 800189c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800189e:	183b      	adds	r3, r7, r0
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	244d      	movs	r4, #77	; 0x4d
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	210f      	movs	r1, #15
 80018aa:	400a      	ands	r2, r1
 80018ac:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d000      	beq.n	80018b8 <PCD_EP_ISR_Handler+0x34>
 80018b6:	e18f      	b.n	8001bd8 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	2210      	movs	r2, #16
 80018be:	4013      	ands	r3, r2
 80018c0:	d155      	bne.n	800196e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	200e      	movs	r0, #14
 80018cc:	183b      	adds	r3, r7, r0
 80018ce:	49bb      	ldr	r1, [pc, #748]	; (8001bbc <PCD_EP_ISR_Handler+0x338>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	801a      	strh	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	183a      	adds	r2, r7, r0
 80018da:	8812      	ldrh	r2, [r2, #0]
 80018dc:	49b8      	ldr	r1, [pc, #736]	; (8001bc0 <PCD_EP_ISR_Handler+0x33c>)
 80018de:	430a      	orrs	r2, r1
 80018e0:	b292      	uxth	r2, r2
 80018e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3328      	adds	r3, #40	; 0x28
 80018e8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2250      	movs	r2, #80	; 0x50
 80018f0:	5a9b      	ldrh	r3, [r3, r2]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	001a      	movs	r2, r3
 80018f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	18d2      	adds	r2, r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	18d3      	adds	r3, r2, r3
 8001904:	4aaf      	ldr	r2, [pc, #700]	; (8001bc4 <PCD_EP_ISR_Handler+0x340>)
 8001906:	4694      	mov	ip, r2
 8001908:	4463      	add	r3, ip
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	059b      	lsls	r3, r3, #22
 800190e:	0d9a      	lsrs	r2, r3, #22
 8001910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001912:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	18d2      	adds	r2, r2, r3
 800191e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001920:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2100      	movs	r1, #0
 8001926:	0018      	movs	r0, r3
 8001928:	f005 fe8a 	bl	8007640 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2224      	movs	r2, #36	; 0x24
 8001930:	5c9b      	ldrb	r3, [r3, r2]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <PCD_EP_ISR_Handler+0xb8>
 8001938:	f000 fb96 	bl	8002068 <PCD_EP_ISR_Handler+0x7e4>
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <PCD_EP_ISR_Handler+0xc4>
 8001944:	f000 fb90 	bl	8002068 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2224      	movs	r2, #36	; 0x24
 800194c:	5c9b      	ldrb	r3, [r3, r2]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	4252      	negs	r2, r2
 8001954:	4313      	orrs	r3, r2
 8001956:	b2da      	uxtb	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b291      	uxth	r1, r2
 800195e:	224c      	movs	r2, #76	; 0x4c
 8001960:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2224      	movs	r2, #36	; 0x24
 8001966:	2100      	movs	r1, #0
 8001968:	5499      	strb	r1, [r3, r2]
 800196a:	f000 fb7d 	bl	8002068 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3369      	adds	r3, #105	; 0x69
 8001972:	33ff      	adds	r3, #255	; 0xff
 8001974:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	214a      	movs	r1, #74	; 0x4a
 800197c:	187b      	adds	r3, r7, r1
 800197e:	8812      	ldrh	r2, [r2, #0]
 8001980:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001982:	187b      	adds	r3, r7, r1
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4013      	ands	r3, r2
 800198c:	d037      	beq.n	80019fe <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2250      	movs	r2, #80	; 0x50
 8001994:	5a9b      	ldrh	r3, [r3, r2]
 8001996:	b29b      	uxth	r3, r3
 8001998:	001a      	movs	r2, r3
 800199a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	18d2      	adds	r2, r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	18d3      	adds	r3, r2, r3
 80019a8:	4a87      	ldr	r2, [pc, #540]	; (8001bc8 <PCD_EP_ISR_Handler+0x344>)
 80019aa:	4694      	mov	ip, r2
 80019ac:	4463      	add	r3, ip
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	059b      	lsls	r3, r3, #22
 80019b2:	0d9a      	lsrs	r2, r3, #22
 80019b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	22ac      	movs	r2, #172	; 0xac
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	1899      	adds	r1, r3, r2
 80019c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f004 f882 	bl	8005ad6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	2010      	movs	r0, #16
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	497b      	ldr	r1, [pc, #492]	; (8001bcc <PCD_EP_ISR_Handler+0x348>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	801a      	strh	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	183a      	adds	r2, r7, r0
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	430a      	orrs	r2, r1
 80019f0:	b292      	uxth	r2, r2
 80019f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f005 fdec 	bl	80075d4 <HAL_PCD_SetupStageCallback>
 80019fc:	e334      	b.n	8002068 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019fe:	234a      	movs	r3, #74	; 0x4a
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	2200      	movs	r2, #0
 8001a04:	5e9b      	ldrsh	r3, [r3, r2]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db00      	blt.n	8001a0c <PCD_EP_ISR_Handler+0x188>
 8001a0a:	e32d      	b.n	8002068 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	201e      	movs	r0, #30
 8001a16:	183b      	adds	r3, r7, r0
 8001a18:	496c      	ldr	r1, [pc, #432]	; (8001bcc <PCD_EP_ISR_Handler+0x348>)
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	801a      	strh	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	183a      	adds	r2, r7, r0
 8001a24:	8812      	ldrh	r2, [r2, #0]
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2250      	movs	r2, #80	; 0x50
 8001a34:	5a9b      	ldrh	r3, [r3, r2]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	001a      	movs	r2, r3
 8001a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	18d2      	adds	r2, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	18d3      	adds	r3, r2, r3
 8001a48:	4a5f      	ldr	r2, [pc, #380]	; (8001bc8 <PCD_EP_ISR_Handler+0x344>)
 8001a4a:	4694      	mov	ip, r2
 8001a4c:	4463      	add	r3, ip
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	059b      	lsls	r3, r3, #22
 8001a52:	0d9a      	lsrs	r2, r3, #22
 8001a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a56:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01a      	beq.n	8001a96 <PCD_EP_ISR_Handler+0x212>
 8001a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d016      	beq.n	8001a96 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	6959      	ldr	r1, [r3, #20]
 8001a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a72:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a76:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f004 f82c 	bl	8005ad6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	18d2      	adds	r2, r2, r3
 8001a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2100      	movs	r1, #0
 8001a90:	0018      	movs	r0, r3
 8001a92:	f005 fdb4 	bl	80075fe <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	214a      	movs	r1, #74	; 0x4a
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	8812      	ldrh	r2, [r2, #0]
 8001aa0:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	881a      	ldrh	r2, [r3, #0]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d000      	beq.n	8001ab0 <PCD_EP_ISR_Handler+0x22c>
 8001aae:	e2db      	b.n	8002068 <PCD_EP_ISR_Handler+0x7e4>
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	881a      	ldrh	r2, [r3, #0]
 8001ab4:	23c0      	movs	r3, #192	; 0xc0
 8001ab6:	019b      	lsls	r3, r3, #6
 8001ab8:	401a      	ands	r2, r3
 8001aba:	23c0      	movs	r3, #192	; 0xc0
 8001abc:	019b      	lsls	r3, r3, #6
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d100      	bne.n	8001ac4 <PCD_EP_ISR_Handler+0x240>
 8001ac2:	e2d1      	b.n	8002068 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2250      	movs	r2, #80	; 0x50
 8001ad0:	5a9b      	ldrh	r3, [r3, r2]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	189b      	adds	r3, r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	4a3a      	ldr	r2, [pc, #232]	; (8001bc8 <PCD_EP_ISR_Handler+0x344>)
 8001ae0:	4694      	mov	ip, r2
 8001ae2:	4463      	add	r3, ip
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	059b      	lsls	r3, r3, #22
 8001aee:	0d9b      	lsrs	r3, r3, #22
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b3e      	cmp	r3, #62	; 0x3e
 8001afc:	d91a      	bls.n	8001b34 <PCD_EP_ISR_Handler+0x2b0>
 8001afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	647b      	str	r3, [r7, #68]	; 0x44
 8001b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	221f      	movs	r2, #31
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d102      	bne.n	8001b16 <PCD_EP_ISR_Handler+0x292>
 8001b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b12:	3b01      	subs	r3, #1
 8001b14:	647b      	str	r3, [r7, #68]	; 0x44
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	029b      	lsls	r3, r3, #10
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <PCD_EP_ISR_Handler+0x33c>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	801a      	strh	r2, [r3, #0]
 8001b32:	e023      	b.n	8001b7c <PCD_EP_ISR_Handler+0x2f8>
 8001b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d108      	bne.n	8001b4e <PCD_EP_ISR_Handler+0x2ca>
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <PCD_EP_ISR_Handler+0x33c>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	801a      	strh	r2, [r3, #0]
 8001b4c:	e016      	b.n	8001b7c <PCD_EP_ISR_Handler+0x2f8>
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	647b      	str	r3, [r7, #68]	; 0x44
 8001b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d002      	beq.n	8001b66 <PCD_EP_ISR_Handler+0x2e2>
 8001b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b62:	3301      	adds	r3, #1
 8001b64:	647b      	str	r3, [r7, #68]	; 0x44
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	2012      	movs	r0, #18
 8001b86:	183b      	adds	r3, r7, r0
 8001b88:	4911      	ldr	r1, [pc, #68]	; (8001bd0 <PCD_EP_ISR_Handler+0x34c>)
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	183b      	adds	r3, r7, r0
 8001b90:	183a      	adds	r2, r7, r0
 8001b92:	8812      	ldrh	r2, [r2, #0]
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	0149      	lsls	r1, r1, #5
 8001b98:	404a      	eors	r2, r1
 8001b9a:	801a      	strh	r2, [r3, #0]
 8001b9c:	183b      	adds	r3, r7, r0
 8001b9e:	183a      	adds	r2, r7, r0
 8001ba0:	8812      	ldrh	r2, [r2, #0]
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	0189      	lsls	r1, r1, #6
 8001ba6:	404a      	eors	r2, r1
 8001ba8:	801a      	strh	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	183a      	adds	r2, r7, r0
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <PCD_EP_ISR_Handler+0x350>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	b292      	uxth	r2, r2
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	e255      	b.n	8002068 <PCD_EP_ISR_Handler+0x7e4>
 8001bbc:	ffff8f0f 	.word	0xffff8f0f
 8001bc0:	ffff8000 	.word	0xffff8000
 8001bc4:	00000402 	.word	0x00000402
 8001bc8:	00000406 	.word	0x00000406
 8001bcc:	00000f8f 	.word	0x00000f8f
 8001bd0:	ffffbf8f 	.word	0xffffbf8f
 8001bd4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	001a      	movs	r2, r3
 8001bde:	204d      	movs	r0, #77	; 0x4d
 8001be0:	183b      	adds	r3, r7, r0
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	18d2      	adds	r2, r2, r3
 8001be8:	214a      	movs	r1, #74	; 0x4a
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	8812      	ldrh	r2, [r2, #0]
 8001bee:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	5e9b      	ldrsh	r3, [r3, r2]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db00      	blt.n	8001bfc <PCD_EP_ISR_Handler+0x378>
 8001bfa:	e0fa      	b.n	8001df2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	001a      	movs	r2, r3
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	18d3      	adds	r3, r2, r3
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	2448      	movs	r4, #72	; 0x48
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	49d1      	ldr	r1, [pc, #836]	; (8001f58 <PCD_EP_ISR_Handler+0x6d4>)
 8001c14:	400a      	ands	r2, r1
 8001c16:	801a      	strh	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	183b      	adds	r3, r7, r0
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	18d3      	adds	r3, r2, r3
 8001c26:	193a      	adds	r2, r7, r4
 8001c28:	8812      	ldrh	r2, [r2, #0]
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c32:	183b      	adds	r3, r7, r0
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	0013      	movs	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	189b      	adds	r3, r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	3369      	adds	r3, #105	; 0x69
 8001c40:	33ff      	adds	r3, #255	; 0xff
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	18d3      	adds	r3, r2, r3
 8001c46:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	7b1b      	ldrb	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d125      	bne.n	8001c9c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2250      	movs	r2, #80	; 0x50
 8001c56:	5a9b      	ldrh	r3, [r3, r2]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	18d2      	adds	r2, r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	18d3      	adds	r3, r2, r3
 8001c6a:	4abc      	ldr	r2, [pc, #752]	; (8001f5c <PCD_EP_ISR_Handler+0x6d8>)
 8001c6c:	4694      	mov	ip, r2
 8001c6e:	4463      	add	r3, ip
 8001c70:	881a      	ldrh	r2, [r3, #0]
 8001c72:	2450      	movs	r4, #80	; 0x50
 8001c74:	193b      	adds	r3, r7, r4
 8001c76:	0592      	lsls	r2, r2, #22
 8001c78:	0d92      	lsrs	r2, r2, #22
 8001c7a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001c7c:	193b      	adds	r3, r7, r4
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d100      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x402>
 8001c84:	e08d      	b.n	8001da2 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	6959      	ldr	r1, [r3, #20]
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c90:	88da      	ldrh	r2, [r3, #6]
 8001c92:	193b      	adds	r3, r7, r4
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	f003 ff1e 	bl	8005ad6 <USB_ReadPMA>
 8001c9a:	e082      	b.n	8001da2 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9e:	78db      	ldrb	r3, [r3, #3]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d10c      	bne.n	8001cbe <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ca4:	2350      	movs	r3, #80	; 0x50
 8001ca6:	18fc      	adds	r4, r7, r3
 8001ca8:	234a      	movs	r3, #74	; 0x4a
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	881a      	ldrh	r2, [r3, #0]
 8001cae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 f9ec 	bl	8002090 <HAL_PCD_EP_DB_Receive>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	8023      	strh	r3, [r4, #0]
 8001cbc:	e071      	b.n	8001da2 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	18d3      	adds	r3, r2, r3
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	2052      	movs	r0, #82	; 0x52
 8001cd2:	183b      	adds	r3, r7, r0
 8001cd4:	49a2      	ldr	r1, [pc, #648]	; (8001f60 <PCD_EP_ISR_Handler+0x6dc>)
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	801a      	strh	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	001a      	movs	r2, r3
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	18d3      	adds	r3, r2, r3
 8001ce8:	183a      	adds	r2, r7, r0
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	499d      	ldr	r1, [pc, #628]	; (8001f64 <PCD_EP_ISR_Handler+0x6e0>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	18d3      	adds	r3, r2, r3
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	001a      	movs	r2, r3
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	01db      	lsls	r3, r3, #7
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d024      	beq.n	8001d5a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2250      	movs	r2, #80	; 0x50
 8001d16:	5a9b      	ldrh	r3, [r3, r2]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	18d2      	adds	r2, r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	4a8f      	ldr	r2, [pc, #572]	; (8001f68 <PCD_EP_ISR_Handler+0x6e4>)
 8001d2c:	4694      	mov	ip, r2
 8001d2e:	4463      	add	r3, ip
 8001d30:	881a      	ldrh	r2, [r3, #0]
 8001d32:	2450      	movs	r4, #80	; 0x50
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	0592      	lsls	r2, r2, #22
 8001d38:	0d92      	lsrs	r2, r2, #22
 8001d3a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d02e      	beq.n	8001da2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4a:	6959      	ldr	r1, [r3, #20]
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4e:	891a      	ldrh	r2, [r3, #8]
 8001d50:	193b      	adds	r3, r7, r4
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	f003 febf 	bl	8005ad6 <USB_ReadPMA>
 8001d58:	e023      	b.n	8001da2 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2250      	movs	r2, #80	; 0x50
 8001d60:	5a9b      	ldrh	r3, [r3, r2]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	001a      	movs	r2, r3
 8001d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	18d2      	adds	r2, r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	18d3      	adds	r3, r2, r3
 8001d74:	4a79      	ldr	r2, [pc, #484]	; (8001f5c <PCD_EP_ISR_Handler+0x6d8>)
 8001d76:	4694      	mov	ip, r2
 8001d78:	4463      	add	r3, ip
 8001d7a:	881a      	ldrh	r2, [r3, #0]
 8001d7c:	2450      	movs	r4, #80	; 0x50
 8001d7e:	193b      	adds	r3, r7, r4
 8001d80:	0592      	lsls	r2, r2, #22
 8001d82:	0d92      	lsrs	r2, r2, #22
 8001d84:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001d86:	193b      	adds	r3, r7, r4
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d94:	6959      	ldr	r1, [r3, #20]
 8001d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d98:	895a      	ldrh	r2, [r3, #10]
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f003 fe9a 	bl	8005ad6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	2150      	movs	r1, #80	; 0x50
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	18d2      	adds	r2, r2, r3
 8001dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	18d2      	adds	r2, r2, r3
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <PCD_EP_ISR_Handler+0x550>
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d207      	bcs.n	8001de4 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0011      	movs	r1, r2
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f005 fc0e 	bl	80075fe <HAL_PCD_DataOutStageCallback>
 8001de2:	e006      	b.n	8001df2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dea:	0011      	movs	r1, r2
 8001dec:	0018      	movs	r0, r3
 8001dee:	f002 fbb7 	bl	8004560 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001df2:	244a      	movs	r4, #74	; 0x4a
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d100      	bne.n	8001e00 <PCD_EP_ISR_Handler+0x57c>
 8001dfe:	e133      	b.n	8002068 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e00:	204d      	movs	r0, #77	; 0x4d
 8001e02:	183b      	adds	r3, r7, r0
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	0013      	movs	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	189b      	adds	r3, r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	18d3      	adds	r3, r2, r3
 8001e14:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	183b      	adds	r3, r7, r0
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	2542      	movs	r5, #66	; 0x42
 8001e2a:	197b      	adds	r3, r7, r5
 8001e2c:	494f      	ldr	r1, [pc, #316]	; (8001f6c <PCD_EP_ISR_Handler+0x6e8>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	801a      	strh	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	001a      	movs	r2, r3
 8001e38:	183b      	adds	r3, r7, r0
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	18d3      	adds	r3, r2, r3
 8001e40:	197a      	adds	r2, r7, r5
 8001e42:	8812      	ldrh	r2, [r2, #0]
 8001e44:	494a      	ldr	r1, [pc, #296]	; (8001f70 <PCD_EP_ISR_Handler+0x6ec>)
 8001e46:	430a      	orrs	r2, r1
 8001e48:	b292      	uxth	r2, r2
 8001e4a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4e:	78db      	ldrb	r3, [r3, #3]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d000      	beq.n	8001e56 <PCD_EP_ISR_Handler+0x5d2>
 8001e54:	e0af      	b.n	8001fb6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5e:	7b1b      	ldrb	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d100      	bne.n	8001e66 <PCD_EP_ISR_Handler+0x5e2>
 8001e64:	e09f      	b.n	8001fa6 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e66:	193b      	adds	r3, r7, r4
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d046      	beq.n	8001efe <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d125      	bne.n	8001ec4 <PCD_EP_ISR_Handler+0x640>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2250      	movs	r2, #80	; 0x50
 8001e84:	5a9b      	ldrh	r3, [r3, r2]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	001a      	movs	r2, r3
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	189b      	adds	r3, r3, r2
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	00da      	lsls	r2, r3, #3
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	18d3      	adds	r3, r2, r3
 8001e9a:	4a33      	ldr	r2, [pc, #204]	; (8001f68 <PCD_EP_ISR_Handler+0x6e4>)
 8001e9c:	4694      	mov	ip, r2
 8001e9e:	4463      	add	r3, ip
 8001ea0:	623b      	str	r3, [r7, #32]
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	059b      	lsls	r3, r3, #22
 8001eaa:	0d9b      	lsrs	r3, r3, #22
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4a2d      	ldr	r2, [pc, #180]	; (8001f70 <PCD_EP_ISR_Handler+0x6ec>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	e070      	b.n	8001fa6 <PCD_EP_ISR_Handler+0x722>
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec6:	785b      	ldrb	r3, [r3, #1]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d16c      	bne.n	8001fa6 <PCD_EP_ISR_Handler+0x722>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2250      	movs	r2, #80	; 0x50
 8001ed8:	5a9b      	ldrh	r3, [r3, r2]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	001a      	movs	r2, r3
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee0:	189b      	adds	r3, r3, r2
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	00da      	lsls	r2, r3, #3
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	18d3      	adds	r3, r2, r3
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <PCD_EP_ISR_Handler+0x6e4>)
 8001ef0:	4694      	mov	ip, r2
 8001ef2:	4463      	add	r3, ip
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	2200      	movs	r2, #0
 8001efa:	801a      	strh	r2, [r3, #0]
 8001efc:	e053      	b.n	8001fa6 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f06:	785b      	ldrb	r3, [r3, #1]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d133      	bne.n	8001f74 <PCD_EP_ISR_Handler+0x6f0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2250      	movs	r2, #80	; 0x50
 8001f18:	5a9b      	ldrh	r3, [r3, r2]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f20:	189b      	adds	r3, r3, r2
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
 8001f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	00da      	lsls	r2, r3, #3
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2c:	18d3      	adds	r3, r2, r3
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <PCD_EP_ISR_Handler+0x6d8>)
 8001f30:	4694      	mov	ip, r2
 8001f32:	4463      	add	r3, ip
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
 8001f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	059b      	lsls	r3, r3, #22
 8001f3e:	0d9b      	lsrs	r3, r3, #22
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <PCD_EP_ISR_Handler+0x6ec>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	e026      	b.n	8001fa6 <PCD_EP_ISR_Handler+0x722>
 8001f58:	00000f8f 	.word	0x00000f8f
 8001f5c:	00000406 	.word	0x00000406
 8001f60:	ffff8f8f 	.word	0xffff8f8f
 8001f64:	ffff80c0 	.word	0xffff80c0
 8001f68:	00000402 	.word	0x00000402
 8001f6c:	ffff8f0f 	.word	0xffff8f0f
 8001f70:	ffff8000 	.word	0xffff8000
 8001f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f76:	785b      	ldrb	r3, [r3, #1]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d114      	bne.n	8001fa6 <PCD_EP_ISR_Handler+0x722>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2250      	movs	r2, #80	; 0x50
 8001f82:	5a9b      	ldrh	r3, [r3, r2]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	001a      	movs	r2, r3
 8001f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8a:	189b      	adds	r3, r3, r2
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	00da      	lsls	r2, r3, #3
 8001f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f96:	18d3      	adds	r3, r2, r3
 8001f98:	4a3b      	ldr	r2, [pc, #236]	; (8002088 <PCD_EP_ISR_Handler+0x804>)
 8001f9a:	4694      	mov	ip, r2
 8001f9c:	4463      	add	r3, ip
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0011      	movs	r1, r2
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f005 fb46 	bl	8007640 <HAL_PCD_DataInStageCallback>
 8001fb4:	e058      	b.n	8002068 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001fb6:	234a      	movs	r3, #74	; 0x4a
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	881a      	ldrh	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d149      	bne.n	8002058 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2250      	movs	r2, #80	; 0x50
 8001fca:	5a9b      	ldrh	r3, [r3, r2]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	001a      	movs	r2, r3
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	18d2      	adds	r2, r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	18d3      	adds	r3, r2, r3
 8001fde:	4a2b      	ldr	r2, [pc, #172]	; (800208c <PCD_EP_ISR_Handler+0x808>)
 8001fe0:	4694      	mov	ip, r2
 8001fe2:	4463      	add	r3, ip
 8001fe4:	881a      	ldrh	r2, [r3, #0]
 8001fe6:	2140      	movs	r1, #64	; 0x40
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	0592      	lsls	r2, r2, #22
 8001fec:	0d92      	lsrs	r2, r2, #22
 8001fee:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d907      	bls.n	800200c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	187b      	adds	r3, r7, r1
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	1ad2      	subs	r2, r2, r3
 8002006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002008:	619a      	str	r2, [r3, #24]
 800200a:	e002      	b.n	8002012 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d107      	bne.n	800202a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800201a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0011      	movs	r1, r2
 8002022:	0018      	movs	r0, r3
 8002024:	f005 fb0c 	bl	8007640 <HAL_PCD_DataInStageCallback>
 8002028:	e01e      	b.n	8002068 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	187b      	adds	r3, r7, r1
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	18d2      	adds	r2, r2, r3
 8002036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002038:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	187b      	adds	r3, r7, r1
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	18d2      	adds	r2, r2, r3
 8002044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002046:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800204e:	0011      	movs	r1, r2
 8002050:	0018      	movs	r0, r3
 8002052:	f002 fa85 	bl	8004560 <USB_EPStartXfer>
 8002056:	e007      	b.n	8002068 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002058:	234a      	movs	r3, #74	; 0x4a
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	881a      	ldrh	r2, [r3, #0]
 800205e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f930 	bl	80022c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2244      	movs	r2, #68	; 0x44
 800206e:	5a9b      	ldrh	r3, [r3, r2]
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21b      	sxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	da01      	bge.n	800207c <PCD_EP_ISR_Handler+0x7f8>
 8002078:	f7ff fc0a 	bl	8001890 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b016      	add	sp, #88	; 0x58
 8002084:	bdb0      	pop	{r4, r5, r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	00000406 	.word	0x00000406
 800208c:	00000402 	.word	0x00000402

08002090 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	1dbb      	adds	r3, r7, #6
 800209c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800209e:	1dbb      	adds	r3, r7, #6
 80020a0:	881a      	ldrh	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	01db      	lsls	r3, r3, #7
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_PCD_EP_DB_Receive+0x1c>
 80020aa:	e07d      	b.n	80021a8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2250      	movs	r2, #80	; 0x50
 80020b2:	5a9b      	ldrh	r3, [r3, r2]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	001a      	movs	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	18d2      	adds	r2, r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <HAL_PCD_EP_DB_Receive+0x220>)
 80020c8:	4694      	mov	ip, r2
 80020ca:	4463      	add	r3, ip
 80020cc:	881a      	ldrh	r2, [r3, #0]
 80020ce:	211a      	movs	r1, #26
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	0592      	lsls	r2, r2, #22
 80020d4:	0d92      	lsrs	r2, r2, #22
 80020d6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d307      	bcc.n	80020f4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	1ad2      	subs	r2, r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	619a      	str	r2, [r3, #24]
 80020f2:	e002      	b.n	80020fa <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d121      	bne.n	8002146 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	001a      	movs	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	18d3      	adds	r3, r2, r3
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29a      	uxth	r2, r3
 8002114:	2018      	movs	r0, #24
 8002116:	183b      	adds	r3, r7, r0
 8002118:	4966      	ldr	r1, [pc, #408]	; (80022b4 <HAL_PCD_EP_DB_Receive+0x224>)
 800211a:	400a      	ands	r2, r1
 800211c:	801a      	strh	r2, [r3, #0]
 800211e:	183b      	adds	r3, r7, r0
 8002120:	183a      	adds	r2, r7, r0
 8002122:	8812      	ldrh	r2, [r2, #0]
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	0189      	lsls	r1, r1, #6
 8002128:	404a      	eors	r2, r1
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	001a      	movs	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	18d3      	adds	r3, r2, r3
 800213a:	183a      	adds	r2, r7, r0
 800213c:	8812      	ldrh	r2, [r2, #0]
 800213e:	495e      	ldr	r1, [pc, #376]	; (80022b8 <HAL_PCD_EP_DB_Receive+0x228>)
 8002140:	430a      	orrs	r2, r1
 8002142:	b292      	uxth	r2, r2
 8002144:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002146:	1dbb      	adds	r3, r7, #6
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	2240      	movs	r2, #64	; 0x40
 800214c:	4013      	ands	r3, r2
 800214e:	d01a      	beq.n	8002186 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	001a      	movs	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	18d3      	adds	r3, r2, r3
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b29a      	uxth	r2, r3
 8002162:	2016      	movs	r0, #22
 8002164:	183b      	adds	r3, r7, r0
 8002166:	4955      	ldr	r1, [pc, #340]	; (80022bc <HAL_PCD_EP_DB_Receive+0x22c>)
 8002168:	400a      	ands	r2, r1
 800216a:	801a      	strh	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	001a      	movs	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	18d3      	adds	r3, r2, r3
 800217a:	183a      	adds	r2, r7, r0
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	4950      	ldr	r1, [pc, #320]	; (80022c0 <HAL_PCD_EP_DB_Receive+0x230>)
 8002180:	430a      	orrs	r2, r1
 8002182:	b292      	uxth	r2, r2
 8002184:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002186:	241a      	movs	r4, #26
 8002188:	193b      	adds	r3, r7, r4
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d100      	bne.n	8002192 <HAL_PCD_EP_DB_Receive+0x102>
 8002190:	e086      	b.n	80022a0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	6959      	ldr	r1, [r3, #20]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	891a      	ldrh	r2, [r3, #8]
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	f003 fc98 	bl	8005ad6 <USB_ReadPMA>
 80021a6:	e07b      	b.n	80022a0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2250      	movs	r2, #80	; 0x50
 80021ae:	5a9b      	ldrh	r3, [r3, r2]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	001a      	movs	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	18d2      	adds	r2, r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	18d3      	adds	r3, r2, r3
 80021c2:	4a40      	ldr	r2, [pc, #256]	; (80022c4 <HAL_PCD_EP_DB_Receive+0x234>)
 80021c4:	4694      	mov	ip, r2
 80021c6:	4463      	add	r3, ip
 80021c8:	881a      	ldrh	r2, [r3, #0]
 80021ca:	211a      	movs	r1, #26
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	0592      	lsls	r2, r2, #22
 80021d0:	0d92      	lsrs	r2, r2, #22
 80021d2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d307      	bcc.n	80021f0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	699a      	ldr	r2, [r3, #24]
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	1ad2      	subs	r2, r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	619a      	str	r2, [r3, #24]
 80021ee:	e002      	b.n	80021f6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d121      	bne.n	8002242 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	001a      	movs	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	18d3      	adds	r3, r2, r3
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b29a      	uxth	r2, r3
 8002210:	201e      	movs	r0, #30
 8002212:	183b      	adds	r3, r7, r0
 8002214:	4927      	ldr	r1, [pc, #156]	; (80022b4 <HAL_PCD_EP_DB_Receive+0x224>)
 8002216:	400a      	ands	r2, r1
 8002218:	801a      	strh	r2, [r3, #0]
 800221a:	183b      	adds	r3, r7, r0
 800221c:	183a      	adds	r2, r7, r0
 800221e:	8812      	ldrh	r2, [r2, #0]
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	0189      	lsls	r1, r1, #6
 8002224:	404a      	eors	r2, r1
 8002226:	801a      	strh	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	001a      	movs	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	18d3      	adds	r3, r2, r3
 8002236:	183a      	adds	r2, r7, r0
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	491f      	ldr	r1, [pc, #124]	; (80022b8 <HAL_PCD_EP_DB_Receive+0x228>)
 800223c:	430a      	orrs	r2, r1
 800223e:	b292      	uxth	r2, r2
 8002240:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002242:	1dbb      	adds	r3, r7, #6
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	4013      	ands	r3, r2
 800224a:	d11a      	bne.n	8002282 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	001a      	movs	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	18d3      	adds	r3, r2, r3
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29a      	uxth	r2, r3
 800225e:	201c      	movs	r0, #28
 8002260:	183b      	adds	r3, r7, r0
 8002262:	4916      	ldr	r1, [pc, #88]	; (80022bc <HAL_PCD_EP_DB_Receive+0x22c>)
 8002264:	400a      	ands	r2, r1
 8002266:	801a      	strh	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	001a      	movs	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	18d3      	adds	r3, r2, r3
 8002276:	183a      	adds	r2, r7, r0
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	4911      	ldr	r1, [pc, #68]	; (80022c0 <HAL_PCD_EP_DB_Receive+0x230>)
 800227c:	430a      	orrs	r2, r1
 800227e:	b292      	uxth	r2, r2
 8002280:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002282:	241a      	movs	r4, #26
 8002284:	193b      	adds	r3, r7, r4
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6959      	ldr	r1, [r3, #20]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	895a      	ldrh	r2, [r3, #10]
 8002298:	193b      	adds	r3, r7, r4
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	f003 fc1b 	bl	8005ad6 <USB_ReadPMA>
    }
  }

  return count;
 80022a0:	231a      	movs	r3, #26
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	881b      	ldrh	r3, [r3, #0]
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b009      	add	sp, #36	; 0x24
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	00000402 	.word	0x00000402
 80022b4:	ffffbf8f 	.word	0xffffbf8f
 80022b8:	ffff8080 	.word	0xffff8080
 80022bc:	ffff8f8f 	.word	0xffff8f8f
 80022c0:	ffff80c0 	.word	0xffff80c0
 80022c4:	00000406 	.word	0x00000406

080022c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0a4      	sub	sp, #144	; 0x90
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	1dbb      	adds	r3, r7, #6
 80022d4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022d6:	1dbb      	adds	r3, r7, #6
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	2240      	movs	r2, #64	; 0x40
 80022dc:	4013      	ands	r3, r2
 80022de:	d100      	bne.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x1a>
 80022e0:	e1e4      	b.n	80026ac <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2250      	movs	r2, #80	; 0x50
 80022e8:	5a9b      	ldrh	r3, [r3, r2]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	001a      	movs	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	18d2      	adds	r2, r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	18d3      	adds	r3, r2, r3
 80022fc:	4ad0      	ldr	r2, [pc, #832]	; (8002640 <HAL_PCD_EP_DB_Transmit+0x378>)
 80022fe:	4694      	mov	ip, r2
 8002300:	4463      	add	r3, ip
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	2186      	movs	r1, #134	; 0x86
 8002306:	187b      	adds	r3, r7, r1
 8002308:	0592      	lsls	r2, r2, #22
 800230a:	0d92      	lsrs	r2, r2, #22
 800230c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	187b      	adds	r3, r7, r1
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d907      	bls.n	800232a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	187b      	adds	r3, r7, r1
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	619a      	str	r2, [r3, #24]
 8002328:	e002      	b.n	8002330 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d000      	beq.n	800233a <HAL_PCD_EP_DB_Transmit+0x72>
 8002338:	e0b5      	b.n	80024a6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d125      	bne.n	800238e <HAL_PCD_EP_DB_Transmit+0xc6>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2250      	movs	r2, #80	; 0x50
 800234e:	5a9b      	ldrh	r3, [r3, r2]
 8002350:	b29b      	uxth	r3, r3
 8002352:	001a      	movs	r2, r3
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	189b      	adds	r3, r3, r2
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	00da      	lsls	r2, r3, #3
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	18d3      	adds	r3, r2, r3
 8002364:	4ab6      	ldr	r2, [pc, #728]	; (8002640 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002366:	4694      	mov	ip, r2
 8002368:	4463      	add	r3, ip
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	059b      	lsls	r3, r3, #22
 8002374:	0d9b      	lsrs	r3, r3, #22
 8002376:	b29a      	uxth	r2, r3
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	4ab0      	ldr	r2, [pc, #704]	; (8002644 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	b29a      	uxth	r2, r3
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	e01b      	b.n	80023c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d117      	bne.n	80023c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2250      	movs	r2, #80	; 0x50
 80023a2:	5a9b      	ldrh	r3, [r3, r2]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	001a      	movs	r2, r3
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	00da      	lsls	r2, r3, #3
 80023b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b6:	18d3      	adds	r3, r2, r3
 80023b8:	4aa1      	ldr	r2, [pc, #644]	; (8002640 <HAL_PCD_EP_DB_Transmit+0x378>)
 80023ba:	4694      	mov	ip, r2
 80023bc:	4463      	add	r3, ip
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	2200      	movs	r2, #0
 80023c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d125      	bne.n	8002420 <HAL_PCD_EP_DB_Transmit+0x158>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2250      	movs	r2, #80	; 0x50
 80023e0:	5a9b      	ldrh	r3, [r3, r2]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	001a      	movs	r2, r3
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	189b      	adds	r3, r3, r2
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	00da      	lsls	r2, r3, #3
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	18d3      	adds	r3, r2, r3
 80023f6:	4a94      	ldr	r2, [pc, #592]	; (8002648 <HAL_PCD_EP_DB_Transmit+0x380>)
 80023f8:	4694      	mov	ip, r2
 80023fa:	4463      	add	r3, ip
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	059b      	lsls	r3, r3, #22
 8002406:	0d9b      	lsrs	r3, r3, #22
 8002408:	b29a      	uxth	r2, r3
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	801a      	strh	r2, [r3, #0]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	4a8b      	ldr	r2, [pc, #556]	; (8002644 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	b29a      	uxth	r2, r3
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	801a      	strh	r2, [r3, #0]
 800241e:	e018      	b.n	8002452 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d114      	bne.n	8002452 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2250      	movs	r2, #80	; 0x50
 800242e:	5a9b      	ldrh	r3, [r3, r2]
 8002430:	b29b      	uxth	r3, r3
 8002432:	001a      	movs	r2, r3
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	189b      	adds	r3, r3, r2
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	00da      	lsls	r2, r3, #3
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	18d3      	adds	r3, r2, r3
 8002444:	4a80      	ldr	r2, [pc, #512]	; (8002648 <HAL_PCD_EP_DB_Transmit+0x380>)
 8002446:	4694      	mov	ip, r2
 8002448:	4463      	add	r3, ip
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	2200      	movs	r2, #0
 8002450:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	0011      	movs	r1, r2
 800245a:	0018      	movs	r0, r3
 800245c:	f005 f8f0 	bl	8007640 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	01db      	lsls	r3, r3, #7
 8002468:	4013      	ands	r3, r2
 800246a:	d100      	bne.n	800246e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800246c:	e309      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	001a      	movs	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	18d3      	adds	r3, r2, r3
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29a      	uxth	r2, r3
 8002480:	2016      	movs	r0, #22
 8002482:	183b      	adds	r3, r7, r0
 8002484:	4971      	ldr	r1, [pc, #452]	; (800264c <HAL_PCD_EP_DB_Transmit+0x384>)
 8002486:	400a      	ands	r2, r1
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	001a      	movs	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	18d3      	adds	r3, r2, r3
 8002498:	183a      	adds	r2, r7, r0
 800249a:	8812      	ldrh	r2, [r2, #0]
 800249c:	496c      	ldr	r1, [pc, #432]	; (8002650 <HAL_PCD_EP_DB_Transmit+0x388>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	b292      	uxth	r2, r2
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	e2ed      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024a6:	1dbb      	adds	r3, r7, #6
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	01db      	lsls	r3, r3, #7
 80024ae:	4013      	ands	r3, r2
 80024b0:	d01a      	beq.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	001a      	movs	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	18d3      	adds	r3, r2, r3
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	208a      	movs	r0, #138	; 0x8a
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	4960      	ldr	r1, [pc, #384]	; (800264c <HAL_PCD_EP_DB_Transmit+0x384>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	001a      	movs	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	18d3      	adds	r3, r2, r3
 80024dc:	183a      	adds	r2, r7, r0
 80024de:	8812      	ldrh	r2, [r2, #0]
 80024e0:	495b      	ldr	r1, [pc, #364]	; (8002650 <HAL_PCD_EP_DB_Transmit+0x388>)
 80024e2:	430a      	orrs	r2, r1
 80024e4:	b292      	uxth	r2, r2
 80024e6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	5c9b      	ldrb	r3, [r3, r2]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d000      	beq.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x22c>
 80024f2:	e2c6      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	2186      	movs	r1, #134	; 0x86
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	18d2      	adds	r2, r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	187b      	adds	r3, r7, r1
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	18d2      	adds	r2, r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	429a      	cmp	r2, r3
 800251c:	d30c      	bcc.n	8002538 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	218c      	movs	r1, #140	; 0x8c
 8002524:	187a      	adds	r2, r7, r1
 8002526:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	187b      	adds	r3, r7, r1
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1ad2      	subs	r2, r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	621a      	str	r2, [r3, #32]
 8002536:	e01a      	b.n	800256e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002540:	2386      	movs	r3, #134	; 0x86
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	228c      	movs	r2, #140	; 0x8c
 8002548:	18ba      	adds	r2, r7, r2
 800254a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	2100      	movs	r1, #0
 8002552:	5499      	strb	r1, [r3, r2]
 8002554:	e00b      	b.n	800256e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2224      	movs	r2, #36	; 0x24
 800255a:	2100      	movs	r1, #0
 800255c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	228c      	movs	r2, #140	; 0x8c
 8002564:	18ba      	adds	r2, r7, r2
 8002566:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d000      	beq.n	8002578 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8002576:	e06d      	b.n	8002654 <HAL_PCD_EP_DB_Transmit+0x38c>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2250      	movs	r2, #80	; 0x50
 8002584:	5a9b      	ldrh	r3, [r3, r2]
 8002586:	b29b      	uxth	r3, r3
 8002588:	001a      	movs	r2, r3
 800258a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258c:	189b      	adds	r3, r3, r2
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	00da      	lsls	r2, r3, #3
 8002596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002598:	18d3      	adds	r3, r2, r3
 800259a:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_PCD_EP_DB_Transmit+0x378>)
 800259c:	4694      	mov	ip, r2
 800259e:	4463      	add	r3, ip
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	059b      	lsls	r3, r3, #22
 80025aa:	0d9b      	lsrs	r3, r3, #22
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b0:	801a      	strh	r2, [r3, #0]
 80025b2:	228c      	movs	r2, #140	; 0x8c
 80025b4:	18bb      	adds	r3, r7, r2
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b3e      	cmp	r3, #62	; 0x3e
 80025ba:	d91a      	bls.n	80025f2 <HAL_PCD_EP_DB_Transmit+0x32a>
 80025bc:	18bb      	adds	r3, r7, r2
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025c4:	18bb      	adds	r3, r7, r2
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	221f      	movs	r2, #31
 80025ca:	4013      	ands	r3, r2
 80025cc:	d102      	bne.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x30c>
 80025ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d0:	3b01      	subs	r3, #1
 80025d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025dc:	b29b      	uxth	r3, r3
 80025de:	029b      	lsls	r3, r3, #10
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	4a17      	ldr	r2, [pc, #92]	; (8002644 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	e04f      	b.n	8002692 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80025f2:	238c      	movs	r3, #140	; 0x8c
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d108      	bne.n	800260e <HAL_PCD_EP_DB_Transmit+0x346>
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002604:	4313      	orrs	r3, r2
 8002606:	b29a      	uxth	r2, r3
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	801a      	strh	r2, [r3, #0]
 800260c:	e041      	b.n	8002692 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800260e:	228c      	movs	r2, #140	; 0x8c
 8002610:	18bb      	adds	r3, r7, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	64bb      	str	r3, [r7, #72]	; 0x48
 8002618:	18bb      	adds	r3, r7, r2
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	d002      	beq.n	8002628 <HAL_PCD_EP_DB_Transmit+0x360>
 8002622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002624:	3301      	adds	r3, #1
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29a      	uxth	r2, r3
 800262e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002630:	b29b      	uxth	r3, r3
 8002632:	029b      	lsls	r3, r3, #10
 8002634:	b29b      	uxth	r3, r3
 8002636:	4313      	orrs	r3, r2
 8002638:	b29a      	uxth	r2, r3
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	801a      	strh	r2, [r3, #0]
 800263e:	e028      	b.n	8002692 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002640:	00000402 	.word	0x00000402
 8002644:	ffff8000 	.word	0xffff8000
 8002648:	00000406 	.word	0x00000406
 800264c:	ffff8f8f 	.word	0xffff8f8f
 8002650:	ffffc080 	.word	0xffffc080
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	785b      	ldrb	r3, [r3, #1]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d11a      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	647b      	str	r3, [r7, #68]	; 0x44
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2250      	movs	r2, #80	; 0x50
 8002668:	5a9b      	ldrh	r3, [r3, r2]
 800266a:	b29b      	uxth	r3, r3
 800266c:	001a      	movs	r2, r3
 800266e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002670:	189b      	adds	r3, r3, r2
 8002672:	647b      	str	r3, [r7, #68]	; 0x44
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	00da      	lsls	r2, r3, #3
 800267a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267c:	18d3      	adds	r3, r2, r3
 800267e:	4adb      	ldr	r2, [pc, #876]	; (80029ec <HAL_PCD_EP_DB_Transmit+0x724>)
 8002680:	4694      	mov	ip, r2
 8002682:	4463      	add	r3, ip
 8002684:	643b      	str	r3, [r7, #64]	; 0x40
 8002686:	238c      	movs	r3, #140	; 0x8c
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b29a      	uxth	r2, r3
 800268e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002690:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6959      	ldr	r1, [r3, #20]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	891a      	ldrh	r2, [r3, #8]
 800269e:	238c      	movs	r3, #140	; 0x8c
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f003 f9cd 	bl	8005a44 <USB_WritePMA>
 80026aa:	e1ea      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2250      	movs	r2, #80	; 0x50
 80026b2:	5a9b      	ldrh	r3, [r3, r2]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	001a      	movs	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	18d2      	adds	r2, r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	4aca      	ldr	r2, [pc, #808]	; (80029f0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80026c8:	4694      	mov	ip, r2
 80026ca:	4463      	add	r3, ip
 80026cc:	881a      	ldrh	r2, [r3, #0]
 80026ce:	2186      	movs	r1, #134	; 0x86
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	0592      	lsls	r2, r2, #22
 80026d4:	0d92      	lsrs	r2, r2, #22
 80026d6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d307      	bcc.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	1ad2      	subs	r2, r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	619a      	str	r2, [r3, #24]
 80026f2:	e002      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d000      	beq.n	8002704 <HAL_PCD_EP_DB_Transmit+0x43c>
 8002702:	e0bb      	b.n	800287c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d125      	bne.n	8002758 <HAL_PCD_EP_DB_Transmit+0x490>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2250      	movs	r2, #80	; 0x50
 8002718:	5a9b      	ldrh	r3, [r3, r2]
 800271a:	b29b      	uxth	r3, r3
 800271c:	001a      	movs	r2, r3
 800271e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002720:	189b      	adds	r3, r3, r2
 8002722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	00da      	lsls	r2, r3, #3
 800272a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800272c:	18d3      	adds	r3, r2, r3
 800272e:	4aaf      	ldr	r2, [pc, #700]	; (80029ec <HAL_PCD_EP_DB_Transmit+0x724>)
 8002730:	4694      	mov	ip, r2
 8002732:	4463      	add	r3, ip
 8002734:	67bb      	str	r3, [r7, #120]	; 0x78
 8002736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	059b      	lsls	r3, r3, #22
 800273e:	0d9b      	lsrs	r3, r3, #22
 8002740:	b29a      	uxth	r2, r3
 8002742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002744:	801a      	strh	r2, [r3, #0]
 8002746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	4aa9      	ldr	r2, [pc, #676]	; (80029f4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800274e:	4313      	orrs	r3, r2
 8002750:	b29a      	uxth	r2, r3
 8002752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002754:	801a      	strh	r2, [r3, #0]
 8002756:	e01b      	b.n	8002790 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	785b      	ldrb	r3, [r3, #1]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d117      	bne.n	8002790 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	667b      	str	r3, [r7, #100]	; 0x64
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2250      	movs	r2, #80	; 0x50
 800276c:	5a9b      	ldrh	r3, [r3, r2]
 800276e:	b29b      	uxth	r3, r3
 8002770:	001a      	movs	r2, r3
 8002772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002774:	189b      	adds	r3, r3, r2
 8002776:	667b      	str	r3, [r7, #100]	; 0x64
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	00da      	lsls	r2, r3, #3
 800277e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002780:	18d3      	adds	r3, r2, r3
 8002782:	4a9a      	ldr	r2, [pc, #616]	; (80029ec <HAL_PCD_EP_DB_Transmit+0x724>)
 8002784:	4694      	mov	ip, r2
 8002786:	4463      	add	r3, ip
 8002788:	663b      	str	r3, [r7, #96]	; 0x60
 800278a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800278c:	2200      	movs	r2, #0
 800278e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	677b      	str	r3, [r7, #116]	; 0x74
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d12b      	bne.n	80027f6 <HAL_PCD_EP_DB_Transmit+0x52e>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2250      	movs	r2, #80	; 0x50
 80027aa:	5a9b      	ldrh	r3, [r3, r2]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	001a      	movs	r2, r3
 80027b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b2:	189b      	adds	r3, r3, r2
 80027b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	00da      	lsls	r2, r3, #3
 80027bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027be:	18d3      	adds	r3, r2, r3
 80027c0:	4a8b      	ldr	r2, [pc, #556]	; (80029f0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80027c2:	4694      	mov	ip, r2
 80027c4:	4463      	add	r3, ip
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	187a      	adds	r2, r7, r1
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	059b      	lsls	r3, r3, #22
 80027d6:	0d9b      	lsrs	r3, r3, #22
 80027d8:	b29a      	uxth	r2, r3
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4a82      	ldr	r2, [pc, #520]	; (80029f4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	801a      	strh	r2, [r3, #0]
 80027f4:	e018      	b.n	8002828 <HAL_PCD_EP_DB_Transmit+0x560>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d114      	bne.n	8002828 <HAL_PCD_EP_DB_Transmit+0x560>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2250      	movs	r2, #80	; 0x50
 8002804:	5a9b      	ldrh	r3, [r3, r2]
 8002806:	b29b      	uxth	r3, r3
 8002808:	001a      	movs	r2, r3
 800280a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800280c:	189b      	adds	r3, r3, r2
 800280e:	677b      	str	r3, [r7, #116]	; 0x74
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	00da      	lsls	r2, r3, #3
 8002816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002818:	18d3      	adds	r3, r2, r3
 800281a:	4a75      	ldr	r2, [pc, #468]	; (80029f0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800281c:	4694      	mov	ip, r2
 800281e:	4463      	add	r3, ip
 8002820:	673b      	str	r3, [r7, #112]	; 0x70
 8002822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002824:	2200      	movs	r2, #0
 8002826:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	0011      	movs	r1, r2
 8002830:	0018      	movs	r0, r3
 8002832:	f004 ff05 	bl	8007640 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002836:	1dbb      	adds	r3, r7, #6
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	01db      	lsls	r3, r3, #7
 800283e:	4013      	ands	r3, r2
 8002840:	d000      	beq.n	8002844 <HAL_PCD_EP_DB_Transmit+0x57c>
 8002842:	e11e      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	001a      	movs	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	18d3      	adds	r3, r2, r3
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29a      	uxth	r2, r3
 8002856:	2088      	movs	r0, #136	; 0x88
 8002858:	183b      	adds	r3, r7, r0
 800285a:	4967      	ldr	r1, [pc, #412]	; (80029f8 <HAL_PCD_EP_DB_Transmit+0x730>)
 800285c:	400a      	ands	r2, r1
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	001a      	movs	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	18d3      	adds	r3, r2, r3
 800286e:	183a      	adds	r2, r7, r0
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	4962      	ldr	r1, [pc, #392]	; (80029fc <HAL_PCD_EP_DB_Transmit+0x734>)
 8002874:	430a      	orrs	r2, r1
 8002876:	b292      	uxth	r2, r2
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	e102      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800287c:	1dbb      	adds	r3, r7, #6
 800287e:	881a      	ldrh	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	01db      	lsls	r3, r3, #7
 8002884:	4013      	ands	r3, r2
 8002886:	d11a      	bne.n	80028be <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	001a      	movs	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29a      	uxth	r2, r3
 800289a:	204e      	movs	r0, #78	; 0x4e
 800289c:	183b      	adds	r3, r7, r0
 800289e:	4956      	ldr	r1, [pc, #344]	; (80029f8 <HAL_PCD_EP_DB_Transmit+0x730>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	801a      	strh	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	001a      	movs	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	18d3      	adds	r3, r2, r3
 80028b2:	183a      	adds	r2, r7, r0
 80028b4:	8812      	ldrh	r2, [r2, #0]
 80028b6:	4951      	ldr	r1, [pc, #324]	; (80029fc <HAL_PCD_EP_DB_Transmit+0x734>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	b292      	uxth	r2, r2
 80028bc:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2224      	movs	r2, #36	; 0x24
 80028c2:	5c9b      	ldrb	r3, [r3, r2]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d000      	beq.n	80028ca <HAL_PCD_EP_DB_Transmit+0x602>
 80028c8:	e0db      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	2186      	movs	r1, #134	; 0x86
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	18d2      	adds	r2, r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	18d2      	adds	r2, r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d30c      	bcc.n	800290e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	218c      	movs	r1, #140	; 0x8c
 80028fa:	187a      	adds	r2, r7, r1
 80028fc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	6a1a      	ldr	r2, [r3, #32]
 8002902:	187b      	adds	r3, r7, r1
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1ad2      	subs	r2, r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	621a      	str	r2, [r3, #32]
 800290c:	e01a      	b.n	8002944 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8002916:	2386      	movs	r3, #134	; 0x86
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	228c      	movs	r2, #140	; 0x8c
 800291e:	18ba      	adds	r2, r7, r2
 8002920:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2224      	movs	r2, #36	; 0x24
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]
 800292a:	e00b      	b.n	8002944 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	228c      	movs	r2, #140	; 0x8c
 8002932:	18ba      	adds	r2, r7, r2
 8002934:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2224      	movs	r2, #36	; 0x24
 8002940:	2100      	movs	r1, #0
 8002942:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	657b      	str	r3, [r7, #84]	; 0x54
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	785b      	ldrb	r3, [r3, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d000      	beq.n	8002954 <HAL_PCD_EP_DB_Transmit+0x68c>
 8002952:	e06e      	b.n	8002a32 <HAL_PCD_EP_DB_Transmit+0x76a>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2250      	movs	r2, #80	; 0x50
 8002960:	5a9b      	ldrh	r3, [r3, r2]
 8002962:	b29b      	uxth	r3, r3
 8002964:	001a      	movs	r2, r3
 8002966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002968:	189b      	adds	r3, r3, r2
 800296a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	00da      	lsls	r2, r3, #3
 8002972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002974:	18d3      	adds	r3, r2, r3
 8002976:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002978:	4694      	mov	ip, r2
 800297a:	4463      	add	r3, ip
 800297c:	65bb      	str	r3, [r7, #88]	; 0x58
 800297e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	059b      	lsls	r3, r3, #22
 8002986:	0d9b      	lsrs	r3, r3, #22
 8002988:	b29a      	uxth	r2, r3
 800298a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	228c      	movs	r2, #140	; 0x8c
 8002990:	18bb      	adds	r3, r7, r2
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b3e      	cmp	r3, #62	; 0x3e
 8002996:	d91a      	bls.n	80029ce <HAL_PCD_EP_DB_Transmit+0x706>
 8002998:	18bb      	adds	r3, r7, r2
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	66bb      	str	r3, [r7, #104]	; 0x68
 80029a0:	18bb      	adds	r3, r7, r2
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	221f      	movs	r2, #31
 80029a6:	4013      	ands	r3, r2
 80029a8:	d102      	bne.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80029aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ac:	3b01      	subs	r3, #1
 80029ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80029b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4313      	orrs	r3, r2
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ca:	801a      	strh	r2, [r3, #0]
 80029cc:	e04d      	b.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80029ce:	238c      	movs	r3, #140	; 0x8c
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d113      	bne.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x738>
 80029d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	e03f      	b.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	00000402 	.word	0x00000402
 80029f0:	00000406 	.word	0x00000406
 80029f4:	ffff8000 	.word	0xffff8000
 80029f8:	ffff8f8f 	.word	0xffff8f8f
 80029fc:	ffffc080 	.word	0xffffc080
 8002a00:	228c      	movs	r2, #140	; 0x8c
 8002a02:	18bb      	adds	r3, r7, r2
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a0a:	18bb      	adds	r3, r7, r2
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4013      	ands	r3, r2
 8002a12:	d002      	beq.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x752>
 8002a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a16:	3301      	adds	r3, #1
 8002a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	029b      	lsls	r3, r3, #10
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a2e:	801a      	strh	r2, [r3, #0]
 8002a30:	e01b      	b.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	785b      	ldrb	r3, [r3, #1]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d117      	bne.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2250      	movs	r2, #80	; 0x50
 8002a40:	5a9b      	ldrh	r3, [r3, r2]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	001a      	movs	r2, r3
 8002a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a48:	189b      	adds	r3, r3, r2
 8002a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	00da      	lsls	r2, r3, #3
 8002a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_PCD_EP_DB_Transmit+0x814>)
 8002a58:	4694      	mov	ip, r2
 8002a5a:	4463      	add	r3, ip
 8002a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8002a5e:	238c      	movs	r3, #140	; 0x8c
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a68:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6959      	ldr	r1, [r3, #20]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	895a      	ldrh	r2, [r3, #10]
 8002a76:	238c      	movs	r3, #140	; 0x8c
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f002 ffe1 	bl	8005a44 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	001a      	movs	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	18d3      	adds	r3, r2, r3
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	2014      	movs	r0, #20
 8002a96:	183b      	adds	r3, r7, r0
 8002a98:	4911      	ldr	r1, [pc, #68]	; (8002ae0 <HAL_PCD_EP_DB_Transmit+0x818>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	801a      	strh	r2, [r3, #0]
 8002a9e:	183b      	adds	r3, r7, r0
 8002aa0:	183a      	adds	r2, r7, r0
 8002aa2:	8812      	ldrh	r2, [r2, #0]
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	404a      	eors	r2, r1
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	183b      	adds	r3, r7, r0
 8002aac:	183a      	adds	r2, r7, r0
 8002aae:	8812      	ldrh	r2, [r2, #0]
 8002ab0:	2120      	movs	r1, #32
 8002ab2:	404a      	eors	r2, r1
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	001a      	movs	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	18d3      	adds	r3, r2, r3
 8002ac4:	183a      	adds	r2, r7, r0
 8002ac6:	8812      	ldrh	r2, [r2, #0]
 8002ac8:	4906      	ldr	r1, [pc, #24]	; (8002ae4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002aca:	430a      	orrs	r2, r1
 8002acc:	b292      	uxth	r2, r2
 8002ace:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b024      	add	sp, #144	; 0x90
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	00000406 	.word	0x00000406
 8002ae0:	ffff8fbf 	.word	0xffff8fbf
 8002ae4:	ffff8080 	.word	0xffff8080

08002ae8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	0008      	movs	r0, r1
 8002af2:	0011      	movs	r1, r2
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	240a      	movs	r4, #10
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	1c02      	adds	r2, r0, #0
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	2308      	movs	r3, #8
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	1c0a      	adds	r2, r1, #0
 8002b04:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b06:	0021      	movs	r1, r4
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	4013      	ands	r3, r2
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	0013      	movs	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	18d3      	adds	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e00b      	b.n	8002b48 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b30:	230a      	movs	r3, #10
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	881a      	ldrh	r2, [r3, #0]
 8002b36:	0013      	movs	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	3369      	adds	r3, #105	; 0x69
 8002b40:	33ff      	adds	r3, #255	; 0xff
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	18d3      	adds	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b48:	2308      	movs	r3, #8
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d107      	bne.n	8002b62 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2200      	movs	r2, #0
 8002b56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	80da      	strh	r2, [r3, #6]
 8002b60:	e00b      	b.n	8002b7a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2201      	movs	r2, #1
 8002b66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b007      	add	sp, #28
 8002b82:	bd90      	pop	{r4, r7, pc}

08002b84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	23ba      	movs	r3, #186	; 0xba
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	2101      	movs	r1, #1
 8002b9a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	23b8      	movs	r3, #184	; 0xb8
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2254      	movs	r2, #84	; 0x54
 8002baa:	5a9b      	ldrh	r3, [r3, r2]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	b299      	uxth	r1, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2254      	movs	r2, #84	; 0x54
 8002bb8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2254      	movs	r2, #84	; 0x54
 8002bbe:	5a9b      	ldrh	r3, [r3, r2]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b299      	uxth	r1, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2254      	movs	r2, #84	; 0x54
 8002bcc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b004      	add	sp, #16
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	000a      	movs	r2, r1
 8002be2:	1cfb      	adds	r3, r7, #3
 8002be4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b002      	add	sp, #8
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f000 fbaf 	bl	8003362 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c04:	4bcf      	ldr	r3, [pc, #828]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	220c      	movs	r2, #12
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c0e:	4bcd      	ldr	r3, [pc, #820]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	025b      	lsls	r3, r3, #9
 8002c16:	4013      	ands	r3, r2
 8002c18:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d100      	bne.n	8002c26 <HAL_RCC_OscConfig+0x36>
 8002c24:	e07e      	b.n	8002d24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d007      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d112      	bne.n	8002c58 <HAL_RCC_OscConfig+0x68>
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	025b      	lsls	r3, r3, #9
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	4bc1      	ldr	r3, [pc, #772]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	029b      	lsls	r3, r3, #10
 8002c44:	4013      	ands	r3, r2
 8002c46:	d100      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5a>
 8002c48:	e06b      	b.n	8002d22 <HAL_RCC_OscConfig+0x132>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d167      	bne.n	8002d22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f000 fb85 	bl	8003362 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	025b      	lsls	r3, r3, #9
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0x84>
 8002c64:	4bb7      	ldr	r3, [pc, #732]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4bb6      	ldr	r3, [pc, #728]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	0249      	lsls	r1, r1, #9
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e027      	b.n	8002cc4 <HAL_RCC_OscConfig+0xd4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	23a0      	movs	r3, #160	; 0xa0
 8002c7a:	02db      	lsls	r3, r3, #11
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d10e      	bne.n	8002c9e <HAL_RCC_OscConfig+0xae>
 8002c80:	4bb0      	ldr	r3, [pc, #704]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4baf      	ldr	r3, [pc, #700]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	02c9      	lsls	r1, r1, #11
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	4bad      	ldr	r3, [pc, #692]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4bac      	ldr	r3, [pc, #688]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0249      	lsls	r1, r1, #9
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e012      	b.n	8002cc4 <HAL_RCC_OscConfig+0xd4>
 8002c9e:	4ba9      	ldr	r3, [pc, #676]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4ba8      	ldr	r3, [pc, #672]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002ca4:	49a8      	ldr	r1, [pc, #672]	; (8002f48 <HAL_RCC_OscConfig+0x358>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	4ba6      	ldr	r3, [pc, #664]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	025b      	lsls	r3, r3, #9
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4ba2      	ldr	r3, [pc, #648]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4ba1      	ldr	r3, [pc, #644]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002cbe:	49a3      	ldr	r1, [pc, #652]	; (8002f4c <HAL_RCC_OscConfig+0x35c>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fd fe9c 	bl	8000a08 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cd4:	e009      	b.n	8002cea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd6:	f7fd fe97 	bl	8000a08 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b64      	cmp	r3, #100	; 0x64
 8002ce2:	d902      	bls.n	8002cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	f000 fb3c 	bl	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cea:	4b96      	ldr	r3, [pc, #600]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	029b      	lsls	r3, r3, #10
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d0ef      	beq.n	8002cd6 <HAL_RCC_OscConfig+0xe6>
 8002cf6:	e015      	b.n	8002d24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fd fe86 	bl	8000a08 <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d02:	f7fd fe81 	bl	8000a08 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e326      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d14:	4b8b      	ldr	r3, [pc, #556]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	029b      	lsls	r3, r3, #10
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x112>
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d100      	bne.n	8002d30 <HAL_RCC_OscConfig+0x140>
 8002d2e:	e08b      	b.n	8002e48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d13e      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1d0>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d13b      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002d48:	4b7e      	ldr	r3, [pc, #504]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d004      	beq.n	8002d5c <HAL_RCC_OscConfig+0x16c>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e302      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b79      	ldr	r3, [pc, #484]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a7b      	ldr	r2, [pc, #492]	; (8002f50 <HAL_RCC_OscConfig+0x360>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	021a      	lsls	r2, r3, #8
 8002d6c:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d72:	4b74      	ldr	r3, [pc, #464]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2209      	movs	r2, #9
 8002d78:	4393      	bics	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	4b71      	ldr	r3, [pc, #452]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d84:	f000 fc40 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8002d88:	0001      	movs	r1, r0
 8002d8a:	4b6e      	ldr	r3, [pc, #440]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	220f      	movs	r2, #15
 8002d92:	4013      	ands	r3, r2
 8002d94:	4a6f      	ldr	r2, [pc, #444]	; (8002f54 <HAL_RCC_OscConfig+0x364>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	000a      	movs	r2, r1
 8002d9a:	40da      	lsrs	r2, r3
 8002d9c:	4b6e      	ldr	r3, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x368>)
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002da0:	4b6e      	ldr	r3, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x36c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2513      	movs	r5, #19
 8002da6:	197c      	adds	r4, r7, r5
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7fd fde7 	bl	800097c <HAL_InitTick>
 8002dae:	0003      	movs	r3, r0
 8002db0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002db2:	197b      	adds	r3, r7, r5
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d046      	beq.n	8002e48 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002dba:	197b      	adds	r3, r7, r5
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	e2d0      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d027      	beq.n	8002e16 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2209      	movs	r2, #9
 8002dcc:	4393      	bics	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fd fe16 	bl	8000a08 <HAL_GetTick>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de2:	f7fd fe11 	bl	8000a08 <HAL_GetTick>
 8002de6:	0002      	movs	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e2b6      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d0f1      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <HAL_RCC_OscConfig+0x360>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	021a      	lsls	r2, r3, #8
 8002e0e:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	e018      	b.n	8002e48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e16:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	438a      	bics	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fd fdf1 	bl	8000a08 <HAL_GetTick>
 8002e26:	0003      	movs	r3, r0
 8002e28:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7fd fdec 	bl	8000a08 <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e291      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2204      	movs	r2, #4
 8002e44:	4013      	ands	r3, r2
 8002e46:	d1f1      	bne.n	8002e2c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d100      	bne.n	8002e54 <HAL_RCC_OscConfig+0x264>
 8002e52:	e0a1      	b.n	8002f98 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d140      	bne.n	8002edc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e5a:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4013      	ands	r3, r2
 8002e64:	d005      	beq.n	8002e72 <HAL_RCC_OscConfig+0x282>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e277      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <HAL_RCC_OscConfig+0x370>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e80:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e86:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	0a19      	lsrs	r1, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	061a      	lsls	r2, r3, #24
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	0b5b      	lsrs	r3, r3, #13
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	0212      	lsls	r2, r2, #8
 8002ea6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ea8:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	210f      	movs	r1, #15
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	4928      	ldr	r1, [pc, #160]	; (8002f54 <HAL_RCC_OscConfig+0x364>)
 8002eb4:	5ccb      	ldrb	r3, [r1, r3]
 8002eb6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x368>)
 8002eba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002ebc:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x36c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2513      	movs	r5, #19
 8002ec2:	197c      	adds	r4, r7, r5
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7fd fd59 	bl	800097c <HAL_InitTick>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002ece:	197b      	adds	r3, r7, r5
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d060      	beq.n	8002f98 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002ed6:	197b      	adds	r3, r7, r5
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	e242      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d03f      	beq.n	8002f64 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ee4:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	0049      	lsls	r1, r1, #1
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fd fd89 	bl	8000a08 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002efc:	f7fd fd84 	bl	8000a08 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e229      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4013      	ands	r3, r2
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <HAL_RCC_OscConfig+0x370>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	0a19      	lsrs	r1, r3, #8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	061a      	lsls	r2, r3, #24
 8002f3c:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <HAL_RCC_OscConfig+0x354>)
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e029      	b.n	8002f98 <HAL_RCC_OscConfig+0x3a8>
 8002f44:	40021000 	.word	0x40021000
 8002f48:	fffeffff 	.word	0xfffeffff
 8002f4c:	fffbffff 	.word	0xfffbffff
 8002f50:	ffffe0ff 	.word	0xffffe0ff
 8002f54:	08007c90 	.word	0x08007c90
 8002f58:	200000a4 	.word	0x200000a4
 8002f5c:	200000a8 	.word	0x200000a8
 8002f60:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f64:	4bbd      	ldr	r3, [pc, #756]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4bbc      	ldr	r3, [pc, #752]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8002f6a:	49bd      	ldr	r1, [pc, #756]	; (8003260 <HAL_RCC_OscConfig+0x670>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fd fd4a 	bl	8000a08 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7a:	f7fd fd45 	bl	8000a08 <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e1ea      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f8c:	4bb3      	ldr	r3, [pc, #716]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4013      	ands	r3, r2
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d036      	beq.n	8003010 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d019      	beq.n	8002fde <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002faa:	4bac      	ldr	r3, [pc, #688]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8002fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fae:	4bab      	ldr	r3, [pc, #684]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fd fd27 	bl	8000a08 <HAL_GetTick>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fd fd22 	bl	8000a08 <HAL_GetTick>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e1c7      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fd2:	4ba2      	ldr	r3, [pc, #648]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d0f1      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x3d0>
 8002fdc:	e018      	b.n	8003010 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fde:	4b9f      	ldr	r3, [pc, #636]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8002fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fe2:	4b9e      	ldr	r3, [pc, #632]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fd fd0d 	bl	8000a08 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fd fd08 	bl	8000a08 <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1ad      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003006:	4b95      	ldr	r3, [pc, #596]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d1f1      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2204      	movs	r2, #4
 8003016:	4013      	ands	r3, r2
 8003018:	d100      	bne.n	800301c <HAL_RCC_OscConfig+0x42c>
 800301a:	e0ae      	b.n	800317a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301c:	2027      	movs	r0, #39	; 0x27
 800301e:	183b      	adds	r3, r7, r0
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003024:	4b8d      	ldr	r3, [pc, #564]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	055b      	lsls	r3, r3, #21
 800302c:	4013      	ands	r3, r2
 800302e:	d109      	bne.n	8003044 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	4b8a      	ldr	r3, [pc, #552]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003034:	4b89      	ldr	r3, [pc, #548]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	0549      	lsls	r1, r1, #21
 800303a:	430a      	orrs	r2, r1
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800303e:	183b      	adds	r3, r7, r0
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	4b87      	ldr	r3, [pc, #540]	; (8003264 <HAL_RCC_OscConfig+0x674>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4013      	ands	r3, r2
 800304e:	d11a      	bne.n	8003086 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003050:	4b84      	ldr	r3, [pc, #528]	; (8003264 <HAL_RCC_OscConfig+0x674>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b83      	ldr	r3, [pc, #524]	; (8003264 <HAL_RCC_OscConfig+0x674>)
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	0049      	lsls	r1, r1, #1
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305e:	f7fd fcd3 	bl	8000a08 <HAL_GetTick>
 8003062:	0003      	movs	r3, r0
 8003064:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003068:	f7fd fcce 	bl	8000a08 <HAL_GetTick>
 800306c:	0002      	movs	r2, r0
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e173      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307a:	4b7a      	ldr	r3, [pc, #488]	; (8003264 <HAL_RCC_OscConfig+0x674>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4013      	ands	r3, r2
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	429a      	cmp	r2, r3
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_OscConfig+0x4b2>
 8003092:	4b72      	ldr	r3, [pc, #456]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003096:	4b71      	ldr	r3, [pc, #452]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003098:	2180      	movs	r1, #128	; 0x80
 800309a:	0049      	lsls	r1, r1, #1
 800309c:	430a      	orrs	r2, r1
 800309e:	651a      	str	r2, [r3, #80]	; 0x50
 80030a0:	e031      	b.n	8003106 <HAL_RCC_OscConfig+0x516>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4d4>
 80030aa:	4b6c      	ldr	r3, [pc, #432]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030ae:	4b6b      	ldr	r3, [pc, #428]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030b0:	496b      	ldr	r1, [pc, #428]	; (8003260 <HAL_RCC_OscConfig+0x670>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	651a      	str	r2, [r3, #80]	; 0x50
 80030b6:	4b69      	ldr	r3, [pc, #420]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030ba:	4b68      	ldr	r3, [pc, #416]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030bc:	496a      	ldr	r1, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x678>)
 80030be:	400a      	ands	r2, r1
 80030c0:	651a      	str	r2, [r3, #80]	; 0x50
 80030c2:	e020      	b.n	8003106 <HAL_RCC_OscConfig+0x516>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	23a0      	movs	r3, #160	; 0xa0
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10e      	bne.n	80030ee <HAL_RCC_OscConfig+0x4fe>
 80030d0:	4b62      	ldr	r3, [pc, #392]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030d4:	4b61      	ldr	r3, [pc, #388]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	00c9      	lsls	r1, r1, #3
 80030da:	430a      	orrs	r2, r1
 80030dc:	651a      	str	r2, [r3, #80]	; 0x50
 80030de:	4b5f      	ldr	r3, [pc, #380]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030e2:	4b5e      	ldr	r3, [pc, #376]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	0049      	lsls	r1, r1, #1
 80030e8:	430a      	orrs	r2, r1
 80030ea:	651a      	str	r2, [r3, #80]	; 0x50
 80030ec:	e00b      	b.n	8003106 <HAL_RCC_OscConfig+0x516>
 80030ee:	4b5b      	ldr	r3, [pc, #364]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f2:	4b5a      	ldr	r3, [pc, #360]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030f4:	495a      	ldr	r1, [pc, #360]	; (8003260 <HAL_RCC_OscConfig+0x670>)
 80030f6:	400a      	ands	r2, r1
 80030f8:	651a      	str	r2, [r3, #80]	; 0x50
 80030fa:	4b58      	ldr	r3, [pc, #352]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80030fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030fe:	4b57      	ldr	r3, [pc, #348]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003100:	4959      	ldr	r1, [pc, #356]	; (8003268 <HAL_RCC_OscConfig+0x678>)
 8003102:	400a      	ands	r2, r1
 8003104:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d015      	beq.n	800313a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7fd fc7b 	bl	8000a08 <HAL_GetTick>
 8003112:	0003      	movs	r3, r0
 8003114:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003116:	e009      	b.n	800312c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fd fc76 	bl	8000a08 <HAL_GetTick>
 800311c:	0002      	movs	r2, r0
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_RCC_OscConfig+0x67c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e11a      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 800312e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4013      	ands	r3, r2
 8003136:	d0ef      	beq.n	8003118 <HAL_RCC_OscConfig+0x528>
 8003138:	e014      	b.n	8003164 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7fd fc65 	bl	8000a08 <HAL_GetTick>
 800313e:	0003      	movs	r3, r0
 8003140:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003142:	e009      	b.n	8003158 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7fd fc60 	bl	8000a08 <HAL_GetTick>
 8003148:	0002      	movs	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	4a47      	ldr	r2, [pc, #284]	; (800326c <HAL_RCC_OscConfig+0x67c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e104      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 800315a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4013      	ands	r3, r2
 8003162:	d1ef      	bne.n	8003144 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003164:	2327      	movs	r3, #39	; 0x27
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d105      	bne.n	800317a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003172:	4b3a      	ldr	r3, [pc, #232]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003174:	493e      	ldr	r1, [pc, #248]	; (8003270 <HAL_RCC_OscConfig+0x680>)
 8003176:	400a      	ands	r2, r1
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2220      	movs	r2, #32
 8003180:	4013      	ands	r3, r2
 8003182:	d049      	beq.n	8003218 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d026      	beq.n	80031da <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800318c:	4b33      	ldr	r3, [pc, #204]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	4b32      	ldr	r3, [pc, #200]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003192:	2101      	movs	r1, #1
 8003194:	430a      	orrs	r2, r1
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	4b30      	ldr	r3, [pc, #192]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 800319a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319c:	4b2f      	ldr	r3, [pc, #188]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 800319e:	2101      	movs	r1, #1
 80031a0:	430a      	orrs	r2, r1
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34
 80031a4:	4b33      	ldr	r3, [pc, #204]	; (8003274 <HAL_RCC_OscConfig+0x684>)
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	4b32      	ldr	r3, [pc, #200]	; (8003274 <HAL_RCC_OscConfig+0x684>)
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	0189      	lsls	r1, r1, #6
 80031ae:	430a      	orrs	r2, r1
 80031b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fd fc29 	bl	8000a08 <HAL_GetTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031bc:	f7fd fc24 	bl	8000a08 <HAL_GetTick>
 80031c0:	0002      	movs	r2, r0
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0c9      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2202      	movs	r2, #2
 80031d4:	4013      	ands	r3, r2
 80031d6:	d0f1      	beq.n	80031bc <HAL_RCC_OscConfig+0x5cc>
 80031d8:	e01e      	b.n	8003218 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 80031e0:	2101      	movs	r1, #1
 80031e2:	438a      	bics	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_RCC_OscConfig+0x684>)
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <HAL_RCC_OscConfig+0x684>)
 80031ec:	4922      	ldr	r1, [pc, #136]	; (8003278 <HAL_RCC_OscConfig+0x688>)
 80031ee:	400a      	ands	r2, r1
 80031f0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fd fc09 	bl	8000a08 <HAL_GetTick>
 80031f6:	0003      	movs	r3, r0
 80031f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031fc:	f7fd fc04 	bl	8000a08 <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0a9      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2202      	movs	r2, #2
 8003214:	4013      	ands	r3, r2
 8003216:	d1f1      	bne.n	80031fc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d100      	bne.n	8003222 <HAL_RCC_OscConfig+0x632>
 8003220:	e09e      	b.n	8003360 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d100      	bne.n	800322a <HAL_RCC_OscConfig+0x63a>
 8003228:	e077      	b.n	800331a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	2b02      	cmp	r3, #2
 8003230:	d158      	bne.n	80032e4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_OscConfig+0x66c>)
 8003238:	4910      	ldr	r1, [pc, #64]	; (800327c <HAL_RCC_OscConfig+0x68c>)
 800323a:	400a      	ands	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fd fbe3 	bl	8000a08 <HAL_GetTick>
 8003242:	0003      	movs	r3, r0
 8003244:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003246:	e01b      	b.n	8003280 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fd fbde 	bl	8000a08 <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d914      	bls.n	8003280 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e083      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	40021000 	.word	0x40021000
 8003260:	fffffeff 	.word	0xfffffeff
 8003264:	40007000 	.word	0x40007000
 8003268:	fffffbff 	.word	0xfffffbff
 800326c:	00001388 	.word	0x00001388
 8003270:	efffffff 	.word	0xefffffff
 8003274:	40010000 	.word	0x40010000
 8003278:	ffffdfff 	.word	0xffffdfff
 800327c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003280:	4b3a      	ldr	r3, [pc, #232]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	049b      	lsls	r3, r3, #18
 8003288:	4013      	ands	r3, r2
 800328a:	d1dd      	bne.n	8003248 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328c:	4b37      	ldr	r3, [pc, #220]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a37      	ldr	r2, [pc, #220]	; (8003370 <HAL_RCC_OscConfig+0x780>)
 8003292:	4013      	ands	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	431a      	orrs	r2, r3
 80032a6:	4b31      	ldr	r3, [pc, #196]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 80032a8:	430a      	orrs	r2, r1
 80032aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ac:	4b2f      	ldr	r3, [pc, #188]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b2e      	ldr	r3, [pc, #184]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	0449      	lsls	r1, r1, #17
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fd fba5 	bl	8000a08 <HAL_GetTick>
 80032be:	0003      	movs	r3, r0
 80032c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fd fba0 	bl	8000a08 <HAL_GetTick>
 80032c8:	0002      	movs	r2, r0
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e045      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032d6:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	049b      	lsls	r3, r3, #18
 80032de:	4013      	ands	r3, r2
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x6d4>
 80032e2:	e03d      	b.n	8003360 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e4:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 80032ea:	4922      	ldr	r1, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0x784>)
 80032ec:	400a      	ands	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fd fb8a 	bl	8000a08 <HAL_GetTick>
 80032f4:	0003      	movs	r3, r0
 80032f6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fd fb85 	bl	8000a08 <HAL_GetTick>
 80032fe:	0002      	movs	r2, r0
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e02a      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	049b      	lsls	r3, r3, #18
 8003314:	4013      	ands	r3, r2
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x70a>
 8003318:	e022      	b.n	8003360 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e01d      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	025b      	lsls	r3, r3, #9
 8003332:	401a      	ands	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	429a      	cmp	r2, r3
 800333a:	d10f      	bne.n	800335c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	23f0      	movs	r3, #240	; 0xf0
 8003340:	039b      	lsls	r3, r3, #14
 8003342:	401a      	ands	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	041b      	lsls	r3, r3, #16
 8003352:	401a      	ands	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b00a      	add	sp, #40	; 0x28
 8003368:	bdb0      	pop	{r4, r5, r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	40021000 	.word	0x40021000
 8003370:	ff02ffff 	.word	0xff02ffff
 8003374:	feffffff 	.word	0xfeffffff

08003378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e128      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800338c:	4b96      	ldr	r3, [pc, #600]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d91e      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b93      	ldr	r3, [pc, #588]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	4393      	bics	r3, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	4b90      	ldr	r3, [pc, #576]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033ac:	f7fd fb2c 	bl	8000a08 <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b4:	e009      	b.n	80033ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b6:	f7fd fb27 	bl	8000a08 <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	4a8a      	ldr	r2, [pc, #552]	; (80035ec <HAL_RCC_ClockConfig+0x274>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e109      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b87      	ldr	r3, [pc, #540]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4013      	ands	r3, r2
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2202      	movs	r2, #2
 80033de:	4013      	ands	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e2:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	22f0      	movs	r2, #240	; 0xf0
 80033e8:	4393      	bics	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	d100      	bne.n	8003402 <HAL_RCC_ClockConfig+0x8a>
 8003400:	e089      	b.n	8003516 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800340a:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	4013      	ands	r3, r2
 8003414:	d120      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0e1      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b03      	cmp	r3, #3
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003422:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	049b      	lsls	r3, r3, #18
 800342a:	4013      	ands	r3, r2
 800342c:	d114      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0d5      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d106      	bne.n	8003448 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800343a:	4b6d      	ldr	r3, [pc, #436]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2204      	movs	r2, #4
 8003440:	4013      	ands	r3, r2
 8003442:	d109      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0ca      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003448:	4b69      	ldr	r3, [pc, #420]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4013      	ands	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0c2      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003458:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2203      	movs	r2, #3
 800345e:	4393      	bics	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346c:	f7fd facc 	bl	8000a08 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d111      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800347c:	e009      	b.n	8003492 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f7fd fac3 	bl	8000a08 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	4a58      	ldr	r2, [pc, #352]	; (80035ec <HAL_RCC_ClockConfig+0x274>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0a5      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003492:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	220c      	movs	r2, #12
 8003498:	4013      	ands	r3, r2
 800349a:	2b08      	cmp	r3, #8
 800349c:	d1ef      	bne.n	800347e <HAL_RCC_ClockConfig+0x106>
 800349e:	e03a      	b.n	8003516 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d111      	bne.n	80034cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a8:	e009      	b.n	80034be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034aa:	f7fd faad 	bl	8000a08 <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	4a4d      	ldr	r2, [pc, #308]	; (80035ec <HAL_RCC_ClockConfig+0x274>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e08f      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034be:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	220c      	movs	r2, #12
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d1ef      	bne.n	80034aa <HAL_RCC_ClockConfig+0x132>
 80034ca:	e024      	b.n	8003516 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d11b      	bne.n	800350c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034d4:	e009      	b.n	80034ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d6:	f7fd fa97 	bl	8000a08 <HAL_GetTick>
 80034da:	0002      	movs	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	4a42      	ldr	r2, [pc, #264]	; (80035ec <HAL_RCC_ClockConfig+0x274>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e079      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ea:	4b41      	ldr	r3, [pc, #260]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	220c      	movs	r2, #12
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d1ef      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x15e>
 80034f6:	e00e      	b.n	8003516 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fd fa86 	bl	8000a08 <HAL_GetTick>
 80034fc:	0002      	movs	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	4a3a      	ldr	r2, [pc, #232]	; (80035ec <HAL_RCC_ClockConfig+0x274>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e068      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800350c:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	220c      	movs	r2, #12
 8003512:	4013      	ands	r3, r2
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003516:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2201      	movs	r2, #1
 800351c:	4013      	ands	r3, r2
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d21e      	bcs.n	8003562 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2201      	movs	r2, #1
 800352a:	4393      	bics	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003536:	f7fd fa67 	bl	8000a08 <HAL_GetTick>
 800353a:	0003      	movs	r3, r0
 800353c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	e009      	b.n	8003554 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fd fa62 	bl	8000a08 <HAL_GetTick>
 8003544:	0002      	movs	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	4a28      	ldr	r2, [pc, #160]	; (80035ec <HAL_RCC_ClockConfig+0x274>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e044      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d1ee      	bne.n	8003540 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2204      	movs	r2, #4
 8003568:	4013      	ands	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a20      	ldr	r2, [pc, #128]	; (80035f4 <HAL_RCC_ClockConfig+0x27c>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800357c:	430a      	orrs	r2, r1
 800357e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2208      	movs	r2, #8
 8003586:	4013      	ands	r3, r2
 8003588:	d00a      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4a1a      	ldr	r2, [pc, #104]	; (80035f8 <HAL_RCC_ClockConfig+0x280>)
 8003590:	4013      	ands	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	00da      	lsls	r2, r3, #3
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a0:	f000 f832 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 80035a4:	0001      	movs	r1, r0
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_ClockConfig+0x278>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	220f      	movs	r2, #15
 80035ae:	4013      	ands	r3, r2
 80035b0:	4a12      	ldr	r2, [pc, #72]	; (80035fc <HAL_RCC_ClockConfig+0x284>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	000a      	movs	r2, r1
 80035b6:	40da      	lsrs	r2, r3
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_RCC_ClockConfig+0x288>)
 80035ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_RCC_ClockConfig+0x28c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	250b      	movs	r5, #11
 80035c2:	197c      	adds	r4, r7, r5
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fd f9d9 	bl	800097c <HAL_InitTick>
 80035ca:	0003      	movs	r3, r0
 80035cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80035ce:	197b      	adds	r3, r7, r5
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80035d6:	197b      	adds	r3, r7, r5
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	e000      	b.n	80035de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bdb0      	pop	{r4, r5, r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	40022000 	.word	0x40022000
 80035ec:	00001388 	.word	0x00001388
 80035f0:	40021000 	.word	0x40021000
 80035f4:	fffff8ff 	.word	0xfffff8ff
 80035f8:	ffffc7ff 	.word	0xffffc7ff
 80035fc:	08007c90 	.word	0x08007c90
 8003600:	200000a4 	.word	0x200000a4
 8003604:	200000a8 	.word	0x200000a8

08003608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b08e      	sub	sp, #56	; 0x38
 800360c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800360e:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003616:	230c      	movs	r3, #12
 8003618:	4013      	ands	r3, r2
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d014      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x40>
 800361e:	d900      	bls.n	8003622 <HAL_RCC_GetSysClockFreq+0x1a>
 8003620:	e07b      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x112>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d002      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x24>
 8003626:	2b08      	cmp	r3, #8
 8003628:	d00b      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0x3a>
 800362a:	e076      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800362c:	4b44      	ldr	r3, [pc, #272]	; (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2210      	movs	r2, #16
 8003632:	4013      	ands	r3, r2
 8003634:	d002      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003636:	4b43      	ldr	r3, [pc, #268]	; (8003744 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800363a:	e07c      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800363c:	4b42      	ldr	r3, [pc, #264]	; (8003748 <HAL_RCC_GetSysClockFreq+0x140>)
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003640:	e079      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003642:	4b42      	ldr	r3, [pc, #264]	; (800374c <HAL_RCC_GetSysClockFreq+0x144>)
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003646:	e076      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	0c9a      	lsrs	r2, r3, #18
 800364c:	230f      	movs	r3, #15
 800364e:	401a      	ands	r2, r3
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCC_GetSysClockFreq+0x148>)
 8003652:	5c9b      	ldrb	r3, [r3, r2]
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	0d9a      	lsrs	r2, r3, #22
 800365a:	2303      	movs	r3, #3
 800365c:	4013      	ands	r3, r2
 800365e:	3301      	adds	r3, #1
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	025b      	lsls	r3, r3, #9
 800366a:	4013      	ands	r3, r2
 800366c:	d01a      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	4a35      	ldr	r2, [pc, #212]	; (800374c <HAL_RCC_GetSysClockFreq+0x144>)
 8003678:	2300      	movs	r3, #0
 800367a:	69b8      	ldr	r0, [r7, #24]
 800367c:	69f9      	ldr	r1, [r7, #28]
 800367e:	f7fc fdef 	bl	8000260 <__aeabi_lmul>
 8003682:	0002      	movs	r2, r0
 8003684:	000b      	movs	r3, r1
 8003686:	0010      	movs	r0, r2
 8003688:	0019      	movs	r1, r3
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f7fc fdc3 	bl	8000220 <__aeabi_uldivmod>
 800369a:	0002      	movs	r2, r0
 800369c:	000b      	movs	r3, r1
 800369e:	0013      	movs	r3, r2
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
 80036a2:	e037      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036a4:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2210      	movs	r2, #16
 80036aa:	4013      	ands	r3, r2
 80036ac:	d01a      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4a23      	ldr	r2, [pc, #140]	; (8003744 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036b8:	2300      	movs	r3, #0
 80036ba:	68b8      	ldr	r0, [r7, #8]
 80036bc:	68f9      	ldr	r1, [r7, #12]
 80036be:	f7fc fdcf 	bl	8000260 <__aeabi_lmul>
 80036c2:	0002      	movs	r2, r0
 80036c4:	000b      	movs	r3, r1
 80036c6:	0010      	movs	r0, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f7fc fda3 	bl	8000220 <__aeabi_uldivmod>
 80036da:	0002      	movs	r2, r0
 80036dc:	000b      	movs	r3, r1
 80036de:	0013      	movs	r3, r2
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
 80036e2:	e017      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	0018      	movs	r0, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	0019      	movs	r1, r3
 80036ec:	4a16      	ldr	r2, [pc, #88]	; (8003748 <HAL_RCC_GetSysClockFreq+0x140>)
 80036ee:	2300      	movs	r3, #0
 80036f0:	f7fc fdb6 	bl	8000260 <__aeabi_lmul>
 80036f4:	0002      	movs	r2, r0
 80036f6:	000b      	movs	r3, r1
 80036f8:	0010      	movs	r0, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	001c      	movs	r4, r3
 8003700:	2300      	movs	r3, #0
 8003702:	001d      	movs	r5, r3
 8003704:	0022      	movs	r2, r4
 8003706:	002b      	movs	r3, r5
 8003708:	f7fc fd8a 	bl	8000220 <__aeabi_uldivmod>
 800370c:	0002      	movs	r2, r0
 800370e:	000b      	movs	r3, r1
 8003710:	0013      	movs	r3, r2
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003718:	e00d      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_GetSysClockFreq+0x138>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	0b5b      	lsrs	r3, r3, #13
 8003720:	2207      	movs	r2, #7
 8003722:	4013      	ands	r3, r2
 8003724:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	3301      	adds	r3, #1
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	0212      	lsls	r2, r2, #8
 800372e:	409a      	lsls	r2, r3
 8003730:	0013      	movs	r3, r2
 8003732:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003734:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b00e      	add	sp, #56	; 0x38
 800373e:	bdb0      	pop	{r4, r5, r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	003d0900 	.word	0x003d0900
 8003748:	00f42400 	.word	0x00f42400
 800374c:	007a1200 	.word	0x007a1200
 8003750:	08007ca0 	.word	0x08007ca0

08003754 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800375c:	2017      	movs	r0, #23
 800375e:	183b      	adds	r3, r7, r0
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2220      	movs	r2, #32
 800376a:	4013      	ands	r3, r2
 800376c:	d100      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800376e:	e0c7      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003770:	4b93      	ldr	r3, [pc, #588]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	055b      	lsls	r3, r3, #21
 8003778:	4013      	ands	r3, r2
 800377a:	d109      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	4b90      	ldr	r3, [pc, #576]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800377e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003780:	4b8f      	ldr	r3, [pc, #572]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	0549      	lsls	r1, r1, #21
 8003786:	430a      	orrs	r2, r1
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800378a:	183b      	adds	r3, r7, r0
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	4b8c      	ldr	r3, [pc, #560]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4013      	ands	r3, r2
 800379a:	d11a      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379c:	4b89      	ldr	r3, [pc, #548]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	0049      	lsls	r1, r1, #1
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037aa:	f7fd f92d 	bl	8000a08 <HAL_GetTick>
 80037ae:	0003      	movs	r3, r0
 80037b0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	e008      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b4:	f7fd f928 	bl	8000a08 <HAL_GetTick>
 80037b8:	0002      	movs	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0f7      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c6:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4013      	ands	r3, r2
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80037d2:	4b7b      	ldr	r3, [pc, #492]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	23c0      	movs	r3, #192	; 0xc0
 80037d8:	039b      	lsls	r3, r3, #14
 80037da:	4013      	ands	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	23c0      	movs	r3, #192	; 0xc0
 80037e4:	039b      	lsls	r3, r3, #14
 80037e6:	4013      	ands	r3, r2
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d013      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	23c0      	movs	r3, #192	; 0xc0
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	401a      	ands	r2, r3
 80037f8:	23c0      	movs	r3, #192	; 0xc0
 80037fa:	029b      	lsls	r3, r3, #10
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d10a      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003800:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	029b      	lsls	r3, r3, #10
 8003808:	401a      	ands	r2, r3
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	029b      	lsls	r3, r3, #10
 800380e:	429a      	cmp	r2, r3
 8003810:	d101      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0cf      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003816:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800381a:	23c0      	movs	r3, #192	; 0xc0
 800381c:	029b      	lsls	r3, r3, #10
 800381e:	4013      	ands	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d03b      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	23c0      	movs	r3, #192	; 0xc0
 800382e:	029b      	lsls	r3, r3, #10
 8003830:	4013      	ands	r3, r2
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	429a      	cmp	r2, r3
 8003836:	d033      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2220      	movs	r2, #32
 800383e:	4013      	ands	r3, r2
 8003840:	d02e      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003842:	4b5f      	ldr	r3, [pc, #380]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003846:	4a60      	ldr	r2, [pc, #384]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003848:	4013      	ands	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800384c:	4b5c      	ldr	r3, [pc, #368]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800384e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003850:	4b5b      	ldr	r3, [pc, #364]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003852:	2180      	movs	r1, #128	; 0x80
 8003854:	0309      	lsls	r1, r1, #12
 8003856:	430a      	orrs	r2, r1
 8003858:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800385a:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800385c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800385e:	4b58      	ldr	r3, [pc, #352]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003860:	495a      	ldr	r1, [pc, #360]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003862:	400a      	ands	r2, r1
 8003864:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003866:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4013      	ands	r3, r2
 8003874:	d014      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fd f8c7 	bl	8000a08 <HAL_GetTick>
 800387a:	0003      	movs	r3, r0
 800387c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800387e:	e009      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003880:	f7fd f8c2 	bl	8000a08 <HAL_GetTick>
 8003884:	0002      	movs	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	4a51      	ldr	r2, [pc, #324]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e090      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003894:	4b4a      	ldr	r3, [pc, #296]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4013      	ands	r3, r2
 800389e:	d0ef      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2220      	movs	r2, #32
 80038a6:	4013      	ands	r3, r2
 80038a8:	d01f      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	23c0      	movs	r3, #192	; 0xc0
 80038b0:	029b      	lsls	r3, r3, #10
 80038b2:	401a      	ands	r2, r3
 80038b4:	23c0      	movs	r3, #192	; 0xc0
 80038b6:	029b      	lsls	r3, r3, #10
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80038bc:	4b40      	ldr	r3, [pc, #256]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a44      	ldr	r2, [pc, #272]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	23c0      	movs	r3, #192	; 0xc0
 80038cc:	039b      	lsls	r3, r3, #14
 80038ce:	401a      	ands	r2, r3
 80038d0:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	4b3a      	ldr	r3, [pc, #232]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	23c0      	movs	r3, #192	; 0xc0
 80038e0:	029b      	lsls	r3, r3, #10
 80038e2:	401a      	ands	r2, r3
 80038e4:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038e6:	430a      	orrs	r2, r1
 80038e8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ea:	2317      	movs	r3, #23
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f4:	4b32      	ldr	r3, [pc, #200]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f8:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038fa:	4937      	ldr	r1, [pc, #220]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	2203      	movs	r2, #3
 8003910:	4393      	bics	r3, r2
 8003912:	0019      	movs	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800391a:	430a      	orrs	r2, r1
 800391c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2202      	movs	r2, #2
 8003924:	4013      	ands	r3, r2
 8003926:	d009      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800392a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392c:	220c      	movs	r2, #12
 800392e:	4393      	bics	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003938:	430a      	orrs	r2, r1
 800393a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2204      	movs	r2, #4
 8003942:	4013      	ands	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003946:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	4a24      	ldr	r2, [pc, #144]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800394c:	4013      	ands	r3, r2
 800394e:	0019      	movs	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003956:	430a      	orrs	r2, r1
 8003958:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2208      	movs	r2, #8
 8003960:	4013      	ands	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800396a:	4013      	ands	r3, r2
 800396c:	0019      	movs	r1, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003974:	430a      	orrs	r2, r1
 8003976:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	4013      	ands	r3, r2
 8003980:	d009      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003988:	4013      	ands	r3, r2
 800398a:	0019      	movs	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003992:	430a      	orrs	r2, r1
 8003994:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	4013      	ands	r3, r2
 800399e:	d009      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a4:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80039b0:	430a      	orrs	r2, r1
 80039b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b006      	add	sp, #24
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40007000 	.word	0x40007000
 80039c8:	fffcffff 	.word	0xfffcffff
 80039cc:	fff7ffff 	.word	0xfff7ffff
 80039d0:	00001388 	.word	0x00001388
 80039d4:	ffcfffff 	.word	0xffcfffff
 80039d8:	efffffff 	.word	0xefffffff
 80039dc:	fffff3ff 	.word	0xfffff3ff
 80039e0:	ffffcfff 	.word	0xffffcfff
 80039e4:	fbffffff 	.word	0xfbffffff
 80039e8:	fff3ffff 	.word	0xfff3ffff

080039ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2244      	movs	r2, #68	; 0x44
 80039f8:	2100      	movs	r1, #0
 80039fa:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <USB_EnableGlobalInt+0x28>)
 80039fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	b299      	uxth	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2240      	movs	r2, #64	; 0x40
 8003a08:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b004      	add	sp, #16
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	0000bf80 	.word	0x0000bf80

08003a18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <USB_DisableGlobalInt+0x30>)
 8003a22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	5a9b      	ldrh	r3, [r3, r2]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	b292      	uxth	r2, r2
 8003a30:	43d2      	mvns	r2, r2
 8003a32:	b292      	uxth	r2, r2
 8003a34:	4013      	ands	r3, r2
 8003a36:	b299      	uxth	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b004      	add	sp, #16
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	0000bf80 	.word	0x0000bf80

08003a4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	b590      	push	{r4, r7, lr}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	2004      	movs	r0, #4
 8003a58:	2410      	movs	r4, #16
 8003a5a:	1900      	adds	r0, r0, r4
 8003a5c:	2408      	movs	r4, #8
 8003a5e:	46a4      	mov	ip, r4
 8003a60:	44bc      	add	ip, r7
 8003a62:	4460      	add	r0, ip
 8003a64:	6001      	str	r1, [r0, #0]
 8003a66:	6042      	str	r2, [r0, #4]
 8003a68:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2240      	movs	r2, #64	; 0x40
 8003a76:	2100      	movs	r1, #0
 8003a78:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2244      	movs	r2, #68	; 0x44
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2250      	movs	r2, #80	; 0x50
 8003a86:	2100      	movs	r1, #0
 8003a88:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b003      	add	sp, #12
 8003a92:	bc90      	pop	{r4, r7}
 8003a94:	bc08      	pop	{r3}
 8003a96:	b004      	add	sp, #16
 8003a98:	4718      	bx	r3
	...

08003a9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b09c      	sub	sp, #112	; 0x70
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003aa6:	236f      	movs	r3, #111	; 0x6f
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	18d3      	adds	r3, r2, r3
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	236c      	movs	r3, #108	; 0x6c
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	49a3      	ldr	r1, [pc, #652]	; (8003d50 <USB_ActivateEndpoint+0x2b4>)
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	78db      	ldrb	r3, [r3, #3]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d017      	beq.n	8003afe <USB_ActivateEndpoint+0x62>
 8003ace:	dc28      	bgt.n	8003b22 <USB_ActivateEndpoint+0x86>
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d00e      	beq.n	8003af2 <USB_ActivateEndpoint+0x56>
 8003ad4:	dc25      	bgt.n	8003b22 <USB_ActivateEndpoint+0x86>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <USB_ActivateEndpoint+0x44>
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d018      	beq.n	8003b10 <USB_ActivateEndpoint+0x74>
 8003ade:	e020      	b.n	8003b22 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ae0:	226c      	movs	r2, #108	; 0x6c
 8003ae2:	18bb      	adds	r3, r7, r2
 8003ae4:	18ba      	adds	r2, r7, r2
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	2180      	movs	r1, #128	; 0x80
 8003aea:	0089      	lsls	r1, r1, #2
 8003aec:	430a      	orrs	r2, r1
 8003aee:	801a      	strh	r2, [r3, #0]
      break;
 8003af0:	e01c      	b.n	8003b2c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003af2:	226c      	movs	r2, #108	; 0x6c
 8003af4:	18bb      	adds	r3, r7, r2
 8003af6:	18ba      	adds	r2, r7, r2
 8003af8:	8812      	ldrh	r2, [r2, #0]
 8003afa:	801a      	strh	r2, [r3, #0]
      break;
 8003afc:	e016      	b.n	8003b2c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003afe:	226c      	movs	r2, #108	; 0x6c
 8003b00:	18bb      	adds	r3, r7, r2
 8003b02:	18ba      	adds	r2, r7, r2
 8003b04:	8812      	ldrh	r2, [r2, #0]
 8003b06:	21c0      	movs	r1, #192	; 0xc0
 8003b08:	00c9      	lsls	r1, r1, #3
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	801a      	strh	r2, [r3, #0]
      break;
 8003b0e:	e00d      	b.n	8003b2c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b10:	226c      	movs	r2, #108	; 0x6c
 8003b12:	18bb      	adds	r3, r7, r2
 8003b14:	18ba      	adds	r2, r7, r2
 8003b16:	8812      	ldrh	r2, [r2, #0]
 8003b18:	2180      	movs	r1, #128	; 0x80
 8003b1a:	00c9      	lsls	r1, r1, #3
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	801a      	strh	r2, [r3, #0]
      break;
 8003b20:	e004      	b.n	8003b2c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003b22:	236f      	movs	r3, #111	; 0x6f
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	2201      	movs	r2, #1
 8003b28:	701a      	strb	r2, [r3, #0]
      break;
 8003b2a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	18d3      	adds	r3, r2, r3
 8003b36:	226c      	movs	r2, #108	; 0x6c
 8003b38:	18ba      	adds	r2, r7, r2
 8003b3a:	8812      	ldrh	r2, [r2, #0]
 8003b3c:	4985      	ldr	r1, [pc, #532]	; (8003d54 <USB_ActivateEndpoint+0x2b8>)
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	b292      	uxth	r2, r2
 8003b42:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	18d3      	adds	r3, r2, r3
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	b21b      	sxth	r3, r3
 8003b54:	4a80      	ldr	r2, [pc, #512]	; (8003d58 <USB_ActivateEndpoint+0x2bc>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	b21a      	sxth	r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	b21b      	sxth	r3, r3
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b21a      	sxth	r2, r3
 8003b64:	2166      	movs	r1, #102	; 0x66
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	18d3      	adds	r3, r2, r3
 8003b74:	187a      	adds	r2, r7, r1
 8003b76:	8812      	ldrh	r2, [r2, #0]
 8003b78:	4976      	ldr	r1, [pc, #472]	; (8003d54 <USB_ActivateEndpoint+0x2b8>)
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	7b1b      	ldrb	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d000      	beq.n	8003b8a <USB_ActivateEndpoint+0xee>
 8003b88:	e178      	b.n	8003e7c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d100      	bne.n	8003b94 <USB_ActivateEndpoint+0xf8>
 8003b92:	e07a      	b.n	8003c8a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2250      	movs	r2, #80	; 0x50
 8003b9c:	5a9b      	ldrh	r3, [r3, r2]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	001a      	movs	r2, r3
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	189b      	adds	r3, r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	00da      	lsls	r2, r3, #3
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	18d3      	adds	r3, r2, r3
 8003bb2:	2280      	movs	r2, #128	; 0x80
 8003bb4:	00d2      	lsls	r2, r2, #3
 8003bb6:	4694      	mov	ip, r2
 8003bb8:	4463      	add	r3, ip
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	88db      	ldrh	r3, [r3, #6]
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	18db      	adds	r3, r3, r3
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	18d2      	adds	r2, r2, r3
 8003bd6:	2112      	movs	r1, #18
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	8812      	ldrh	r2, [r2, #0]
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	4013      	ands	r3, r2
 8003be6:	d016      	beq.n	8003c16 <USB_ActivateEndpoint+0x17a>
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	18d3      	adds	r3, r2, r3
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	2010      	movs	r0, #16
 8003bf8:	183b      	adds	r3, r7, r0
 8003bfa:	4957      	ldr	r1, [pc, #348]	; (8003d58 <USB_ActivateEndpoint+0x2bc>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	18d3      	adds	r3, r2, r3
 8003c0a:	183a      	adds	r2, r7, r0
 8003c0c:	8812      	ldrh	r2, [r2, #0]
 8003c0e:	4953      	ldr	r1, [pc, #332]	; (8003d5c <USB_ActivateEndpoint+0x2c0>)
 8003c10:	430a      	orrs	r2, r1
 8003c12:	b292      	uxth	r2, r2
 8003c14:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	78db      	ldrb	r3, [r3, #3]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d01d      	beq.n	8003c5a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	18d3      	adds	r3, r2, r3
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	200c      	movs	r0, #12
 8003c2e:	183b      	adds	r3, r7, r0
 8003c30:	494b      	ldr	r1, [pc, #300]	; (8003d60 <USB_ActivateEndpoint+0x2c4>)
 8003c32:	400a      	ands	r2, r1
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	183b      	adds	r3, r7, r0
 8003c38:	183a      	adds	r2, r7, r0
 8003c3a:	8812      	ldrh	r2, [r2, #0]
 8003c3c:	2120      	movs	r1, #32
 8003c3e:	404a      	eors	r2, r1
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	18d3      	adds	r3, r2, r3
 8003c4c:	183a      	adds	r2, r7, r0
 8003c4e:	8812      	ldrh	r2, [r2, #0]
 8003c50:	4940      	ldr	r1, [pc, #256]	; (8003d54 <USB_ActivateEndpoint+0x2b8>)
 8003c52:	430a      	orrs	r2, r1
 8003c54:	b292      	uxth	r2, r2
 8003c56:	801a      	strh	r2, [r3, #0]
 8003c58:	e2b4      	b.n	80041c4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	18d3      	adds	r3, r2, r3
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	200e      	movs	r0, #14
 8003c6a:	183b      	adds	r3, r7, r0
 8003c6c:	493c      	ldr	r1, [pc, #240]	; (8003d60 <USB_ActivateEndpoint+0x2c4>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	801a      	strh	r2, [r3, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	18d3      	adds	r3, r2, r3
 8003c7c:	183a      	adds	r2, r7, r0
 8003c7e:	8812      	ldrh	r2, [r2, #0]
 8003c80:	4934      	ldr	r1, [pc, #208]	; (8003d54 <USB_ActivateEndpoint+0x2b8>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	b292      	uxth	r2, r2
 8003c86:	801a      	strh	r2, [r3, #0]
 8003c88:	e29c      	b.n	80041c4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2250      	movs	r2, #80	; 0x50
 8003c92:	5a9b      	ldrh	r3, [r3, r2]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	001a      	movs	r2, r3
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	00da      	lsls	r2, r3, #3
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	18d3      	adds	r3, r2, r3
 8003ca8:	4a2e      	ldr	r2, [pc, #184]	; (8003d64 <USB_ActivateEndpoint+0x2c8>)
 8003caa:	4694      	mov	ip, r2
 8003cac:	4463      	add	r3, ip
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	88db      	ldrh	r3, [r3, #6]
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	18db      	adds	r3, r3, r3
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2250      	movs	r2, #80	; 0x50
 8003cc8:	5a9b      	ldrh	r3, [r3, r2]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	001a      	movs	r2, r3
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	189b      	adds	r3, r3, r2
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	00da      	lsls	r2, r3, #3
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	18d3      	adds	r3, r2, r3
 8003cde:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <USB_ActivateEndpoint+0x2cc>)
 8003ce0:	4694      	mov	ip, r2
 8003ce2:	4463      	add	r3, ip
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	059b      	lsls	r3, r3, #22
 8003cee:	0d9b      	lsrs	r3, r3, #22
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003cfc:	d91a      	bls.n	8003d34 <USB_ActivateEndpoint+0x298>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	221f      	movs	r2, #31
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d102      	bne.n	8003d16 <USB_ActivateEndpoint+0x27a>
 8003d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d12:	3b01      	subs	r3, #1
 8003d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	029b      	lsls	r3, r3, #10
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <USB_ActivateEndpoint+0x2d0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	e034      	b.n	8003d9e <USB_ActivateEndpoint+0x302>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d119      	bne.n	8003d70 <USB_ActivateEndpoint+0x2d4>
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <USB_ActivateEndpoint+0x2d0>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	e027      	b.n	8003d9e <USB_ActivateEndpoint+0x302>
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	ffff898f 	.word	0xffff898f
 8003d54:	ffff8080 	.word	0xffff8080
 8003d58:	ffff8f8f 	.word	0xffff8f8f
 8003d5c:	ffff80c0 	.word	0xffff80c0
 8003d60:	ffff8fbf 	.word	0xffff8fbf
 8003d64:	00000404 	.word	0x00000404
 8003d68:	00000406 	.word	0x00000406
 8003d6c:	ffff8000 	.word	0xffff8000
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d002      	beq.n	8003d88 <USB_ActivateEndpoint+0x2ec>
 8003d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d84:	3301      	adds	r3, #1
 8003d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4313      	orrs	r3, r2
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	18d2      	adds	r2, r2, r3
 8003da8:	2122      	movs	r1, #34	; 0x22
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	8812      	ldrh	r2, [r2, #0]
 8003dae:	801a      	strh	r2, [r3, #0]
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	881a      	ldrh	r2, [r3, #0]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	01db      	lsls	r3, r3, #7
 8003db8:	4013      	ands	r3, r2
 8003dba:	d016      	beq.n	8003dea <USB_ActivateEndpoint+0x34e>
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	2020      	movs	r0, #32
 8003dcc:	183b      	adds	r3, r7, r0
 8003dce:	49dd      	ldr	r1, [pc, #884]	; (8004144 <USB_ActivateEndpoint+0x6a8>)
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	18d3      	adds	r3, r2, r3
 8003dde:	183a      	adds	r2, r7, r0
 8003de0:	8812      	ldrh	r2, [r2, #0]
 8003de2:	49d9      	ldr	r1, [pc, #868]	; (8004148 <USB_ActivateEndpoint+0x6ac>)
 8003de4:	430a      	orrs	r2, r1
 8003de6:	b292      	uxth	r2, r2
 8003de8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d125      	bne.n	8003e3e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	18d3      	adds	r3, r2, r3
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	201c      	movs	r0, #28
 8003e02:	183b      	adds	r3, r7, r0
 8003e04:	49d1      	ldr	r1, [pc, #836]	; (800414c <USB_ActivateEndpoint+0x6b0>)
 8003e06:	400a      	ands	r2, r1
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	183b      	adds	r3, r7, r0
 8003e0c:	183a      	adds	r2, r7, r0
 8003e0e:	8812      	ldrh	r2, [r2, #0]
 8003e10:	2180      	movs	r1, #128	; 0x80
 8003e12:	0149      	lsls	r1, r1, #5
 8003e14:	404a      	eors	r2, r1
 8003e16:	801a      	strh	r2, [r3, #0]
 8003e18:	183b      	adds	r3, r7, r0
 8003e1a:	183a      	adds	r2, r7, r0
 8003e1c:	8812      	ldrh	r2, [r2, #0]
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	0189      	lsls	r1, r1, #6
 8003e22:	404a      	eors	r2, r1
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	18d3      	adds	r3, r2, r3
 8003e30:	183a      	adds	r2, r7, r0
 8003e32:	8812      	ldrh	r2, [r2, #0]
 8003e34:	49c6      	ldr	r1, [pc, #792]	; (8004150 <USB_ActivateEndpoint+0x6b4>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	e1c2      	b.n	80041c4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	18d3      	adds	r3, r2, r3
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	201e      	movs	r0, #30
 8003e4e:	183b      	adds	r3, r7, r0
 8003e50:	49be      	ldr	r1, [pc, #760]	; (800414c <USB_ActivateEndpoint+0x6b0>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	183b      	adds	r3, r7, r0
 8003e58:	183a      	adds	r2, r7, r0
 8003e5a:	8812      	ldrh	r2, [r2, #0]
 8003e5c:	2180      	movs	r1, #128	; 0x80
 8003e5e:	0189      	lsls	r1, r1, #6
 8003e60:	404a      	eors	r2, r1
 8003e62:	801a      	strh	r2, [r3, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	18d3      	adds	r3, r2, r3
 8003e6e:	183a      	adds	r2, r7, r0
 8003e70:	8812      	ldrh	r2, [r2, #0]
 8003e72:	49b7      	ldr	r1, [pc, #732]	; (8004150 <USB_ActivateEndpoint+0x6b4>)
 8003e74:	430a      	orrs	r2, r1
 8003e76:	b292      	uxth	r2, r2
 8003e78:	801a      	strh	r2, [r3, #0]
 8003e7a:	e1a3      	b.n	80041c4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	78db      	ldrb	r3, [r3, #3]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d117      	bne.n	8003eb4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	18d3      	adds	r3, r2, r3
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	2062      	movs	r0, #98	; 0x62
 8003e94:	183b      	adds	r3, r7, r0
 8003e96:	49ab      	ldr	r1, [pc, #684]	; (8004144 <USB_ActivateEndpoint+0x6a8>)
 8003e98:	400a      	ands	r2, r1
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	18d3      	adds	r3, r2, r3
 8003ea6:	183a      	adds	r2, r7, r0
 8003ea8:	8812      	ldrh	r2, [r2, #0]
 8003eaa:	49aa      	ldr	r1, [pc, #680]	; (8004154 <USB_ActivateEndpoint+0x6b8>)
 8003eac:	430a      	orrs	r2, r1
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	e016      	b.n	8003ee2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	2064      	movs	r0, #100	; 0x64
 8003ec4:	183b      	adds	r3, r7, r0
 8003ec6:	49a4      	ldr	r1, [pc, #656]	; (8004158 <USB_ActivateEndpoint+0x6bc>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	183a      	adds	r2, r7, r0
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	499d      	ldr	r1, [pc, #628]	; (8004150 <USB_ActivateEndpoint+0x6b4>)
 8003edc:	430a      	orrs	r2, r1
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2250      	movs	r2, #80	; 0x50
 8003eea:	5a9b      	ldrh	r3, [r3, r2]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	001a      	movs	r2, r3
 8003ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	00da      	lsls	r2, r3, #3
 8003efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efe:	18d3      	adds	r3, r2, r3
 8003f00:	2280      	movs	r2, #128	; 0x80
 8003f02:	00d2      	lsls	r2, r2, #3
 8003f04:	4694      	mov	ip, r2
 8003f06:	4463      	add	r3, ip
 8003f08:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	891b      	ldrh	r3, [r3, #8]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	18db      	adds	r3, r3, r3
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2250      	movs	r2, #80	; 0x50
 8003f22:	5a9b      	ldrh	r3, [r3, r2]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	001a      	movs	r2, r3
 8003f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	00da      	lsls	r2, r3, #3
 8003f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f36:	18d3      	adds	r3, r2, r3
 8003f38:	4a88      	ldr	r2, [pc, #544]	; (800415c <USB_ActivateEndpoint+0x6c0>)
 8003f3a:	4694      	mov	ip, r2
 8003f3c:	4463      	add	r3, ip
 8003f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	895b      	ldrh	r3, [r3, #10]
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	18db      	adds	r3, r3, r3
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d000      	beq.n	8003f5a <USB_ActivateEndpoint+0x4be>
 8003f58:	e087      	b.n	800406a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	18d2      	adds	r2, r2, r3
 8003f64:	2140      	movs	r1, #64	; 0x40
 8003f66:	187b      	adds	r3, r7, r1
 8003f68:	8812      	ldrh	r2, [r2, #0]
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	881a      	ldrh	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	01db      	lsls	r3, r3, #7
 8003f74:	4013      	ands	r3, r2
 8003f76:	d016      	beq.n	8003fa6 <USB_ActivateEndpoint+0x50a>
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	18d3      	adds	r3, r2, r3
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	203e      	movs	r0, #62	; 0x3e
 8003f88:	183b      	adds	r3, r7, r0
 8003f8a:	496e      	ldr	r1, [pc, #440]	; (8004144 <USB_ActivateEndpoint+0x6a8>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	801a      	strh	r2, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	18d3      	adds	r3, r2, r3
 8003f9a:	183a      	adds	r2, r7, r0
 8003f9c:	8812      	ldrh	r2, [r2, #0]
 8003f9e:	496a      	ldr	r1, [pc, #424]	; (8004148 <USB_ActivateEndpoint+0x6ac>)
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	b292      	uxth	r2, r2
 8003fa4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	18d2      	adds	r2, r2, r3
 8003fb0:	213c      	movs	r1, #60	; 0x3c
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	8812      	ldrh	r2, [r2, #0]
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	187b      	adds	r3, r7, r1
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	2240      	movs	r2, #64	; 0x40
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d016      	beq.n	8003ff0 <USB_ActivateEndpoint+0x554>
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	18d3      	adds	r3, r2, r3
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	203a      	movs	r0, #58	; 0x3a
 8003fd2:	183b      	adds	r3, r7, r0
 8003fd4:	495b      	ldr	r1, [pc, #364]	; (8004144 <USB_ActivateEndpoint+0x6a8>)
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	18d3      	adds	r3, r2, r3
 8003fe4:	183a      	adds	r2, r7, r0
 8003fe6:	8812      	ldrh	r2, [r2, #0]
 8003fe8:	495d      	ldr	r1, [pc, #372]	; (8004160 <USB_ActivateEndpoint+0x6c4>)
 8003fea:	430a      	orrs	r2, r1
 8003fec:	b292      	uxth	r2, r2
 8003fee:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	18d3      	adds	r3, r2, r3
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	2038      	movs	r0, #56	; 0x38
 8004000:	183b      	adds	r3, r7, r0
 8004002:	4952      	ldr	r1, [pc, #328]	; (800414c <USB_ActivateEndpoint+0x6b0>)
 8004004:	400a      	ands	r2, r1
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	183b      	adds	r3, r7, r0
 800400a:	183a      	adds	r2, r7, r0
 800400c:	8812      	ldrh	r2, [r2, #0]
 800400e:	2180      	movs	r1, #128	; 0x80
 8004010:	0149      	lsls	r1, r1, #5
 8004012:	404a      	eors	r2, r1
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	183b      	adds	r3, r7, r0
 8004018:	183a      	adds	r2, r7, r0
 800401a:	8812      	ldrh	r2, [r2, #0]
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	0189      	lsls	r1, r1, #6
 8004020:	404a      	eors	r2, r1
 8004022:	801a      	strh	r2, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	18d3      	adds	r3, r2, r3
 800402e:	183a      	adds	r2, r7, r0
 8004030:	8812      	ldrh	r2, [r2, #0]
 8004032:	4947      	ldr	r1, [pc, #284]	; (8004150 <USB_ActivateEndpoint+0x6b4>)
 8004034:	430a      	orrs	r2, r1
 8004036:	b292      	uxth	r2, r2
 8004038:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	18d3      	adds	r3, r2, r3
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29a      	uxth	r2, r3
 8004048:	2036      	movs	r0, #54	; 0x36
 800404a:	183b      	adds	r3, r7, r0
 800404c:	4945      	ldr	r1, [pc, #276]	; (8004164 <USB_ActivateEndpoint+0x6c8>)
 800404e:	400a      	ands	r2, r1
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	18d3      	adds	r3, r2, r3
 800405c:	183a      	adds	r2, r7, r0
 800405e:	8812      	ldrh	r2, [r2, #0]
 8004060:	493b      	ldr	r1, [pc, #236]	; (8004150 <USB_ActivateEndpoint+0x6b4>)
 8004062:	430a      	orrs	r2, r1
 8004064:	b292      	uxth	r2, r2
 8004066:	801a      	strh	r2, [r3, #0]
 8004068:	e0ac      	b.n	80041c4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	18d2      	adds	r2, r2, r3
 8004074:	214e      	movs	r1, #78	; 0x4e
 8004076:	187b      	adds	r3, r7, r1
 8004078:	8812      	ldrh	r2, [r2, #0]
 800407a:	801a      	strh	r2, [r3, #0]
 800407c:	187b      	adds	r3, r7, r1
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	01db      	lsls	r3, r3, #7
 8004084:	4013      	ands	r3, r2
 8004086:	d016      	beq.n	80040b6 <USB_ActivateEndpoint+0x61a>
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	18d3      	adds	r3, r2, r3
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29a      	uxth	r2, r3
 8004096:	204c      	movs	r0, #76	; 0x4c
 8004098:	183b      	adds	r3, r7, r0
 800409a:	492a      	ldr	r1, [pc, #168]	; (8004144 <USB_ActivateEndpoint+0x6a8>)
 800409c:	400a      	ands	r2, r1
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	18d3      	adds	r3, r2, r3
 80040aa:	183a      	adds	r2, r7, r0
 80040ac:	8812      	ldrh	r2, [r2, #0]
 80040ae:	4926      	ldr	r1, [pc, #152]	; (8004148 <USB_ActivateEndpoint+0x6ac>)
 80040b0:	430a      	orrs	r2, r1
 80040b2:	b292      	uxth	r2, r2
 80040b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	18d2      	adds	r2, r2, r3
 80040c0:	214a      	movs	r1, #74	; 0x4a
 80040c2:	187b      	adds	r3, r7, r1
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	187b      	adds	r3, r7, r1
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	2240      	movs	r2, #64	; 0x40
 80040ce:	4013      	ands	r3, r2
 80040d0:	d016      	beq.n	8004100 <USB_ActivateEndpoint+0x664>
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	18d3      	adds	r3, r2, r3
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	2048      	movs	r0, #72	; 0x48
 80040e2:	183b      	adds	r3, r7, r0
 80040e4:	4917      	ldr	r1, [pc, #92]	; (8004144 <USB_ActivateEndpoint+0x6a8>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	18d3      	adds	r3, r2, r3
 80040f4:	183a      	adds	r2, r7, r0
 80040f6:	8812      	ldrh	r2, [r2, #0]
 80040f8:	4919      	ldr	r1, [pc, #100]	; (8004160 <USB_ActivateEndpoint+0x6c4>)
 80040fa:	430a      	orrs	r2, r1
 80040fc:	b292      	uxth	r2, r2
 80040fe:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	78db      	ldrb	r3, [r3, #3]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d02f      	beq.n	8004168 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	18d3      	adds	r3, r2, r3
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29a      	uxth	r2, r3
 8004116:	2044      	movs	r0, #68	; 0x44
 8004118:	183b      	adds	r3, r7, r0
 800411a:	4912      	ldr	r1, [pc, #72]	; (8004164 <USB_ActivateEndpoint+0x6c8>)
 800411c:	400a      	ands	r2, r1
 800411e:	801a      	strh	r2, [r3, #0]
 8004120:	183b      	adds	r3, r7, r0
 8004122:	183a      	adds	r2, r7, r0
 8004124:	8812      	ldrh	r2, [r2, #0]
 8004126:	2120      	movs	r1, #32
 8004128:	404a      	eors	r2, r1
 800412a:	801a      	strh	r2, [r3, #0]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	183a      	adds	r2, r7, r0
 8004138:	8812      	ldrh	r2, [r2, #0]
 800413a:	4905      	ldr	r1, [pc, #20]	; (8004150 <USB_ActivateEndpoint+0x6b4>)
 800413c:	430a      	orrs	r2, r1
 800413e:	b292      	uxth	r2, r2
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	e028      	b.n	8004196 <USB_ActivateEndpoint+0x6fa>
 8004144:	ffff8f8f 	.word	0xffff8f8f
 8004148:	ffffc080 	.word	0xffffc080
 800414c:	ffffbf8f 	.word	0xffffbf8f
 8004150:	ffff8080 	.word	0xffff8080
 8004154:	ffff8180 	.word	0xffff8180
 8004158:	ffff8e8f 	.word	0xffff8e8f
 800415c:	00000404 	.word	0x00000404
 8004160:	ffff80c0 	.word	0xffff80c0
 8004164:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	18d3      	adds	r3, r2, r3
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29a      	uxth	r2, r3
 8004176:	2046      	movs	r0, #70	; 0x46
 8004178:	183b      	adds	r3, r7, r0
 800417a:	4916      	ldr	r1, [pc, #88]	; (80041d4 <USB_ActivateEndpoint+0x738>)
 800417c:	400a      	ands	r2, r1
 800417e:	801a      	strh	r2, [r3, #0]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	18d3      	adds	r3, r2, r3
 800418a:	183a      	adds	r2, r7, r0
 800418c:	8812      	ldrh	r2, [r2, #0]
 800418e:	4912      	ldr	r1, [pc, #72]	; (80041d8 <USB_ActivateEndpoint+0x73c>)
 8004190:	430a      	orrs	r2, r1
 8004192:	b292      	uxth	r2, r2
 8004194:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	18d3      	adds	r3, r2, r3
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	2042      	movs	r0, #66	; 0x42
 80041a6:	183b      	adds	r3, r7, r0
 80041a8:	490c      	ldr	r1, [pc, #48]	; (80041dc <USB_ActivateEndpoint+0x740>)
 80041aa:	400a      	ands	r2, r1
 80041ac:	801a      	strh	r2, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	18d3      	adds	r3, r2, r3
 80041b8:	183a      	adds	r2, r7, r0
 80041ba:	8812      	ldrh	r2, [r2, #0]
 80041bc:	4906      	ldr	r1, [pc, #24]	; (80041d8 <USB_ActivateEndpoint+0x73c>)
 80041be:	430a      	orrs	r2, r1
 80041c0:	b292      	uxth	r2, r2
 80041c2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80041c4:	236f      	movs	r3, #111	; 0x6f
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	781b      	ldrb	r3, [r3, #0]
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b01c      	add	sp, #112	; 0x70
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	ffff8fbf 	.word	0xffff8fbf
 80041d8:	ffff8080 	.word	0xffff8080
 80041dc:	ffffbf8f 	.word	0xffffbf8f

080041e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	; 0x30
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	7b1b      	ldrb	r3, [r3, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d000      	beq.n	80041f4 <USB_DeactivateEndpoint+0x14>
 80041f2:	e07e      	b.n	80042f2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d03c      	beq.n	8004276 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	18d2      	adds	r2, r2, r3
 8004206:	210c      	movs	r1, #12
 8004208:	187b      	adds	r3, r7, r1
 800420a:	8812      	ldrh	r2, [r2, #0]
 800420c:	801a      	strh	r2, [r3, #0]
 800420e:	187b      	adds	r3, r7, r1
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	4013      	ands	r3, r2
 8004216:	d016      	beq.n	8004246 <USB_DeactivateEndpoint+0x66>
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	18d3      	adds	r3, r2, r3
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29a      	uxth	r2, r3
 8004226:	200a      	movs	r0, #10
 8004228:	183b      	adds	r3, r7, r0
 800422a:	49c7      	ldr	r1, [pc, #796]	; (8004548 <USB_DeactivateEndpoint+0x368>)
 800422c:	400a      	ands	r2, r1
 800422e:	801a      	strh	r2, [r3, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	18d3      	adds	r3, r2, r3
 800423a:	183a      	adds	r2, r7, r0
 800423c:	8812      	ldrh	r2, [r2, #0]
 800423e:	49c3      	ldr	r1, [pc, #780]	; (800454c <USB_DeactivateEndpoint+0x36c>)
 8004240:	430a      	orrs	r2, r1
 8004242:	b292      	uxth	r2, r2
 8004244:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	18d3      	adds	r3, r2, r3
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	b29a      	uxth	r2, r3
 8004254:	2008      	movs	r0, #8
 8004256:	183b      	adds	r3, r7, r0
 8004258:	49bd      	ldr	r1, [pc, #756]	; (8004550 <USB_DeactivateEndpoint+0x370>)
 800425a:	400a      	ands	r2, r1
 800425c:	801a      	strh	r2, [r3, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	18d3      	adds	r3, r2, r3
 8004268:	183a      	adds	r2, r7, r0
 800426a:	8812      	ldrh	r2, [r2, #0]
 800426c:	49b9      	ldr	r1, [pc, #740]	; (8004554 <USB_DeactivateEndpoint+0x374>)
 800426e:	430a      	orrs	r2, r1
 8004270:	b292      	uxth	r2, r2
 8004272:	801a      	strh	r2, [r3, #0]
 8004274:	e163      	b.n	800453e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	18d2      	adds	r2, r2, r3
 8004280:	2112      	movs	r1, #18
 8004282:	187b      	adds	r3, r7, r1
 8004284:	8812      	ldrh	r2, [r2, #0]
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	187b      	adds	r3, r7, r1
 800428a:	881a      	ldrh	r2, [r3, #0]
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	01db      	lsls	r3, r3, #7
 8004290:	4013      	ands	r3, r2
 8004292:	d016      	beq.n	80042c2 <USB_DeactivateEndpoint+0xe2>
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	18d3      	adds	r3, r2, r3
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	2010      	movs	r0, #16
 80042a4:	183b      	adds	r3, r7, r0
 80042a6:	49a8      	ldr	r1, [pc, #672]	; (8004548 <USB_DeactivateEndpoint+0x368>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	801a      	strh	r2, [r3, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	18d3      	adds	r3, r2, r3
 80042b6:	183a      	adds	r2, r7, r0
 80042b8:	8812      	ldrh	r2, [r2, #0]
 80042ba:	49a7      	ldr	r1, [pc, #668]	; (8004558 <USB_DeactivateEndpoint+0x378>)
 80042bc:	430a      	orrs	r2, r1
 80042be:	b292      	uxth	r2, r2
 80042c0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	18d3      	adds	r3, r2, r3
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	200e      	movs	r0, #14
 80042d2:	183b      	adds	r3, r7, r0
 80042d4:	49a1      	ldr	r1, [pc, #644]	; (800455c <USB_DeactivateEndpoint+0x37c>)
 80042d6:	400a      	ands	r2, r1
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	18d3      	adds	r3, r2, r3
 80042e4:	183a      	adds	r2, r7, r0
 80042e6:	8812      	ldrh	r2, [r2, #0]
 80042e8:	499a      	ldr	r1, [pc, #616]	; (8004554 <USB_DeactivateEndpoint+0x374>)
 80042ea:	430a      	orrs	r2, r1
 80042ec:	b292      	uxth	r2, r2
 80042ee:	801a      	strh	r2, [r3, #0]
 80042f0:	e125      	b.n	800453e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d000      	beq.n	80042fc <USB_DeactivateEndpoint+0x11c>
 80042fa:	e090      	b.n	800441e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	18d2      	adds	r2, r2, r3
 8004306:	2120      	movs	r1, #32
 8004308:	187b      	adds	r3, r7, r1
 800430a:	8812      	ldrh	r2, [r2, #0]
 800430c:	801a      	strh	r2, [r3, #0]
 800430e:	187b      	adds	r3, r7, r1
 8004310:	881a      	ldrh	r2, [r3, #0]
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	01db      	lsls	r3, r3, #7
 8004316:	4013      	ands	r3, r2
 8004318:	d016      	beq.n	8004348 <USB_DeactivateEndpoint+0x168>
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	18d3      	adds	r3, r2, r3
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29a      	uxth	r2, r3
 8004328:	201e      	movs	r0, #30
 800432a:	183b      	adds	r3, r7, r0
 800432c:	4986      	ldr	r1, [pc, #536]	; (8004548 <USB_DeactivateEndpoint+0x368>)
 800432e:	400a      	ands	r2, r1
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	18d3      	adds	r3, r2, r3
 800433c:	183a      	adds	r2, r7, r0
 800433e:	8812      	ldrh	r2, [r2, #0]
 8004340:	4985      	ldr	r1, [pc, #532]	; (8004558 <USB_DeactivateEndpoint+0x378>)
 8004342:	430a      	orrs	r2, r1
 8004344:	b292      	uxth	r2, r2
 8004346:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	18d2      	adds	r2, r2, r3
 8004352:	211c      	movs	r1, #28
 8004354:	187b      	adds	r3, r7, r1
 8004356:	8812      	ldrh	r2, [r2, #0]
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	187b      	adds	r3, r7, r1
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	2240      	movs	r2, #64	; 0x40
 8004360:	4013      	ands	r3, r2
 8004362:	d016      	beq.n	8004392 <USB_DeactivateEndpoint+0x1b2>
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	18d3      	adds	r3, r2, r3
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29a      	uxth	r2, r3
 8004372:	201a      	movs	r0, #26
 8004374:	183b      	adds	r3, r7, r0
 8004376:	4974      	ldr	r1, [pc, #464]	; (8004548 <USB_DeactivateEndpoint+0x368>)
 8004378:	400a      	ands	r2, r1
 800437a:	801a      	strh	r2, [r3, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	18d3      	adds	r3, r2, r3
 8004386:	183a      	adds	r2, r7, r0
 8004388:	8812      	ldrh	r2, [r2, #0]
 800438a:	4970      	ldr	r1, [pc, #448]	; (800454c <USB_DeactivateEndpoint+0x36c>)
 800438c:	430a      	orrs	r2, r1
 800438e:	b292      	uxth	r2, r2
 8004390:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	18d3      	adds	r3, r2, r3
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b29a      	uxth	r2, r3
 80043a0:	2018      	movs	r0, #24
 80043a2:	183b      	adds	r3, r7, r0
 80043a4:	4968      	ldr	r1, [pc, #416]	; (8004548 <USB_DeactivateEndpoint+0x368>)
 80043a6:	400a      	ands	r2, r1
 80043a8:	801a      	strh	r2, [r3, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	18d3      	adds	r3, r2, r3
 80043b4:	183a      	adds	r2, r7, r0
 80043b6:	8812      	ldrh	r2, [r2, #0]
 80043b8:	4964      	ldr	r1, [pc, #400]	; (800454c <USB_DeactivateEndpoint+0x36c>)
 80043ba:	430a      	orrs	r2, r1
 80043bc:	b292      	uxth	r2, r2
 80043be:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	2016      	movs	r0, #22
 80043d0:	183b      	adds	r3, r7, r0
 80043d2:	4962      	ldr	r1, [pc, #392]	; (800455c <USB_DeactivateEndpoint+0x37c>)
 80043d4:	400a      	ands	r2, r1
 80043d6:	801a      	strh	r2, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	18d3      	adds	r3, r2, r3
 80043e2:	183a      	adds	r2, r7, r0
 80043e4:	8812      	ldrh	r2, [r2, #0]
 80043e6:	495b      	ldr	r1, [pc, #364]	; (8004554 <USB_DeactivateEndpoint+0x374>)
 80043e8:	430a      	orrs	r2, r1
 80043ea:	b292      	uxth	r2, r2
 80043ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	18d3      	adds	r3, r2, r3
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	2014      	movs	r0, #20
 80043fe:	183b      	adds	r3, r7, r0
 8004400:	4953      	ldr	r1, [pc, #332]	; (8004550 <USB_DeactivateEndpoint+0x370>)
 8004402:	400a      	ands	r2, r1
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	183a      	adds	r2, r7, r0
 8004412:	8812      	ldrh	r2, [r2, #0]
 8004414:	494f      	ldr	r1, [pc, #316]	; (8004554 <USB_DeactivateEndpoint+0x374>)
 8004416:	430a      	orrs	r2, r1
 8004418:	b292      	uxth	r2, r2
 800441a:	801a      	strh	r2, [r3, #0]
 800441c:	e08f      	b.n	800453e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	18d2      	adds	r2, r2, r3
 8004428:	212e      	movs	r1, #46	; 0x2e
 800442a:	187b      	adds	r3, r7, r1
 800442c:	8812      	ldrh	r2, [r2, #0]
 800442e:	801a      	strh	r2, [r3, #0]
 8004430:	187b      	adds	r3, r7, r1
 8004432:	881a      	ldrh	r2, [r3, #0]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	01db      	lsls	r3, r3, #7
 8004438:	4013      	ands	r3, r2
 800443a:	d016      	beq.n	800446a <USB_DeactivateEndpoint+0x28a>
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	18d3      	adds	r3, r2, r3
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29a      	uxth	r2, r3
 800444a:	202c      	movs	r0, #44	; 0x2c
 800444c:	183b      	adds	r3, r7, r0
 800444e:	493e      	ldr	r1, [pc, #248]	; (8004548 <USB_DeactivateEndpoint+0x368>)
 8004450:	400a      	ands	r2, r1
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	18d3      	adds	r3, r2, r3
 800445e:	183a      	adds	r2, r7, r0
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	493d      	ldr	r1, [pc, #244]	; (8004558 <USB_DeactivateEndpoint+0x378>)
 8004464:	430a      	orrs	r2, r1
 8004466:	b292      	uxth	r2, r2
 8004468:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	18d2      	adds	r2, r2, r3
 8004474:	212a      	movs	r1, #42	; 0x2a
 8004476:	187b      	adds	r3, r7, r1
 8004478:	8812      	ldrh	r2, [r2, #0]
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	187b      	adds	r3, r7, r1
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	2240      	movs	r2, #64	; 0x40
 8004482:	4013      	ands	r3, r2
 8004484:	d016      	beq.n	80044b4 <USB_DeactivateEndpoint+0x2d4>
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	18d3      	adds	r3, r2, r3
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29a      	uxth	r2, r3
 8004494:	2028      	movs	r0, #40	; 0x28
 8004496:	183b      	adds	r3, r7, r0
 8004498:	492b      	ldr	r1, [pc, #172]	; (8004548 <USB_DeactivateEndpoint+0x368>)
 800449a:	400a      	ands	r2, r1
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	18d3      	adds	r3, r2, r3
 80044a8:	183a      	adds	r2, r7, r0
 80044aa:	8812      	ldrh	r2, [r2, #0]
 80044ac:	4927      	ldr	r1, [pc, #156]	; (800454c <USB_DeactivateEndpoint+0x36c>)
 80044ae:	430a      	orrs	r2, r1
 80044b0:	b292      	uxth	r2, r2
 80044b2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	18d3      	adds	r3, r2, r3
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	2026      	movs	r0, #38	; 0x26
 80044c4:	183b      	adds	r3, r7, r0
 80044c6:	4920      	ldr	r1, [pc, #128]	; (8004548 <USB_DeactivateEndpoint+0x368>)
 80044c8:	400a      	ands	r2, r1
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	18d3      	adds	r3, r2, r3
 80044d6:	183a      	adds	r2, r7, r0
 80044d8:	8812      	ldrh	r2, [r2, #0]
 80044da:	491f      	ldr	r1, [pc, #124]	; (8004558 <USB_DeactivateEndpoint+0x378>)
 80044dc:	430a      	orrs	r2, r1
 80044de:	b292      	uxth	r2, r2
 80044e0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	18d3      	adds	r3, r2, r3
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	2024      	movs	r0, #36	; 0x24
 80044f2:	183b      	adds	r3, r7, r0
 80044f4:	4916      	ldr	r1, [pc, #88]	; (8004550 <USB_DeactivateEndpoint+0x370>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	18d3      	adds	r3, r2, r3
 8004504:	183a      	adds	r2, r7, r0
 8004506:	8812      	ldrh	r2, [r2, #0]
 8004508:	4912      	ldr	r1, [pc, #72]	; (8004554 <USB_DeactivateEndpoint+0x374>)
 800450a:	430a      	orrs	r2, r1
 800450c:	b292      	uxth	r2, r2
 800450e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	18d3      	adds	r3, r2, r3
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29a      	uxth	r2, r3
 800451e:	2022      	movs	r0, #34	; 0x22
 8004520:	183b      	adds	r3, r7, r0
 8004522:	490e      	ldr	r1, [pc, #56]	; (800455c <USB_DeactivateEndpoint+0x37c>)
 8004524:	400a      	ands	r2, r1
 8004526:	801a      	strh	r2, [r3, #0]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	18d3      	adds	r3, r2, r3
 8004532:	183a      	adds	r2, r7, r0
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	4907      	ldr	r1, [pc, #28]	; (8004554 <USB_DeactivateEndpoint+0x374>)
 8004538:	430a      	orrs	r2, r1
 800453a:	b292      	uxth	r2, r2
 800453c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	0018      	movs	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	b00c      	add	sp, #48	; 0x30
 8004546:	bd80      	pop	{r7, pc}
 8004548:	ffff8f8f 	.word	0xffff8f8f
 800454c:	ffff80c0 	.word	0xffff80c0
 8004550:	ffff8fbf 	.word	0xffff8fbf
 8004554:	ffff8080 	.word	0xffff8080
 8004558:	ffffc080 	.word	0xffffc080
 800455c:	ffffbf8f 	.word	0xffffbf8f

08004560 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b0c3      	sub	sp, #268	; 0x10c
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d001      	beq.n	8004576 <USB_EPStartXfer+0x16>
 8004572:	f000 fd2d 	bl	8004fd0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	429a      	cmp	r2, r3
 8004580:	d905      	bls.n	800458e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	1d7a      	adds	r2, r7, #5
 8004588:	32ff      	adds	r2, #255	; 0xff
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	e004      	b.n	8004598 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	1d7a      	adds	r2, r7, #5
 8004594:	32ff      	adds	r2, #255	; 0xff
 8004596:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	7b1b      	ldrb	r3, [r3, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d125      	bne.n	80045ec <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	6959      	ldr	r1, [r3, #20]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	88da      	ldrh	r2, [r3, #6]
 80045a8:	1d7b      	adds	r3, r7, #5
 80045aa:	33ff      	adds	r3, #255	; 0xff
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f001 fa47 	bl	8005a44 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2250      	movs	r2, #80	; 0x50
 80045be:	5a9b      	ldrh	r3, [r3, r2]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	001a      	movs	r2, r3
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	00da      	lsls	r2, r3, #3
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	4ad7      	ldr	r2, [pc, #860]	; (8004934 <USB_EPStartXfer+0x3d4>)
 80045d6:	4694      	mov	ip, r2
 80045d8:	4463      	add	r3, ip
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	1d7b      	adds	r3, r7, #5
 80045de:	33ff      	adds	r3, #255	; 0xff
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	f000 fccd 	bl	8004f86 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	78db      	ldrb	r3, [r3, #3]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d000      	beq.n	80045f6 <USB_EPStartXfer+0x96>
 80045f4:	e362      	b.n	8004cbc <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6a1a      	ldr	r2, [r3, #32]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d800      	bhi.n	8004604 <USB_EPStartXfer+0xa4>
 8004602:	e309      	b.n	8004c18 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	2056      	movs	r0, #86	; 0x56
 8004614:	183b      	adds	r3, r7, r0
 8004616:	49c8      	ldr	r1, [pc, #800]	; (8004938 <USB_EPStartXfer+0x3d8>)
 8004618:	400a      	ands	r2, r1
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	18d3      	adds	r3, r2, r3
 8004626:	183a      	adds	r2, r7, r0
 8004628:	8812      	ldrh	r2, [r2, #0]
 800462a:	49c4      	ldr	r1, [pc, #784]	; (800493c <USB_EPStartXfer+0x3dc>)
 800462c:	430a      	orrs	r2, r1
 800462e:	b292      	uxth	r2, r2
 8004630:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	1d7b      	adds	r3, r7, #5
 8004638:	33ff      	adds	r3, #255	; 0xff
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	1ad2      	subs	r2, r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	18d3      	adds	r3, r2, r3
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	001a      	movs	r2, r3
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	4013      	ands	r3, r2
 8004656:	d100      	bne.n	800465a <USB_EPStartXfer+0xfa>
 8004658:	e176      	b.n	8004948 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	633b      	str	r3, [r7, #48]	; 0x30
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d000      	beq.n	8004668 <USB_EPStartXfer+0x108>
 8004666:	e074      	b.n	8004752 <USB_EPStartXfer+0x1f2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2250      	movs	r2, #80	; 0x50
 8004670:	5a9b      	ldrh	r3, [r3, r2]
 8004672:	b29b      	uxth	r3, r3
 8004674:	001a      	movs	r2, r3
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	189b      	adds	r3, r3, r2
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	00da      	lsls	r2, r3, #3
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	18d3      	adds	r3, r2, r3
 8004686:	4aae      	ldr	r2, [pc, #696]	; (8004940 <USB_EPStartXfer+0x3e0>)
 8004688:	4694      	mov	ip, r2
 800468a:	4463      	add	r3, ip
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	059b      	lsls	r3, r3, #22
 8004696:	0d9b      	lsrs	r3, r3, #22
 8004698:	b29a      	uxth	r2, r3
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	1d7b      	adds	r3, r7, #5
 80046a0:	33ff      	adds	r3, #255	; 0xff
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b3e      	cmp	r3, #62	; 0x3e
 80046a6:	d924      	bls.n	80046f2 <USB_EPStartXfer+0x192>
 80046a8:	1d7b      	adds	r3, r7, #5
 80046aa:	33ff      	adds	r3, #255	; 0xff
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	1c7a      	adds	r2, r7, #1
 80046b2:	32ff      	adds	r2, #255	; 0xff
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	1d7b      	adds	r3, r7, #5
 80046b8:	33ff      	adds	r3, #255	; 0xff
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	221f      	movs	r2, #31
 80046be:	4013      	ands	r3, r2
 80046c0:	d106      	bne.n	80046d0 <USB_EPStartXfer+0x170>
 80046c2:	1c7b      	adds	r3, r7, #1
 80046c4:	33ff      	adds	r3, #255	; 0xff
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	1c7a      	adds	r2, r7, #1
 80046cc:	32ff      	adds	r2, #255	; 0xff
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	1c7b      	adds	r3, r7, #1
 80046d8:	33ff      	adds	r3, #255	; 0xff
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	029b      	lsls	r3, r3, #10
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4313      	orrs	r3, r2
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	4a97      	ldr	r2, [pc, #604]	; (8004944 <USB_EPStartXfer+0x3e4>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	e04a      	b.n	8004788 <USB_EPStartXfer+0x228>
 80046f2:	1d7b      	adds	r3, r7, #5
 80046f4:	33ff      	adds	r3, #255	; 0xff
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <USB_EPStartXfer+0x1ae>
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	4a90      	ldr	r2, [pc, #576]	; (8004944 <USB_EPStartXfer+0x3e4>)
 8004704:	4313      	orrs	r3, r2
 8004706:	b29a      	uxth	r2, r3
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	e03c      	b.n	8004788 <USB_EPStartXfer+0x228>
 800470e:	1d7b      	adds	r3, r7, #5
 8004710:	33ff      	adds	r3, #255	; 0xff
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	1c7a      	adds	r2, r7, #1
 8004718:	32ff      	adds	r2, #255	; 0xff
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	1d7b      	adds	r3, r7, #5
 800471e:	33ff      	adds	r3, #255	; 0xff
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2201      	movs	r2, #1
 8004724:	4013      	ands	r3, r2
 8004726:	d006      	beq.n	8004736 <USB_EPStartXfer+0x1d6>
 8004728:	1c7b      	adds	r3, r7, #1
 800472a:	33ff      	adds	r3, #255	; 0xff
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	1c7a      	adds	r2, r7, #1
 8004732:	32ff      	adds	r2, #255	; 0xff
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29a      	uxth	r2, r3
 800473c:	1c7b      	adds	r3, r7, #1
 800473e:	33ff      	adds	r3, #255	; 0xff
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	029b      	lsls	r3, r3, #10
 8004746:	b29b      	uxth	r3, r3
 8004748:	4313      	orrs	r3, r2
 800474a:	b29a      	uxth	r2, r3
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	801a      	strh	r2, [r3, #0]
 8004750:	e01a      	b.n	8004788 <USB_EPStartXfer+0x228>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d116      	bne.n	8004788 <USB_EPStartXfer+0x228>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2250      	movs	r2, #80	; 0x50
 800475e:	5a9b      	ldrh	r3, [r3, r2]
 8004760:	b29b      	uxth	r3, r3
 8004762:	001a      	movs	r2, r3
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	189b      	adds	r3, r3, r2
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	00da      	lsls	r2, r3, #3
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	18d3      	adds	r3, r2, r3
 8004774:	4a72      	ldr	r2, [pc, #456]	; (8004940 <USB_EPStartXfer+0x3e0>)
 8004776:	4694      	mov	ip, r2
 8004778:	4463      	add	r3, ip
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800477c:	1d7b      	adds	r3, r7, #5
 800477e:	33ff      	adds	r3, #255	; 0xff
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	b29a      	uxth	r2, r3
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004788:	2076      	movs	r0, #118	; 0x76
 800478a:	183b      	adds	r3, r7, r0
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	8952      	ldrh	r2, [r2, #10]
 8004790:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6959      	ldr	r1, [r3, #20]
 8004796:	1d7b      	adds	r3, r7, #5
 8004798:	33ff      	adds	r3, #255	; 0xff
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	b29c      	uxth	r4, r3
 800479e:	183b      	adds	r3, r7, r0
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	0023      	movs	r3, r4
 80047a6:	f001 f94d 	bl	8005a44 <USB_WritePMA>
            ep->xfer_buff += len;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	1d7b      	adds	r3, r7, #5
 80047b0:	33ff      	adds	r3, #255	; 0xff
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	18d2      	adds	r2, r2, r3
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d908      	bls.n	80047d8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	1d7b      	adds	r3, r7, #5
 80047cc:	33ff      	adds	r3, #255	; 0xff
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	1ad2      	subs	r2, r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	621a      	str	r2, [r3, #32]
 80047d6:	e007      	b.n	80047e8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	1d7a      	adds	r2, r7, #5
 80047de:	32ff      	adds	r2, #255	; 0xff
 80047e0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2200      	movs	r2, #0
 80047e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	785b      	ldrb	r3, [r3, #1]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d000      	beq.n	80047f2 <USB_EPStartXfer+0x292>
 80047f0:	e070      	b.n	80048d4 <USB_EPStartXfer+0x374>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2250      	movs	r2, #80	; 0x50
 80047fa:	5a9b      	ldrh	r3, [r3, r2]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	001a      	movs	r2, r3
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	189b      	adds	r3, r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	00da      	lsls	r2, r3, #3
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	18d3      	adds	r3, r2, r3
 8004810:	4a48      	ldr	r2, [pc, #288]	; (8004934 <USB_EPStartXfer+0x3d4>)
 8004812:	4694      	mov	ip, r2
 8004814:	4463      	add	r3, ip
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	059b      	lsls	r3, r3, #22
 8004820:	0d9b      	lsrs	r3, r3, #22
 8004822:	b29a      	uxth	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	1d7b      	adds	r3, r7, #5
 800482a:	33ff      	adds	r3, #255	; 0xff
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b3e      	cmp	r3, #62	; 0x3e
 8004830:	d922      	bls.n	8004878 <USB_EPStartXfer+0x318>
 8004832:	1d7b      	adds	r3, r7, #5
 8004834:	33ff      	adds	r3, #255	; 0xff
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	21fc      	movs	r1, #252	; 0xfc
 800483c:	187a      	adds	r2, r7, r1
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	1d7b      	adds	r3, r7, #5
 8004842:	33ff      	adds	r3, #255	; 0xff
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	221f      	movs	r2, #31
 8004848:	4013      	ands	r3, r2
 800484a:	d104      	bne.n	8004856 <USB_EPStartXfer+0x2f6>
 800484c:	187b      	adds	r3, r7, r1
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3b01      	subs	r3, #1
 8004852:	187a      	adds	r2, r7, r1
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	23fc      	movs	r3, #252	; 0xfc
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	029b      	lsls	r3, r3, #10
 8004866:	b29b      	uxth	r3, r3
 8004868:	4313      	orrs	r3, r2
 800486a:	b29b      	uxth	r3, r3
 800486c:	4a35      	ldr	r2, [pc, #212]	; (8004944 <USB_EPStartXfer+0x3e4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	b29a      	uxth	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	e04a      	b.n	800490e <USB_EPStartXfer+0x3ae>
 8004878:	1d7b      	adds	r3, r7, #5
 800487a:	33ff      	adds	r3, #255	; 0xff
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <USB_EPStartXfer+0x334>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	4a2e      	ldr	r2, [pc, #184]	; (8004944 <USB_EPStartXfer+0x3e4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	b29a      	uxth	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	e03c      	b.n	800490e <USB_EPStartXfer+0x3ae>
 8004894:	1d7b      	adds	r3, r7, #5
 8004896:	33ff      	adds	r3, #255	; 0xff
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	21fc      	movs	r1, #252	; 0xfc
 800489e:	187a      	adds	r2, r7, r1
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	1d7b      	adds	r3, r7, #5
 80048a4:	33ff      	adds	r3, #255	; 0xff
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	4013      	ands	r3, r2
 80048ac:	d004      	beq.n	80048b8 <USB_EPStartXfer+0x358>
 80048ae:	187b      	adds	r3, r7, r1
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	187a      	adds	r2, r7, r1
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29a      	uxth	r2, r3
 80048be:	23fc      	movs	r3, #252	; 0xfc
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	e01c      	b.n	800490e <USB_EPStartXfer+0x3ae>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d118      	bne.n	800490e <USB_EPStartXfer+0x3ae>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	623b      	str	r3, [r7, #32]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2250      	movs	r2, #80	; 0x50
 80048e4:	5a9b      	ldrh	r3, [r3, r2]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	001a      	movs	r2, r3
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	623b      	str	r3, [r7, #32]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	00da      	lsls	r2, r3, #3
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	18d3      	adds	r3, r2, r3
 80048fa:	4a0e      	ldr	r2, [pc, #56]	; (8004934 <USB_EPStartXfer+0x3d4>)
 80048fc:	4694      	mov	ip, r2
 80048fe:	4463      	add	r3, ip
 8004900:	61fb      	str	r3, [r7, #28]
 8004902:	1d7b      	adds	r3, r7, #5
 8004904:	33ff      	adds	r3, #255	; 0xff
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	b29a      	uxth	r2, r3
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800490e:	2076      	movs	r0, #118	; 0x76
 8004910:	183b      	adds	r3, r7, r0
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	8912      	ldrh	r2, [r2, #8]
 8004916:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6959      	ldr	r1, [r3, #20]
 800491c:	1d7b      	adds	r3, r7, #5
 800491e:	33ff      	adds	r3, #255	; 0xff
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b29c      	uxth	r4, r3
 8004924:	183b      	adds	r3, r7, r0
 8004926:	881a      	ldrh	r2, [r3, #0]
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	0023      	movs	r3, r4
 800492c:	f001 f88a 	bl	8005a44 <USB_WritePMA>
 8004930:	e329      	b.n	8004f86 <USB_EPStartXfer+0xa26>
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	00000402 	.word	0x00000402
 8004938:	ffff8f8f 	.word	0xffff8f8f
 800493c:	ffff8180 	.word	0xffff8180
 8004940:	00000406 	.word	0x00000406
 8004944:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d000      	beq.n	8004952 <USB_EPStartXfer+0x3f2>
 8004950:	e070      	b.n	8004a34 <USB_EPStartXfer+0x4d4>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	64bb      	str	r3, [r7, #72]	; 0x48
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2250      	movs	r2, #80	; 0x50
 800495a:	5a9b      	ldrh	r3, [r3, r2]
 800495c:	b29b      	uxth	r3, r3
 800495e:	001a      	movs	r2, r3
 8004960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004962:	189b      	adds	r3, r3, r2
 8004964:	64bb      	str	r3, [r7, #72]	; 0x48
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	00da      	lsls	r2, r3, #3
 800496c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496e:	18d3      	adds	r3, r2, r3
 8004970:	4acd      	ldr	r2, [pc, #820]	; (8004ca8 <USB_EPStartXfer+0x748>)
 8004972:	4694      	mov	ip, r2
 8004974:	4463      	add	r3, ip
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
 8004978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	059b      	lsls	r3, r3, #22
 8004980:	0d9b      	lsrs	r3, r3, #22
 8004982:	b29a      	uxth	r2, r3
 8004984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	1d7b      	adds	r3, r7, #5
 800498a:	33ff      	adds	r3, #255	; 0xff
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b3e      	cmp	r3, #62	; 0x3e
 8004990:	d922      	bls.n	80049d8 <USB_EPStartXfer+0x478>
 8004992:	1d7b      	adds	r3, r7, #5
 8004994:	33ff      	adds	r3, #255	; 0xff
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	21f8      	movs	r1, #248	; 0xf8
 800499c:	187a      	adds	r2, r7, r1
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	1d7b      	adds	r3, r7, #5
 80049a2:	33ff      	adds	r3, #255	; 0xff
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	221f      	movs	r2, #31
 80049a8:	4013      	ands	r3, r2
 80049aa:	d104      	bne.n	80049b6 <USB_EPStartXfer+0x456>
 80049ac:	187b      	adds	r3, r7, r1
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	187a      	adds	r2, r7, r1
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	23f8      	movs	r3, #248	; 0xf8
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	029b      	lsls	r3, r3, #10
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	4313      	orrs	r3, r2
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	4ab7      	ldr	r2, [pc, #732]	; (8004cac <USB_EPStartXfer+0x74c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	e04a      	b.n	8004a6e <USB_EPStartXfer+0x50e>
 80049d8:	1d7b      	adds	r3, r7, #5
 80049da:	33ff      	adds	r3, #255	; 0xff
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <USB_EPStartXfer+0x494>
 80049e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4ab0      	ldr	r2, [pc, #704]	; (8004cac <USB_EPStartXfer+0x74c>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f0:	801a      	strh	r2, [r3, #0]
 80049f2:	e03c      	b.n	8004a6e <USB_EPStartXfer+0x50e>
 80049f4:	1d7b      	adds	r3, r7, #5
 80049f6:	33ff      	adds	r3, #255	; 0xff
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	21f8      	movs	r1, #248	; 0xf8
 80049fe:	187a      	adds	r2, r7, r1
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	1d7b      	adds	r3, r7, #5
 8004a04:	33ff      	adds	r3, #255	; 0xff
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <USB_EPStartXfer+0x4b8>
 8004a0e:	187b      	adds	r3, r7, r1
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	187a      	adds	r2, r7, r1
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	23f8      	movs	r3, #248	; 0xf8
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	029b      	lsls	r3, r3, #10
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	e01c      	b.n	8004a6e <USB_EPStartXfer+0x50e>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d118      	bne.n	8004a6e <USB_EPStartXfer+0x50e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2250      	movs	r2, #80	; 0x50
 8004a44:	5a9b      	ldrh	r3, [r3, r2]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	001a      	movs	r2, r3
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4c:	189b      	adds	r3, r3, r2
 8004a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	00da      	lsls	r2, r3, #3
 8004a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a58:	18d3      	adds	r3, r2, r3
 8004a5a:	4a93      	ldr	r2, [pc, #588]	; (8004ca8 <USB_EPStartXfer+0x748>)
 8004a5c:	4694      	mov	ip, r2
 8004a5e:	4463      	add	r3, ip
 8004a60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a62:	1d7b      	adds	r3, r7, #5
 8004a64:	33ff      	adds	r3, #255	; 0xff
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a6e:	2076      	movs	r0, #118	; 0x76
 8004a70:	183b      	adds	r3, r7, r0
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	8912      	ldrh	r2, [r2, #8]
 8004a76:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	6959      	ldr	r1, [r3, #20]
 8004a7c:	1d7b      	adds	r3, r7, #5
 8004a7e:	33ff      	adds	r3, #255	; 0xff
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	b29c      	uxth	r4, r3
 8004a84:	183b      	adds	r3, r7, r0
 8004a86:	881a      	ldrh	r2, [r3, #0]
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	0023      	movs	r3, r4
 8004a8c:	f000 ffda 	bl	8005a44 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	1d7b      	adds	r3, r7, #5
 8004a96:	33ff      	adds	r3, #255	; 0xff
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	18d2      	adds	r2, r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6a1a      	ldr	r2, [r3, #32]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d908      	bls.n	8004abe <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	1d7b      	adds	r3, r7, #5
 8004ab2:	33ff      	adds	r3, #255	; 0xff
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	1ad2      	subs	r2, r2, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	621a      	str	r2, [r3, #32]
 8004abc:	e007      	b.n	8004ace <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	1d7a      	adds	r2, r7, #5
 8004ac4:	32ff      	adds	r2, #255	; 0xff
 8004ac6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	785b      	ldrb	r3, [r3, #1]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d000      	beq.n	8004adc <USB_EPStartXfer+0x57c>
 8004ada:	e070      	b.n	8004bbe <USB_EPStartXfer+0x65e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2250      	movs	r2, #80	; 0x50
 8004ae4:	5a9b      	ldrh	r3, [r3, r2]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	001a      	movs	r2, r3
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	189b      	adds	r3, r3, r2
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	00da      	lsls	r2, r3, #3
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	18d3      	adds	r3, r2, r3
 8004afa:	4a6d      	ldr	r2, [pc, #436]	; (8004cb0 <USB_EPStartXfer+0x750>)
 8004afc:	4694      	mov	ip, r2
 8004afe:	4463      	add	r3, ip
 8004b00:	637b      	str	r3, [r7, #52]	; 0x34
 8004b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	059b      	lsls	r3, r3, #22
 8004b0a:	0d9b      	lsrs	r3, r3, #22
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b10:	801a      	strh	r2, [r3, #0]
 8004b12:	1d7b      	adds	r3, r7, #5
 8004b14:	33ff      	adds	r3, #255	; 0xff
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b3e      	cmp	r3, #62	; 0x3e
 8004b1a:	d922      	bls.n	8004b62 <USB_EPStartXfer+0x602>
 8004b1c:	1d7b      	adds	r3, r7, #5
 8004b1e:	33ff      	adds	r3, #255	; 0xff
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	21f4      	movs	r1, #244	; 0xf4
 8004b26:	187a      	adds	r2, r7, r1
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	1d7b      	adds	r3, r7, #5
 8004b2c:	33ff      	adds	r3, #255	; 0xff
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	221f      	movs	r2, #31
 8004b32:	4013      	ands	r3, r2
 8004b34:	d104      	bne.n	8004b40 <USB_EPStartXfer+0x5e0>
 8004b36:	187b      	adds	r3, r7, r1
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	187a      	adds	r2, r7, r1
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	23f4      	movs	r3, #244	; 0xf4
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	029b      	lsls	r3, r3, #10
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4313      	orrs	r3, r2
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	4a55      	ldr	r2, [pc, #340]	; (8004cac <USB_EPStartXfer+0x74c>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	801a      	strh	r2, [r3, #0]
 8004b60:	e048      	b.n	8004bf4 <USB_EPStartXfer+0x694>
 8004b62:	1d7b      	adds	r3, r7, #5
 8004b64:	33ff      	adds	r3, #255	; 0xff
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d108      	bne.n	8004b7e <USB_EPStartXfer+0x61e>
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	4a4e      	ldr	r2, [pc, #312]	; (8004cac <USB_EPStartXfer+0x74c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7a:	801a      	strh	r2, [r3, #0]
 8004b7c:	e03a      	b.n	8004bf4 <USB_EPStartXfer+0x694>
 8004b7e:	1d7b      	adds	r3, r7, #5
 8004b80:	33ff      	adds	r3, #255	; 0xff
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	21f4      	movs	r1, #244	; 0xf4
 8004b88:	187a      	adds	r2, r7, r1
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	1d7b      	adds	r3, r7, #5
 8004b8e:	33ff      	adds	r3, #255	; 0xff
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2201      	movs	r2, #1
 8004b94:	4013      	ands	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <USB_EPStartXfer+0x642>
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	187a      	adds	r2, r7, r1
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	23f4      	movs	r3, #244	; 0xf4
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	029b      	lsls	r3, r3, #10
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e01a      	b.n	8004bf4 <USB_EPStartXfer+0x694>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d116      	bne.n	8004bf4 <USB_EPStartXfer+0x694>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2250      	movs	r2, #80	; 0x50
 8004bca:	5a9b      	ldrh	r3, [r3, r2]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	001a      	movs	r2, r3
 8004bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	00da      	lsls	r2, r3, #3
 8004bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bde:	18d3      	adds	r3, r2, r3
 8004be0:	4a33      	ldr	r2, [pc, #204]	; (8004cb0 <USB_EPStartXfer+0x750>)
 8004be2:	4694      	mov	ip, r2
 8004be4:	4463      	add	r3, ip
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be8:	1d7b      	adds	r3, r7, #5
 8004bea:	33ff      	adds	r3, #255	; 0xff
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bf4:	2076      	movs	r0, #118	; 0x76
 8004bf6:	183b      	adds	r3, r7, r0
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	8952      	ldrh	r2, [r2, #10]
 8004bfc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6959      	ldr	r1, [r3, #20]
 8004c02:	1d7b      	adds	r3, r7, #5
 8004c04:	33ff      	adds	r3, #255	; 0xff
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	b29c      	uxth	r4, r3
 8004c0a:	183b      	adds	r3, r7, r0
 8004c0c:	881a      	ldrh	r2, [r3, #0]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	0023      	movs	r3, r4
 8004c12:	f000 ff17 	bl	8005a44 <USB_WritePMA>
 8004c16:	e1b6      	b.n	8004f86 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	1d7a      	adds	r2, r7, #5
 8004c1e:	32ff      	adds	r2, #255	; 0xff
 8004c20:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	18d3      	adds	r3, r2, r3
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	2062      	movs	r0, #98	; 0x62
 8004c32:	183b      	adds	r3, r7, r0
 8004c34:	491f      	ldr	r1, [pc, #124]	; (8004cb4 <USB_EPStartXfer+0x754>)
 8004c36:	400a      	ands	r2, r1
 8004c38:	801a      	strh	r2, [r3, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	18d3      	adds	r3, r2, r3
 8004c44:	183a      	adds	r2, r7, r0
 8004c46:	8812      	ldrh	r2, [r2, #0]
 8004c48:	491b      	ldr	r1, [pc, #108]	; (8004cb8 <USB_EPStartXfer+0x758>)
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	b292      	uxth	r2, r2
 8004c4e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2250      	movs	r2, #80	; 0x50
 8004c58:	5a9b      	ldrh	r3, [r3, r2]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	001a      	movs	r2, r3
 8004c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c60:	189b      	adds	r3, r3, r2
 8004c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	00da      	lsls	r2, r3, #3
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c6c:	18d3      	adds	r3, r2, r3
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <USB_EPStartXfer+0x748>)
 8004c70:	4694      	mov	ip, r2
 8004c72:	4463      	add	r3, ip
 8004c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c76:	1d7b      	adds	r3, r7, #5
 8004c78:	33ff      	adds	r3, #255	; 0xff
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004c82:	2076      	movs	r0, #118	; 0x76
 8004c84:	183b      	adds	r3, r7, r0
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	8912      	ldrh	r2, [r2, #8]
 8004c8a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6959      	ldr	r1, [r3, #20]
 8004c90:	1d7b      	adds	r3, r7, #5
 8004c92:	33ff      	adds	r3, #255	; 0xff
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	b29c      	uxth	r4, r3
 8004c98:	183b      	adds	r3, r7, r0
 8004c9a:	881a      	ldrh	r2, [r3, #0]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	0023      	movs	r3, r4
 8004ca0:	f000 fed0 	bl	8005a44 <USB_WritePMA>
 8004ca4:	e16f      	b.n	8004f86 <USB_EPStartXfer+0xa26>
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	00000402 	.word	0x00000402
 8004cac:	ffff8000 	.word	0xffff8000
 8004cb0:	00000406 	.word	0x00000406
 8004cb4:	ffff8e8f 	.word	0xffff8e8f
 8004cb8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	6a1a      	ldr	r2, [r3, #32]
 8004cc0:	1d7b      	adds	r3, r7, #5
 8004cc2:	33ff      	adds	r3, #255	; 0xff
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1ad2      	subs	r2, r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	001a      	movs	r2, r3
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d100      	bne.n	8004ce4 <USB_EPStartXfer+0x784>
 8004ce2:	e0a4      	b.n	8004e2e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d000      	beq.n	8004cf2 <USB_EPStartXfer+0x792>
 8004cf0:	e070      	b.n	8004dd4 <USB_EPStartXfer+0x874>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2250      	movs	r2, #80	; 0x50
 8004cfa:	5a9b      	ldrh	r3, [r3, r2]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	001a      	movs	r2, r3
 8004d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	00da      	lsls	r2, r3, #3
 8004d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d0e:	18d3      	adds	r3, r2, r3
 8004d10:	4abc      	ldr	r2, [pc, #752]	; (8005004 <USB_EPStartXfer+0xaa4>)
 8004d12:	4694      	mov	ip, r2
 8004d14:	4463      	add	r3, ip
 8004d16:	667b      	str	r3, [r7, #100]	; 0x64
 8004d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	059b      	lsls	r3, r3, #22
 8004d20:	0d9b      	lsrs	r3, r3, #22
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d26:	801a      	strh	r2, [r3, #0]
 8004d28:	1d7b      	adds	r3, r7, #5
 8004d2a:	33ff      	adds	r3, #255	; 0xff
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d30:	d922      	bls.n	8004d78 <USB_EPStartXfer+0x818>
 8004d32:	1d7b      	adds	r3, r7, #5
 8004d34:	33ff      	adds	r3, #255	; 0xff
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	21f0      	movs	r1, #240	; 0xf0
 8004d3c:	187a      	adds	r2, r7, r1
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	1d7b      	adds	r3, r7, #5
 8004d42:	33ff      	adds	r3, #255	; 0xff
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	221f      	movs	r2, #31
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d104      	bne.n	8004d56 <USB_EPStartXfer+0x7f6>
 8004d4c:	187b      	adds	r3, r7, r1
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	187a      	adds	r2, r7, r1
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	23f0      	movs	r3, #240	; 0xf0
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4aa6      	ldr	r2, [pc, #664]	; (8005008 <USB_EPStartXfer+0xaa8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e048      	b.n	8004e0a <USB_EPStartXfer+0x8aa>
 8004d78:	1d7b      	adds	r3, r7, #5
 8004d7a:	33ff      	adds	r3, #255	; 0xff
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d108      	bne.n	8004d94 <USB_EPStartXfer+0x834>
 8004d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	4a9f      	ldr	r2, [pc, #636]	; (8005008 <USB_EPStartXfer+0xaa8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	e03a      	b.n	8004e0a <USB_EPStartXfer+0x8aa>
 8004d94:	1d7b      	adds	r3, r7, #5
 8004d96:	33ff      	adds	r3, #255	; 0xff
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	21f0      	movs	r1, #240	; 0xf0
 8004d9e:	187a      	adds	r2, r7, r1
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	1d7b      	adds	r3, r7, #5
 8004da4:	33ff      	adds	r3, #255	; 0xff
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2201      	movs	r2, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	d004      	beq.n	8004db8 <USB_EPStartXfer+0x858>
 8004dae:	187b      	adds	r3, r7, r1
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	187a      	adds	r2, r7, r1
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	23f0      	movs	r3, #240	; 0xf0
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	029b      	lsls	r3, r3, #10
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	e01a      	b.n	8004e0a <USB_EPStartXfer+0x8aa>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d116      	bne.n	8004e0a <USB_EPStartXfer+0x8aa>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2250      	movs	r2, #80	; 0x50
 8004de0:	5a9b      	ldrh	r3, [r3, r2]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	001a      	movs	r2, r3
 8004de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004de8:	189b      	adds	r3, r3, r2
 8004dea:	673b      	str	r3, [r7, #112]	; 0x70
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	00da      	lsls	r2, r3, #3
 8004df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004df4:	18d3      	adds	r3, r2, r3
 8004df6:	4a83      	ldr	r2, [pc, #524]	; (8005004 <USB_EPStartXfer+0xaa4>)
 8004df8:	4694      	mov	ip, r2
 8004dfa:	4463      	add	r3, ip
 8004dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dfe:	1d7b      	adds	r3, r7, #5
 8004e00:	33ff      	adds	r3, #255	; 0xff
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004e0a:	2076      	movs	r0, #118	; 0x76
 8004e0c:	183b      	adds	r3, r7, r0
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	8952      	ldrh	r2, [r2, #10]
 8004e12:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	6959      	ldr	r1, [r3, #20]
 8004e18:	1d7b      	adds	r3, r7, #5
 8004e1a:	33ff      	adds	r3, #255	; 0xff
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	b29c      	uxth	r4, r3
 8004e20:	183b      	adds	r3, r7, r0
 8004e22:	881a      	ldrh	r2, [r3, #0]
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	0023      	movs	r3, r4
 8004e28:	f000 fe0c 	bl	8005a44 <USB_WritePMA>
 8004e2c:	e0ab      	b.n	8004f86 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	785b      	ldrb	r3, [r3, #1]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d000      	beq.n	8004e38 <USB_EPStartXfer+0x8d8>
 8004e36:	e070      	b.n	8004f1a <USB_EPStartXfer+0x9ba>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2250      	movs	r2, #80	; 0x50
 8004e40:	5a9b      	ldrh	r3, [r3, r2]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	001a      	movs	r2, r3
 8004e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e48:	189b      	adds	r3, r3, r2
 8004e4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	00da      	lsls	r2, r3, #3
 8004e52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e54:	18d3      	adds	r3, r2, r3
 8004e56:	4a6d      	ldr	r2, [pc, #436]	; (800500c <USB_EPStartXfer+0xaac>)
 8004e58:	4694      	mov	ip, r2
 8004e5a:	4463      	add	r3, ip
 8004e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	059b      	lsls	r3, r3, #22
 8004e66:	0d9b      	lsrs	r3, r3, #22
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e6c:	801a      	strh	r2, [r3, #0]
 8004e6e:	1d7b      	adds	r3, r7, #5
 8004e70:	33ff      	adds	r3, #255	; 0xff
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b3e      	cmp	r3, #62	; 0x3e
 8004e76:	d922      	bls.n	8004ebe <USB_EPStartXfer+0x95e>
 8004e78:	1d7b      	adds	r3, r7, #5
 8004e7a:	33ff      	adds	r3, #255	; 0xff
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	21ec      	movs	r1, #236	; 0xec
 8004e82:	187a      	adds	r2, r7, r1
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	1d7b      	adds	r3, r7, #5
 8004e88:	33ff      	adds	r3, #255	; 0xff
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	221f      	movs	r2, #31
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d104      	bne.n	8004e9c <USB_EPStartXfer+0x93c>
 8004e92:	187b      	adds	r3, r7, r1
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	187a      	adds	r2, r7, r1
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	23ec      	movs	r3, #236	; 0xec
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	029b      	lsls	r3, r3, #10
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	4a55      	ldr	r2, [pc, #340]	; (8005008 <USB_EPStartXfer+0xaa8>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e052      	b.n	8004f64 <USB_EPStartXfer+0xa04>
 8004ebe:	1d7b      	adds	r3, r7, #5
 8004ec0:	33ff      	adds	r3, #255	; 0xff
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d108      	bne.n	8004eda <USB_EPStartXfer+0x97a>
 8004ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	4a4e      	ldr	r2, [pc, #312]	; (8005008 <USB_EPStartXfer+0xaa8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	e044      	b.n	8004f64 <USB_EPStartXfer+0xa04>
 8004eda:	1d7b      	adds	r3, r7, #5
 8004edc:	33ff      	adds	r3, #255	; 0xff
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	21ec      	movs	r1, #236	; 0xec
 8004ee4:	187a      	adds	r2, r7, r1
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	1d7b      	adds	r3, r7, #5
 8004eea:	33ff      	adds	r3, #255	; 0xff
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d004      	beq.n	8004efe <USB_EPStartXfer+0x99e>
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	187a      	adds	r2, r7, r1
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	23ec      	movs	r3, #236	; 0xec
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	029b      	lsls	r3, r3, #10
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	4313      	orrs	r3, r2
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	e024      	b.n	8004f64 <USB_EPStartXfer+0xa04>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d120      	bne.n	8004f64 <USB_EPStartXfer+0xa04>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2184      	movs	r1, #132	; 0x84
 8004f26:	187a      	adds	r2, r7, r1
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2250      	movs	r2, #80	; 0x50
 8004f2e:	5a9b      	ldrh	r3, [r3, r2]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	001a      	movs	r2, r3
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	189b      	adds	r3, r3, r2
 8004f3a:	187a      	adds	r2, r7, r1
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	00da      	lsls	r2, r3, #3
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	18d3      	adds	r3, r2, r3
 8004f4a:	4a30      	ldr	r2, [pc, #192]	; (800500c <USB_EPStartXfer+0xaac>)
 8004f4c:	4694      	mov	ip, r2
 8004f4e:	4463      	add	r3, ip
 8004f50:	2180      	movs	r1, #128	; 0x80
 8004f52:	187a      	adds	r2, r7, r1
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	1d7b      	adds	r3, r7, #5
 8004f58:	33ff      	adds	r3, #255	; 0xff
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	187b      	adds	r3, r7, r1
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f64:	2076      	movs	r0, #118	; 0x76
 8004f66:	183b      	adds	r3, r7, r0
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	8912      	ldrh	r2, [r2, #8]
 8004f6c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6959      	ldr	r1, [r3, #20]
 8004f72:	1d7b      	adds	r3, r7, #5
 8004f74:	33ff      	adds	r3, #255	; 0xff
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	b29c      	uxth	r4, r3
 8004f7a:	183b      	adds	r3, r7, r0
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	0023      	movs	r3, r4
 8004f82:	f000 fd5f 	bl	8005a44 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	18d3      	adds	r3, r2, r3
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	200a      	movs	r0, #10
 8004f96:	183b      	adds	r3, r7, r0
 8004f98:	491d      	ldr	r1, [pc, #116]	; (8005010 <USB_EPStartXfer+0xab0>)
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	801a      	strh	r2, [r3, #0]
 8004f9e:	183b      	adds	r3, r7, r0
 8004fa0:	183a      	adds	r2, r7, r0
 8004fa2:	8812      	ldrh	r2, [r2, #0]
 8004fa4:	2110      	movs	r1, #16
 8004fa6:	404a      	eors	r2, r1
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	183b      	adds	r3, r7, r0
 8004fac:	183a      	adds	r2, r7, r0
 8004fae:	8812      	ldrh	r2, [r2, #0]
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	404a      	eors	r2, r1
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	18d3      	adds	r3, r2, r3
 8004fc0:	183a      	adds	r2, r7, r0
 8004fc2:	8812      	ldrh	r2, [r2, #0]
 8004fc4:	4913      	ldr	r1, [pc, #76]	; (8005014 <USB_EPStartXfer+0xab4>)
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	f000 fbf4 	bl	80057b8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	7b1b      	ldrb	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d000      	beq.n	8004fda <USB_EPStartXfer+0xa7a>
 8004fd8:	e0a9      	b.n	800512e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d918      	bls.n	8005018 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	1d7a      	adds	r2, r7, #5
 8004fec:	32ff      	adds	r2, #255	; 0xff
 8004fee:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	1d7b      	adds	r3, r7, #5
 8004ff6:	33ff      	adds	r3, #255	; 0xff
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1ad2      	subs	r2, r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	619a      	str	r2, [r3, #24]
 8005000:	e012      	b.n	8005028 <USB_EPStartXfer+0xac8>
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	00000406 	.word	0x00000406
 8005008:	ffff8000 	.word	0xffff8000
 800500c:	00000402 	.word	0x00000402
 8005010:	ffff8fbf 	.word	0xffff8fbf
 8005014:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	1d7a      	adds	r2, r7, #5
 800501e:	32ff      	adds	r2, #255	; 0xff
 8005020:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2190      	movs	r1, #144	; 0x90
 800502c:	187a      	adds	r2, r7, r1
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2250      	movs	r2, #80	; 0x50
 8005034:	5a9b      	ldrh	r3, [r3, r2]
 8005036:	b29b      	uxth	r3, r3
 8005038:	001a      	movs	r2, r3
 800503a:	187b      	adds	r3, r7, r1
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	189b      	adds	r3, r3, r2
 8005040:	187a      	adds	r2, r7, r1
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	00da      	lsls	r2, r3, #3
 800504a:	187b      	adds	r3, r7, r1
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	18d3      	adds	r3, r2, r3
 8005050:	4acf      	ldr	r2, [pc, #828]	; (8005390 <USB_EPStartXfer+0xe30>)
 8005052:	4694      	mov	ip, r2
 8005054:	4463      	add	r3, ip
 8005056:	218c      	movs	r1, #140	; 0x8c
 8005058:	187a      	adds	r2, r7, r1
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	187b      	adds	r3, r7, r1
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	059b      	lsls	r3, r3, #22
 8005066:	0d9b      	lsrs	r3, r3, #22
 8005068:	b29a      	uxth	r2, r3
 800506a:	187b      	adds	r3, r7, r1
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	801a      	strh	r2, [r3, #0]
 8005070:	1d7b      	adds	r3, r7, #5
 8005072:	33ff      	adds	r3, #255	; 0xff
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b3e      	cmp	r3, #62	; 0x3e
 8005078:	d925      	bls.n	80050c6 <USB_EPStartXfer+0xb66>
 800507a:	1d7b      	adds	r3, r7, #5
 800507c:	33ff      	adds	r3, #255	; 0xff
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	21e8      	movs	r1, #232	; 0xe8
 8005084:	187a      	adds	r2, r7, r1
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	1d7b      	adds	r3, r7, #5
 800508a:	33ff      	adds	r3, #255	; 0xff
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	221f      	movs	r2, #31
 8005090:	4013      	ands	r3, r2
 8005092:	d104      	bne.n	800509e <USB_EPStartXfer+0xb3e>
 8005094:	187b      	adds	r3, r7, r1
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3b01      	subs	r3, #1
 800509a:	187a      	adds	r2, r7, r1
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	218c      	movs	r1, #140	; 0x8c
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	23e8      	movs	r3, #232	; 0xe8
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	029b      	lsls	r3, r3, #10
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	4313      	orrs	r3, r2
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	4ab6      	ldr	r2, [pc, #728]	; (8005394 <USB_EPStartXfer+0xe34>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	b29a      	uxth	r2, r3
 80050be:	187b      	adds	r3, r7, r1
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	e353      	b.n	800576e <USB_EPStartXfer+0x120e>
 80050c6:	1d7b      	adds	r3, r7, #5
 80050c8:	33ff      	adds	r3, #255	; 0xff
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <USB_EPStartXfer+0xb88>
 80050d0:	218c      	movs	r1, #140	; 0x8c
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	4aae      	ldr	r2, [pc, #696]	; (8005394 <USB_EPStartXfer+0xe34>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	b29a      	uxth	r2, r3
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	e342      	b.n	800576e <USB_EPStartXfer+0x120e>
 80050e8:	1d7b      	adds	r3, r7, #5
 80050ea:	33ff      	adds	r3, #255	; 0xff
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	21e8      	movs	r1, #232	; 0xe8
 80050f2:	187a      	adds	r2, r7, r1
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	1d7b      	adds	r3, r7, #5
 80050f8:	33ff      	adds	r3, #255	; 0xff
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2201      	movs	r2, #1
 80050fe:	4013      	ands	r3, r2
 8005100:	d004      	beq.n	800510c <USB_EPStartXfer+0xbac>
 8005102:	187b      	adds	r3, r7, r1
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	187a      	adds	r2, r7, r1
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	218c      	movs	r1, #140	; 0x8c
 800510e:	187b      	adds	r3, r7, r1
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b29a      	uxth	r2, r3
 8005116:	23e8      	movs	r3, #232	; 0xe8
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	029b      	lsls	r3, r3, #10
 8005120:	b29b      	uxth	r3, r3
 8005122:	4313      	orrs	r3, r2
 8005124:	b29a      	uxth	r2, r3
 8005126:	187b      	adds	r3, r7, r1
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	e31f      	b.n	800576e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	78db      	ldrb	r3, [r3, #3]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d000      	beq.n	8005138 <USB_EPStartXfer+0xbd8>
 8005136:	e191      	b.n	800545c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d000      	beq.n	8005142 <USB_EPStartXfer+0xbe2>
 8005140:	e07c      	b.n	800523c <USB_EPStartXfer+0xcdc>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	21ac      	movs	r1, #172	; 0xac
 8005146:	187a      	adds	r2, r7, r1
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2250      	movs	r2, #80	; 0x50
 800514e:	5a9b      	ldrh	r3, [r3, r2]
 8005150:	b29b      	uxth	r3, r3
 8005152:	001a      	movs	r2, r3
 8005154:	187b      	adds	r3, r7, r1
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	189b      	adds	r3, r3, r2
 800515a:	187a      	adds	r2, r7, r1
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	00da      	lsls	r2, r3, #3
 8005164:	187b      	adds	r3, r7, r1
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	18d3      	adds	r3, r2, r3
 800516a:	4a8b      	ldr	r2, [pc, #556]	; (8005398 <USB_EPStartXfer+0xe38>)
 800516c:	4694      	mov	ip, r2
 800516e:	4463      	add	r3, ip
 8005170:	21a8      	movs	r1, #168	; 0xa8
 8005172:	187a      	adds	r2, r7, r1
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	187b      	adds	r3, r7, r1
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	059b      	lsls	r3, r3, #22
 8005180:	0d9b      	lsrs	r3, r3, #22
 8005182:	b29a      	uxth	r2, r3
 8005184:	187b      	adds	r3, r7, r1
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b3e      	cmp	r3, #62	; 0x3e
 8005190:	d923      	bls.n	80051da <USB_EPStartXfer+0xc7a>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	21e4      	movs	r1, #228	; 0xe4
 800519a:	187a      	adds	r2, r7, r1
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	221f      	movs	r2, #31
 80051a4:	4013      	ands	r3, r2
 80051a6:	d104      	bne.n	80051b2 <USB_EPStartXfer+0xc52>
 80051a8:	187b      	adds	r3, r7, r1
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	187a      	adds	r2, r7, r1
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	21a8      	movs	r1, #168	; 0xa8
 80051b4:	187b      	adds	r3, r7, r1
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	23e4      	movs	r3, #228	; 0xe4
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	029b      	lsls	r3, r3, #10
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4313      	orrs	r3, r2
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4a71      	ldr	r2, [pc, #452]	; (8005394 <USB_EPStartXfer+0xe34>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	e054      	b.n	8005284 <USB_EPStartXfer+0xd24>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <USB_EPStartXfer+0xc9a>
 80051e2:	21a8      	movs	r1, #168	; 0xa8
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4a69      	ldr	r2, [pc, #420]	; (8005394 <USB_EPStartXfer+0xe34>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	187b      	adds	r3, r7, r1
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	e044      	b.n	8005284 <USB_EPStartXfer+0xd24>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	21e4      	movs	r1, #228	; 0xe4
 8005202:	187a      	adds	r2, r7, r1
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2201      	movs	r2, #1
 800520c:	4013      	ands	r3, r2
 800520e:	d004      	beq.n	800521a <USB_EPStartXfer+0xcba>
 8005210:	187b      	adds	r3, r7, r1
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	187a      	adds	r2, r7, r1
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	21a8      	movs	r1, #168	; 0xa8
 800521c:	187b      	adds	r3, r7, r1
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29a      	uxth	r2, r3
 8005224:	23e4      	movs	r3, #228	; 0xe4
 8005226:	18fb      	adds	r3, r7, r3
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	029b      	lsls	r3, r3, #10
 800522e:	b29b      	uxth	r3, r3
 8005230:	4313      	orrs	r3, r2
 8005232:	b29a      	uxth	r2, r3
 8005234:	187b      	adds	r3, r7, r1
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e023      	b.n	8005284 <USB_EPStartXfer+0xd24>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d11f      	bne.n	8005284 <USB_EPStartXfer+0xd24>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	21b4      	movs	r1, #180	; 0xb4
 8005248:	187a      	adds	r2, r7, r1
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2250      	movs	r2, #80	; 0x50
 8005250:	5a9b      	ldrh	r3, [r3, r2]
 8005252:	b29b      	uxth	r3, r3
 8005254:	001a      	movs	r2, r3
 8005256:	187b      	adds	r3, r7, r1
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	189b      	adds	r3, r3, r2
 800525c:	187a      	adds	r2, r7, r1
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	00da      	lsls	r2, r3, #3
 8005266:	187b      	adds	r3, r7, r1
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	18d3      	adds	r3, r2, r3
 800526c:	4a4a      	ldr	r2, [pc, #296]	; (8005398 <USB_EPStartXfer+0xe38>)
 800526e:	4694      	mov	ip, r2
 8005270:	4463      	add	r3, ip
 8005272:	21b0      	movs	r1, #176	; 0xb0
 8005274:	187a      	adds	r2, r7, r1
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	b29a      	uxth	r2, r3
 800527e:	187b      	adds	r3, r7, r1
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	22a4      	movs	r2, #164	; 0xa4
 8005288:	18ba      	adds	r2, r7, r2
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d000      	beq.n	8005296 <USB_EPStartXfer+0xd36>
 8005294:	e082      	b.n	800539c <USB_EPStartXfer+0xe3c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	219c      	movs	r1, #156	; 0x9c
 800529a:	187a      	adds	r2, r7, r1
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2250      	movs	r2, #80	; 0x50
 80052a2:	5a9b      	ldrh	r3, [r3, r2]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	001a      	movs	r2, r3
 80052a8:	187b      	adds	r3, r7, r1
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	189b      	adds	r3, r3, r2
 80052ae:	187a      	adds	r2, r7, r1
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	00da      	lsls	r2, r3, #3
 80052b8:	187b      	adds	r3, r7, r1
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	18d3      	adds	r3, r2, r3
 80052be:	4a34      	ldr	r2, [pc, #208]	; (8005390 <USB_EPStartXfer+0xe30>)
 80052c0:	4694      	mov	ip, r2
 80052c2:	4463      	add	r3, ip
 80052c4:	2198      	movs	r1, #152	; 0x98
 80052c6:	187a      	adds	r2, r7, r1
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	059b      	lsls	r3, r3, #22
 80052d4:	0d9b      	lsrs	r3, r3, #22
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	187b      	adds	r3, r7, r1
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b3e      	cmp	r3, #62	; 0x3e
 80052e4:	d923      	bls.n	800532e <USB_EPStartXfer+0xdce>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	21e0      	movs	r1, #224	; 0xe0
 80052ee:	187a      	adds	r2, r7, r1
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	221f      	movs	r2, #31
 80052f8:	4013      	ands	r3, r2
 80052fa:	d104      	bne.n	8005306 <USB_EPStartXfer+0xda6>
 80052fc:	187b      	adds	r3, r7, r1
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3b01      	subs	r3, #1
 8005302:	187a      	adds	r2, r7, r1
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	2198      	movs	r1, #152	; 0x98
 8005308:	187b      	adds	r3, r7, r1
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29a      	uxth	r2, r3
 8005310:	23e0      	movs	r3, #224	; 0xe0
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	029b      	lsls	r3, r3, #10
 800531a:	b29b      	uxth	r3, r3
 800531c:	4313      	orrs	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	4a1c      	ldr	r2, [pc, #112]	; (8005394 <USB_EPStartXfer+0xe34>)
 8005322:	4313      	orrs	r3, r2
 8005324:	b29a      	uxth	r2, r3
 8005326:	187b      	adds	r3, r7, r1
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	e057      	b.n	80053de <USB_EPStartXfer+0xe7e>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <USB_EPStartXfer+0xdee>
 8005336:	2198      	movs	r1, #152	; 0x98
 8005338:	187b      	adds	r3, r7, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <USB_EPStartXfer+0xe34>)
 8005342:	4313      	orrs	r3, r2
 8005344:	b29a      	uxth	r2, r3
 8005346:	187b      	adds	r3, r7, r1
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	e047      	b.n	80053de <USB_EPStartXfer+0xe7e>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	21e0      	movs	r1, #224	; 0xe0
 8005356:	187a      	adds	r2, r7, r1
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2201      	movs	r2, #1
 8005360:	4013      	ands	r3, r2
 8005362:	d004      	beq.n	800536e <USB_EPStartXfer+0xe0e>
 8005364:	187b      	adds	r3, r7, r1
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3301      	adds	r3, #1
 800536a:	187a      	adds	r2, r7, r1
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	2198      	movs	r1, #152	; 0x98
 8005370:	187b      	adds	r3, r7, r1
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29a      	uxth	r2, r3
 8005378:	23e0      	movs	r3, #224	; 0xe0
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	029b      	lsls	r3, r3, #10
 8005382:	b29b      	uxth	r3, r3
 8005384:	4313      	orrs	r3, r2
 8005386:	b29a      	uxth	r2, r3
 8005388:	187b      	adds	r3, r7, r1
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	e026      	b.n	80053de <USB_EPStartXfer+0xe7e>
 8005390:	00000406 	.word	0x00000406
 8005394:	ffff8000 	.word	0xffff8000
 8005398:	00000402 	.word	0x00000402
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d11c      	bne.n	80053de <USB_EPStartXfer+0xe7e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2250      	movs	r2, #80	; 0x50
 80053a8:	5a9b      	ldrh	r3, [r3, r2]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	001a      	movs	r2, r3
 80053ae:	21a4      	movs	r1, #164	; 0xa4
 80053b0:	187b      	adds	r3, r7, r1
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	189b      	adds	r3, r3, r2
 80053b6:	187a      	adds	r2, r7, r1
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	00da      	lsls	r2, r3, #3
 80053c0:	187b      	adds	r3, r7, r1
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	18d3      	adds	r3, r2, r3
 80053c6:	4ad2      	ldr	r2, [pc, #840]	; (8005710 <USB_EPStartXfer+0x11b0>)
 80053c8:	4694      	mov	ip, r2
 80053ca:	4463      	add	r3, ip
 80053cc:	21a0      	movs	r1, #160	; 0xa0
 80053ce:	187a      	adds	r2, r7, r1
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	187b      	adds	r3, r7, r1
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d100      	bne.n	80053e8 <USB_EPStartXfer+0xe88>
 80053e6:	e1c2      	b.n	800576e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	18d2      	adds	r2, r2, r3
 80053f2:	2196      	movs	r1, #150	; 0x96
 80053f4:	187b      	adds	r3, r7, r1
 80053f6:	8812      	ldrh	r2, [r2, #0]
 80053f8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80053fa:	187b      	adds	r3, r7, r1
 80053fc:	881a      	ldrh	r2, [r3, #0]
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	01db      	lsls	r3, r3, #7
 8005402:	4013      	ands	r3, r2
 8005404:	d004      	beq.n	8005410 <USB_EPStartXfer+0xeb0>
 8005406:	187b      	adds	r3, r7, r1
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	2240      	movs	r2, #64	; 0x40
 800540c:	4013      	ands	r3, r2
 800540e:	d10d      	bne.n	800542c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005410:	2196      	movs	r1, #150	; 0x96
 8005412:	187b      	adds	r3, r7, r1
 8005414:	881a      	ldrh	r2, [r3, #0]
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	01db      	lsls	r3, r3, #7
 800541a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800541c:	d000      	beq.n	8005420 <USB_EPStartXfer+0xec0>
 800541e:	e1a6      	b.n	800576e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005420:	187b      	adds	r3, r7, r1
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	2240      	movs	r2, #64	; 0x40
 8005426:	4013      	ands	r3, r2
 8005428:	d000      	beq.n	800542c <USB_EPStartXfer+0xecc>
 800542a:	e1a0      	b.n	800576e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	18d3      	adds	r3, r2, r3
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29a      	uxth	r2, r3
 800543a:	2094      	movs	r0, #148	; 0x94
 800543c:	183b      	adds	r3, r7, r0
 800543e:	49b5      	ldr	r1, [pc, #724]	; (8005714 <USB_EPStartXfer+0x11b4>)
 8005440:	400a      	ands	r2, r1
 8005442:	801a      	strh	r2, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	18d3      	adds	r3, r2, r3
 800544e:	183a      	adds	r2, r7, r0
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	49b1      	ldr	r1, [pc, #708]	; (8005718 <USB_EPStartXfer+0x11b8>)
 8005454:	430a      	orrs	r2, r1
 8005456:	b292      	uxth	r2, r2
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	e188      	b.n	800576e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	78db      	ldrb	r3, [r3, #3]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d000      	beq.n	8005466 <USB_EPStartXfer+0xf06>
 8005464:	e181      	b.n	800576a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	429a      	cmp	r2, r3
 8005470:	d90d      	bls.n	800548e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	1d7a      	adds	r2, r7, #5
 8005478:	32ff      	adds	r2, #255	; 0xff
 800547a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	699a      	ldr	r2, [r3, #24]
 8005480:	1d7b      	adds	r3, r7, #5
 8005482:	33ff      	adds	r3, #255	; 0xff
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	1ad2      	subs	r2, r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	619a      	str	r2, [r3, #24]
 800548c:	e007      	b.n	800549e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	1d7a      	adds	r2, r7, #5
 8005494:	32ff      	adds	r2, #255	; 0xff
 8005496:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d000      	beq.n	80054a8 <USB_EPStartXfer+0xf48>
 80054a6:	e082      	b.n	80055ae <USB_EPStartXfer+0x104e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	21cc      	movs	r1, #204	; 0xcc
 80054ac:	187a      	adds	r2, r7, r1
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2250      	movs	r2, #80	; 0x50
 80054b4:	5a9b      	ldrh	r3, [r3, r2]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	001a      	movs	r2, r3
 80054ba:	187b      	adds	r3, r7, r1
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	189b      	adds	r3, r3, r2
 80054c0:	187a      	adds	r2, r7, r1
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	00da      	lsls	r2, r3, #3
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	18d3      	adds	r3, r2, r3
 80054d0:	4a92      	ldr	r2, [pc, #584]	; (800571c <USB_EPStartXfer+0x11bc>)
 80054d2:	4694      	mov	ip, r2
 80054d4:	4463      	add	r3, ip
 80054d6:	21c8      	movs	r1, #200	; 0xc8
 80054d8:	187a      	adds	r2, r7, r1
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	059b      	lsls	r3, r3, #22
 80054e6:	0d9b      	lsrs	r3, r3, #22
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	187b      	adds	r3, r7, r1
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	1d7b      	adds	r3, r7, #5
 80054f2:	33ff      	adds	r3, #255	; 0xff
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b3e      	cmp	r3, #62	; 0x3e
 80054f8:	d925      	bls.n	8005546 <USB_EPStartXfer+0xfe6>
 80054fa:	1d7b      	adds	r3, r7, #5
 80054fc:	33ff      	adds	r3, #255	; 0xff
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	21dc      	movs	r1, #220	; 0xdc
 8005504:	187a      	adds	r2, r7, r1
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	1d7b      	adds	r3, r7, #5
 800550a:	33ff      	adds	r3, #255	; 0xff
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	221f      	movs	r2, #31
 8005510:	4013      	ands	r3, r2
 8005512:	d104      	bne.n	800551e <USB_EPStartXfer+0xfbe>
 8005514:	187b      	adds	r3, r7, r1
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3b01      	subs	r3, #1
 800551a:	187a      	adds	r2, r7, r1
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	21c8      	movs	r1, #200	; 0xc8
 8005520:	187b      	adds	r3, r7, r1
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29a      	uxth	r2, r3
 8005528:	23dc      	movs	r3, #220	; 0xdc
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	029b      	lsls	r3, r3, #10
 8005532:	b29b      	uxth	r3, r3
 8005534:	4313      	orrs	r3, r2
 8005536:	b29b      	uxth	r3, r3
 8005538:	4a79      	ldr	r2, [pc, #484]	; (8005720 <USB_EPStartXfer+0x11c0>)
 800553a:	4313      	orrs	r3, r2
 800553c:	b29a      	uxth	r2, r3
 800553e:	187b      	adds	r3, r7, r1
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	e058      	b.n	80055f8 <USB_EPStartXfer+0x1098>
 8005546:	1d7b      	adds	r3, r7, #5
 8005548:	33ff      	adds	r3, #255	; 0xff
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <USB_EPStartXfer+0x1008>
 8005550:	21c8      	movs	r1, #200	; 0xc8
 8005552:	187b      	adds	r3, r7, r1
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	4a71      	ldr	r2, [pc, #452]	; (8005720 <USB_EPStartXfer+0x11c0>)
 800555c:	4313      	orrs	r3, r2
 800555e:	b29a      	uxth	r2, r3
 8005560:	187b      	adds	r3, r7, r1
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	e047      	b.n	80055f8 <USB_EPStartXfer+0x1098>
 8005568:	1d7b      	adds	r3, r7, #5
 800556a:	33ff      	adds	r3, #255	; 0xff
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	21dc      	movs	r1, #220	; 0xdc
 8005572:	187a      	adds	r2, r7, r1
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	1d7b      	adds	r3, r7, #5
 8005578:	33ff      	adds	r3, #255	; 0xff
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2201      	movs	r2, #1
 800557e:	4013      	ands	r3, r2
 8005580:	d004      	beq.n	800558c <USB_EPStartXfer+0x102c>
 8005582:	187b      	adds	r3, r7, r1
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	187a      	adds	r2, r7, r1
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	21c8      	movs	r1, #200	; 0xc8
 800558e:	187b      	adds	r3, r7, r1
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29a      	uxth	r2, r3
 8005596:	23dc      	movs	r3, #220	; 0xdc
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	029b      	lsls	r3, r3, #10
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	4313      	orrs	r3, r2
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e024      	b.n	80055f8 <USB_EPStartXfer+0x1098>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d120      	bne.n	80055f8 <USB_EPStartXfer+0x1098>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	21d4      	movs	r1, #212	; 0xd4
 80055ba:	187a      	adds	r2, r7, r1
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2250      	movs	r2, #80	; 0x50
 80055c2:	5a9b      	ldrh	r3, [r3, r2]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	001a      	movs	r2, r3
 80055c8:	187b      	adds	r3, r7, r1
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	189b      	adds	r3, r3, r2
 80055ce:	187a      	adds	r2, r7, r1
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	00da      	lsls	r2, r3, #3
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	18d3      	adds	r3, r2, r3
 80055de:	4a4f      	ldr	r2, [pc, #316]	; (800571c <USB_EPStartXfer+0x11bc>)
 80055e0:	4694      	mov	ip, r2
 80055e2:	4463      	add	r3, ip
 80055e4:	21d0      	movs	r1, #208	; 0xd0
 80055e6:	187a      	adds	r2, r7, r1
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	1d7b      	adds	r3, r7, #5
 80055ec:	33ff      	adds	r3, #255	; 0xff
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	187b      	adds	r3, r7, r1
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	22c4      	movs	r2, #196	; 0xc4
 80055fc:	18ba      	adds	r2, r7, r2
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d000      	beq.n	800560a <USB_EPStartXfer+0x10aa>
 8005608:	e08c      	b.n	8005724 <USB_EPStartXfer+0x11c4>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	21bc      	movs	r1, #188	; 0xbc
 800560e:	187a      	adds	r2, r7, r1
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2250      	movs	r2, #80	; 0x50
 8005616:	5a9b      	ldrh	r3, [r3, r2]
 8005618:	b29b      	uxth	r3, r3
 800561a:	001a      	movs	r2, r3
 800561c:	187b      	adds	r3, r7, r1
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	189b      	adds	r3, r3, r2
 8005622:	187a      	adds	r2, r7, r1
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	00da      	lsls	r2, r3, #3
 800562c:	187b      	adds	r3, r7, r1
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	18d3      	adds	r3, r2, r3
 8005632:	4a37      	ldr	r2, [pc, #220]	; (8005710 <USB_EPStartXfer+0x11b0>)
 8005634:	4694      	mov	ip, r2
 8005636:	4463      	add	r3, ip
 8005638:	21b8      	movs	r1, #184	; 0xb8
 800563a:	187a      	adds	r2, r7, r1
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	187b      	adds	r3, r7, r1
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	059b      	lsls	r3, r3, #22
 8005648:	0d9b      	lsrs	r3, r3, #22
 800564a:	b29a      	uxth	r2, r3
 800564c:	187b      	adds	r3, r7, r1
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	1d7b      	adds	r3, r7, #5
 8005654:	33ff      	adds	r3, #255	; 0xff
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b3e      	cmp	r3, #62	; 0x3e
 800565a:	d925      	bls.n	80056a8 <USB_EPStartXfer+0x1148>
 800565c:	1d7b      	adds	r3, r7, #5
 800565e:	33ff      	adds	r3, #255	; 0xff
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	21d8      	movs	r1, #216	; 0xd8
 8005666:	187a      	adds	r2, r7, r1
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	1d7b      	adds	r3, r7, #5
 800566c:	33ff      	adds	r3, #255	; 0xff
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	221f      	movs	r2, #31
 8005672:	4013      	ands	r3, r2
 8005674:	d104      	bne.n	8005680 <USB_EPStartXfer+0x1120>
 8005676:	187b      	adds	r3, r7, r1
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3b01      	subs	r3, #1
 800567c:	187a      	adds	r2, r7, r1
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	21b8      	movs	r1, #184	; 0xb8
 8005682:	187b      	adds	r3, r7, r1
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29a      	uxth	r2, r3
 800568a:	23d8      	movs	r3, #216	; 0xd8
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	029b      	lsls	r3, r3, #10
 8005694:	b29b      	uxth	r3, r3
 8005696:	4313      	orrs	r3, r2
 8005698:	b29b      	uxth	r3, r3
 800569a:	4a21      	ldr	r2, [pc, #132]	; (8005720 <USB_EPStartXfer+0x11c0>)
 800569c:	4313      	orrs	r3, r2
 800569e:	b29a      	uxth	r2, r3
 80056a0:	187b      	adds	r3, r7, r1
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	e062      	b.n	800576e <USB_EPStartXfer+0x120e>
 80056a8:	1d7b      	adds	r3, r7, #5
 80056aa:	33ff      	adds	r3, #255	; 0xff
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <USB_EPStartXfer+0x116a>
 80056b2:	21b8      	movs	r1, #184	; 0xb8
 80056b4:	187b      	adds	r3, r7, r1
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	4a18      	ldr	r2, [pc, #96]	; (8005720 <USB_EPStartXfer+0x11c0>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	187b      	adds	r3, r7, r1
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e051      	b.n	800576e <USB_EPStartXfer+0x120e>
 80056ca:	1d7b      	adds	r3, r7, #5
 80056cc:	33ff      	adds	r3, #255	; 0xff
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	21d8      	movs	r1, #216	; 0xd8
 80056d4:	187a      	adds	r2, r7, r1
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	1d7b      	adds	r3, r7, #5
 80056da:	33ff      	adds	r3, #255	; 0xff
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2201      	movs	r2, #1
 80056e0:	4013      	ands	r3, r2
 80056e2:	d004      	beq.n	80056ee <USB_EPStartXfer+0x118e>
 80056e4:	187b      	adds	r3, r7, r1
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	187a      	adds	r2, r7, r1
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	21b8      	movs	r1, #184	; 0xb8
 80056f0:	187b      	adds	r3, r7, r1
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	23d8      	movs	r3, #216	; 0xd8
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	b29b      	uxth	r3, r3
 8005704:	4313      	orrs	r3, r2
 8005706:	b29a      	uxth	r2, r3
 8005708:	187b      	adds	r3, r7, r1
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	e02e      	b.n	800576e <USB_EPStartXfer+0x120e>
 8005710:	00000406 	.word	0x00000406
 8005714:	ffff8f8f 	.word	0xffff8f8f
 8005718:	ffff80c0 	.word	0xffff80c0
 800571c:	00000402 	.word	0x00000402
 8005720:	ffff8000 	.word	0xffff8000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d120      	bne.n	800576e <USB_EPStartXfer+0x120e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2250      	movs	r2, #80	; 0x50
 8005730:	5a9b      	ldrh	r3, [r3, r2]
 8005732:	b29b      	uxth	r3, r3
 8005734:	001a      	movs	r2, r3
 8005736:	21c4      	movs	r1, #196	; 0xc4
 8005738:	187b      	adds	r3, r7, r1
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	189b      	adds	r3, r3, r2
 800573e:	187a      	adds	r2, r7, r1
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	00da      	lsls	r2, r3, #3
 8005748:	187b      	adds	r3, r7, r1
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	18d3      	adds	r3, r2, r3
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <USB_EPStartXfer+0x1264>)
 8005750:	4694      	mov	ip, r2
 8005752:	4463      	add	r3, ip
 8005754:	21c0      	movs	r1, #192	; 0xc0
 8005756:	187a      	adds	r2, r7, r1
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	1d7b      	adds	r3, r7, #5
 800575c:	33ff      	adds	r3, #255	; 0xff
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	b29a      	uxth	r2, r3
 8005762:	187b      	adds	r3, r7, r1
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e001      	b.n	800576e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e025      	b.n	80057ba <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	18d3      	adds	r3, r2, r3
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29a      	uxth	r2, r3
 800577c:	208a      	movs	r0, #138	; 0x8a
 800577e:	183b      	adds	r3, r7, r0
 8005780:	4911      	ldr	r1, [pc, #68]	; (80057c8 <USB_EPStartXfer+0x1268>)
 8005782:	400a      	ands	r2, r1
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	183b      	adds	r3, r7, r0
 8005788:	183a      	adds	r2, r7, r0
 800578a:	8812      	ldrh	r2, [r2, #0]
 800578c:	2180      	movs	r1, #128	; 0x80
 800578e:	0149      	lsls	r1, r1, #5
 8005790:	404a      	eors	r2, r1
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	183b      	adds	r3, r7, r0
 8005796:	183a      	adds	r2, r7, r0
 8005798:	8812      	ldrh	r2, [r2, #0]
 800579a:	2180      	movs	r1, #128	; 0x80
 800579c:	0189      	lsls	r1, r1, #6
 800579e:	404a      	eors	r2, r1
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	18d3      	adds	r3, r2, r3
 80057ac:	183a      	adds	r2, r7, r0
 80057ae:	8812      	ldrh	r2, [r2, #0]
 80057b0:	4906      	ldr	r1, [pc, #24]	; (80057cc <USB_EPStartXfer+0x126c>)
 80057b2:	430a      	orrs	r2, r1
 80057b4:	b292      	uxth	r2, r2
 80057b6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	0018      	movs	r0, r3
 80057bc:	46bd      	mov	sp, r7
 80057be:	b043      	add	sp, #268	; 0x10c
 80057c0:	bd90      	pop	{r4, r7, pc}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	00000406 	.word	0x00000406
 80057c8:	ffffbf8f 	.word	0xffffbf8f
 80057cc:	ffff8080 	.word	0xffff8080

080057d0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01d      	beq.n	800581e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	18d3      	adds	r3, r2, r3
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	200c      	movs	r0, #12
 80057f2:	183b      	adds	r3, r7, r0
 80057f4:	491b      	ldr	r1, [pc, #108]	; (8005864 <USB_EPSetStall+0x94>)
 80057f6:	400a      	ands	r2, r1
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	183b      	adds	r3, r7, r0
 80057fc:	183a      	adds	r2, r7, r0
 80057fe:	8812      	ldrh	r2, [r2, #0]
 8005800:	2110      	movs	r1, #16
 8005802:	404a      	eors	r2, r1
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	18d3      	adds	r3, r2, r3
 8005810:	183a      	adds	r2, r7, r0
 8005812:	8812      	ldrh	r2, [r2, #0]
 8005814:	4914      	ldr	r1, [pc, #80]	; (8005868 <USB_EPSetStall+0x98>)
 8005816:	430a      	orrs	r2, r1
 8005818:	b292      	uxth	r2, r2
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	e01d      	b.n	800585a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	18d3      	adds	r3, r2, r3
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29a      	uxth	r2, r3
 800582c:	200e      	movs	r0, #14
 800582e:	183b      	adds	r3, r7, r0
 8005830:	490e      	ldr	r1, [pc, #56]	; (800586c <USB_EPSetStall+0x9c>)
 8005832:	400a      	ands	r2, r1
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	183b      	adds	r3, r7, r0
 8005838:	183a      	adds	r2, r7, r0
 800583a:	8812      	ldrh	r2, [r2, #0]
 800583c:	2180      	movs	r1, #128	; 0x80
 800583e:	0149      	lsls	r1, r1, #5
 8005840:	404a      	eors	r2, r1
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	18d3      	adds	r3, r2, r3
 800584e:	183a      	adds	r2, r7, r0
 8005850:	8812      	ldrh	r2, [r2, #0]
 8005852:	4905      	ldr	r1, [pc, #20]	; (8005868 <USB_EPSetStall+0x98>)
 8005854:	430a      	orrs	r2, r1
 8005856:	b292      	uxth	r2, r2
 8005858:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b004      	add	sp, #16
 8005862:	bd80      	pop	{r7, pc}
 8005864:	ffff8fbf 	.word	0xffff8fbf
 8005868:	ffff8080 	.word	0xffff8080
 800586c:	ffffbf8f 	.word	0xffffbf8f

08005870 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	7b1b      	ldrb	r3, [r3, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d000      	beq.n	8005884 <USB_EPClearStall+0x14>
 8005882:	e095      	b.n	80059b0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	785b      	ldrb	r3, [r3, #1]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d046      	beq.n	800591a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	18d2      	adds	r2, r2, r3
 8005896:	2110      	movs	r1, #16
 8005898:	187b      	adds	r3, r7, r1
 800589a:	8812      	ldrh	r2, [r2, #0]
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	187b      	adds	r3, r7, r1
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	2240      	movs	r2, #64	; 0x40
 80058a4:	4013      	ands	r3, r2
 80058a6:	d016      	beq.n	80058d6 <USB_EPClearStall+0x66>
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	18d3      	adds	r3, r2, r3
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	200e      	movs	r0, #14
 80058b8:	183b      	adds	r3, r7, r0
 80058ba:	4940      	ldr	r1, [pc, #256]	; (80059bc <USB_EPClearStall+0x14c>)
 80058bc:	400a      	ands	r2, r1
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	18d3      	adds	r3, r2, r3
 80058ca:	183a      	adds	r2, r7, r0
 80058cc:	8812      	ldrh	r2, [r2, #0]
 80058ce:	493c      	ldr	r1, [pc, #240]	; (80059c0 <USB_EPClearStall+0x150>)
 80058d0:	430a      	orrs	r2, r1
 80058d2:	b292      	uxth	r2, r2
 80058d4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	78db      	ldrb	r3, [r3, #3]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d068      	beq.n	80059b0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	18d3      	adds	r3, r2, r3
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	200c      	movs	r0, #12
 80058ee:	183b      	adds	r3, r7, r0
 80058f0:	4934      	ldr	r1, [pc, #208]	; (80059c4 <USB_EPClearStall+0x154>)
 80058f2:	400a      	ands	r2, r1
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	183b      	adds	r3, r7, r0
 80058f8:	183a      	adds	r2, r7, r0
 80058fa:	8812      	ldrh	r2, [r2, #0]
 80058fc:	2120      	movs	r1, #32
 80058fe:	404a      	eors	r2, r1
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	18d3      	adds	r3, r2, r3
 800590c:	183a      	adds	r2, r7, r0
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	492d      	ldr	r1, [pc, #180]	; (80059c8 <USB_EPClearStall+0x158>)
 8005912:	430a      	orrs	r2, r1
 8005914:	b292      	uxth	r2, r2
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	e04a      	b.n	80059b0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	18d2      	adds	r2, r2, r3
 8005924:	2116      	movs	r1, #22
 8005926:	187b      	adds	r3, r7, r1
 8005928:	8812      	ldrh	r2, [r2, #0]
 800592a:	801a      	strh	r2, [r3, #0]
 800592c:	187b      	adds	r3, r7, r1
 800592e:	881a      	ldrh	r2, [r3, #0]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	01db      	lsls	r3, r3, #7
 8005934:	4013      	ands	r3, r2
 8005936:	d016      	beq.n	8005966 <USB_EPClearStall+0xf6>
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	18d3      	adds	r3, r2, r3
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29a      	uxth	r2, r3
 8005946:	2014      	movs	r0, #20
 8005948:	183b      	adds	r3, r7, r0
 800594a:	491c      	ldr	r1, [pc, #112]	; (80059bc <USB_EPClearStall+0x14c>)
 800594c:	400a      	ands	r2, r1
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	18d3      	adds	r3, r2, r3
 800595a:	183a      	adds	r2, r7, r0
 800595c:	8812      	ldrh	r2, [r2, #0]
 800595e:	491b      	ldr	r1, [pc, #108]	; (80059cc <USB_EPClearStall+0x15c>)
 8005960:	430a      	orrs	r2, r1
 8005962:	b292      	uxth	r2, r2
 8005964:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	18d3      	adds	r3, r2, r3
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29a      	uxth	r2, r3
 8005974:	2012      	movs	r0, #18
 8005976:	183b      	adds	r3, r7, r0
 8005978:	4915      	ldr	r1, [pc, #84]	; (80059d0 <USB_EPClearStall+0x160>)
 800597a:	400a      	ands	r2, r1
 800597c:	801a      	strh	r2, [r3, #0]
 800597e:	183b      	adds	r3, r7, r0
 8005980:	183a      	adds	r2, r7, r0
 8005982:	8812      	ldrh	r2, [r2, #0]
 8005984:	2180      	movs	r1, #128	; 0x80
 8005986:	0149      	lsls	r1, r1, #5
 8005988:	404a      	eors	r2, r1
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	183b      	adds	r3, r7, r0
 800598e:	183a      	adds	r2, r7, r0
 8005990:	8812      	ldrh	r2, [r2, #0]
 8005992:	2180      	movs	r1, #128	; 0x80
 8005994:	0189      	lsls	r1, r1, #6
 8005996:	404a      	eors	r2, r1
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	18d3      	adds	r3, r2, r3
 80059a4:	183a      	adds	r2, r7, r0
 80059a6:	8812      	ldrh	r2, [r2, #0]
 80059a8:	4907      	ldr	r1, [pc, #28]	; (80059c8 <USB_EPClearStall+0x158>)
 80059aa:	430a      	orrs	r2, r1
 80059ac:	b292      	uxth	r2, r2
 80059ae:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	0018      	movs	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b006      	add	sp, #24
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	ffff8f8f 	.word	0xffff8f8f
 80059c0:	ffff80c0 	.word	0xffff80c0
 80059c4:	ffff8fbf 	.word	0xffff8fbf
 80059c8:	ffff8080 	.word	0xffff8080
 80059cc:	ffffc080 	.word	0xffffc080
 80059d0:	ffffbf8f 	.word	0xffffbf8f

080059d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	000a      	movs	r2, r1
 80059de:	1cfb      	adds	r3, r7, #3
 80059e0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80059e2:	1cfb      	adds	r3, r7, #3
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	224c      	movs	r2, #76	; 0x4c
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	0018      	movs	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b002      	add	sp, #8
 80059fa:	bd80      	pop	{r7, pc}

080059fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2258      	movs	r2, #88	; 0x58
 8005a08:	5a9b      	ldrh	r3, [r3, r2]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	4a05      	ldr	r2, [pc, #20]	; (8005a24 <USB_DevConnect+0x28>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	b299      	uxth	r1, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2258      	movs	r2, #88	; 0x58
 8005a16:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b002      	add	sp, #8
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	ffff8000 	.word	0xffff8000

08005a28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2244      	movs	r2, #68	; 0x44
 8005a34:	5a9b      	ldrh	r3, [r3, r2]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b004      	add	sp, #16
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	0019      	movs	r1, r3
 8005a50:	1dbb      	adds	r3, r7, #6
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	1c0a      	adds	r2, r1, #0
 8005a58:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	085b      	lsrs	r3, r3, #1
 8005a62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a6c:	1dbb      	adds	r3, r7, #6
 8005a6e:	881a      	ldrh	r2, [r3, #0]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	18d3      	adds	r3, r2, r3
 8005a74:	2280      	movs	r2, #128	; 0x80
 8005a76:	00d2      	lsls	r2, r2, #3
 8005a78:	4694      	mov	ip, r2
 8005a7a:	4463      	add	r3, ip
 8005a7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
 8005a82:	e020      	b.n	8005ac6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	781a      	ldrb	r2, [r3, #0]
 8005a88:	2112      	movs	r1, #18
 8005a8a:	187b      	adds	r3, r7, r1
 8005a8c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	3301      	adds	r3, #1
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	b21a      	sxth	r2, r3
 8005a98:	187b      	adds	r3, r7, r1
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	5e1b      	ldrsh	r3, [r3, r0]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b21a      	sxth	r2, r3
 8005aa2:	187b      	adds	r3, r7, r1
 8005aa4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	187a      	adds	r2, r7, r1
 8005aaa:	8812      	ldrh	r2, [r2, #0]
 8005aac:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1db      	bne.n	8005a84 <USB_WritePMA+0x40>
  }
}
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b00a      	add	sp, #40	; 0x28
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b08a      	sub	sp, #40	; 0x28
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	1dbb      	adds	r3, r7, #6
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	1d3b      	adds	r3, r7, #4
 8005ae8:	1c0a      	adds	r2, r1, #0
 8005aea:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005afe:	1dbb      	adds	r3, r7, #6
 8005b00:	881a      	ldrh	r2, [r3, #0]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	18d3      	adds	r3, r2, r3
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	00d2      	lsls	r2, r2, #3
 8005b0a:	4694      	mov	ip, r2
 8005b0c:	4463      	add	r3, ip
 8005b0e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
 8005b14:	e018      	b.n	8005b48 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	3302      	adds	r3, #2
 8005b22:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	3b01      	subs	r3, #1
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e3      	bne.n	8005b16 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	2201      	movs	r2, #1
 8005b54:	4013      	ands	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	701a      	strb	r2, [r3, #0]
  }
}
 8005b6c:	46c0      	nop			; (mov r8, r8)
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b00a      	add	sp, #40	; 0x28
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	000a      	movs	r2, r1
 8005b7e:	1cfb      	adds	r3, r7, #3
 8005b80:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	2304      	movs	r3, #4
 8005b86:	2203      	movs	r2, #3
 8005b88:	2181      	movs	r1, #129	; 0x81
 8005b8a:	f001 fe5a 	bl	8007842 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005b94:	2010      	movs	r0, #16
 8005b96:	f001 ffd7 	bl	8007b48 <USBD_static_malloc>
 8005b9a:	0001      	movs	r1, r0
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	23ae      	movs	r3, #174	; 0xae
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	23ae      	movs	r3, #174	; 0xae
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	58d3      	ldr	r3, [r2, r3]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e006      	b.n	8005bc2 <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	23ae      	movs	r3, #174	; 0xae
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	58d3      	ldr	r3, [r2, r3]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b002      	add	sp, #8
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	000a      	movs	r2, r1
 8005bd4:	1cfb      	adds	r3, r7, #3
 8005bd6:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2181      	movs	r1, #129	; 0x81
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f001 fe67 	bl	80078b0 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	23ae      	movs	r3, #174	; 0xae
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	58d3      	ldr	r3, [r2, r3]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	23ae      	movs	r3, #174	; 0xae
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	58d3      	ldr	r3, [r2, r3]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f001 ffaf 	bl	8007b60 <USBD_static_free>
    pdev->pClassData = NULL;
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	23ae      	movs	r3, #174	; 0xae
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	2100      	movs	r1, #0
 8005c0a:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	0018      	movs	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b002      	add	sp, #8
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	23ae      	movs	r3, #174	; 0xae
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	58d3      	ldr	r3, [r2, r3]
 8005c2a:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005c2c:	231e      	movs	r3, #30
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	2200      	movs	r2, #0
 8005c32:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005c38:	230e      	movs	r3, #14
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c40:	2317      	movs	r3, #23
 8005c42:	18fb      	adds	r3, r7, r3
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	001a      	movs	r2, r3
 8005c4e:	2360      	movs	r3, #96	; 0x60
 8005c50:	4013      	ands	r3, r2
 8005c52:	d03a      	beq.n	8005cca <USBD_HID_Setup+0xb2>
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d000      	beq.n	8005c5a <USBD_HID_Setup+0x42>
 8005c58:	e0d6      	b.n	8005e08 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	2b0b      	cmp	r3, #11
 8005c60:	d008      	beq.n	8005c74 <USBD_HID_Setup+0x5c>
 8005c62:	dc26      	bgt.n	8005cb2 <USBD_HID_Setup+0x9a>
 8005c64:	2b0a      	cmp	r3, #10
 8005c66:	d013      	beq.n	8005c90 <USBD_HID_Setup+0x78>
 8005c68:	dc23      	bgt.n	8005cb2 <USBD_HID_Setup+0x9a>
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d019      	beq.n	8005ca2 <USBD_HID_Setup+0x8a>
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d007      	beq.n	8005c82 <USBD_HID_Setup+0x6a>
 8005c72:	e01e      	b.n	8005cb2 <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	885b      	ldrh	r3, [r3, #2]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	001a      	movs	r2, r3
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	601a      	str	r2, [r3, #0]
          break;
 8005c80:	e022      	b.n	8005cc8 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005c82:	6939      	ldr	r1, [r7, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f001 fabf 	bl	800720c <USBD_CtlSendData>
          break;
 8005c8e:	e01b      	b.n	8005cc8 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	885b      	ldrh	r3, [r3, #2]
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	001a      	movs	r2, r3
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]
          break;
 8005ca0:	e012      	b.n	8005cc8 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1d19      	adds	r1, r3, #4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	0018      	movs	r0, r3
 8005cac:	f001 faae 	bl	800720c <USBD_CtlSendData>
          break;
 8005cb0:	e00a      	b.n	8005cc8 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0011      	movs	r1, r2
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f001 fa29 	bl	8007110 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cbe:	2317      	movs	r3, #23
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	701a      	strb	r2, [r3, #0]
          break;
 8005cc6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005cc8:	e0a9      	b.n	8005e1e <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	2b0b      	cmp	r3, #11
 8005cd0:	d100      	bne.n	8005cd4 <USBD_HID_Setup+0xbc>
 8005cd2:	e075      	b.n	8005dc0 <USBD_HID_Setup+0x1a8>
 8005cd4:	dd00      	ble.n	8005cd8 <USBD_HID_Setup+0xc0>
 8005cd6:	e08b      	b.n	8005df0 <USBD_HID_Setup+0x1d8>
 8005cd8:	2b0a      	cmp	r3, #10
 8005cda:	d057      	beq.n	8005d8c <USBD_HID_Setup+0x174>
 8005cdc:	dd00      	ble.n	8005ce0 <USBD_HID_Setup+0xc8>
 8005cde:	e087      	b.n	8005df0 <USBD_HID_Setup+0x1d8>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <USBD_HID_Setup+0xd2>
 8005ce4:	2b06      	cmp	r3, #6
 8005ce6:	d019      	beq.n	8005d1c <USBD_HID_Setup+0x104>
 8005ce8:	e082      	b.n	8005df0 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	23a7      	movs	r3, #167	; 0xa7
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	5cd3      	ldrb	r3, [r2, r3]
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d107      	bne.n	8005d06 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005cf6:	230e      	movs	r3, #14
 8005cf8:	18f9      	adds	r1, r7, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f001 fa84 	bl	800720c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d04:	e07f      	b.n	8005e06 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	0011      	movs	r1, r2
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f001 f9ff 	bl	8007110 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d12:	2317      	movs	r3, #23
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	2202      	movs	r2, #2
 8005d18:	701a      	strb	r2, [r3, #0]
          break;
 8005d1a:	e074      	b.n	8005e06 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	885b      	ldrh	r3, [r3, #2]
 8005d20:	0a1b      	lsrs	r3, r3, #8
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b22      	cmp	r3, #34	; 0x22
 8005d26:	d10b      	bne.n	8005d40 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	88db      	ldrh	r3, [r3, #6]
 8005d2c:	221e      	movs	r2, #30
 8005d2e:	18ba      	adds	r2, r7, r2
 8005d30:	b299      	uxth	r1, r3
 8005d32:	293f      	cmp	r1, #63	; 0x3f
 8005d34:	d900      	bls.n	8005d38 <USBD_HID_Setup+0x120>
 8005d36:	233f      	movs	r3, #63	; 0x3f
 8005d38:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8005d3a:	4b3c      	ldr	r3, [pc, #240]	; (8005e2c <USBD_HID_Setup+0x214>)
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	e01c      	b.n	8005d7a <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	885b      	ldrh	r3, [r3, #2]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b21      	cmp	r3, #33	; 0x21
 8005d4a:	d10b      	bne.n	8005d64 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8005d4c:	4b38      	ldr	r3, [pc, #224]	; (8005e30 <USBD_HID_Setup+0x218>)
 8005d4e:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	88db      	ldrh	r3, [r3, #6]
 8005d54:	221e      	movs	r2, #30
 8005d56:	18ba      	adds	r2, r7, r2
 8005d58:	b299      	uxth	r1, r3
 8005d5a:	2909      	cmp	r1, #9
 8005d5c:	d900      	bls.n	8005d60 <USBD_HID_Setup+0x148>
 8005d5e:	2309      	movs	r3, #9
 8005d60:	8013      	strh	r3, [r2, #0]
 8005d62:	e00a      	b.n	8005d7a <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0011      	movs	r1, r2
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f001 f9d0 	bl	8007110 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d70:	2317      	movs	r3, #23
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	2202      	movs	r2, #2
 8005d76:	701a      	strb	r2, [r3, #0]
            break;
 8005d78:	e045      	b.n	8005e06 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005d7a:	231e      	movs	r3, #30
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	881a      	ldrh	r2, [r3, #0]
 8005d80:	69b9      	ldr	r1, [r7, #24]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f001 fa41 	bl	800720c <USBD_CtlSendData>
          break;
 8005d8a:	e03c      	b.n	8005e06 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	23a7      	movs	r3, #167	; 0xa7
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	5cd3      	ldrb	r3, [r2, r3]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d108      	bne.n	8005daa <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	0019      	movs	r1, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	0018      	movs	r0, r3
 8005da4:	f001 fa32 	bl	800720c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005da8:	e02d      	b.n	8005e06 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	0011      	movs	r1, r2
 8005db0:	0018      	movs	r0, r3
 8005db2:	f001 f9ad 	bl	8007110 <USBD_CtlError>
            ret = USBD_FAIL;
 8005db6:	2317      	movs	r3, #23
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	2202      	movs	r2, #2
 8005dbc:	701a      	strb	r2, [r3, #0]
          break;
 8005dbe:	e022      	b.n	8005e06 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	23a7      	movs	r3, #167	; 0xa7
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	5cd3      	ldrb	r3, [r2, r3]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d106      	bne.n	8005dda <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	885b      	ldrh	r3, [r3, #2]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dd8:	e015      	b.n	8005e06 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	0011      	movs	r1, r2
 8005de0:	0018      	movs	r0, r3
 8005de2:	f001 f995 	bl	8007110 <USBD_CtlError>
            ret = USBD_FAIL;
 8005de6:	2317      	movs	r3, #23
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	2202      	movs	r2, #2
 8005dec:	701a      	strb	r2, [r3, #0]
          break;
 8005dee:	e00a      	b.n	8005e06 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	0011      	movs	r1, r2
 8005df6:	0018      	movs	r0, r3
 8005df8:	f001 f98a 	bl	8007110 <USBD_CtlError>
          ret = USBD_FAIL;
 8005dfc:	2317      	movs	r3, #23
 8005dfe:	18fb      	adds	r3, r7, r3
 8005e00:	2202      	movs	r2, #2
 8005e02:	701a      	strb	r2, [r3, #0]
          break;
 8005e04:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005e06:	e00a      	b.n	8005e1e <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	0011      	movs	r1, r2
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f001 f97e 	bl	8007110 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e14:	2317      	movs	r3, #23
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	2202      	movs	r2, #2
 8005e1a:	701a      	strb	r2, [r3, #0]
      break;
 8005e1c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005e1e:	2317      	movs	r3, #23
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	781b      	ldrb	r3, [r3, #0]
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b008      	add	sp, #32
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	2000016c 	.word	0x2000016c
 8005e30:	20000154 	.word	0x20000154

08005e34 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	1dbb      	adds	r3, r7, #6
 8005e40:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	23ae      	movs	r3, #174	; 0xae
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	58d3      	ldr	r3, [r2, r3]
 8005e4a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	23a7      	movs	r3, #167	; 0xa7
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	5cd3      	ldrb	r3, [r2, r3]
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d10d      	bne.n	8005e74 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	7b1b      	ldrb	r3, [r3, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d109      	bne.n	8005e74 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2201      	movs	r2, #1
 8005e64:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005e66:	1dbb      	adds	r3, r7, #6
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	2181      	movs	r1, #129	; 0x81
 8005e70:	f001 fdfb 	bl	8007a6a <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	0018      	movs	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b006      	add	sp, #24
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2222      	movs	r2, #34	; 0x22
 8005e8c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005e8e:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8005e90:	0018      	movs	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b002      	add	sp, #8
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200000e8 	.word	0x200000e8

08005e9c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2222      	movs	r2, #34	; 0x22
 8005ea8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005eaa:	4b02      	ldr	r3, [pc, #8]	; (8005eb4 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	2000010c 	.word	0x2000010c

08005eb8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2222      	movs	r2, #34	; 0x22
 8005ec4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005ec6:	4b02      	ldr	r3, [pc, #8]	; (8005ed0 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005ec8:	0018      	movs	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000130 	.word	0x20000130

08005ed4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	000a      	movs	r2, r1
 8005ede:	1cfb      	adds	r3, r7, #3
 8005ee0:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	23ae      	movs	r3, #174	; 0xae
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	58d3      	ldr	r3, [r2, r3]
 8005eea:	2200      	movs	r2, #0
 8005eec:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b002      	add	sp, #8
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	220a      	movs	r2, #10
 8005f04:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005f06:	4b02      	ldr	r3, [pc, #8]	; (8005f10 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005f08:	0018      	movs	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b002      	add	sp, #8
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000160 	.word	0x20000160

08005f14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	1dfb      	adds	r3, r7, #7
 8005f20:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e020      	b.n	8005f6e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	23ad      	movs	r3, #173	; 0xad
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	58d3      	ldr	r3, [r2, r3]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	23ad      	movs	r3, #173	; 0xad
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	2100      	movs	r1, #0
 8005f40:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d004      	beq.n	8005f52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	23ac      	movs	r3, #172	; 0xac
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	23a7      	movs	r3, #167	; 0xa7
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	2101      	movs	r1, #1
 8005f5a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	1dfa      	adds	r2, r7, #7
 8005f60:	7812      	ldrb	r2, [r2, #0]
 8005f62:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	0018      	movs	r0, r3
 8005f68:	f001 fbf6 	bl	8007758 <USBD_LL_Init>

  return USBD_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	0018      	movs	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b004      	add	sp, #16
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005f80:	200f      	movs	r0, #15
 8005f82:	183b      	adds	r3, r7, r0
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d008      	beq.n	8005fa0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	23ad      	movs	r3, #173	; 0xad
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005f98:	183b      	adds	r3, r7, r0
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e003      	b.n	8005fa8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005fa0:	230f      	movs	r3, #15
 8005fa2:	18fb      	adds	r3, r7, r3
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005fa8:	230f      	movs	r3, #15
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	781b      	ldrb	r3, [r3, #0]
}
 8005fae:	0018      	movs	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b004      	add	sp, #16
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b082      	sub	sp, #8
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f001 fc19 	bl	80077f8 <USBD_LL_Start>

  return USBD_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	0018      	movs	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b002      	add	sp, #8
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	0018      	movs	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b002      	add	sp, #8
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fe2:	b590      	push	{r4, r7, lr}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	000a      	movs	r2, r1
 8005fec:	1cfb      	adds	r3, r7, #3
 8005fee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ff0:	240f      	movs	r4, #15
 8005ff2:	193b      	adds	r3, r7, r4
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	23ad      	movs	r3, #173	; 0xad
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	58d3      	ldr	r3, [r2, r3]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00e      	beq.n	8006022 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	23ad      	movs	r3, #173	; 0xad
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	58d3      	ldr	r3, [r2, r3]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	1cfa      	adds	r2, r7, #3
 8006010:	7811      	ldrb	r1, [r2, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	0010      	movs	r0, r2
 8006016:	4798      	blx	r3
 8006018:	1e03      	subs	r3, r0, #0
 800601a:	d102      	bne.n	8006022 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800601c:	193b      	adds	r3, r7, r4
 800601e:	2200      	movs	r2, #0
 8006020:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006022:	230f      	movs	r3, #15
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	781b      	ldrb	r3, [r3, #0]
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	b005      	add	sp, #20
 800602e:	bd90      	pop	{r4, r7, pc}

08006030 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	000a      	movs	r2, r1
 800603a:	1cfb      	adds	r3, r7, #3
 800603c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	23ad      	movs	r3, #173	; 0xad
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	58d3      	ldr	r3, [r2, r3]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	1cfa      	adds	r2, r7, #3
 800604a:	7811      	ldrb	r1, [r2, #0]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	0010      	movs	r0, r2
 8006050:	4798      	blx	r3

  return USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	0018      	movs	r0, r3
 8006056:	46bd      	mov	sp, r7
 8006058:	b002      	add	sp, #8
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	22aa      	movs	r2, #170	; 0xaa
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	4694      	mov	ip, r2
 800606e:	4463      	add	r3, ip
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	0011      	movs	r1, r2
 8006074:	0018      	movs	r0, r3
 8006076:	f001 f810 	bl	800709a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	23a5      	movs	r3, #165	; 0xa5
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	2101      	movs	r1, #1
 8006082:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a23      	ldr	r2, [pc, #140]	; (8006114 <USBD_LL_SetupStage+0xb8>)
 8006088:	5a9b      	ldrh	r3, [r3, r2]
 800608a:	0019      	movs	r1, r3
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	23a6      	movs	r3, #166	; 0xa6
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	23aa      	movs	r3, #170	; 0xaa
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	5cd3      	ldrb	r3, [r2, r3]
 800609c:	001a      	movs	r2, r3
 800609e:	231f      	movs	r3, #31
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d019      	beq.n	80060da <USBD_LL_SetupStage+0x7e>
 80060a6:	d822      	bhi.n	80060ee <USBD_LL_SetupStage+0x92>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <USBD_LL_SetupStage+0x56>
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d00a      	beq.n	80060c6 <USBD_LL_SetupStage+0x6a>
 80060b0:	e01d      	b.n	80060ee <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	22aa      	movs	r2, #170	; 0xaa
 80060b6:	0092      	lsls	r2, r2, #2
 80060b8:	189a      	adds	r2, r3, r2
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	0011      	movs	r1, r2
 80060be:	0018      	movs	r0, r3
 80060c0:	f000 fa10 	bl	80064e4 <USBD_StdDevReq>
      break;
 80060c4:	e020      	b.n	8006108 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	22aa      	movs	r2, #170	; 0xaa
 80060ca:	0092      	lsls	r2, r2, #2
 80060cc:	189a      	adds	r2, r3, r2
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0011      	movs	r1, r2
 80060d2:	0018      	movs	r0, r3
 80060d4:	f000 fa78 	bl	80065c8 <USBD_StdItfReq>
      break;
 80060d8:	e016      	b.n	8006108 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	22aa      	movs	r2, #170	; 0xaa
 80060de:	0092      	lsls	r2, r2, #2
 80060e0:	189a      	adds	r2, r3, r2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	0011      	movs	r1, r2
 80060e6:	0018      	movs	r0, r3
 80060e8:	f000 fac5 	bl	8006676 <USBD_StdEPReq>
      break;
 80060ec:	e00c      	b.n	8006108 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	23aa      	movs	r3, #170	; 0xaa
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	5cd3      	ldrb	r3, [r2, r3]
 80060f6:	227f      	movs	r2, #127	; 0x7f
 80060f8:	4393      	bics	r3, r2
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	0011      	movs	r1, r2
 8006100:	0018      	movs	r0, r3
 8006102:	f001 fc00 	bl	8007906 <USBD_LL_StallEP>
      break;
 8006106:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	0018      	movs	r0, r3
 800610c:	46bd      	mov	sp, r7
 800610e:	b002      	add	sp, #8
 8006110:	bd80      	pop	{r7, pc}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	000002ae 	.word	0x000002ae

08006118 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	607a      	str	r2, [r7, #4]
 8006122:	200b      	movs	r0, #11
 8006124:	183b      	adds	r3, r7, r0
 8006126:	1c0a      	adds	r2, r1, #0
 8006128:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800612a:	183b      	adds	r3, r7, r0
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d154      	bne.n	80061dc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3355      	adds	r3, #85	; 0x55
 8006136:	33ff      	adds	r3, #255	; 0xff
 8006138:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	23a5      	movs	r3, #165	; 0xa5
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	58d3      	ldr	r3, [r2, r3]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d139      	bne.n	80061ba <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	429a      	cmp	r2, r3
 8006150:	d919      	bls.n	8006186 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006168:	429a      	cmp	r2, r3
 800616a:	d203      	bcs.n	8006174 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006170:	b29b      	uxth	r3, r3
 8006172:	e002      	b.n	800617a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006178:	b29b      	uxth	r3, r3
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	001a      	movs	r2, r3
 8006180:	f001 f877 	bl	8007272 <USBD_CtlContinueRx>
 8006184:	e045      	b.n	8006212 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	23ad      	movs	r3, #173	; 0xad
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	58d3      	ldr	r3, [r2, r3]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	23a7      	movs	r3, #167	; 0xa7
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800619c:	2b03      	cmp	r3, #3
 800619e:	d107      	bne.n	80061b0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	23ad      	movs	r3, #173	; 0xad
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	58d3      	ldr	r3, [r2, r3]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	0010      	movs	r0, r2
 80061ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f001 f870 	bl	8007298 <USBD_CtlSendStatus>
 80061b8:	e02b      	b.n	8006212 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	23a5      	movs	r3, #165	; 0xa5
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	58d3      	ldr	r3, [r2, r3]
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	d125      	bne.n	8006212 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	23a5      	movs	r3, #165	; 0xa5
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	2100      	movs	r1, #0
 80061ce:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2100      	movs	r1, #0
 80061d4:	0018      	movs	r0, r3
 80061d6:	f001 fb96 	bl	8007906 <USBD_LL_StallEP>
 80061da:	e01a      	b.n	8006212 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	23ad      	movs	r3, #173	; 0xad
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	58d3      	ldr	r3, [r2, r3]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d011      	beq.n	800620e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	23a7      	movs	r3, #167	; 0xa7
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d10b      	bne.n	800620e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	23ad      	movs	r3, #173	; 0xad
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	58d3      	ldr	r3, [r2, r3]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	220b      	movs	r2, #11
 8006202:	18ba      	adds	r2, r7, r2
 8006204:	7811      	ldrb	r1, [r2, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	0010      	movs	r0, r2
 800620a:	4798      	blx	r3
 800620c:	e001      	b.n	8006212 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800620e:	2302      	movs	r3, #2
 8006210:	e000      	b.n	8006214 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	0018      	movs	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	b006      	add	sp, #24
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	200b      	movs	r0, #11
 8006228:	183b      	adds	r3, r7, r0
 800622a:	1c0a      	adds	r2, r1, #0
 800622c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800622e:	183b      	adds	r3, r7, r0
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d000      	beq.n	8006238 <USBD_LL_DataInStage+0x1c>
 8006236:	e08e      	b.n	8006356 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3314      	adds	r3, #20
 800623c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	23a5      	movs	r3, #165	; 0xa5
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	58d3      	ldr	r3, [r2, r3]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d164      	bne.n	8006314 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	429a      	cmp	r2, r3
 8006254:	d915      	bls.n	8006282 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	1ad2      	subs	r2, r2, r3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	b29a      	uxth	r2, r3
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	0018      	movs	r0, r3
 8006270:	f000 ffec 	bl	800724c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	2300      	movs	r3, #0
 8006278:	2200      	movs	r2, #0
 800627a:	2100      	movs	r1, #0
 800627c:	f001 fc2c 	bl	8007ad8 <USBD_LL_PrepareReceive>
 8006280:	e059      	b.n	8006336 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	0019      	movs	r1, r3
 800628c:	0010      	movs	r0, r2
 800628e:	f7f9 ffc1 	bl	8000214 <__aeabi_uidivmod>
 8006292:	1e0b      	subs	r3, r1, #0
 8006294:	d11f      	bne.n	80062d6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800629e:	429a      	cmp	r2, r3
 80062a0:	d319      	bcc.n	80062d6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	23a6      	movs	r3, #166	; 0xa6
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d211      	bcs.n	80062d6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	2100      	movs	r1, #0
 80062b8:	0018      	movs	r0, r3
 80062ba:	f000 ffc7 	bl	800724c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	23a6      	movs	r3, #166	; 0xa6
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	2100      	movs	r1, #0
 80062c6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	2300      	movs	r3, #0
 80062cc:	2200      	movs	r2, #0
 80062ce:	2100      	movs	r1, #0
 80062d0:	f001 fc02 	bl	8007ad8 <USBD_LL_PrepareReceive>
 80062d4:	e02f      	b.n	8006336 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	23ad      	movs	r3, #173	; 0xad
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	58d3      	ldr	r3, [r2, r3]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00d      	beq.n	8006300 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	23a7      	movs	r3, #167	; 0xa7
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d107      	bne.n	8006300 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	23ad      	movs	r3, #173	; 0xad
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	58d3      	ldr	r3, [r2, r3]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	0010      	movs	r0, r2
 80062fe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2180      	movs	r1, #128	; 0x80
 8006304:	0018      	movs	r0, r3
 8006306:	f001 fafe 	bl	8007906 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	0018      	movs	r0, r3
 800630e:	f000 ffd7 	bl	80072c0 <USBD_CtlReceiveStatus>
 8006312:	e010      	b.n	8006336 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	23a5      	movs	r3, #165	; 0xa5
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	58d3      	ldr	r3, [r2, r3]
 800631c:	2b04      	cmp	r3, #4
 800631e:	d005      	beq.n	800632c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	23a5      	movs	r3, #165	; 0xa5
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	0018      	movs	r0, r3
 8006332:	f001 fae8 	bl	8007906 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	23a8      	movs	r3, #168	; 0xa8
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	5cd3      	ldrb	r3, [r2, r3]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d124      	bne.n	800638c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	0018      	movs	r0, r3
 8006346:	f7ff fe43 	bl	8005fd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	23a8      	movs	r3, #168	; 0xa8
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	2100      	movs	r1, #0
 8006352:	54d1      	strb	r1, [r2, r3]
 8006354:	e01a      	b.n	800638c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	23ad      	movs	r3, #173	; 0xad
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	58d3      	ldr	r3, [r2, r3]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d011      	beq.n	8006388 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	23a7      	movs	r3, #167	; 0xa7
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800636c:	2b03      	cmp	r3, #3
 800636e:	d10b      	bne.n	8006388 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	23ad      	movs	r3, #173	; 0xad
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	58d3      	ldr	r3, [r2, r3]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	220b      	movs	r2, #11
 800637c:	18ba      	adds	r2, r7, r2
 800637e:	7811      	ldrb	r1, [r2, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	0010      	movs	r0, r2
 8006384:	4798      	blx	r3
 8006386:	e001      	b.n	800638c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006388:	2302      	movs	r3, #2
 800638a:	e000      	b.n	800638e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	0018      	movs	r0, r3
 8006390:	46bd      	mov	sp, r7
 8006392:	b006      	add	sp, #24
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	2340      	movs	r3, #64	; 0x40
 80063a2:	2200      	movs	r2, #0
 80063a4:	2100      	movs	r1, #0
 80063a6:	f001 fa4c 	bl	8007842 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	23ac      	movs	r3, #172	; 0xac
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	2101      	movs	r1, #1
 80063b2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	23b2      	movs	r3, #178	; 0xb2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	2140      	movs	r1, #64	; 0x40
 80063bc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	2340      	movs	r3, #64	; 0x40
 80063c2:	2200      	movs	r2, #0
 80063c4:	2180      	movs	r1, #128	; 0x80
 80063c6:	f001 fa3c 	bl	8007842 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2240      	movs	r2, #64	; 0x40
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	23a7      	movs	r3, #167	; 0xa7
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	2101      	movs	r1, #1
 80063de:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	23a5      	movs	r3, #165	; 0xa5
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	2100      	movs	r1, #0
 80063e8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	23a9      	movs	r3, #169	; 0xa9
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	2100      	movs	r1, #0
 80063f8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	23ae      	movs	r3, #174	; 0xae
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	58d3      	ldr	r3, [r2, r3]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	23ad      	movs	r3, #173	; 0xad
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	58d3      	ldr	r3, [r2, r3]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	b2d9      	uxtb	r1, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	0018      	movs	r0, r3
 800641a:	4790      	blx	r2
  }

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	0018      	movs	r0, r3
 8006420:	46bd      	mov	sp, r7
 8006422:	b002      	add	sp, #8
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	000a      	movs	r2, r1
 8006430:	1cfb      	adds	r3, r7, #3
 8006432:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	1cfa      	adds	r2, r7, #3
 8006438:	7812      	ldrb	r2, [r2, #0]
 800643a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b002      	add	sp, #8
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	23a7      	movs	r3, #167	; 0xa7
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	5cd1      	ldrb	r1, [r2, r3]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a06      	ldr	r2, [pc, #24]	; (8006474 <USBD_LL_Suspend+0x2c>)
 800645c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	23a7      	movs	r3, #167	; 0xa7
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	2104      	movs	r1, #4
 8006466:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	0018      	movs	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	b002      	add	sp, #8
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	0000029d 	.word	0x0000029d

08006478 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	23a7      	movs	r3, #167	; 0xa7
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	2b04      	cmp	r3, #4
 800648a:	d106      	bne.n	800649a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a05      	ldr	r2, [pc, #20]	; (80064a4 <USBD_LL_Resume+0x2c>)
 8006490:	5c99      	ldrb	r1, [r3, r2]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	23a7      	movs	r3, #167	; 0xa7
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	0018      	movs	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	b002      	add	sp, #8
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	0000029d 	.word	0x0000029d

080064a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	23a7      	movs	r3, #167	; 0xa7
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	5cd3      	ldrb	r3, [r2, r3]
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d10e      	bne.n	80064da <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	23ad      	movs	r3, #173	; 0xad
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	58d3      	ldr	r3, [r2, r3]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	23ad      	movs	r3, #173	; 0xad
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	58d3      	ldr	r3, [r2, r3]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	0010      	movs	r0, r2
 80064d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	0018      	movs	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	b002      	add	sp, #8
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ee:	230f      	movs	r3, #15
 80064f0:	18fb      	adds	r3, r7, r3
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	001a      	movs	r2, r3
 80064fc:	2360      	movs	r3, #96	; 0x60
 80064fe:	4013      	ands	r3, r2
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d004      	beq.n	800650e <USBD_StdDevReq+0x2a>
 8006504:	d84f      	bhi.n	80065a6 <USBD_StdDevReq+0xc2>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <USBD_StdDevReq+0x3e>
 800650a:	2b20      	cmp	r3, #32
 800650c:	d14b      	bne.n	80065a6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	23ad      	movs	r3, #173	; 0xad
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	58d3      	ldr	r3, [r2, r3]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	0010      	movs	r0, r2
 800651e:	4798      	blx	r3
      break;
 8006520:	e048      	b.n	80065b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b09      	cmp	r3, #9
 8006528:	d835      	bhi.n	8006596 <USBD_StdDevReq+0xb2>
 800652a:	009a      	lsls	r2, r3, #2
 800652c:	4b25      	ldr	r3, [pc, #148]	; (80065c4 <USBD_StdDevReq+0xe0>)
 800652e:	18d3      	adds	r3, r2, r3
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	0011      	movs	r1, r2
 800653a:	0018      	movs	r0, r3
 800653c:	f000 fa52 	bl	80069e4 <USBD_GetDescriptor>
          break;
 8006540:	e030      	b.n	80065a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	0011      	movs	r1, r2
 8006548:	0018      	movs	r0, r3
 800654a:	f000 fbfd 	bl	8006d48 <USBD_SetAddress>
          break;
 800654e:	e029      	b.n	80065a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	0011      	movs	r1, r2
 8006556:	0018      	movs	r0, r3
 8006558:	f000 fc4a 	bl	8006df0 <USBD_SetConfig>
          break;
 800655c:	e022      	b.n	80065a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	0011      	movs	r1, r2
 8006564:	0018      	movs	r0, r3
 8006566:	f000 fce7 	bl	8006f38 <USBD_GetConfig>
          break;
 800656a:	e01b      	b.n	80065a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	0011      	movs	r1, r2
 8006572:	0018      	movs	r0, r3
 8006574:	f000 fd1b 	bl	8006fae <USBD_GetStatus>
          break;
 8006578:	e014      	b.n	80065a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	0011      	movs	r1, r2
 8006580:	0018      	movs	r0, r3
 8006582:	f000 fd4e 	bl	8007022 <USBD_SetFeature>
          break;
 8006586:	e00d      	b.n	80065a4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	0011      	movs	r1, r2
 800658e:	0018      	movs	r0, r3
 8006590:	f000 fd5d 	bl	800704e <USBD_ClrFeature>
          break;
 8006594:	e006      	b.n	80065a4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	0011      	movs	r1, r2
 800659c:	0018      	movs	r0, r3
 800659e:	f000 fdb7 	bl	8007110 <USBD_CtlError>
          break;
 80065a2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80065a4:	e006      	b.n	80065b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	0011      	movs	r1, r2
 80065ac:	0018      	movs	r0, r3
 80065ae:	f000 fdaf 	bl	8007110 <USBD_CtlError>
      break;
 80065b2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80065b4:	230f      	movs	r3, #15
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	781b      	ldrb	r3, [r3, #0]
}
 80065ba:	0018      	movs	r0, r3
 80065bc:	46bd      	mov	sp, r7
 80065be:	b004      	add	sp, #16
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	08007cac 	.word	0x08007cac

080065c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80065c8:	b5b0      	push	{r4, r5, r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065d2:	230f      	movs	r3, #15
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	001a      	movs	r2, r3
 80065e0:	2360      	movs	r3, #96	; 0x60
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d004      	beq.n	80065f2 <USBD_StdItfReq+0x2a>
 80065e8:	d839      	bhi.n	800665e <USBD_StdItfReq+0x96>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <USBD_StdItfReq+0x2a>
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d135      	bne.n	800665e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	23a7      	movs	r3, #167	; 0xa7
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	5cd3      	ldrb	r3, [r2, r3]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d825      	bhi.n	800664c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	889b      	ldrh	r3, [r3, #4]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b01      	cmp	r3, #1
 8006608:	d819      	bhi.n	800663e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	23ad      	movs	r3, #173	; 0xad
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	58d3      	ldr	r3, [r2, r3]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	250f      	movs	r5, #15
 8006616:	197c      	adds	r4, r7, r5
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	0010      	movs	r0, r2
 800661e:	4798      	blx	r3
 8006620:	0003      	movs	r3, r0
 8006622:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	88db      	ldrh	r3, [r3, #6]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d116      	bne.n	800665a <USBD_StdItfReq+0x92>
 800662c:	197b      	adds	r3, r7, r5
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d112      	bne.n	800665a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0018      	movs	r0, r3
 8006638:	f000 fe2e 	bl	8007298 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800663c:	e00d      	b.n	800665a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	0011      	movs	r1, r2
 8006644:	0018      	movs	r0, r3
 8006646:	f000 fd63 	bl	8007110 <USBD_CtlError>
          break;
 800664a:	e006      	b.n	800665a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0011      	movs	r1, r2
 8006652:	0018      	movs	r0, r3
 8006654:	f000 fd5c 	bl	8007110 <USBD_CtlError>
          break;
 8006658:	e000      	b.n	800665c <USBD_StdItfReq+0x94>
          break;
 800665a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800665c:	e006      	b.n	800666c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	0011      	movs	r1, r2
 8006664:	0018      	movs	r0, r3
 8006666:	f000 fd53 	bl	8007110 <USBD_CtlError>
      break;
 800666a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	0018      	movs	r0, r3
 8006670:	46bd      	mov	sp, r7
 8006672:	b004      	add	sp, #16
 8006674:	bdb0      	pop	{r4, r5, r7, pc}

08006676 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006676:	b5b0      	push	{r4, r5, r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006680:	230f      	movs	r3, #15
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	889a      	ldrh	r2, [r3, #4]
 800668c:	230e      	movs	r3, #14
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	001a      	movs	r2, r3
 8006698:	2360      	movs	r3, #96	; 0x60
 800669a:	4013      	ands	r3, r2
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d006      	beq.n	80066ae <USBD_StdEPReq+0x38>
 80066a0:	d900      	bls.n	80066a4 <USBD_StdEPReq+0x2e>
 80066a2:	e190      	b.n	80069c6 <USBD_StdEPReq+0x350>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00c      	beq.n	80066c2 <USBD_StdEPReq+0x4c>
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d000      	beq.n	80066ae <USBD_StdEPReq+0x38>
 80066ac:	e18b      	b.n	80069c6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	23ad      	movs	r3, #173	; 0xad
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	58d3      	ldr	r3, [r2, r3]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	0010      	movs	r0, r2
 80066be:	4798      	blx	r3
      break;
 80066c0:	e188      	b.n	80069d4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	001a      	movs	r2, r3
 80066c8:	2360      	movs	r3, #96	; 0x60
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d10f      	bne.n	80066f0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	23ad      	movs	r3, #173	; 0xad
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	58d3      	ldr	r3, [r2, r3]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	250f      	movs	r5, #15
 80066dc:	197c      	adds	r4, r7, r5
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	0010      	movs	r0, r2
 80066e4:	4798      	blx	r3
 80066e6:	0003      	movs	r3, r0
 80066e8:	7023      	strb	r3, [r4, #0]

        return ret;
 80066ea:	197b      	adds	r3, r7, r5
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	e174      	b.n	80069da <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	785b      	ldrb	r3, [r3, #1]
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d007      	beq.n	8006708 <USBD_StdEPReq+0x92>
 80066f8:	dd00      	ble.n	80066fc <USBD_StdEPReq+0x86>
 80066fa:	e15c      	b.n	80069b6 <USBD_StdEPReq+0x340>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d100      	bne.n	8006702 <USBD_StdEPReq+0x8c>
 8006700:	e092      	b.n	8006828 <USBD_StdEPReq+0x1b2>
 8006702:	2b01      	cmp	r3, #1
 8006704:	d04b      	beq.n	800679e <USBD_StdEPReq+0x128>
 8006706:	e156      	b.n	80069b6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	23a7      	movs	r3, #167	; 0xa7
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	5cd3      	ldrb	r3, [r2, r3]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d002      	beq.n	800671a <USBD_StdEPReq+0xa4>
 8006714:	2b03      	cmp	r3, #3
 8006716:	d01d      	beq.n	8006754 <USBD_StdEPReq+0xde>
 8006718:	e039      	b.n	800678e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800671a:	220e      	movs	r2, #14
 800671c:	18bb      	adds	r3, r7, r2
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d010      	beq.n	8006746 <USBD_StdEPReq+0xd0>
 8006724:	18bb      	adds	r3, r7, r2
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b80      	cmp	r3, #128	; 0x80
 800672a:	d00c      	beq.n	8006746 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800672c:	18bb      	adds	r3, r7, r2
 800672e:	781a      	ldrb	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	0011      	movs	r1, r2
 8006734:	0018      	movs	r0, r3
 8006736:	f001 f8e6 	bl	8007906 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2180      	movs	r1, #128	; 0x80
 800673e:	0018      	movs	r0, r3
 8006740:	f001 f8e1 	bl	8007906 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006744:	e02a      	b.n	800679c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	0011      	movs	r1, r2
 800674c:	0018      	movs	r0, r3
 800674e:	f000 fcdf 	bl	8007110 <USBD_CtlError>
              break;
 8006752:	e023      	b.n	800679c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	885b      	ldrh	r3, [r3, #2]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d113      	bne.n	8006784 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800675c:	220e      	movs	r2, #14
 800675e:	18bb      	adds	r3, r7, r2
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00e      	beq.n	8006784 <USBD_StdEPReq+0x10e>
 8006766:	18bb      	adds	r3, r7, r2
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b80      	cmp	r3, #128	; 0x80
 800676c:	d00a      	beq.n	8006784 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	88db      	ldrh	r3, [r3, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006776:	18bb      	adds	r3, r7, r2
 8006778:	781a      	ldrb	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	0011      	movs	r1, r2
 800677e:	0018      	movs	r0, r3
 8006780:	f001 f8c1 	bl	8007906 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	0018      	movs	r0, r3
 8006788:	f000 fd86 	bl	8007298 <USBD_CtlSendStatus>

              break;
 800678c:	e006      	b.n	800679c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	0011      	movs	r1, r2
 8006794:	0018      	movs	r0, r3
 8006796:	f000 fcbb 	bl	8007110 <USBD_CtlError>
              break;
 800679a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800679c:	e112      	b.n	80069c4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	23a7      	movs	r3, #167	; 0xa7
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	5cd3      	ldrb	r3, [r2, r3]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d002      	beq.n	80067b0 <USBD_StdEPReq+0x13a>
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d01d      	beq.n	80067ea <USBD_StdEPReq+0x174>
 80067ae:	e032      	b.n	8006816 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b0:	220e      	movs	r2, #14
 80067b2:	18bb      	adds	r3, r7, r2
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d010      	beq.n	80067dc <USBD_StdEPReq+0x166>
 80067ba:	18bb      	adds	r3, r7, r2
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b80      	cmp	r3, #128	; 0x80
 80067c0:	d00c      	beq.n	80067dc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80067c2:	18bb      	adds	r3, r7, r2
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	0011      	movs	r1, r2
 80067ca:	0018      	movs	r0, r3
 80067cc:	f001 f89b 	bl	8007906 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2180      	movs	r1, #128	; 0x80
 80067d4:	0018      	movs	r0, r3
 80067d6:	f001 f896 	bl	8007906 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067da:	e024      	b.n	8006826 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	0011      	movs	r1, r2
 80067e2:	0018      	movs	r0, r3
 80067e4:	f000 fc94 	bl	8007110 <USBD_CtlError>
              break;
 80067e8:	e01d      	b.n	8006826 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	885b      	ldrh	r3, [r3, #2]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d118      	bne.n	8006824 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067f2:	210e      	movs	r1, #14
 80067f4:	187b      	adds	r3, r7, r1
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	227f      	movs	r2, #127	; 0x7f
 80067fa:	4013      	ands	r3, r2
 80067fc:	d006      	beq.n	800680c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80067fe:	187b      	adds	r3, r7, r1
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0011      	movs	r1, r2
 8006806:	0018      	movs	r0, r3
 8006808:	f001 f8a8 	bl	800795c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	0018      	movs	r0, r3
 8006810:	f000 fd42 	bl	8007298 <USBD_CtlSendStatus>
              }
              break;
 8006814:	e006      	b.n	8006824 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	0011      	movs	r1, r2
 800681c:	0018      	movs	r0, r3
 800681e:	f000 fc77 	bl	8007110 <USBD_CtlError>
              break;
 8006822:	e000      	b.n	8006826 <USBD_StdEPReq+0x1b0>
              break;
 8006824:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006826:	e0cd      	b.n	80069c4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	23a7      	movs	r3, #167	; 0xa7
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	5cd3      	ldrb	r3, [r2, r3]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d002      	beq.n	800683a <USBD_StdEPReq+0x1c4>
 8006834:	2b03      	cmp	r3, #3
 8006836:	d03c      	beq.n	80068b2 <USBD_StdEPReq+0x23c>
 8006838:	e0b5      	b.n	80069a6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800683a:	220e      	movs	r2, #14
 800683c:	18bb      	adds	r3, r7, r2
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <USBD_StdEPReq+0x1e4>
 8006844:	18bb      	adds	r3, r7, r2
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b80      	cmp	r3, #128	; 0x80
 800684a:	d006      	beq.n	800685a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	0011      	movs	r1, r2
 8006852:	0018      	movs	r0, r3
 8006854:	f000 fc5c 	bl	8007110 <USBD_CtlError>
                break;
 8006858:	e0ac      	b.n	80069b4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800685a:	220e      	movs	r2, #14
 800685c:	18bb      	adds	r3, r7, r2
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	b25b      	sxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	da0c      	bge.n	8006880 <USBD_StdEPReq+0x20a>
 8006866:	18bb      	adds	r3, r7, r2
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	227f      	movs	r2, #127	; 0x7f
 800686c:	401a      	ands	r2, r3
 800686e:	0013      	movs	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	189b      	adds	r3, r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	3310      	adds	r3, #16
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	18d3      	adds	r3, r2, r3
 800687c:	3304      	adds	r3, #4
 800687e:	e00d      	b.n	800689c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006880:	230e      	movs	r3, #14
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	227f      	movs	r2, #127	; 0x7f
 8006888:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800688a:	0013      	movs	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	189b      	adds	r3, r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	3351      	adds	r3, #81	; 0x51
 8006894:	33ff      	adds	r3, #255	; 0xff
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	18d3      	adds	r3, r2, r3
 800689a:	3304      	adds	r3, #4
 800689c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	0018      	movs	r0, r3
 80068ac:	f000 fcae 	bl	800720c <USBD_CtlSendData>
              break;
 80068b0:	e080      	b.n	80069b4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068b2:	220e      	movs	r2, #14
 80068b4:	18bb      	adds	r3, r7, r2
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	b25b      	sxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	da14      	bge.n	80068e8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068be:	18bb      	adds	r3, r7, r2
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	220f      	movs	r2, #15
 80068c4:	401a      	ands	r2, r3
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	0013      	movs	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	189b      	adds	r3, r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	18cb      	adds	r3, r1, r3
 80068d2:	3318      	adds	r3, #24
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d11e      	bne.n	8006918 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0011      	movs	r1, r2
 80068e0:	0018      	movs	r0, r3
 80068e2:	f000 fc15 	bl	8007110 <USBD_CtlError>
                  break;
 80068e6:	e065      	b.n	80069b4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068e8:	230e      	movs	r3, #14
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	220f      	movs	r2, #15
 80068f0:	401a      	ands	r2, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	23ac      	movs	r3, #172	; 0xac
 80068f6:	0059      	lsls	r1, r3, #1
 80068f8:	0013      	movs	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	189b      	adds	r3, r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	18c3      	adds	r3, r0, r3
 8006902:	185b      	adds	r3, r3, r1
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	0011      	movs	r1, r2
 8006910:	0018      	movs	r0, r3
 8006912:	f000 fbfd 	bl	8007110 <USBD_CtlError>
                  break;
 8006916:	e04d      	b.n	80069b4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006918:	220e      	movs	r2, #14
 800691a:	18bb      	adds	r3, r7, r2
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	b25b      	sxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	da0c      	bge.n	800693e <USBD_StdEPReq+0x2c8>
 8006924:	18bb      	adds	r3, r7, r2
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	227f      	movs	r2, #127	; 0x7f
 800692a:	401a      	ands	r2, r3
 800692c:	0013      	movs	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	189b      	adds	r3, r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	3310      	adds	r3, #16
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	18d3      	adds	r3, r2, r3
 800693a:	3304      	adds	r3, #4
 800693c:	e00d      	b.n	800695a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800693e:	230e      	movs	r3, #14
 8006940:	18fb      	adds	r3, r7, r3
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	227f      	movs	r2, #127	; 0x7f
 8006946:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006948:	0013      	movs	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	189b      	adds	r3, r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	3351      	adds	r3, #81	; 0x51
 8006952:	33ff      	adds	r3, #255	; 0xff
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	18d3      	adds	r3, r2, r3
 8006958:	3304      	adds	r3, #4
 800695a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800695c:	220e      	movs	r2, #14
 800695e:	18bb      	adds	r3, r7, r2
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <USBD_StdEPReq+0x2f8>
 8006966:	18bb      	adds	r3, r7, r2
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b80      	cmp	r3, #128	; 0x80
 800696c:	d103      	bne.n	8006976 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	e010      	b.n	8006998 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006976:	230e      	movs	r3, #14
 8006978:	18fb      	adds	r3, r7, r3
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	0011      	movs	r1, r2
 8006980:	0018      	movs	r0, r3
 8006982:	f001 f816 	bl	80079b2 <USBD_LL_IsStallEP>
 8006986:	1e03      	subs	r3, r0, #0
 8006988:	d003      	beq.n	8006992 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2201      	movs	r2, #1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	e002      	b.n	8006998 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	0018      	movs	r0, r3
 80069a0:	f000 fc34 	bl	800720c <USBD_CtlSendData>
              break;
 80069a4:	e006      	b.n	80069b4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	0011      	movs	r1, r2
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 fbaf 	bl	8007110 <USBD_CtlError>
              break;
 80069b2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80069b4:	e006      	b.n	80069c4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0011      	movs	r1, r2
 80069bc:	0018      	movs	r0, r3
 80069be:	f000 fba7 	bl	8007110 <USBD_CtlError>
          break;
 80069c2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80069c4:	e006      	b.n	80069d4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	0011      	movs	r1, r2
 80069cc:	0018      	movs	r0, r3
 80069ce:	f000 fb9f 	bl	8007110 <USBD_CtlError>
      break;
 80069d2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80069d4:	230f      	movs	r3, #15
 80069d6:	18fb      	adds	r3, r7, r3
 80069d8:	781b      	ldrb	r3, [r3, #0]
}
 80069da:	0018      	movs	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	b004      	add	sp, #16
 80069e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080069e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069ee:	2308      	movs	r3, #8
 80069f0:	18fb      	adds	r3, r7, r3
 80069f2:	2200      	movs	r2, #0
 80069f4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069fa:	230b      	movs	r3, #11
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	885b      	ldrh	r3, [r3, #2]
 8006a06:	0a1b      	lsrs	r3, r3, #8
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b07      	cmp	r3, #7
 8006a0c:	d900      	bls.n	8006a10 <USBD_GetDescriptor+0x2c>
 8006a0e:	e159      	b.n	8006cc4 <USBD_GetDescriptor+0x2e0>
 8006a10:	009a      	lsls	r2, r3, #2
 8006a12:	4bcb      	ldr	r3, [pc, #812]	; (8006d40 <USBD_GetDescriptor+0x35c>)
 8006a14:	18d3      	adds	r3, r2, r3
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	23ac      	movs	r3, #172	; 0xac
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	58d3      	ldr	r3, [r2, r3]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7c12      	ldrb	r2, [r2, #16]
 8006a28:	2108      	movs	r1, #8
 8006a2a:	1879      	adds	r1, r7, r1
 8006a2c:	0010      	movs	r0, r2
 8006a2e:	4798      	blx	r3
 8006a30:	0003      	movs	r3, r0
 8006a32:	60fb      	str	r3, [r7, #12]
      break;
 8006a34:	e153      	b.n	8006cde <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7c1b      	ldrb	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10f      	bne.n	8006a5e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	23ad      	movs	r3, #173	; 0xad
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	58d3      	ldr	r3, [r2, r3]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	2208      	movs	r2, #8
 8006a4a:	18ba      	adds	r2, r7, r2
 8006a4c:	0010      	movs	r0, r2
 8006a4e:	4798      	blx	r3
 8006a50:	0003      	movs	r3, r0
 8006a52:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	2202      	movs	r2, #2
 8006a5a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a5c:	e13f      	b.n	8006cde <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	23ad      	movs	r3, #173	; 0xad
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	58d3      	ldr	r3, [r2, r3]
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	2208      	movs	r2, #8
 8006a6a:	18ba      	adds	r2, r7, r2
 8006a6c:	0010      	movs	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	0003      	movs	r3, r0
 8006a72:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	2202      	movs	r2, #2
 8006a7a:	701a      	strb	r2, [r3, #0]
      break;
 8006a7c:	e12f      	b.n	8006cde <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	885b      	ldrh	r3, [r3, #2]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b05      	cmp	r3, #5
 8006a86:	d900      	bls.n	8006a8a <USBD_GetDescriptor+0xa6>
 8006a88:	e0d0      	b.n	8006c2c <USBD_GetDescriptor+0x248>
 8006a8a:	009a      	lsls	r2, r3, #2
 8006a8c:	4bad      	ldr	r3, [pc, #692]	; (8006d44 <USBD_GetDescriptor+0x360>)
 8006a8e:	18d3      	adds	r3, r2, r3
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	23ac      	movs	r3, #172	; 0xac
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	58d3      	ldr	r3, [r2, r3]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	23ac      	movs	r3, #172	; 0xac
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	58d3      	ldr	r3, [r2, r3]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	7c12      	ldrb	r2, [r2, #16]
 8006ab0:	2108      	movs	r1, #8
 8006ab2:	1879      	adds	r1, r7, r1
 8006ab4:	0010      	movs	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	0003      	movs	r3, r0
 8006aba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006abc:	e0c3      	b.n	8006c46 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	0011      	movs	r1, r2
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 fb23 	bl	8007110 <USBD_CtlError>
            err++;
 8006aca:	210b      	movs	r1, #11
 8006acc:	187b      	adds	r3, r7, r1
 8006ace:	781a      	ldrb	r2, [r3, #0]
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	3201      	adds	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
          break;
 8006ad6:	e0b6      	b.n	8006c46 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	23ac      	movs	r3, #172	; 0xac
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	58d3      	ldr	r3, [r2, r3]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	23ac      	movs	r3, #172	; 0xac
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	58d3      	ldr	r3, [r2, r3]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	2108      	movs	r1, #8
 8006af6:	1879      	adds	r1, r7, r1
 8006af8:	0010      	movs	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	0003      	movs	r3, r0
 8006afe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b00:	e0a1      	b.n	8006c46 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	0011      	movs	r1, r2
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f000 fb01 	bl	8007110 <USBD_CtlError>
            err++;
 8006b0e:	210b      	movs	r1, #11
 8006b10:	187b      	adds	r3, r7, r1
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	187b      	adds	r3, r7, r1
 8006b16:	3201      	adds	r2, #1
 8006b18:	701a      	strb	r2, [r3, #0]
          break;
 8006b1a:	e094      	b.n	8006c46 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	23ac      	movs	r3, #172	; 0xac
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	58d3      	ldr	r3, [r2, r3]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	23ac      	movs	r3, #172	; 0xac
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	58d3      	ldr	r3, [r2, r3]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	7c12      	ldrb	r2, [r2, #16]
 8006b38:	2108      	movs	r1, #8
 8006b3a:	1879      	adds	r1, r7, r1
 8006b3c:	0010      	movs	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	0003      	movs	r3, r0
 8006b42:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b44:	e07f      	b.n	8006c46 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	0011      	movs	r1, r2
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f000 fadf 	bl	8007110 <USBD_CtlError>
            err++;
 8006b52:	210b      	movs	r1, #11
 8006b54:	187b      	adds	r3, r7, r1
 8006b56:	781a      	ldrb	r2, [r3, #0]
 8006b58:	187b      	adds	r3, r7, r1
 8006b5a:	3201      	adds	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
          break;
 8006b5e:	e072      	b.n	8006c46 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	23ac      	movs	r3, #172	; 0xac
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	58d3      	ldr	r3, [r2, r3]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	23ac      	movs	r3, #172	; 0xac
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	58d3      	ldr	r3, [r2, r3]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	7c12      	ldrb	r2, [r2, #16]
 8006b7c:	2108      	movs	r1, #8
 8006b7e:	1879      	adds	r1, r7, r1
 8006b80:	0010      	movs	r0, r2
 8006b82:	4798      	blx	r3
 8006b84:	0003      	movs	r3, r0
 8006b86:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b88:	e05d      	b.n	8006c46 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	0011      	movs	r1, r2
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 fabd 	bl	8007110 <USBD_CtlError>
            err++;
 8006b96:	210b      	movs	r1, #11
 8006b98:	187b      	adds	r3, r7, r1
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	187b      	adds	r3, r7, r1
 8006b9e:	3201      	adds	r2, #1
 8006ba0:	701a      	strb	r2, [r3, #0]
          break;
 8006ba2:	e050      	b.n	8006c46 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	23ac      	movs	r3, #172	; 0xac
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	58d3      	ldr	r3, [r2, r3]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00d      	beq.n	8006bce <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	23ac      	movs	r3, #172	; 0xac
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	58d3      	ldr	r3, [r2, r3]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	7c12      	ldrb	r2, [r2, #16]
 8006bc0:	2108      	movs	r1, #8
 8006bc2:	1879      	adds	r1, r7, r1
 8006bc4:	0010      	movs	r0, r2
 8006bc6:	4798      	blx	r3
 8006bc8:	0003      	movs	r3, r0
 8006bca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bcc:	e03b      	b.n	8006c46 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	0011      	movs	r1, r2
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f000 fa9b 	bl	8007110 <USBD_CtlError>
            err++;
 8006bda:	210b      	movs	r1, #11
 8006bdc:	187b      	adds	r3, r7, r1
 8006bde:	781a      	ldrb	r2, [r3, #0]
 8006be0:	187b      	adds	r3, r7, r1
 8006be2:	3201      	adds	r2, #1
 8006be4:	701a      	strb	r2, [r3, #0]
          break;
 8006be6:	e02e      	b.n	8006c46 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	23ac      	movs	r3, #172	; 0xac
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	58d3      	ldr	r3, [r2, r3]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00d      	beq.n	8006c12 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	23ac      	movs	r3, #172	; 0xac
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	58d3      	ldr	r3, [r2, r3]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	7c12      	ldrb	r2, [r2, #16]
 8006c04:	2108      	movs	r1, #8
 8006c06:	1879      	adds	r1, r7, r1
 8006c08:	0010      	movs	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c10:	e019      	b.n	8006c46 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	0011      	movs	r1, r2
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f000 fa79 	bl	8007110 <USBD_CtlError>
            err++;
 8006c1e:	210b      	movs	r1, #11
 8006c20:	187b      	adds	r3, r7, r1
 8006c22:	781a      	ldrb	r2, [r3, #0]
 8006c24:	187b      	adds	r3, r7, r1
 8006c26:	3201      	adds	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]
          break;
 8006c2a:	e00c      	b.n	8006c46 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	0011      	movs	r1, r2
 8006c32:	0018      	movs	r0, r3
 8006c34:	f000 fa6c 	bl	8007110 <USBD_CtlError>
          err++;
 8006c38:	210b      	movs	r1, #11
 8006c3a:	187b      	adds	r3, r7, r1
 8006c3c:	781a      	ldrb	r2, [r3, #0]
 8006c3e:	187b      	adds	r3, r7, r1
 8006c40:	3201      	adds	r2, #1
 8006c42:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006c44:	e04b      	b.n	8006cde <USBD_GetDescriptor+0x2fa>
 8006c46:	e04a      	b.n	8006cde <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	7c1b      	ldrb	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	23ad      	movs	r3, #173	; 0xad
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	58d3      	ldr	r3, [r2, r3]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	18ba      	adds	r2, r7, r2
 8006c5e:	0010      	movs	r0, r2
 8006c60:	4798      	blx	r3
 8006c62:	0003      	movs	r3, r0
 8006c64:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c66:	e03a      	b.n	8006cde <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	0011      	movs	r1, r2
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f000 fa4e 	bl	8007110 <USBD_CtlError>
        err++;
 8006c74:	210b      	movs	r1, #11
 8006c76:	187b      	adds	r3, r7, r1
 8006c78:	781a      	ldrb	r2, [r3, #0]
 8006c7a:	187b      	adds	r3, r7, r1
 8006c7c:	3201      	adds	r2, #1
 8006c7e:	701a      	strb	r2, [r3, #0]
      break;
 8006c80:	e02d      	b.n	8006cde <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	7c1b      	ldrb	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10f      	bne.n	8006caa <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	23ad      	movs	r3, #173	; 0xad
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	58d3      	ldr	r3, [r2, r3]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	2208      	movs	r2, #8
 8006c96:	18ba      	adds	r2, r7, r2
 8006c98:	0010      	movs	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	0003      	movs	r3, r0
 8006c9e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	2207      	movs	r2, #7
 8006ca6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ca8:	e019      	b.n	8006cde <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0011      	movs	r1, r2
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 fa2d 	bl	8007110 <USBD_CtlError>
        err++;
 8006cb6:	210b      	movs	r1, #11
 8006cb8:	187b      	adds	r3, r7, r1
 8006cba:	781a      	ldrb	r2, [r3, #0]
 8006cbc:	187b      	adds	r3, r7, r1
 8006cbe:	3201      	adds	r2, #1
 8006cc0:	701a      	strb	r2, [r3, #0]
      break;
 8006cc2:	e00c      	b.n	8006cde <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	0011      	movs	r1, r2
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f000 fa20 	bl	8007110 <USBD_CtlError>
      err++;
 8006cd0:	210b      	movs	r1, #11
 8006cd2:	187b      	adds	r3, r7, r1
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	187b      	adds	r3, r7, r1
 8006cd8:	3201      	adds	r2, #1
 8006cda:	701a      	strb	r2, [r3, #0]
      break;
 8006cdc:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8006cde:	230b      	movs	r3, #11
 8006ce0:	18fb      	adds	r3, r7, r3
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d127      	bne.n	8006d38 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ce8:	2108      	movs	r1, #8
 8006cea:	187b      	adds	r3, r7, r1
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d019      	beq.n	8006d26 <USBD_GetDescriptor+0x342>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	88db      	ldrh	r3, [r3, #6]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d015      	beq.n	8006d26 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	88da      	ldrh	r2, [r3, #6]
 8006cfe:	187b      	adds	r3, r7, r1
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	1c18      	adds	r0, r3, #0
 8006d04:	1c11      	adds	r1, r2, #0
 8006d06:	b28a      	uxth	r2, r1
 8006d08:	b283      	uxth	r3, r0
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d900      	bls.n	8006d10 <USBD_GetDescriptor+0x32c>
 8006d0e:	1c01      	adds	r1, r0, #0
 8006d10:	b28a      	uxth	r2, r1
 8006d12:	2108      	movs	r1, #8
 8006d14:	187b      	adds	r3, r7, r1
 8006d16:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d18:	187b      	adds	r3, r7, r1
 8006d1a:	881a      	ldrh	r2, [r3, #0]
 8006d1c:	68f9      	ldr	r1, [r7, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	0018      	movs	r0, r3
 8006d22:	f000 fa73 	bl	800720c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	88db      	ldrh	r3, [r3, #6]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 fab1 	bl	8007298 <USBD_CtlSendStatus>
 8006d36:	e000      	b.n	8006d3a <USBD_GetDescriptor+0x356>
    return;
 8006d38:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b004      	add	sp, #16
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	08007cd4 	.word	0x08007cd4
 8006d44:	08007cf4 	.word	0x08007cf4

08006d48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	889b      	ldrh	r3, [r3, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d13d      	bne.n	8006dd6 <USBD_SetAddress+0x8e>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	88db      	ldrh	r3, [r3, #6]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d139      	bne.n	8006dd6 <USBD_SetAddress+0x8e>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	885b      	ldrh	r3, [r3, #2]
 8006d66:	2b7f      	cmp	r3, #127	; 0x7f
 8006d68:	d835      	bhi.n	8006dd6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	885b      	ldrh	r3, [r3, #2]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	230f      	movs	r3, #15
 8006d72:	18fb      	adds	r3, r7, r3
 8006d74:	217f      	movs	r1, #127	; 0x7f
 8006d76:	400a      	ands	r2, r1
 8006d78:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	23a7      	movs	r3, #167	; 0xa7
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	5cd3      	ldrb	r3, [r2, r3]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d106      	bne.n	8006d94 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	0011      	movs	r1, r2
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f000 f9bf 	bl	8007110 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d92:	e027      	b.n	8006de4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	240f      	movs	r4, #15
 8006d98:	193a      	adds	r2, r7, r4
 8006d9a:	4914      	ldr	r1, [pc, #80]	; (8006dec <USBD_SetAddress+0xa4>)
 8006d9c:	7812      	ldrb	r2, [r2, #0]
 8006d9e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006da0:	193b      	adds	r3, r7, r4
 8006da2:	781a      	ldrb	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0011      	movs	r1, r2
 8006da8:	0018      	movs	r0, r3
 8006daa:	f000 fe33 	bl	8007a14 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	0018      	movs	r0, r3
 8006db2:	f000 fa71 	bl	8007298 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006db6:	193b      	adds	r3, r7, r4
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	23a7      	movs	r3, #167	; 0xa7
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc8:	e00c      	b.n	8006de4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	23a7      	movs	r3, #167	; 0xa7
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd4:	e006      	b.n	8006de4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	0011      	movs	r1, r2
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f000 f997 	bl	8007110 <USBD_CtlError>
  }
}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	46c0      	nop			; (mov r8, r8)
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b005      	add	sp, #20
 8006dea:	bd90      	pop	{r4, r7, pc}
 8006dec:	0000029e 	.word	0x0000029e

08006df0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	885b      	ldrh	r3, [r3, #2]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	4b4c      	ldr	r3, [pc, #304]	; (8006f34 <USBD_SetConfig+0x144>)
 8006e02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e04:	4b4b      	ldr	r3, [pc, #300]	; (8006f34 <USBD_SetConfig+0x144>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d906      	bls.n	8006e1a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	0011      	movs	r1, r2
 8006e12:	0018      	movs	r0, r3
 8006e14:	f000 f97c 	bl	8007110 <USBD_CtlError>
 8006e18:	e088      	b.n	8006f2c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	23a7      	movs	r3, #167	; 0xa7
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	5cd3      	ldrb	r3, [r2, r3]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d002      	beq.n	8006e2c <USBD_SetConfig+0x3c>
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d029      	beq.n	8006e7e <USBD_SetConfig+0x8e>
 8006e2a:	e071      	b.n	8006f10 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006e2c:	4b41      	ldr	r3, [pc, #260]	; (8006f34 <USBD_SetConfig+0x144>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01f      	beq.n	8006e74 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006e34:	4b3f      	ldr	r3, [pc, #252]	; (8006f34 <USBD_SetConfig+0x144>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	001a      	movs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	23a7      	movs	r3, #167	; 0xa7
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	2103      	movs	r1, #3
 8006e46:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006e48:	4b3a      	ldr	r3, [pc, #232]	; (8006f34 <USBD_SetConfig+0x144>)
 8006e4a:	781a      	ldrb	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	0011      	movs	r1, r2
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7ff f8c6 	bl	8005fe2 <USBD_SetClassConfig>
 8006e56:	0003      	movs	r3, r0
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d106      	bne.n	8006e6a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	0011      	movs	r1, r2
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 f954 	bl	8007110 <USBD_CtlError>
            return;
 8006e68:	e060      	b.n	8006f2c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 fa13 	bl	8007298 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006e72:	e05b      	b.n	8006f2c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	0018      	movs	r0, r3
 8006e78:	f000 fa0e 	bl	8007298 <USBD_CtlSendStatus>
        break;
 8006e7c:	e056      	b.n	8006f2c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006e7e:	4b2d      	ldr	r3, [pc, #180]	; (8006f34 <USBD_SetConfig+0x144>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d115      	bne.n	8006eb2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	23a7      	movs	r3, #167	; 0xa7
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	2102      	movs	r1, #2
 8006e8e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006e90:	4b28      	ldr	r3, [pc, #160]	; (8006f34 <USBD_SetConfig+0x144>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	001a      	movs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006e9a:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <USBD_SetConfig+0x144>)
 8006e9c:	781a      	ldrb	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	0011      	movs	r1, r2
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7ff f8c4 	bl	8006030 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f000 f9f4 	bl	8007298 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006eb0:	e03c      	b.n	8006f2c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006eb2:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <USBD_SetConfig+0x144>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	001a      	movs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d022      	beq.n	8006f06 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	0011      	movs	r1, r2
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f7ff f8b0 	bl	8006030 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006ed0:	4b18      	ldr	r3, [pc, #96]	; (8006f34 <USBD_SetConfig+0x144>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	001a      	movs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006eda:	4b16      	ldr	r3, [pc, #88]	; (8006f34 <USBD_SetConfig+0x144>)
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	0011      	movs	r1, r2
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f7ff f87d 	bl	8005fe2 <USBD_SetClassConfig>
 8006ee8:	0003      	movs	r3, r0
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d106      	bne.n	8006efc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	0011      	movs	r1, r2
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 f90b 	bl	8007110 <USBD_CtlError>
            return;
 8006efa:	e017      	b.n	8006f2c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	0018      	movs	r0, r3
 8006f00:	f000 f9ca 	bl	8007298 <USBD_CtlSendStatus>
        break;
 8006f04:	e012      	b.n	8006f2c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f000 f9c5 	bl	8007298 <USBD_CtlSendStatus>
        break;
 8006f0e:	e00d      	b.n	8006f2c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	0011      	movs	r1, r2
 8006f16:	0018      	movs	r0, r3
 8006f18:	f000 f8fa 	bl	8007110 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <USBD_SetConfig+0x144>)
 8006f1e:	781a      	ldrb	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	0011      	movs	r1, r2
 8006f24:	0018      	movs	r0, r3
 8006f26:	f7ff f883 	bl	8006030 <USBD_ClrClassConfig>
        break;
 8006f2a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b002      	add	sp, #8
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	46c0      	nop			; (mov r8, r8)
 8006f34:	20000224 	.word	0x20000224

08006f38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	88db      	ldrh	r3, [r3, #6]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d006      	beq.n	8006f58 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	0011      	movs	r1, r2
 8006f50:	0018      	movs	r0, r3
 8006f52:	f000 f8dd 	bl	8007110 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f56:	e026      	b.n	8006fa6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	23a7      	movs	r3, #167	; 0xa7
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	5cd3      	ldrb	r3, [r2, r3]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	dc02      	bgt.n	8006f6a <USBD_GetConfig+0x32>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dc03      	bgt.n	8006f70 <USBD_GetConfig+0x38>
 8006f68:	e016      	b.n	8006f98 <USBD_GetConfig+0x60>
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d00c      	beq.n	8006f88 <USBD_GetConfig+0x50>
 8006f6e:	e013      	b.n	8006f98 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	0019      	movs	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	0018      	movs	r0, r3
 8006f82:	f000 f943 	bl	800720c <USBD_CtlSendData>
        break;
 8006f86:	e00e      	b.n	8006fa6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	1d19      	adds	r1, r3, #4
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	0018      	movs	r0, r3
 8006f92:	f000 f93b 	bl	800720c <USBD_CtlSendData>
        break;
 8006f96:	e006      	b.n	8006fa6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0011      	movs	r1, r2
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f000 f8b6 	bl	8007110 <USBD_CtlError>
        break;
 8006fa4:	46c0      	nop			; (mov r8, r8)
}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b002      	add	sp, #8
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	23a7      	movs	r3, #167	; 0xa7
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	5cd3      	ldrb	r3, [r2, r3]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d822      	bhi.n	800700c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	88db      	ldrh	r3, [r3, #6]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d006      	beq.n	8006fdc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	0011      	movs	r1, r2
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f000 f89b 	bl	8007110 <USBD_CtlError>
        break;
 8006fda:	e01e      	b.n	800701a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	23a9      	movs	r3, #169	; 0xa9
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	58d3      	ldr	r3, [r2, r3]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	330c      	adds	r3, #12
 8006ffe:	0019      	movs	r1, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	0018      	movs	r0, r3
 8007006:	f000 f901 	bl	800720c <USBD_CtlSendData>
      break;
 800700a:	e006      	b.n	800701a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0011      	movs	r1, r2
 8007012:	0018      	movs	r0, r3
 8007014:	f000 f87c 	bl	8007110 <USBD_CtlError>
      break;
 8007018:	46c0      	nop			; (mov r8, r8)
  }
}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	46bd      	mov	sp, r7
 800701e:	b002      	add	sp, #8
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	885b      	ldrh	r3, [r3, #2]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d108      	bne.n	8007046 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	23a9      	movs	r3, #169	; 0xa9
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	2101      	movs	r1, #1
 800703c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	0018      	movs	r0, r3
 8007042:	f000 f929 	bl	8007298 <USBD_CtlSendStatus>
  }
}
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	46bd      	mov	sp, r7
 800704a:	b002      	add	sp, #8
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	23a7      	movs	r3, #167	; 0xa7
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	5cd3      	ldrb	r3, [r2, r3]
 8007060:	3b01      	subs	r3, #1
 8007062:	2b02      	cmp	r3, #2
 8007064:	d80d      	bhi.n	8007082 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	885b      	ldrh	r3, [r3, #2]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d110      	bne.n	8007090 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	23a9      	movs	r3, #169	; 0xa9
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	2100      	movs	r1, #0
 8007076:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	0018      	movs	r0, r3
 800707c:	f000 f90c 	bl	8007298 <USBD_CtlSendStatus>
      }
      break;
 8007080:	e006      	b.n	8007090 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	0011      	movs	r1, r2
 8007088:	0018      	movs	r0, r3
 800708a:	f000 f841 	bl	8007110 <USBD_CtlError>
      break;
 800708e:	e000      	b.n	8007092 <USBD_ClrFeature+0x44>
      break;
 8007090:	46c0      	nop			; (mov r8, r8)
  }
}
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	46bd      	mov	sp, r7
 8007096:	b002      	add	sp, #8
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	785a      	ldrb	r2, [r3, #1]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	3302      	adds	r3, #2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	3303      	adds	r3, #3
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	18d3      	adds	r3, r2, r3
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	3304      	adds	r3, #4
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	3305      	adds	r3, #5
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	18d3      	adds	r3, r2, r3
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	3306      	adds	r3, #6
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	3307      	adds	r3, #7
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	b29b      	uxth	r3, r3
 8007100:	18d3      	adds	r3, r2, r3
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	80da      	strh	r2, [r3, #6]

}
 8007108:	46c0      	nop			; (mov r8, r8)
 800710a:	46bd      	mov	sp, r7
 800710c:	b002      	add	sp, #8
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2180      	movs	r1, #128	; 0x80
 800711e:	0018      	movs	r0, r3
 8007120:	f000 fbf1 	bl	8007906 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2100      	movs	r1, #0
 8007128:	0018      	movs	r0, r3
 800712a:	f000 fbec 	bl	8007906 <USBD_LL_StallEP>
}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	46bd      	mov	sp, r7
 8007132:	b002      	add	sp, #8
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007136:	b590      	push	{r4, r7, lr}
 8007138:	b087      	sub	sp, #28
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007142:	2417      	movs	r4, #23
 8007144:	193b      	adds	r3, r7, r4
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d03c      	beq.n	80071ca <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	0018      	movs	r0, r3
 8007154:	f000 f83d 	bl	80071d2 <USBD_GetLen>
 8007158:	0003      	movs	r3, r0
 800715a:	3301      	adds	r3, #1
 800715c:	b29b      	uxth	r3, r3
 800715e:	18db      	adds	r3, r3, r3
 8007160:	b29a      	uxth	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007166:	193b      	adds	r3, r7, r4
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	193a      	adds	r2, r7, r4
 800716c:	1c59      	adds	r1, r3, #1
 800716e:	7011      	strb	r1, [r2, #0]
 8007170:	001a      	movs	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	189b      	adds	r3, r3, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	7812      	ldrb	r2, [r2, #0]
 800717a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800717c:	193b      	adds	r3, r7, r4
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	193a      	adds	r2, r7, r4
 8007182:	1c59      	adds	r1, r3, #1
 8007184:	7011      	strb	r1, [r2, #0]
 8007186:	001a      	movs	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	189b      	adds	r3, r3, r2
 800718c:	2203      	movs	r2, #3
 800718e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007190:	e017      	b.n	80071c2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	60fa      	str	r2, [r7, #12]
 8007198:	2417      	movs	r4, #23
 800719a:	193a      	adds	r2, r7, r4
 800719c:	7812      	ldrb	r2, [r2, #0]
 800719e:	1939      	adds	r1, r7, r4
 80071a0:	1c50      	adds	r0, r2, #1
 80071a2:	7008      	strb	r0, [r1, #0]
 80071a4:	0011      	movs	r1, r2
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	1852      	adds	r2, r2, r1
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80071ae:	193b      	adds	r3, r7, r4
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	193a      	adds	r2, r7, r4
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	7011      	strb	r1, [r2, #0]
 80071b8:	001a      	movs	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	189b      	adds	r3, r3, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e3      	bne.n	8007192 <USBD_GetString+0x5c>
    }
  }
}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	46bd      	mov	sp, r7
 80071ce:	b007      	add	sp, #28
 80071d0:	bd90      	pop	{r4, r7, pc}

080071d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071da:	230f      	movs	r3, #15
 80071dc:	18fb      	adds	r3, r7, r3
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80071e2:	e008      	b.n	80071f6 <USBD_GetLen+0x24>
  {
    len++;
 80071e4:	210f      	movs	r1, #15
 80071e6:	187b      	adds	r3, r7, r1
 80071e8:	781a      	ldrb	r2, [r3, #0]
 80071ea:	187b      	adds	r3, r7, r1
 80071ec:	3201      	adds	r2, #1
 80071ee:	701a      	strb	r2, [r3, #0]
    buf++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3301      	adds	r3, #1
 80071f4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f2      	bne.n	80071e4 <USBD_GetLen+0x12>
  }

  return len;
 80071fe:	230f      	movs	r3, #15
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	781b      	ldrb	r3, [r3, #0]
}
 8007204:	0018      	movs	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	b004      	add	sp, #16
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	1dbb      	adds	r3, r7, #6
 8007218:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	23a5      	movs	r3, #165	; 0xa5
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	2102      	movs	r1, #2
 8007222:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007224:	1dbb      	adds	r3, r7, #6
 8007226:	881a      	ldrh	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800722c:	1dbb      	adds	r3, r7, #6
 800722e:	881a      	ldrh	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007234:	1dbb      	adds	r3, r7, #6
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	2100      	movs	r1, #0
 800723e:	f000 fc14 	bl	8007a6a <USBD_LL_Transmit>

  return USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	0018      	movs	r0, r3
 8007246:	46bd      	mov	sp, r7
 8007248:	b004      	add	sp, #16
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	1dbb      	adds	r3, r7, #6
 8007258:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800725a:	1dbb      	adds	r3, r7, #6
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	2100      	movs	r1, #0
 8007264:	f000 fc01 	bl	8007a6a <USBD_LL_Transmit>

  return USBD_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	0018      	movs	r0, r3
 800726c:	46bd      	mov	sp, r7
 800726e:	b004      	add	sp, #16
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	1dbb      	adds	r3, r7, #6
 800727e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007280:	1dbb      	adds	r3, r7, #6
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	2100      	movs	r1, #0
 800728a:	f000 fc25 	bl	8007ad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	0018      	movs	r0, r3
 8007292:	46bd      	mov	sp, r7
 8007294:	b004      	add	sp, #16
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	23a5      	movs	r3, #165	; 0xa5
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	2104      	movs	r1, #4
 80072a8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	2300      	movs	r3, #0
 80072ae:	2200      	movs	r2, #0
 80072b0:	2100      	movs	r1, #0
 80072b2:	f000 fbda 	bl	8007a6a <USBD_LL_Transmit>

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	0018      	movs	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	b002      	add	sp, #8
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	23a5      	movs	r3, #165	; 0xa5
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	2105      	movs	r1, #5
 80072d0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	f000 fbfd 	bl	8007ad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	0018      	movs	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b002      	add	sp, #8
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072ec:	490f      	ldr	r1, [pc, #60]	; (800732c <MX_USB_DEVICE_Init+0x44>)
 80072ee:	4b10      	ldr	r3, [pc, #64]	; (8007330 <MX_USB_DEVICE_Init+0x48>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	0018      	movs	r0, r3
 80072f4:	f7fe fe0e 	bl	8005f14 <USBD_Init>
 80072f8:	1e03      	subs	r3, r0, #0
 80072fa:	d001      	beq.n	8007300 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072fc:	f7f9 fab0 	bl	8000860 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007300:	4a0c      	ldr	r2, [pc, #48]	; (8007334 <MX_USB_DEVICE_Init+0x4c>)
 8007302:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <MX_USB_DEVICE_Init+0x48>)
 8007304:	0011      	movs	r1, r2
 8007306:	0018      	movs	r0, r3
 8007308:	f7fe fe35 	bl	8005f76 <USBD_RegisterClass>
 800730c:	1e03      	subs	r3, r0, #0
 800730e:	d001      	beq.n	8007314 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007310:	f7f9 faa6 	bl	8000860 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007314:	4b06      	ldr	r3, [pc, #24]	; (8007330 <MX_USB_DEVICE_Init+0x48>)
 8007316:	0018      	movs	r0, r3
 8007318:	f7fe fe4d 	bl	8005fb6 <USBD_Start>
 800731c:	1e03      	subs	r3, r0, #0
 800731e:	d001      	beq.n	8007324 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007320:	f7f9 fa9e 	bl	8000860 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007324:	46c0      	nop			; (mov r8, r8)
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	46c0      	nop			; (mov r8, r8)
 800732c:	200001ac 	.word	0x200001ac
 8007330:	20000228 	.word	0x20000228
 8007334:	200000b0 	.word	0x200000b0

08007338 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	0002      	movs	r2, r0
 8007340:	6039      	str	r1, [r7, #0]
 8007342:	1dfb      	adds	r3, r7, #7
 8007344:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2212      	movs	r2, #18
 800734a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800734c:	4b02      	ldr	r3, [pc, #8]	; (8007358 <USBD_FS_DeviceDescriptor+0x20>)
}
 800734e:	0018      	movs	r0, r3
 8007350:	46bd      	mov	sp, r7
 8007352:	b002      	add	sp, #8
 8007354:	bd80      	pop	{r7, pc}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	200001c8 	.word	0x200001c8

0800735c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	0002      	movs	r2, r0
 8007364:	6039      	str	r1, [r7, #0]
 8007366:	1dfb      	adds	r3, r7, #7
 8007368:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2204      	movs	r2, #4
 800736e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007372:	0018      	movs	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	b002      	add	sp, #8
 8007378:	bd80      	pop	{r7, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	200001dc 	.word	0x200001dc

08007380 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	0002      	movs	r2, r0
 8007388:	6039      	str	r1, [r7, #0]
 800738a:	1dfb      	adds	r3, r7, #7
 800738c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800738e:	1dfb      	adds	r3, r7, #7
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	4908      	ldr	r1, [pc, #32]	; (80073bc <USBD_FS_ProductStrDescriptor+0x3c>)
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <USBD_FS_ProductStrDescriptor+0x40>)
 800739c:	0018      	movs	r0, r3
 800739e:	f7ff feca 	bl	8007136 <USBD_GetString>
 80073a2:	e005      	b.n	80073b0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	4905      	ldr	r1, [pc, #20]	; (80073bc <USBD_FS_ProductStrDescriptor+0x3c>)
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <USBD_FS_ProductStrDescriptor+0x40>)
 80073aa:	0018      	movs	r0, r3
 80073ac:	f7ff fec3 	bl	8007136 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80073b2:	0018      	movs	r0, r3
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b002      	add	sp, #8
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	200004ec 	.word	0x200004ec
 80073c0:	08007c5c 	.word	0x08007c5c

080073c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	0002      	movs	r2, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	1dfb      	adds	r3, r7, #7
 80073d0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	4904      	ldr	r1, [pc, #16]	; (80073e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80073d8:	0018      	movs	r0, r3
 80073da:	f7ff feac 	bl	8007136 <USBD_GetString>
  return USBD_StrDesc;
 80073de:	4b02      	ldr	r3, [pc, #8]	; (80073e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80073e0:	0018      	movs	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b002      	add	sp, #8
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	200004ec 	.word	0x200004ec
 80073ec:	08007c60 	.word	0x08007c60

080073f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	0002      	movs	r2, r0
 80073f8:	6039      	str	r1, [r7, #0]
 80073fa:	1dfb      	adds	r3, r7, #7
 80073fc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	221a      	movs	r2, #26
 8007402:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007404:	f000 f84c 	bl	80074a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007408:	4b02      	ldr	r3, [pc, #8]	; (8007414 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800740a:	0018      	movs	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	b002      	add	sp, #8
 8007410:	bd80      	pop	{r7, pc}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	200001e0 	.word	0x200001e0

08007418 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	0002      	movs	r2, r0
 8007420:	6039      	str	r1, [r7, #0]
 8007422:	1dfb      	adds	r3, r7, #7
 8007424:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007426:	1dfb      	adds	r3, r7, #7
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	4908      	ldr	r1, [pc, #32]	; (8007454 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007432:	4b09      	ldr	r3, [pc, #36]	; (8007458 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007434:	0018      	movs	r0, r3
 8007436:	f7ff fe7e 	bl	8007136 <USBD_GetString>
 800743a:	e005      	b.n	8007448 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	4905      	ldr	r1, [pc, #20]	; (8007454 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007442:	0018      	movs	r0, r3
 8007444:	f7ff fe77 	bl	8007136 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007448:	4b02      	ldr	r3, [pc, #8]	; (8007454 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800744a:	0018      	movs	r0, r3
 800744c:	46bd      	mov	sp, r7
 800744e:	b002      	add	sp, #8
 8007450:	bd80      	pop	{r7, pc}
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	200004ec 	.word	0x200004ec
 8007458:	08007c74 	.word	0x08007c74

0800745c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	0002      	movs	r2, r0
 8007464:	6039      	str	r1, [r7, #0]
 8007466:	1dfb      	adds	r3, r7, #7
 8007468:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800746a:	1dfb      	adds	r3, r7, #7
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	4908      	ldr	r1, [pc, #32]	; (8007498 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007476:	4b09      	ldr	r3, [pc, #36]	; (800749c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007478:	0018      	movs	r0, r3
 800747a:	f7ff fe5c 	bl	8007136 <USBD_GetString>
 800747e:	e005      	b.n	800748c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	4905      	ldr	r1, [pc, #20]	; (8007498 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007486:	0018      	movs	r0, r3
 8007488:	f7ff fe55 	bl	8007136 <USBD_GetString>
  }
  return USBD_StrDesc;
 800748c:	4b02      	ldr	r3, [pc, #8]	; (8007498 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800748e:	0018      	movs	r0, r3
 8007490:	46bd      	mov	sp, r7
 8007492:	b002      	add	sp, #8
 8007494:	bd80      	pop	{r7, pc}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	200004ec 	.word	0x200004ec
 800749c:	08007c80 	.word	0x08007c80

080074a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <Get_SerialNum+0x48>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074ac:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <Get_SerialNum+0x4c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074b2:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <Get_SerialNum+0x50>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	18d3      	adds	r3, r2, r3
 80074be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00b      	beq.n	80074de <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074c6:	490b      	ldr	r1, [pc, #44]	; (80074f4 <Get_SerialNum+0x54>)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2208      	movs	r2, #8
 80074cc:	0018      	movs	r0, r3
 80074ce:	f000 f815 	bl	80074fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074d2:	4909      	ldr	r1, [pc, #36]	; (80074f8 <Get_SerialNum+0x58>)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2204      	movs	r2, #4
 80074d8:	0018      	movs	r0, r3
 80074da:	f000 f80f 	bl	80074fc <IntToUnicode>
  }
}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b004      	add	sp, #16
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	1ff80050 	.word	0x1ff80050
 80074ec:	1ff80054 	.word	0x1ff80054
 80074f0:	1ff80058 	.word	0x1ff80058
 80074f4:	200001e2 	.word	0x200001e2
 80074f8:	200001f2 	.word	0x200001f2

080074fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	1dfb      	adds	r3, r7, #7
 8007508:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800750a:	2117      	movs	r1, #23
 800750c:	187b      	adds	r3, r7, r1
 800750e:	2200      	movs	r2, #0
 8007510:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007512:	187b      	adds	r3, r7, r1
 8007514:	2200      	movs	r2, #0
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	e02f      	b.n	800757a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	0f1b      	lsrs	r3, r3, #28
 800751e:	2b09      	cmp	r3, #9
 8007520:	d80d      	bhi.n	800753e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	0f1b      	lsrs	r3, r3, #28
 8007526:	b2da      	uxtb	r2, r3
 8007528:	2317      	movs	r3, #23
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	0019      	movs	r1, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	185b      	adds	r3, r3, r1
 8007536:	3230      	adds	r2, #48	; 0x30
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	701a      	strb	r2, [r3, #0]
 800753c:	e00c      	b.n	8007558 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	0f1b      	lsrs	r3, r3, #28
 8007542:	b2da      	uxtb	r2, r3
 8007544:	2317      	movs	r3, #23
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	0019      	movs	r1, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	185b      	adds	r3, r3, r1
 8007552:	3237      	adds	r2, #55	; 0x37
 8007554:	b2d2      	uxtb	r2, r2
 8007556:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800755e:	2117      	movs	r1, #23
 8007560:	187b      	adds	r3, r7, r1
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	3301      	adds	r3, #1
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	18d3      	adds	r3, r2, r3
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007570:	187b      	adds	r3, r7, r1
 8007572:	781a      	ldrb	r2, [r3, #0]
 8007574:	187b      	adds	r3, r7, r1
 8007576:	3201      	adds	r2, #1
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	2317      	movs	r3, #23
 800757c:	18fa      	adds	r2, r7, r3
 800757e:	1dfb      	adds	r3, r7, #7
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	429a      	cmp	r2, r3
 8007586:	d3c8      	bcc.n	800751a <IntToUnicode+0x1e>
  }
}
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	46bd      	mov	sp, r7
 800758e:	b006      	add	sp, #24
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a0a      	ldr	r2, [pc, #40]	; (80075cc <HAL_PCD_MspInit+0x38>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d10e      	bne.n	80075c4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <HAL_PCD_MspInit+0x3c>)
 80075a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075aa:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <HAL_PCD_MspInit+0x3c>)
 80075ac:	2180      	movs	r1, #128	; 0x80
 80075ae:	0409      	lsls	r1, r1, #16
 80075b0:	430a      	orrs	r2, r1
 80075b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80075b4:	2200      	movs	r2, #0
 80075b6:	2100      	movs	r1, #0
 80075b8:	201f      	movs	r0, #31
 80075ba:	f7f9 faff 	bl	8000bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80075be:	201f      	movs	r0, #31
 80075c0:	f7f9 fb11 	bl	8000be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80075c4:	46c0      	nop			; (mov r8, r8)
 80075c6:	46bd      	mov	sp, r7
 80075c8:	b002      	add	sp, #8
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40005c00 	.word	0x40005c00
 80075d0:	40021000 	.word	0x40021000

080075d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	23bc      	movs	r3, #188	; 0xbc
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	58d2      	ldr	r2, [r2, r3]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	21ac      	movs	r1, #172	; 0xac
 80075e8:	0089      	lsls	r1, r1, #2
 80075ea:	468c      	mov	ip, r1
 80075ec:	4463      	add	r3, ip
 80075ee:	0019      	movs	r1, r3
 80075f0:	0010      	movs	r0, r2
 80075f2:	f7fe fd33 	bl	800605c <USBD_LL_SetupStage>
}
 80075f6:	46c0      	nop			; (mov r8, r8)
 80075f8:	46bd      	mov	sp, r7
 80075fa:	b002      	add	sp, #8
 80075fc:	bd80      	pop	{r7, pc}

080075fe <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075fe:	b590      	push	{r4, r7, lr}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	000a      	movs	r2, r1
 8007608:	1cfb      	adds	r3, r7, #3
 800760a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	23bc      	movs	r3, #188	; 0xbc
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	58d4      	ldr	r4, [r2, r3]
 8007614:	1cfb      	adds	r3, r7, #3
 8007616:	781a      	ldrb	r2, [r3, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	23be      	movs	r3, #190	; 0xbe
 800761c:	0059      	lsls	r1, r3, #1
 800761e:	0013      	movs	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	189b      	adds	r3, r3, r2
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	18c3      	adds	r3, r0, r3
 8007628:	185b      	adds	r3, r3, r1
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	1cfb      	adds	r3, r7, #3
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	0019      	movs	r1, r3
 8007632:	0020      	movs	r0, r4
 8007634:	f7fe fd70 	bl	8006118 <USBD_LL_DataOutStage>
}
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	46bd      	mov	sp, r7
 800763c:	b003      	add	sp, #12
 800763e:	bd90      	pop	{r4, r7, pc}

08007640 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	000a      	movs	r2, r1
 800764a:	1cfb      	adds	r3, r7, #3
 800764c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	23bc      	movs	r3, #188	; 0xbc
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	58d0      	ldr	r0, [r2, r3]
 8007656:	1cfb      	adds	r3, r7, #3
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	0013      	movs	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	189b      	adds	r3, r3, r2
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	18cb      	adds	r3, r1, r3
 8007666:	333c      	adds	r3, #60	; 0x3c
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	1cfb      	adds	r3, r7, #3
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	0019      	movs	r1, r3
 8007670:	f7fe fdd4 	bl	800621c <USBD_LL_DataInStage>
}
 8007674:	46c0      	nop			; (mov r8, r8)
 8007676:	46bd      	mov	sp, r7
 8007678:	b002      	add	sp, #8
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	23bc      	movs	r3, #188	; 0xbc
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	58d3      	ldr	r3, [r2, r3]
 800768c:	0018      	movs	r0, r3
 800768e:	f7fe ff0b 	bl	80064a8 <USBD_LL_SOF>
}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	46bd      	mov	sp, r7
 8007696:	b002      	add	sp, #8
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076a2:	230f      	movs	r3, #15
 80076a4:	18fb      	adds	r3, r7, r3
 80076a6:	2201      	movs	r2, #1
 80076a8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d001      	beq.n	80076b6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80076b2:	f7f9 f8d5 	bl	8000860 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	23bc      	movs	r3, #188	; 0xbc
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	58d2      	ldr	r2, [r2, r3]
 80076be:	230f      	movs	r3, #15
 80076c0:	18fb      	adds	r3, r7, r3
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	0019      	movs	r1, r3
 80076c6:	0010      	movs	r0, r2
 80076c8:	f7fe fead 	bl	8006426 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	23bc      	movs	r3, #188	; 0xbc
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	58d3      	ldr	r3, [r2, r3]
 80076d4:	0018      	movs	r0, r3
 80076d6:	f7fe fe5e 	bl	8006396 <USBD_LL_Reset>
}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	46bd      	mov	sp, r7
 80076de:	b004      	add	sp, #16
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	23bc      	movs	r3, #188	; 0xbc
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	58d3      	ldr	r3, [r2, r3]
 80076f4:	0018      	movs	r0, r3
 80076f6:	f7fe fea7 	bl	8006448 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d005      	beq.n	800770e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007702:	4b05      	ldr	r3, [pc, #20]	; (8007718 <HAL_PCD_SuspendCallback+0x34>)
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	4b04      	ldr	r3, [pc, #16]	; (8007718 <HAL_PCD_SuspendCallback+0x34>)
 8007708:	2106      	movs	r1, #6
 800770a:	430a      	orrs	r2, r1
 800770c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	46bd      	mov	sp, r7
 8007712:	b002      	add	sp, #8
 8007714:	bd80      	pop	{r7, pc}
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	e000ed00 	.word	0xe000ed00

0800771c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800772c:	4b09      	ldr	r3, [pc, #36]	; (8007754 <HAL_PCD_ResumeCallback+0x38>)
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	4b08      	ldr	r3, [pc, #32]	; (8007754 <HAL_PCD_ResumeCallback+0x38>)
 8007732:	2106      	movs	r1, #6
 8007734:	438a      	bics	r2, r1
 8007736:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007738:	f000 fa1a 	bl	8007b70 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	23bc      	movs	r3, #188	; 0xbc
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	58d3      	ldr	r3, [r2, r3]
 8007744:	0018      	movs	r0, r3
 8007746:	f7fe fe97 	bl	8006478 <USBD_LL_Resume>
}
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	46bd      	mov	sp, r7
 800774e:	b002      	add	sp, #8
 8007750:	bd80      	pop	{r7, pc}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	e000ed00 	.word	0xe000ed00

08007758 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007760:	4a23      	ldr	r2, [pc, #140]	; (80077f0 <USBD_LL_Init+0x98>)
 8007762:	23bc      	movs	r3, #188	; 0xbc
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	23b0      	movs	r3, #176	; 0xb0
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	491f      	ldr	r1, [pc, #124]	; (80077f0 <USBD_LL_Init+0x98>)
 8007772:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007774:	4b1e      	ldr	r3, [pc, #120]	; (80077f0 <USBD_LL_Init+0x98>)
 8007776:	4a1f      	ldr	r2, [pc, #124]	; (80077f4 <USBD_LL_Init+0x9c>)
 8007778:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800777a:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <USBD_LL_Init+0x98>)
 800777c:	2208      	movs	r2, #8
 800777e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007780:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <USBD_LL_Init+0x98>)
 8007782:	2202      	movs	r2, #2
 8007784:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007786:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <USBD_LL_Init+0x98>)
 8007788:	2202      	movs	r2, #2
 800778a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800778c:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <USBD_LL_Init+0x98>)
 800778e:	2200      	movs	r2, #0
 8007790:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007792:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <USBD_LL_Init+0x98>)
 8007794:	2200      	movs	r2, #0
 8007796:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007798:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <USBD_LL_Init+0x98>)
 800779a:	2200      	movs	r2, #0
 800779c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800779e:	4b14      	ldr	r3, [pc, #80]	; (80077f0 <USBD_LL_Init+0x98>)
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7f9 fbed 	bl	8000f80 <HAL_PCD_Init>
 80077a6:	1e03      	subs	r3, r0, #0
 80077a8:	d001      	beq.n	80077ae <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80077aa:	f7f9 f859 	bl	8000860 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	23b0      	movs	r3, #176	; 0xb0
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	58d0      	ldr	r0, [r2, r3]
 80077b6:	2318      	movs	r3, #24
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	f7fb f994 	bl	8002ae8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	23b0      	movs	r3, #176	; 0xb0
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	58d0      	ldr	r0, [r2, r3]
 80077c8:	2358      	movs	r3, #88	; 0x58
 80077ca:	2200      	movs	r2, #0
 80077cc:	2180      	movs	r1, #128	; 0x80
 80077ce:	f7fb f98b 	bl	8002ae8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	23b0      	movs	r3, #176	; 0xb0
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	58d0      	ldr	r0, [r2, r3]
 80077da:	2380      	movs	r3, #128	; 0x80
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	2200      	movs	r2, #0
 80077e0:	2181      	movs	r1, #129	; 0x81
 80077e2:	f7fb f981 	bl	8002ae8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	0018      	movs	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b002      	add	sp, #8
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200006ec 	.word	0x200006ec
 80077f4:	40005c00 	.word	0x40005c00

080077f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007800:	210f      	movs	r1, #15
 8007802:	187b      	adds	r3, r7, r1
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007808:	260e      	movs	r6, #14
 800780a:	19bb      	adds	r3, r7, r6
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	23b0      	movs	r3, #176	; 0xb0
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	58d3      	ldr	r3, [r2, r3]
 8007818:	000d      	movs	r5, r1
 800781a:	187c      	adds	r4, r7, r1
 800781c:	0018      	movs	r0, r3
 800781e:	f7f9 fcaf 	bl	8001180 <HAL_PCD_Start>
 8007822:	0003      	movs	r3, r0
 8007824:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007826:	19bc      	adds	r4, r7, r6
 8007828:	197b      	adds	r3, r7, r5
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	0018      	movs	r0, r3
 800782e:	f000 f9a6 	bl	8007b7e <USBD_Get_USB_Status>
 8007832:	0003      	movs	r3, r0
 8007834:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007836:	19bb      	adds	r3, r7, r6
 8007838:	781b      	ldrb	r3, [r3, #0]
}
 800783a:	0018      	movs	r0, r3
 800783c:	46bd      	mov	sp, r7
 800783e:	b005      	add	sp, #20
 8007840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007842 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	000c      	movs	r4, r1
 800784c:	0010      	movs	r0, r2
 800784e:	0019      	movs	r1, r3
 8007850:	1cfb      	adds	r3, r7, #3
 8007852:	1c22      	adds	r2, r4, #0
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	1cbb      	adds	r3, r7, #2
 8007858:	1c02      	adds	r2, r0, #0
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	003b      	movs	r3, r7
 800785e:	1c0a      	adds	r2, r1, #0
 8007860:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007862:	260f      	movs	r6, #15
 8007864:	19bb      	adds	r3, r7, r6
 8007866:	2200      	movs	r2, #0
 8007868:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786a:	250e      	movs	r5, #14
 800786c:	197b      	adds	r3, r7, r5
 800786e:	2200      	movs	r2, #0
 8007870:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	23b0      	movs	r3, #176	; 0xb0
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	58d0      	ldr	r0, [r2, r3]
 800787a:	19bc      	adds	r4, r7, r6
 800787c:	1cbb      	adds	r3, r7, #2
 800787e:	781d      	ldrb	r5, [r3, #0]
 8007880:	003b      	movs	r3, r7
 8007882:	881a      	ldrh	r2, [r3, #0]
 8007884:	1cfb      	adds	r3, r7, #3
 8007886:	7819      	ldrb	r1, [r3, #0]
 8007888:	002b      	movs	r3, r5
 800788a:	f7f9 fe0e 	bl	80014aa <HAL_PCD_EP_Open>
 800788e:	0003      	movs	r3, r0
 8007890:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007892:	250e      	movs	r5, #14
 8007894:	197c      	adds	r4, r7, r5
 8007896:	19bb      	adds	r3, r7, r6
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	0018      	movs	r0, r3
 800789c:	f000 f96f 	bl	8007b7e <USBD_Get_USB_Status>
 80078a0:	0003      	movs	r3, r0
 80078a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80078a4:	197b      	adds	r3, r7, r5
 80078a6:	781b      	ldrb	r3, [r3, #0]
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b005      	add	sp, #20
 80078ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	000a      	movs	r2, r1
 80078ba:	1cfb      	adds	r3, r7, #3
 80078bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078be:	210f      	movs	r1, #15
 80078c0:	187b      	adds	r3, r7, r1
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c6:	260e      	movs	r6, #14
 80078c8:	19bb      	adds	r3, r7, r6
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	23b0      	movs	r3, #176	; 0xb0
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	58d2      	ldr	r2, [r2, r3]
 80078d6:	000d      	movs	r5, r1
 80078d8:	187c      	adds	r4, r7, r1
 80078da:	1cfb      	adds	r3, r7, #3
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	0019      	movs	r1, r3
 80078e0:	0010      	movs	r0, r2
 80078e2:	f7f9 fe51 	bl	8001588 <HAL_PCD_EP_Close>
 80078e6:	0003      	movs	r3, r0
 80078e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ea:	19bc      	adds	r4, r7, r6
 80078ec:	197b      	adds	r3, r7, r5
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	0018      	movs	r0, r3
 80078f2:	f000 f944 	bl	8007b7e <USBD_Get_USB_Status>
 80078f6:	0003      	movs	r3, r0
 80078f8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80078fa:	19bb      	adds	r3, r7, r6
 80078fc:	781b      	ldrb	r3, [r3, #0]
}
 80078fe:	0018      	movs	r0, r3
 8007900:	46bd      	mov	sp, r7
 8007902:	b005      	add	sp, #20
 8007904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007906 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007906:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	000a      	movs	r2, r1
 8007910:	1cfb      	adds	r3, r7, #3
 8007912:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007914:	210f      	movs	r1, #15
 8007916:	187b      	adds	r3, r7, r1
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800791c:	260e      	movs	r6, #14
 800791e:	19bb      	adds	r3, r7, r6
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	23b0      	movs	r3, #176	; 0xb0
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	58d2      	ldr	r2, [r2, r3]
 800792c:	000d      	movs	r5, r1
 800792e:	187c      	adds	r4, r7, r1
 8007930:	1cfb      	adds	r3, r7, #3
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	0019      	movs	r1, r3
 8007936:	0010      	movs	r0, r2
 8007938:	f7f9 feea 	bl	8001710 <HAL_PCD_EP_SetStall>
 800793c:	0003      	movs	r3, r0
 800793e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007940:	19bc      	adds	r4, r7, r6
 8007942:	197b      	adds	r3, r7, r5
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	0018      	movs	r0, r3
 8007948:	f000 f919 	bl	8007b7e <USBD_Get_USB_Status>
 800794c:	0003      	movs	r3, r0
 800794e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007950:	19bb      	adds	r3, r7, r6
 8007952:	781b      	ldrb	r3, [r3, #0]
}
 8007954:	0018      	movs	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	b005      	add	sp, #20
 800795a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800795c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800795c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	000a      	movs	r2, r1
 8007966:	1cfb      	adds	r3, r7, #3
 8007968:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800796a:	210f      	movs	r1, #15
 800796c:	187b      	adds	r3, r7, r1
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007972:	260e      	movs	r6, #14
 8007974:	19bb      	adds	r3, r7, r6
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	23b0      	movs	r3, #176	; 0xb0
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	58d2      	ldr	r2, [r2, r3]
 8007982:	000d      	movs	r5, r1
 8007984:	187c      	adds	r4, r7, r1
 8007986:	1cfb      	adds	r3, r7, #3
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	0019      	movs	r1, r3
 800798c:	0010      	movs	r0, r2
 800798e:	f7f9 ff1b 	bl	80017c8 <HAL_PCD_EP_ClrStall>
 8007992:	0003      	movs	r3, r0
 8007994:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007996:	19bc      	adds	r4, r7, r6
 8007998:	197b      	adds	r3, r7, r5
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	0018      	movs	r0, r3
 800799e:	f000 f8ee 	bl	8007b7e <USBD_Get_USB_Status>
 80079a2:	0003      	movs	r3, r0
 80079a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80079a6:	19bb      	adds	r3, r7, r6
 80079a8:	781b      	ldrb	r3, [r3, #0]
}
 80079aa:	0018      	movs	r0, r3
 80079ac:	46bd      	mov	sp, r7
 80079ae:	b005      	add	sp, #20
 80079b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079b2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	000a      	movs	r2, r1
 80079bc:	1cfb      	adds	r3, r7, #3
 80079be:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	23b0      	movs	r3, #176	; 0xb0
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	58d3      	ldr	r3, [r2, r3]
 80079c8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079ca:	1cfb      	adds	r3, r7, #3
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	b25b      	sxtb	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da0d      	bge.n	80079f0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079d4:	1cfb      	adds	r3, r7, #3
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	227f      	movs	r2, #127	; 0x7f
 80079da:	4013      	ands	r3, r2
 80079dc:	68f9      	ldr	r1, [r7, #12]
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	0013      	movs	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	189b      	adds	r3, r3, r2
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	18cb      	adds	r3, r1, r3
 80079ea:	3302      	adds	r3, #2
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	e00d      	b.n	8007a0c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079f0:	1cfb      	adds	r3, r7, #3
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	227f      	movs	r2, #127	; 0x7f
 80079f6:	401a      	ands	r2, r3
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	23b5      	movs	r3, #181	; 0xb5
 80079fc:	0059      	lsls	r1, r3, #1
 80079fe:	0013      	movs	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	189b      	adds	r3, r3, r2
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	18c3      	adds	r3, r0, r3
 8007a08:	185b      	adds	r3, r3, r1
 8007a0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b004      	add	sp, #16
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	000a      	movs	r2, r1
 8007a1e:	1cfb      	adds	r3, r7, #3
 8007a20:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a22:	210f      	movs	r1, #15
 8007a24:	187b      	adds	r3, r7, r1
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a2a:	260e      	movs	r6, #14
 8007a2c:	19bb      	adds	r3, r7, r6
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	23b0      	movs	r3, #176	; 0xb0
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	58d2      	ldr	r2, [r2, r3]
 8007a3a:	000d      	movs	r5, r1
 8007a3c:	187c      	adds	r4, r7, r1
 8007a3e:	1cfb      	adds	r3, r7, #3
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	0019      	movs	r1, r3
 8007a44:	0010      	movs	r0, r2
 8007a46:	f7f9 fd05 	bl	8001454 <HAL_PCD_SetAddress>
 8007a4a:	0003      	movs	r3, r0
 8007a4c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a4e:	19bc      	adds	r4, r7, r6
 8007a50:	197b      	adds	r3, r7, r5
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	0018      	movs	r0, r3
 8007a56:	f000 f892 	bl	8007b7e <USBD_Get_USB_Status>
 8007a5a:	0003      	movs	r3, r0
 8007a5c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007a5e:	19bb      	adds	r3, r7, r6
 8007a60:	781b      	ldrb	r3, [r3, #0]
}
 8007a62:	0018      	movs	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	b005      	add	sp, #20
 8007a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6c:	b087      	sub	sp, #28
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	0008      	movs	r0, r1
 8007a74:	607a      	str	r2, [r7, #4]
 8007a76:	0019      	movs	r1, r3
 8007a78:	230b      	movs	r3, #11
 8007a7a:	18fb      	adds	r3, r7, r3
 8007a7c:	1c02      	adds	r2, r0, #0
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	2408      	movs	r4, #8
 8007a82:	193b      	adds	r3, r7, r4
 8007a84:	1c0a      	adds	r2, r1, #0
 8007a86:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a88:	2117      	movs	r1, #23
 8007a8a:	187b      	adds	r3, r7, r1
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a90:	2516      	movs	r5, #22
 8007a92:	197b      	adds	r3, r7, r5
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	23b0      	movs	r3, #176	; 0xb0
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	58d0      	ldr	r0, [r2, r3]
 8007aa0:	193b      	adds	r3, r7, r4
 8007aa2:	881d      	ldrh	r5, [r3, #0]
 8007aa4:	000e      	movs	r6, r1
 8007aa6:	187c      	adds	r4, r7, r1
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	230b      	movs	r3, #11
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	7819      	ldrb	r1, [r3, #0]
 8007ab0:	002b      	movs	r3, r5
 8007ab2:	f7f9 fdf1 	bl	8001698 <HAL_PCD_EP_Transmit>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aba:	2516      	movs	r5, #22
 8007abc:	197c      	adds	r4, r7, r5
 8007abe:	19bb      	adds	r3, r7, r6
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	f000 f85b 	bl	8007b7e <USBD_Get_USB_Status>
 8007ac8:	0003      	movs	r3, r0
 8007aca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007acc:	197b      	adds	r3, r7, r5
 8007ace:	781b      	ldrb	r3, [r3, #0]
}
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b007      	add	sp, #28
 8007ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ad8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	0008      	movs	r0, r1
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	0019      	movs	r1, r3
 8007ae6:	230b      	movs	r3, #11
 8007ae8:	18fb      	adds	r3, r7, r3
 8007aea:	1c02      	adds	r2, r0, #0
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	2408      	movs	r4, #8
 8007af0:	193b      	adds	r3, r7, r4
 8007af2:	1c0a      	adds	r2, r1, #0
 8007af4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af6:	2117      	movs	r1, #23
 8007af8:	187b      	adds	r3, r7, r1
 8007afa:	2200      	movs	r2, #0
 8007afc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007afe:	2516      	movs	r5, #22
 8007b00:	197b      	adds	r3, r7, r5
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	23b0      	movs	r3, #176	; 0xb0
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	58d0      	ldr	r0, [r2, r3]
 8007b0e:	193b      	adds	r3, r7, r4
 8007b10:	881d      	ldrh	r5, [r3, #0]
 8007b12:	000e      	movs	r6, r1
 8007b14:	187c      	adds	r4, r7, r1
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	230b      	movs	r3, #11
 8007b1a:	18fb      	adds	r3, r7, r3
 8007b1c:	7819      	ldrb	r1, [r3, #0]
 8007b1e:	002b      	movs	r3, r5
 8007b20:	f7f9 fd83 	bl	800162a <HAL_PCD_EP_Receive>
 8007b24:	0003      	movs	r3, r0
 8007b26:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b28:	2516      	movs	r5, #22
 8007b2a:	197c      	adds	r4, r7, r5
 8007b2c:	19bb      	adds	r3, r7, r6
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	0018      	movs	r0, r3
 8007b32:	f000 f824 	bl	8007b7e <USBD_Get_USB_Status>
 8007b36:	0003      	movs	r3, r0
 8007b38:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007b3a:	197b      	adds	r3, r7, r5
 8007b3c:	781b      	ldrb	r3, [r3, #0]
}
 8007b3e:	0018      	movs	r0, r3
 8007b40:	46bd      	mov	sp, r7
 8007b42:	b007      	add	sp, #28
 8007b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007b48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b50:	4b02      	ldr	r3, [pc, #8]	; (8007b5c <USBD_static_malloc+0x14>)
}
 8007b52:	0018      	movs	r0, r3
 8007b54:	46bd      	mov	sp, r7
 8007b56:	b002      	add	sp, #8
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	46c0      	nop			; (mov r8, r8)
 8007b5c:	200009e0 	.word	0x200009e0

08007b60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]

}
 8007b68:	46c0      	nop			; (mov r8, r8)
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b002      	add	sp, #8
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007b74:	f7f8 fd7c 	bl	8000670 <SystemClock_Config>
}
 8007b78:	46c0      	nop			; (mov r8, r8)
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	0002      	movs	r2, r0
 8007b86:	1dfb      	adds	r3, r7, #7
 8007b88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8a:	230f      	movs	r3, #15
 8007b8c:	18fb      	adds	r3, r7, r3
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007b92:	1dfb      	adds	r3, r7, #7
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d017      	beq.n	8007bca <USBD_Get_USB_Status+0x4c>
 8007b9a:	dc1b      	bgt.n	8007bd4 <USBD_Get_USB_Status+0x56>
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d00f      	beq.n	8007bc0 <USBD_Get_USB_Status+0x42>
 8007ba0:	dc18      	bgt.n	8007bd4 <USBD_Get_USB_Status+0x56>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <USBD_Get_USB_Status+0x2e>
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d005      	beq.n	8007bb6 <USBD_Get_USB_Status+0x38>
 8007baa:	e013      	b.n	8007bd4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bac:	230f      	movs	r3, #15
 8007bae:	18fb      	adds	r3, r7, r3
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
    break;
 8007bb4:	e013      	b.n	8007bde <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bb6:	230f      	movs	r3, #15
 8007bb8:	18fb      	adds	r3, r7, r3
 8007bba:	2202      	movs	r2, #2
 8007bbc:	701a      	strb	r2, [r3, #0]
    break;
 8007bbe:	e00e      	b.n	8007bde <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bc0:	230f      	movs	r3, #15
 8007bc2:	18fb      	adds	r3, r7, r3
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	701a      	strb	r2, [r3, #0]
    break;
 8007bc8:	e009      	b.n	8007bde <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bca:	230f      	movs	r3, #15
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	2202      	movs	r2, #2
 8007bd0:	701a      	strb	r2, [r3, #0]
    break;
 8007bd2:	e004      	b.n	8007bde <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007bd4:	230f      	movs	r3, #15
 8007bd6:	18fb      	adds	r3, r7, r3
 8007bd8:	2202      	movs	r2, #2
 8007bda:	701a      	strb	r2, [r3, #0]
    break;
 8007bdc:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007bde:	230f      	movs	r3, #15
 8007be0:	18fb      	adds	r3, r7, r3
 8007be2:	781b      	ldrb	r3, [r3, #0]
}
 8007be4:	0018      	movs	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	b004      	add	sp, #16
 8007bea:	bd80      	pop	{r7, pc}

08007bec <memset>:
 8007bec:	0003      	movs	r3, r0
 8007bee:	1882      	adds	r2, r0, r2
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d100      	bne.n	8007bf6 <memset+0xa>
 8007bf4:	4770      	bx	lr
 8007bf6:	7019      	strb	r1, [r3, #0]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	e7f9      	b.n	8007bf0 <memset+0x4>

08007bfc <__libc_init_array>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	2600      	movs	r6, #0
 8007c00:	4c0c      	ldr	r4, [pc, #48]	; (8007c34 <__libc_init_array+0x38>)
 8007c02:	4d0d      	ldr	r5, [pc, #52]	; (8007c38 <__libc_init_array+0x3c>)
 8007c04:	1b64      	subs	r4, r4, r5
 8007c06:	10a4      	asrs	r4, r4, #2
 8007c08:	42a6      	cmp	r6, r4
 8007c0a:	d109      	bne.n	8007c20 <__libc_init_array+0x24>
 8007c0c:	2600      	movs	r6, #0
 8007c0e:	f000 f819 	bl	8007c44 <_init>
 8007c12:	4c0a      	ldr	r4, [pc, #40]	; (8007c3c <__libc_init_array+0x40>)
 8007c14:	4d0a      	ldr	r5, [pc, #40]	; (8007c40 <__libc_init_array+0x44>)
 8007c16:	1b64      	subs	r4, r4, r5
 8007c18:	10a4      	asrs	r4, r4, #2
 8007c1a:	42a6      	cmp	r6, r4
 8007c1c:	d105      	bne.n	8007c2a <__libc_init_array+0x2e>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	00b3      	lsls	r3, r6, #2
 8007c22:	58eb      	ldr	r3, [r5, r3]
 8007c24:	4798      	blx	r3
 8007c26:	3601      	adds	r6, #1
 8007c28:	e7ee      	b.n	8007c08 <__libc_init_array+0xc>
 8007c2a:	00b3      	lsls	r3, r6, #2
 8007c2c:	58eb      	ldr	r3, [r5, r3]
 8007c2e:	4798      	blx	r3
 8007c30:	3601      	adds	r6, #1
 8007c32:	e7f2      	b.n	8007c1a <__libc_init_array+0x1e>
 8007c34:	08007d14 	.word	0x08007d14
 8007c38:	08007d14 	.word	0x08007d14
 8007c3c:	08007d18 	.word	0x08007d18
 8007c40:	08007d14 	.word	0x08007d14

08007c44 <_init>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr

08007c50 <_fini>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr
