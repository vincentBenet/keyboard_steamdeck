
bla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec4  08007ec4  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007ec4  08007ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ecc  08007ecc  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ecc  08007ecc  00017ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08007ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  200002d8  080081ac  000202d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad0  080081ac  00020ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b964  00000000  00000000  00020343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002846  00000000  00000000  0002bca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002e4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000077b  00000000  00000000  0002ef28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001553f  00000000  00000000  0002f6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e706  00000000  00000000  00044be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000764e5  00000000  00000000  000532e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022a4  00000000  00000000  000c97d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cba74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002d8 	.word	0x200002d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007dfc 	.word	0x08007dfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002dc 	.word	0x200002dc
 8000104:	08007dfc 	.word	0x08007dfc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b094      	sub	sp, #80	; 0x50
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fb21 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f9cb 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 fa3f 	bl	8000938 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ba:	f006 fff1 	bl	80074a0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  bool last_pressed = false;
 80004be:	234f      	movs	r3, #79	; 0x4f
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bool PRESSED[44] = {  // Initialize physical mask pressed keys
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	0018      	movs	r0, r3
 80004ca:	232c      	movs	r3, #44	; 0x2c
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f007 fc68 	bl	8007da4 <memset>
		false, false, false, false, false, false, false, false, false, false, false,  // Line 1
		false, false, false, false, false, false, false, false, false, false, false,  // Line 2
		false, false, false, false, false, false, false, false, false, false, false,  // Line 3
		false, false, false, false, false, false, false, false, false, false, false   // Line 4
	  };
	  bool press = false;  // Initialize pressed any physical key
 80004d4:	234e      	movs	r3, #78	; 0x4e
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
	  bool press_fn_bar = false;  // Initialize pressed any physical key
 80004dc:	234d      	movs	r3, #77	; 0x4d
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
	  for (int c=0; c<11; c++) HAL_GPIO_WritePin(GPIOPORTS_C[c], PINS_C[c], GPIO_PIN_SET);  // All columns GPIO are turned ON
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80004e8:	e00f      	b.n	800050a <main+0x62>
 80004ea:	4bcc      	ldr	r3, [pc, #816]	; (800081c <main+0x374>)
 80004ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80004ee:	0092      	lsls	r2, r2, #2
 80004f0:	58d0      	ldr	r0, [r2, r3]
 80004f2:	4bcb      	ldr	r3, [pc, #812]	; (8000820 <main+0x378>)
 80004f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80004f6:	0092      	lsls	r2, r2, #2
 80004f8:	58d3      	ldr	r3, [r2, r3]
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	2201      	movs	r2, #1
 80004fe:	0019      	movs	r1, r3
 8000500:	f000 fdfd 	bl	80010fe <HAL_GPIO_WritePin>
 8000504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000506:	3301      	adds	r3, #1
 8000508:	64bb      	str	r3, [r7, #72]	; 0x48
 800050a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800050c:	2b0a      	cmp	r3, #10
 800050e:	ddec      	ble.n	80004ea <main+0x42>
	  for (int line=0; line<4; line++) {
 8000510:	2300      	movs	r3, #0
 8000512:	647b      	str	r3, [r7, #68]	; 0x44
 8000514:	e066      	b.n	80005e4 <main+0x13c>
		  if(HAL_GPIO_ReadPin (GPIOPORTS_L[line], PINS_L[line])){  // Lines GPIO are checked
 8000516:	4bc3      	ldr	r3, [pc, #780]	; (8000824 <main+0x37c>)
 8000518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800051a:	0092      	lsls	r2, r2, #2
 800051c:	58d0      	ldr	r0, [r2, r3]
 800051e:	4bc2      	ldr	r3, [pc, #776]	; (8000828 <main+0x380>)
 8000520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	58d3      	ldr	r3, [r2, r3]
 8000526:	b29b      	uxth	r3, r3
 8000528:	0019      	movs	r1, r3
 800052a:	f000 fdcb 	bl	80010c4 <HAL_GPIO_ReadPin>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d055      	beq.n	80005de <main+0x136>
			  press = true;  // If one or more line GPIO are true: a key has been pressed
 8000532:	234e      	movs	r3, #78	; 0x4e
 8000534:	18fb      	adds	r3, r7, r3
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
			  for (int c=0; c<11; c++) HAL_GPIO_WritePin(GPIOPORTS_C[c], PINS_C[c], GPIO_PIN_RESET);  // All columns GPIO are turned OFF
 800053a:	2300      	movs	r3, #0
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
 800053e:	e00f      	b.n	8000560 <main+0xb8>
 8000540:	4bb6      	ldr	r3, [pc, #728]	; (800081c <main+0x374>)
 8000542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000544:	0092      	lsls	r2, r2, #2
 8000546:	58d0      	ldr	r0, [r2, r3]
 8000548:	4bb5      	ldr	r3, [pc, #724]	; (8000820 <main+0x378>)
 800054a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800054c:	0092      	lsls	r2, r2, #2
 800054e:	58d3      	ldr	r3, [r2, r3]
 8000550:	b29b      	uxth	r3, r3
 8000552:	2200      	movs	r2, #0
 8000554:	0019      	movs	r1, r3
 8000556:	f000 fdd2 	bl	80010fe <HAL_GPIO_WritePin>
 800055a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800055c:	3301      	adds	r3, #1
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
 8000560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000562:	2b0a      	cmp	r3, #10
 8000564:	ddec      	ble.n	8000540 <main+0x98>
			  for (int c=0; c<11; c++){  // Scan columns one by one to get all keys
 8000566:	2300      	movs	r3, #0
 8000568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800056a:	e035      	b.n	80005d8 <main+0x130>
				  HAL_GPIO_WritePin(GPIOPORTS_C[c], PINS_C[c], GPIO_PIN_SET);  // Turn ON GPIO of scanned column
 800056c:	4bab      	ldr	r3, [pc, #684]	; (800081c <main+0x374>)
 800056e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000570:	0092      	lsls	r2, r2, #2
 8000572:	58d0      	ldr	r0, [r2, r3]
 8000574:	4baa      	ldr	r3, [pc, #680]	; (8000820 <main+0x378>)
 8000576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	58d3      	ldr	r3, [r2, r3]
 800057c:	b29b      	uxth	r3, r3
 800057e:	2201      	movs	r2, #1
 8000580:	0019      	movs	r1, r3
 8000582:	f000 fdbc 	bl	80010fe <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin (GPIOPORTS_L[line], PINS_L[line])){  // Check again line GPIO to test (column x line)
 8000586:	4ba7      	ldr	r3, [pc, #668]	; (8000824 <main+0x37c>)
 8000588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	58d0      	ldr	r0, [r2, r3]
 800058e:	4ba6      	ldr	r3, [pc, #664]	; (8000828 <main+0x380>)
 8000590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000592:	0092      	lsls	r2, r2, #2
 8000594:	58d3      	ldr	r3, [r2, r3]
 8000596:	b29b      	uxth	r3, r3
 8000598:	0019      	movs	r1, r3
 800059a:	f000 fd93 	bl	80010c4 <HAL_GPIO_ReadPin>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d017      	beq.n	80005d2 <main+0x12a>
					  PRESSED[line * 11 + c] = true;  // Index of physical pressed key is turned to true
 80005a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005a4:	0013      	movs	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	189b      	adds	r3, r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	189a      	adds	r2, r3, r2
 80005ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	2101      	movs	r1, #1
 80005b6:	54d1      	strb	r1, [r2, r3]
					  HAL_GPIO_WritePin(GPIOPORTS_C[c], PINS_C[c], GPIO_PIN_RESET);
 80005b8:	4b98      	ldr	r3, [pc, #608]	; (800081c <main+0x374>)
 80005ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80005bc:	0092      	lsls	r2, r2, #2
 80005be:	58d0      	ldr	r0, [r2, r3]
 80005c0:	4b97      	ldr	r3, [pc, #604]	; (8000820 <main+0x378>)
 80005c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80005c4:	0092      	lsls	r2, r2, #2
 80005c6:	58d3      	ldr	r3, [r2, r3]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	2200      	movs	r2, #0
 80005cc:	0019      	movs	r1, r3
 80005ce:	f000 fd96 	bl	80010fe <HAL_GPIO_WritePin>
			  for (int c=0; c<11; c++){  // Scan columns one by one to get all keys
 80005d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d4:	3301      	adds	r3, #1
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005da:	2b0a      	cmp	r3, #10
 80005dc:	ddc6      	ble.n	800056c <main+0xc4>
	  for (int line=0; line<4; line++) {
 80005de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e0:	3301      	adds	r3, #1
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
 80005e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	dd95      	ble.n	8000516 <main+0x6e>
				  }
			  }
		  }
	  }
	  if (press){
 80005ea:	234e      	movs	r3, #78	; 0x4e
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d100      	bne.n	80005f6 <main+0x14e>
 80005f4:	e0e3      	b.n	80007be <main+0x316>
		  bool fn1 = PRESSED[31];  // Check if FN1 is pressed
 80005f6:	2336      	movs	r3, #54	; 0x36
 80005f8:	18fb      	adds	r3, r7, r3
 80005fa:	1d3a      	adds	r2, r7, #4
 80005fc:	7fd2      	ldrb	r2, [r2, #31]
 80005fe:	701a      	strb	r2, [r3, #0]
		  bool fn2 = PRESSED[32];  // Check if FN2 is pressed
 8000600:	2335      	movs	r3, #53	; 0x35
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	1d3a      	adds	r2, r7, #4
 8000606:	2120      	movs	r1, #32
 8000608:	5c52      	ldrb	r2, [r2, r1]
 800060a:	701a      	strb	r2, [r3, #0]
		  bool fn3 = PRESSED[42];  // Check if FN3 is pressed
 800060c:	2334      	movs	r3, #52	; 0x34
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	212a      	movs	r1, #42	; 0x2a
 8000614:	5c52      	ldrb	r2, [r2, r1]
 8000616:	701a      	strb	r2, [r3, #0]
		  bool fn4 = PRESSED[43];  // Check if FN4 is pressed
 8000618:	2333      	movs	r3, #51	; 0x33
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	1d3a      	adds	r2, r7, #4
 800061e:	212b      	movs	r1, #43	; 0x2b
 8000620:	5c52      	ldrb	r2, [r2, r1]
 8000622:	701a      	strb	r2, [r3, #0]
		  for (int index=0; index<44; index++) {  // Loop on every physical keys
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
 8000628:	e0bc      	b.n	80007a4 <main+0x2fc>
			  if (
				  !PRESSED[index] ||  // Physical key is not pressed
 800062a:	1d3a      	adds	r2, r7, #4
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	18d3      	adds	r3, r2, r3
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2201      	movs	r2, #1
 8000634:	4053      	eors	r3, r2
 8000636:	b2db      	uxtb	r3, r3
			  if (
 8000638:	2b00      	cmp	r3, #0
 800063a:	d000      	beq.n	800063e <main+0x196>
 800063c:	e0ae      	b.n	800079c <main+0x2f4>
				  !PRESSED[index] ||  // Physical key is not pressed
 800063e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000640:	2b1f      	cmp	r3, #31
 8000642:	d100      	bne.n	8000646 <main+0x19e>
 8000644:	e0aa      	b.n	800079c <main+0x2f4>
				  index == 31 ||  // FN1 is not analyzed
 8000646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000648:	2b20      	cmp	r3, #32
 800064a:	d100      	bne.n	800064e <main+0x1a6>
 800064c:	e0a6      	b.n	800079c <main+0x2f4>
				  index == 32 ||  // FN2 is not analyzed
 800064e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000650:	2b2a      	cmp	r3, #42	; 0x2a
 8000652:	d100      	bne.n	8000656 <main+0x1ae>
 8000654:	e0a2      	b.n	800079c <main+0x2f4>
				  index == 42 ||  // FN3 is not analyzed
 8000656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000658:	2b2b      	cmp	r3, #43	; 0x2b
 800065a:	d100      	bne.n	800065e <main+0x1b6>
 800065c:	e09e      	b.n	800079c <main+0x2f4>
				  index == 43     // FN4 is not analyzed
			  ) continue;
			  press_fn_bar = true;
 800065e:	234d      	movs	r3, #77	; 0x4d
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
			  uint8_t key = (uint8_t)INPUTKEYS[index];
 8000666:	2037      	movs	r0, #55	; 0x37
 8000668:	183b      	adds	r3, r7, r0
 800066a:	4970      	ldr	r1, [pc, #448]	; (800082c <main+0x384>)
 800066c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800066e:	188a      	adds	r2, r1, r2
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	701a      	strb	r2, [r3, #0]
			  if (fn1) key = (uint8_t)FN1KEYS[index];
 8000674:	2336      	movs	r3, #54	; 0x36
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <main+0x1e4>
 800067e:	183b      	adds	r3, r7, r0
 8000680:	496b      	ldr	r1, [pc, #428]	; (8000830 <main+0x388>)
 8000682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000684:	188a      	adds	r2, r1, r2
 8000686:	7812      	ldrb	r2, [r2, #0]
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e025      	b.n	80006d8 <main+0x230>
			  else if (fn2) key = (uint8_t)FN2KEYS[index];
 800068c:	2335      	movs	r3, #53	; 0x35
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d007      	beq.n	80006a6 <main+0x1fe>
 8000696:	2337      	movs	r3, #55	; 0x37
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	4966      	ldr	r1, [pc, #408]	; (8000834 <main+0x38c>)
 800069c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800069e:	188a      	adds	r2, r1, r2
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	e018      	b.n	80006d8 <main+0x230>
			  else if (fn3) key = (uint8_t)FN3KEYS[index];
 80006a6:	2334      	movs	r3, #52	; 0x34
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d007      	beq.n	80006c0 <main+0x218>
 80006b0:	2337      	movs	r3, #55	; 0x37
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	4960      	ldr	r1, [pc, #384]	; (8000838 <main+0x390>)
 80006b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006b8:	188a      	adds	r2, r1, r2
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	701a      	strb	r2, [r3, #0]
 80006be:	e00b      	b.n	80006d8 <main+0x230>
			  else if (fn4) key = (uint8_t)FN4KEYS[index];
 80006c0:	2333      	movs	r3, #51	; 0x33
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d006      	beq.n	80006d8 <main+0x230>
 80006ca:	2337      	movs	r3, #55	; 0x37
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	495b      	ldr	r1, [pc, #364]	; (800083c <main+0x394>)
 80006d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006d2:	188a      	adds	r2, r1, r2
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	701a      	strb	r2, [r3, #0]

			  if (MODIFIER_MASK[index])
 80006d8:	4a59      	ldr	r2, [pc, #356]	; (8000840 <main+0x398>)
 80006da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006dc:	18d3      	adds	r3, r2, r3
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d009      	beq.n	80006f8 <main+0x250>
				  keyBoardHIDsub.MODIFIER |= key;
 80006e4:	4b57      	ldr	r3, [pc, #348]	; (8000844 <main+0x39c>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	2337      	movs	r3, #55	; 0x37
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b54      	ldr	r3, [pc, #336]	; (8000844 <main+0x39c>)
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e052      	b.n	800079e <main+0x2f6>
			  else if (keyBoardHIDsub.KEYCODE1 == 0x00)
 80006f8:	4b52      	ldr	r3, [pc, #328]	; (8000844 <main+0x39c>)
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d105      	bne.n	800070c <main+0x264>
				  keyBoardHIDsub.KEYCODE1 = key;
 8000700:	4b50      	ldr	r3, [pc, #320]	; (8000844 <main+0x39c>)
 8000702:	2237      	movs	r2, #55	; 0x37
 8000704:	18ba      	adds	r2, r7, r2
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	709a      	strb	r2, [r3, #2]
 800070a:	e048      	b.n	800079e <main+0x2f6>
			  else if (keyBoardHIDsub.KEYCODE2 == 0x00)
 800070c:	4b4d      	ldr	r3, [pc, #308]	; (8000844 <main+0x39c>)
 800070e:	78db      	ldrb	r3, [r3, #3]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d105      	bne.n	8000720 <main+0x278>
				  keyBoardHIDsub.KEYCODE2 = key;
 8000714:	4b4b      	ldr	r3, [pc, #300]	; (8000844 <main+0x39c>)
 8000716:	2237      	movs	r2, #55	; 0x37
 8000718:	18ba      	adds	r2, r7, r2
 800071a:	7812      	ldrb	r2, [r2, #0]
 800071c:	70da      	strb	r2, [r3, #3]
 800071e:	e03e      	b.n	800079e <main+0x2f6>
			  else if (keyBoardHIDsub.KEYCODE3 == 0x00)
 8000720:	4b48      	ldr	r3, [pc, #288]	; (8000844 <main+0x39c>)
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d105      	bne.n	8000734 <main+0x28c>
				  keyBoardHIDsub.KEYCODE3 = key;
 8000728:	4b46      	ldr	r3, [pc, #280]	; (8000844 <main+0x39c>)
 800072a:	2237      	movs	r2, #55	; 0x37
 800072c:	18ba      	adds	r2, r7, r2
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	711a      	strb	r2, [r3, #4]
 8000732:	e034      	b.n	800079e <main+0x2f6>
			  else if (keyBoardHIDsub.KEYCODE4 == 0x00)
 8000734:	4b43      	ldr	r3, [pc, #268]	; (8000844 <main+0x39c>)
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d105      	bne.n	8000748 <main+0x2a0>
				  keyBoardHIDsub.KEYCODE4 = key;
 800073c:	4b41      	ldr	r3, [pc, #260]	; (8000844 <main+0x39c>)
 800073e:	2237      	movs	r2, #55	; 0x37
 8000740:	18ba      	adds	r2, r7, r2
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	715a      	strb	r2, [r3, #5]
 8000746:	e02a      	b.n	800079e <main+0x2f6>
			  else if (keyBoardHIDsub.KEYCODE5 == 0x00)
 8000748:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <main+0x39c>)
 800074a:	799b      	ldrb	r3, [r3, #6]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d105      	bne.n	800075c <main+0x2b4>
				  keyBoardHIDsub.KEYCODE5 = key;
 8000750:	4b3c      	ldr	r3, [pc, #240]	; (8000844 <main+0x39c>)
 8000752:	2237      	movs	r2, #55	; 0x37
 8000754:	18ba      	adds	r2, r7, r2
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	719a      	strb	r2, [r3, #6]
 800075a:	e020      	b.n	800079e <main+0x2f6>
			  else if (keyBoardHIDsub.KEYCODE6 == 0x00)
 800075c:	4b39      	ldr	r3, [pc, #228]	; (8000844 <main+0x39c>)
 800075e:	79db      	ldrb	r3, [r3, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d105      	bne.n	8000770 <main+0x2c8>
				  keyBoardHIDsub.KEYCODE6 = key;
 8000764:	4b37      	ldr	r3, [pc, #220]	; (8000844 <main+0x39c>)
 8000766:	2237      	movs	r2, #55	; 0x37
 8000768:	18ba      	adds	r2, r7, r2
 800076a:	7812      	ldrb	r2, [r2, #0]
 800076c:	71da      	strb	r2, [r3, #7]
 800076e:	e016      	b.n	800079e <main+0x2f6>
			  else {  // Too much key pressed
				  keyBoardHIDsub.MODIFIER = KEY_ERR_OVF;
 8000770:	4b34      	ldr	r3, [pc, #208]	; (8000844 <main+0x39c>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
				  keyBoardHIDsub.KEYCODE1 = KEY_ERR_OVF;
 8000776:	4b33      	ldr	r3, [pc, #204]	; (8000844 <main+0x39c>)
 8000778:	2201      	movs	r2, #1
 800077a:	709a      	strb	r2, [r3, #2]
				  keyBoardHIDsub.KEYCODE2 = KEY_ERR_OVF;
 800077c:	4b31      	ldr	r3, [pc, #196]	; (8000844 <main+0x39c>)
 800077e:	2201      	movs	r2, #1
 8000780:	70da      	strb	r2, [r3, #3]
				  keyBoardHIDsub.KEYCODE3 = KEY_ERR_OVF;
 8000782:	4b30      	ldr	r3, [pc, #192]	; (8000844 <main+0x39c>)
 8000784:	2201      	movs	r2, #1
 8000786:	711a      	strb	r2, [r3, #4]
				  keyBoardHIDsub.KEYCODE4 = KEY_ERR_OVF;
 8000788:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <main+0x39c>)
 800078a:	2201      	movs	r2, #1
 800078c:	715a      	strb	r2, [r3, #5]
				  keyBoardHIDsub.KEYCODE5 = KEY_ERR_OVF;
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <main+0x39c>)
 8000790:	2201      	movs	r2, #1
 8000792:	719a      	strb	r2, [r3, #6]
				  keyBoardHIDsub.KEYCODE6 = KEY_ERR_OVF;
 8000794:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <main+0x39c>)
 8000796:	2201      	movs	r2, #1
 8000798:	71da      	strb	r2, [r3, #7]
 800079a:	e000      	b.n	800079e <main+0x2f6>
			  ) continue;
 800079c:	46c0      	nop			; (mov r8, r8)
		  for (int index=0; index<44; index++) {  // Loop on every physical keys
 800079e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007a0:	3301      	adds	r3, #1
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80007a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007a6:	2b2b      	cmp	r3, #43	; 0x2b
 80007a8:	dc00      	bgt.n	80007ac <main+0x304>
 80007aa:	e73e      	b.n	800062a <main+0x182>
			  }
		  };
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyBoardHIDsub, sizeof(keyBoardHIDsub));  // Send keys thought USB
 80007ac:	4925      	ldr	r1, [pc, #148]	; (8000844 <main+0x39c>)
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <main+0x3a0>)
 80007b0:	2208      	movs	r2, #8
 80007b2:	0018      	movs	r0, r3
 80007b4:	f005 fc1a 	bl	8005fec <USBD_HID_SendReport>
		  HAL_Delay(50);  // Wait of loop iteration in ms
 80007b8:	2032      	movs	r0, #50	; 0x32
 80007ba:	f000 fa0b 	bl	8000bd4 <HAL_Delay>
	  }

	  if (!press_fn_bar && last_pressed) {
 80007be:	234d      	movs	r3, #77	; 0x4d
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4053      	eors	r3, r2
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d01f      	beq.n	800080e <main+0x366>
 80007ce:	234f      	movs	r3, #79	; 0x4f
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d01a      	beq.n	800080e <main+0x366>
		  keyBoardHIDsub.MODIFIER = KEY_NONE;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <main+0x39c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
		  keyBoardHIDsub.KEYCODE1 = KEY_NONE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <main+0x39c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	709a      	strb	r2, [r3, #2]
		  keyBoardHIDsub.KEYCODE2 = KEY_NONE;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <main+0x39c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	70da      	strb	r2, [r3, #3]
		  keyBoardHIDsub.KEYCODE3 = KEY_NONE;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <main+0x39c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	711a      	strb	r2, [r3, #4]
		  keyBoardHIDsub.KEYCODE4 = KEY_NONE;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <main+0x39c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	715a      	strb	r2, [r3, #5]
		  keyBoardHIDsub.KEYCODE5 = KEY_NONE;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <main+0x39c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	719a      	strb	r2, [r3, #6]
		  keyBoardHIDsub.KEYCODE6 = KEY_NONE;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <main+0x39c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	71da      	strb	r2, [r3, #7]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 8000802:	4910      	ldr	r1, [pc, #64]	; (8000844 <main+0x39c>)
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <main+0x3a0>)
 8000806:	2208      	movs	r2, #8
 8000808:	0018      	movs	r0, r3
 800080a:	f005 fbef 	bl	8005fec <USBD_HID_SendReport>
	  }
	  last_pressed = press_fn_bar;
 800080e:	234f      	movs	r3, #79	; 0x4f
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	224d      	movs	r2, #77	; 0x4d
 8000814:	18ba      	adds	r2, r7, r2
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	701a      	strb	r2, [r3, #0]
  while (1){
 800081a:	e654      	b.n	80004c6 <main+0x1e>
 800081c:	20000108 	.word	0x20000108
 8000820:	20000134 	.word	0x20000134
 8000824:	20000160 	.word	0x20000160
 8000828:	20000170 	.word	0x20000170
 800082c:	2000002c 	.word	0x2000002c
 8000830:	20000058 	.word	0x20000058
 8000834:	20000084 	.word	0x20000084
 8000838:	200000b0 	.word	0x200000b0
 800083c:	200000dc 	.word	0x200000dc
 8000840:	20000000 	.word	0x20000000
 8000844:	200002f4 	.word	0x200002f4
 8000848:	20000304 	.word	0x20000304

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b09d      	sub	sp, #116	; 0x74
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	2438      	movs	r4, #56	; 0x38
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2338      	movs	r3, #56	; 0x38
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f007 faa1 	bl	8007da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000862:	2324      	movs	r3, #36	; 0x24
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	2314      	movs	r3, #20
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f007 fa99 	bl	8007da4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	0018      	movs	r0, r3
 8000876:	2320      	movs	r3, #32
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f007 fa92 	bl	8007da4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <SystemClock_Config+0xe4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a2b      	ldr	r2, [pc, #172]	; (8000934 <SystemClock_Config+0xe8>)
 8000886:	401a      	ands	r2, r3
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <SystemClock_Config+0xe4>)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	0109      	lsls	r1, r1, #4
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2222      	movs	r2, #34	; 0x22
 8000898:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2210      	movs	r2, #16
 80008a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2201      	movs	r2, #1
 80008aa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2202      	movs	r2, #2
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	03d2      	lsls	r2, r2, #15
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	0018      	movs	r0, r3
 80008ca:	f002 fa6d 	bl	8002da8 <HAL_RCC_OscConfig>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008d2:	f000 f8a1 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	2124      	movs	r1, #36	; 0x24
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	220f      	movs	r2, #15
 80008dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2203      	movs	r2, #3
 80008e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2101      	movs	r1, #1
 80008fa:	0018      	movs	r0, r3
 80008fc:	f002 fe18 	bl	8003530 <HAL_RCC_ClockConfig>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000904:	f000 f888 	bl	8000a18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2240      	movs	r2, #64	; 0x40
 800090c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	04d2      	lsls	r2, r2, #19
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	0018      	movs	r0, r3
 800091a:	f002 fff7 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000922:	f000 f879 	bl	8000a18 <Error_Handler>
  }
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b01d      	add	sp, #116	; 0x74
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40007000 	.word	0x40007000
 8000934:	ffffe7ff 	.word	0xffffe7ff

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	240c      	movs	r4, #12
 8000940:	193b      	adds	r3, r7, r4
 8000942:	0018      	movs	r0, r3
 8000944:	2314      	movs	r3, #20
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f007 fa2b 	bl	8007da4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <MX_GPIO_Init+0xd4>)
 8000950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000952:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <MX_GPIO_Init+0xd4>)
 8000954:	2101      	movs	r1, #1
 8000956:	430a      	orrs	r2, r1
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
 800095a:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <MX_GPIO_Init+0xd4>)
 800095c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095e:	2201      	movs	r2, #1
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <MX_GPIO_Init+0xd4>)
 8000968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_GPIO_Init+0xd4>)
 800096c:	2102      	movs	r1, #2
 800096e:	430a      	orrs	r2, r1
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_GPIO_Init+0xd4>)
 8000974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000976:	2202      	movs	r2, #2
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800097e:	4924      	ldr	r1, [pc, #144]	; (8000a10 <MX_GPIO_Init+0xd8>)
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fbb9 	bl	80010fe <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_GPIO_Init+0xdc>)
 800098e:	2200      	movs	r2, #0
 8000990:	2121      	movs	r1, #33	; 0x21
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fbb3 	bl	80010fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000998:	193b      	adds	r3, r7, r4
 800099a:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <MX_GPIO_Init+0xd8>)
 800099c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2201      	movs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	193a      	adds	r2, r7, r4
 80009b2:	23a0      	movs	r3, #160	; 0xa0
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fa0d 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2221      	movs	r2, #33	; 0x21
 80009c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2201      	movs	r2, #1
 80009c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <MX_GPIO_Init+0xdc>)
 80009da:	0019      	movs	r1, r3
 80009dc:	0010      	movs	r0, r2
 80009de:	f000 f9fb 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 80009e2:	0021      	movs	r1, r4
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	22c6      	movs	r2, #198	; 0xc6
 80009e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2202      	movs	r2, #2
 80009f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <MX_GPIO_Init+0xdc>)
 80009fa:	0019      	movs	r1, r3
 80009fc:	0010      	movs	r0, r2
 80009fe:	f000 f9eb 	bl	8000dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b009      	add	sp, #36	; 0x24
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	000007fc 	.word	0x000007fc
 8000a14:	50000400 	.word	0x50000400

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_MspInit+0x24>)
 8000a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x24>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	430a      	orrs	r2, r1
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <HAL_MspInit+0x24>)
 8000a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_MspInit+0x24>)
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	0549      	lsls	r1, r1, #21
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f894 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <USB_IRQHandler+0x14>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fc7e 	bl	8001384 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	200007c8 	.word	0x200007c8

08000a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fff6 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ace:	f007 f971 	bl	8007db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fce9 	bl	80004a8 <main>

08000ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
   ldr   r0, =_estack
 8000ad8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8000ae4:	08007ed4 	.word	0x08007ed4
  ldr r2, =_sbss
 8000ae8:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8000aec:	20000ad0 	.word	0x20000ad0

08000af0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_COMP_IRQHandler>
	...

08000af4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x3c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Init+0x3c>)
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f811 	bl	8000b34 <HAL_InitTick>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e001      	b.n	8000b22 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b1e:	f7ff ff81 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b3e:	681c      	ldr	r4, [r3, #0]
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_InitTick+0x60>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	0019      	movs	r1, r3
 8000b46:	23fa      	movs	r3, #250	; 0xfa
 8000b48:	0098      	lsls	r0, r3, #2
 8000b4a:	f7ff fadd 	bl	8000108 <__udivsi3>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	0019      	movs	r1, r3
 8000b52:	0020      	movs	r0, r4
 8000b54:	f7ff fad8 	bl	8000108 <__udivsi3>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 f92f 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e00f      	b.n	8000b88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d80b      	bhi.n	8000b86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2301      	movs	r3, #1
 8000b72:	425b      	negs	r3, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 f8fc 	bl	8000d74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_InitTick+0x64>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b003      	add	sp, #12
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	20000180 	.word	0x20000180
 8000b94:	20000188 	.word	0x20000188
 8000b98:	20000184 	.word	0x20000184

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_IncTick+0x1c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	18d2      	adds	r2, r2, r3
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_IncTick+0x20>)
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000188 	.word	0x20000188
 8000bbc:	200002fc 	.word	0x200002fc

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <HAL_GetTick+0x10>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	200002fc 	.word	0x200002fc

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff fff0 	bl	8000bc0 <HAL_GetTick>
 8000be0:	0003      	movs	r3, r0
 8000be2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3301      	adds	r3, #1
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	189b      	adds	r3, r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	f7ff ffe0 	bl	8000bc0 <HAL_GetTick>
 8000c00:	0002      	movs	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b004      	add	sp, #16
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	20000188 	.word	0x20000188

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c2e:	d809      	bhi.n	8000c44 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	001a      	movs	r2, r3
 8000c36:	231f      	movs	r3, #31
 8000c38:	401a      	ands	r2, r3
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_EnableIRQ+0x30>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4091      	lsls	r1, r2
 8000c40:	000a      	movs	r2, r1
 8000c42:	601a      	str	r2, [r3, #0]
  }
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b002      	add	sp, #8
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	0002      	movs	r2, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b7f      	cmp	r3, #127	; 0x7f
 8000c64:	d828      	bhi.n	8000cb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c66:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <__NVIC_SetPriority+0xd4>)
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	33c0      	adds	r3, #192	; 0xc0
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	589b      	ldr	r3, [r3, r2]
 8000c76:	1dfa      	adds	r2, r7, #7
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	400a      	ands	r2, r1
 8000c80:	00d2      	lsls	r2, r2, #3
 8000c82:	21ff      	movs	r1, #255	; 0xff
 8000c84:	4091      	lsls	r1, r2
 8000c86:	000a      	movs	r2, r1
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	019b      	lsls	r3, r3, #6
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	401a      	ands	r2, r3
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	4003      	ands	r3, r0
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca4:	481f      	ldr	r0, [pc, #124]	; (8000d24 <__NVIC_SetPriority+0xd4>)
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	33c0      	adds	r3, #192	; 0xc0
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cb6:	e031      	b.n	8000d1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <__NVIC_SetPriority+0xd8>)
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	400b      	ands	r3, r1
 8000cc4:	3b08      	subs	r3, #8
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	3306      	adds	r3, #6
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	18d3      	adds	r3, r2, r3
 8000cce:	3304      	adds	r3, #4
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	1dfa      	adds	r2, r7, #7
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	2203      	movs	r2, #3
 8000cda:	400a      	ands	r2, r1
 8000cdc:	00d2      	lsls	r2, r2, #3
 8000cde:	21ff      	movs	r1, #255	; 0xff
 8000ce0:	4091      	lsls	r1, r2
 8000ce2:	000a      	movs	r2, r1
 8000ce4:	43d2      	mvns	r2, r2
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	019b      	lsls	r3, r3, #6
 8000cee:	22ff      	movs	r2, #255	; 0xff
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	4003      	ands	r3, r0
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d00:	4809      	ldr	r0, [pc, #36]	; (8000d28 <__NVIC_SetPriority+0xd8>)
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	001c      	movs	r4, r3
 8000d08:	230f      	movs	r3, #15
 8000d0a:	4023      	ands	r3, r4
 8000d0c:	3b08      	subs	r3, #8
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	430a      	orrs	r2, r1
 8000d12:	3306      	adds	r3, #6
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	18c3      	adds	r3, r0, r3
 8000d18:	3304      	adds	r3, #4
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b003      	add	sp, #12
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	1e5a      	subs	r2, r3, #1
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	045b      	lsls	r3, r3, #17
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d301      	bcc.n	8000d44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d40:	2301      	movs	r3, #1
 8000d42:	e010      	b.n	8000d66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <SysTick_Config+0x44>)
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	425b      	negs	r3, r3
 8000d50:	2103      	movs	r1, #3
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff ff7c 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x44>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x44>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	210f      	movs	r1, #15
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	1c02      	adds	r2, r0, #0
 8000d84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	0011      	movs	r1, r2
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b004      	add	sp, #16
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	0002      	movs	r2, r0
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff ff33 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff ffaf 	bl	8000d2c <SysTick_Config>
 8000dce:	0003      	movs	r3, r0
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dee:	e14f      	b.n	8001090 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <HAL_GPIO_Init+0x30>
 8000e06:	e140      	b.n	800108a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d130      	bne.n	8000e82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	43da      	mvns	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	409a      	lsls	r2, r3
 8000e42:	0013      	movs	r3, r2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d017      	beq.n	8000ebe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	58d3      	ldr	r3, [r2, r3]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2207      	movs	r2, #7
 8000edc:	4013      	ands	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	6939      	ldr	r1, [r7, #16]
 8000f10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	23c0      	movs	r3, #192	; 0xc0
 8000f4c:	029b      	lsls	r3, r3, #10
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0x17c>
 8000f52:	e09a      	b.n	800108a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b54      	ldr	r3, [pc, #336]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8000f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f58:	4b53      	ldr	r3, [pc, #332]	; (80010a8 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f60:	4a52      	ldr	r2, [pc, #328]	; (80010ac <HAL_GPIO_Init+0x2d4>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	589b      	ldr	r3, [r3, r2]
 8000f6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2203      	movs	r2, #3
 8000f72:	4013      	ands	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	23a0      	movs	r3, #160	; 0xa0
 8000f88:	05db      	lsls	r3, r3, #23
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0x1ea>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a47      	ldr	r2, [pc, #284]	; (80010b0 <HAL_GPIO_Init+0x2d8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x1e6>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <HAL_GPIO_Init+0x2dc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x1e2>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a45      	ldr	r2, [pc, #276]	; (80010b8 <HAL_GPIO_Init+0x2e0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x1de>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a44      	ldr	r2, [pc, #272]	; (80010bc <HAL_GPIO_Init+0x2e4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x1da>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x1ec>
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x1ec>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x1ec>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x1ec>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x1ec>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	400a      	ands	r2, r1
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	; (80010ac <HAL_GPIO_Init+0x2d4>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	035b      	lsls	r3, r3, #13
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43da      	mvns	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	039b      	lsls	r3, r3, #14
 8001024:	4013      	ands	r3, r2
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	029b      	lsls	r3, r3, #10
 800104e:	4013      	ands	r3, r2
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43da      	mvns	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	4013      	ands	r3, r2
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	40da      	lsrs	r2, r3
 8001098:	1e13      	subs	r3, r2, #0
 800109a:	d000      	beq.n	800109e <HAL_GPIO_Init+0x2c6>
 800109c:	e6a8      	b.n	8000df0 <HAL_GPIO_Init+0x18>
  }
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b006      	add	sp, #24
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	50000400 	.word	0x50000400
 80010b4:	50000800 	.word	0x50000800
 80010b8:	50000c00 	.word	0x50000c00
 80010bc:	50001c00 	.word	0x50001c00
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	000a      	movs	r2, r1
 80010ce:	1cbb      	adds	r3, r7, #2
 80010d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	1cba      	adds	r2, r7, #2
 80010d8:	8812      	ldrh	r2, [r2, #0]
 80010da:	4013      	ands	r3, r2
 80010dc:	d004      	beq.n	80010e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010de:	230f      	movs	r3, #15
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e003      	b.n	80010f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010f0:	230f      	movs	r3, #15
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	781b      	ldrb	r3, [r3, #0]
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b004      	add	sp, #16
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	0008      	movs	r0, r1
 8001108:	0011      	movs	r1, r2
 800110a:	1cbb      	adds	r3, r7, #2
 800110c:	1c02      	adds	r2, r0, #0
 800110e:	801a      	strh	r2, [r3, #0]
 8001110:	1c7b      	adds	r3, r7, #1
 8001112:	1c0a      	adds	r2, r1, #0
 8001114:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001116:	1c7b      	adds	r3, r7, #1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d004      	beq.n	8001128 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	881a      	ldrh	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001126:	e003      	b.n	8001130 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001128:	1cbb      	adds	r3, r7, #2
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b08b      	sub	sp, #44	; 0x2c
 800113c:	af06      	add	r7, sp, #24
 800113e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e0f0      	b.n	800132c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a79      	ldr	r2, [pc, #484]	; (8001334 <HAL_PCD_Init+0x1fc>)
 800114e:	5c9b      	ldrb	r3, [r3, r2]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d108      	bne.n	8001168 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	23aa      	movs	r3, #170	; 0xaa
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	2100      	movs	r1, #0
 800115e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	0018      	movs	r0, r3
 8001164:	f006 faf2 	bl	800774c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a72      	ldr	r2, [pc, #456]	; (8001334 <HAL_PCD_Init+0x1fc>)
 800116c:	2103      	movs	r1, #3
 800116e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	0018      	movs	r0, r3
 8001176:	f002 fd2b 	bl	8003bd0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800117a:	230f      	movs	r3, #15
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e049      	b.n	8001218 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001184:	200f      	movs	r0, #15
 8001186:	183b      	adds	r3, r7, r0
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	0013      	movs	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	189b      	adds	r3, r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	18cb      	adds	r3, r1, r3
 8001198:	3301      	adds	r3, #1
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800119e:	183b      	adds	r3, r7, r0
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	0013      	movs	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	189b      	adds	r3, r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	183a      	adds	r2, r7, r0
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011b4:	183b      	adds	r3, r7, r0
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	0013      	movs	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	189b      	adds	r3, r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	18cb      	adds	r3, r1, r3
 80011c6:	3303      	adds	r3, #3
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011cc:	183b      	adds	r3, r7, r0
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	0013      	movs	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	189b      	adds	r3, r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	18cb      	adds	r3, r1, r3
 80011dc:	3338      	adds	r3, #56	; 0x38
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011e2:	183b      	adds	r3, r7, r0
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	0013      	movs	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	189b      	adds	r3, r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	18cb      	adds	r3, r1, r3
 80011f2:	333c      	adds	r3, #60	; 0x3c
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011f8:	183b      	adds	r3, r7, r0
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	0013      	movs	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	189b      	adds	r3, r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	18cb      	adds	r3, r1, r3
 8001208:	3340      	adds	r3, #64	; 0x40
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120e:	183b      	adds	r3, r7, r0
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	183b      	adds	r3, r7, r0
 8001214:	3201      	adds	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	210f      	movs	r1, #15
 800121a:	187b      	adds	r3, r7, r1
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d3ae      	bcc.n	8001184 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001226:	187b      	adds	r3, r7, r1
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e056      	b.n	80012dc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800122e:	240f      	movs	r4, #15
 8001230:	193b      	adds	r3, r7, r4
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	236a      	movs	r3, #106	; 0x6a
 8001238:	33ff      	adds	r3, #255	; 0xff
 800123a:	0019      	movs	r1, r3
 800123c:	0013      	movs	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	189b      	adds	r3, r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	18c3      	adds	r3, r0, r3
 8001246:	185b      	adds	r3, r3, r1
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800124c:	193b      	adds	r3, r7, r4
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	23b4      	movs	r3, #180	; 0xb4
 8001254:	0059      	lsls	r1, r3, #1
 8001256:	0013      	movs	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	189b      	adds	r3, r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	18c3      	adds	r3, r0, r3
 8001260:	185b      	adds	r3, r3, r1
 8001262:	193a      	adds	r2, r7, r4
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001268:	193b      	adds	r3, r7, r4
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	236c      	movs	r3, #108	; 0x6c
 8001270:	33ff      	adds	r3, #255	; 0xff
 8001272:	0019      	movs	r1, r3
 8001274:	0013      	movs	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	189b      	adds	r3, r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	18c3      	adds	r3, r0, r3
 800127e:	185b      	adds	r3, r3, r1
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	23bc      	movs	r3, #188	; 0xbc
 800128c:	0059      	lsls	r1, r3, #1
 800128e:	0013      	movs	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	189b      	adds	r3, r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	18c3      	adds	r3, r0, r3
 8001298:	185b      	adds	r3, r3, r1
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800129e:	193b      	adds	r3, r7, r4
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	23be      	movs	r3, #190	; 0xbe
 80012a6:	0059      	lsls	r1, r3, #1
 80012a8:	0013      	movs	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	189b      	adds	r3, r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	18c3      	adds	r3, r0, r3
 80012b2:	185b      	adds	r3, r3, r1
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	23c0      	movs	r3, #192	; 0xc0
 80012c0:	0059      	lsls	r1, r3, #1
 80012c2:	0013      	movs	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	18c3      	adds	r3, r0, r3
 80012cc:	185b      	adds	r3, r3, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	3201      	adds	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	230f      	movs	r3, #15
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3a1      	bcc.n	800122e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	466a      	mov	r2, sp
 80012f2:	0011      	movs	r1, r2
 80012f4:	001a      	movs	r2, r3
 80012f6:	3210      	adds	r2, #16
 80012f8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80012fa:	c170      	stmia	r1!, {r4, r5, r6}
 80012fc:	ca30      	ldmia	r2!, {r4, r5}
 80012fe:	c130      	stmia	r1!, {r4, r5}
 8001300:	6859      	ldr	r1, [r3, #4]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f002 fc7d 	bl	8003c04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2224      	movs	r2, #36	; 0x24
 800130e:	2100      	movs	r1, #0
 8001310:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_PCD_Init+0x1fc>)
 8001316:	2101      	movs	r1, #1
 8001318:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d103      	bne.n	800132a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	0018      	movs	r0, r3
 8001326:	f001 fd09 	bl	8002d3c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b005      	add	sp, #20
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001334:	000002a9 	.word	0x000002a9

08001338 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	23aa      	movs	r3, #170	; 0xaa
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_PCD_Start+0x18>
 800134c:	2302      	movs	r3, #2
 800134e:	e014      	b.n	800137a <HAL_PCD_Start+0x42>
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	23aa      	movs	r3, #170	; 0xaa
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	2101      	movs	r1, #1
 8001358:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	0018      	movs	r0, r3
 8001360:	f002 fc20 	bl	8003ba4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0018      	movs	r0, r3
 800136a:	f004 fc23 	bl	8005bb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	23aa      	movs	r3, #170	; 0xaa
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	2100      	movs	r1, #0
 8001376:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	0018      	movs	r0, r3
 8001392:	f004 fc25 	bl	8005be0 <USB_ReadInterrupts>
 8001396:	0003      	movs	r3, r0
 8001398:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4013      	ands	r3, r2
 80013a2:	d004      	beq.n	80013ae <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 fb48 	bl	8001a3c <PCD_EP_ISR_Handler>

    return;
 80013ac:	e11d      	b.n	80015ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4013      	ands	r3, r2
 80013b6:	d015      	beq.n	80013e4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2244      	movs	r2, #68	; 0x44
 80013be:	5a9b      	ldrh	r3, [r3, r2]
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	498a      	ldr	r1, [pc, #552]	; (80015f0 <HAL_PCD_IRQHandler+0x26c>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	b291      	uxth	r1, r2
 80013cc:	2244      	movs	r2, #68	; 0x44
 80013ce:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f006 fa3d 	bl	8007852 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2100      	movs	r1, #0
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 f915 	bl	800160c <HAL_PCD_SetAddress>

    return;
 80013e2:	e102      	b.n	80015ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	01db      	lsls	r3, r3, #7
 80013ea:	4013      	ands	r3, r2
 80013ec:	d00c      	beq.n	8001408 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2244      	movs	r2, #68	; 0x44
 80013f4:	5a9b      	ldrh	r3, [r3, r2]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	497d      	ldr	r1, [pc, #500]	; (80015f4 <HAL_PCD_IRQHandler+0x270>)
 80013fe:	400a      	ands	r2, r1
 8001400:	b291      	uxth	r1, r2
 8001402:	2244      	movs	r2, #68	; 0x44
 8001404:	5299      	strh	r1, [r3, r2]

    return;
 8001406:	e0f0      	b.n	80015ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	4013      	ands	r3, r2
 8001410:	d00c      	beq.n	800142c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2244      	movs	r2, #68	; 0x44
 8001418:	5a9b      	ldrh	r3, [r3, r2]
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4975      	ldr	r1, [pc, #468]	; (80015f8 <HAL_PCD_IRQHandler+0x274>)
 8001422:	400a      	ands	r2, r1
 8001424:	b291      	uxth	r1, r2
 8001426:	2244      	movs	r2, #68	; 0x44
 8001428:	5299      	strh	r1, [r3, r2]

    return;
 800142a:	e0de      	b.n	80015ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	015b      	lsls	r3, r3, #5
 8001432:	4013      	ands	r3, r2
 8001434:	d038      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	5a9b      	ldrh	r3, [r3, r2]
 800143e:	b29a      	uxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2104      	movs	r1, #4
 8001446:	438a      	bics	r2, r1
 8001448:	b291      	uxth	r1, r2
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2240      	movs	r2, #64	; 0x40
 8001454:	5a9b      	ldrh	r3, [r3, r2]
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2108      	movs	r1, #8
 800145e:	438a      	bics	r2, r1
 8001460:	b291      	uxth	r1, r2
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	23b8      	movs	r3, #184	; 0xb8
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	5cd3      	ldrb	r3, [r2, r3]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d109      	bne.n	8001486 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	23b8      	movs	r3, #184	; 0xb8
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	2100      	movs	r1, #0
 800147a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2100      	movs	r1, #0
 8001480:	0018      	movs	r0, r3
 8001482:	f001 fc85 	bl	8002d90 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	0018      	movs	r0, r3
 800148a:	f006 fa23 	bl	80078d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2244      	movs	r2, #68	; 0x44
 8001494:	5a9b      	ldrh	r3, [r3, r2]
 8001496:	b29a      	uxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4957      	ldr	r1, [pc, #348]	; (80015fc <HAL_PCD_IRQHandler+0x278>)
 800149e:	400a      	ands	r2, r1
 80014a0:	b291      	uxth	r1, r2
 80014a2:	2244      	movs	r2, #68	; 0x44
 80014a4:	5299      	strh	r1, [r3, r2]

    return;
 80014a6:	e0a0      	b.n	80015ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4013      	ands	r3, r2
 80014b0:	d028      	beq.n	8001504 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	5a9b      	ldrh	r3, [r3, r2]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2108      	movs	r1, #8
 80014c2:	430a      	orrs	r2, r1
 80014c4:	b291      	uxth	r1, r2
 80014c6:	2240      	movs	r2, #64	; 0x40
 80014c8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2244      	movs	r2, #68	; 0x44
 80014d0:	5a9b      	ldrh	r3, [r3, r2]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4949      	ldr	r1, [pc, #292]	; (8001600 <HAL_PCD_IRQHandler+0x27c>)
 80014da:	400a      	ands	r2, r1
 80014dc:	b291      	uxth	r1, r2
 80014de:	2244      	movs	r2, #68	; 0x44
 80014e0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2240      	movs	r2, #64	; 0x40
 80014e8:	5a9b      	ldrh	r3, [r3, r2]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2104      	movs	r1, #4
 80014f2:	430a      	orrs	r2, r1
 80014f4:	b291      	uxth	r1, r2
 80014f6:	2240      	movs	r2, #64	; 0x40
 80014f8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f006 f9cd 	bl	800789c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001502:	e072      	b.n	80015ea <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	4013      	ands	r3, r2
 800150a:	d046      	beq.n	800159a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2244      	movs	r2, #68	; 0x44
 8001512:	5a9b      	ldrh	r3, [r3, r2]
 8001514:	b29a      	uxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	438a      	bics	r2, r1
 800151e:	b291      	uxth	r1, r2
 8001520:	2244      	movs	r2, #68	; 0x44
 8001522:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	23b8      	movs	r3, #184	; 0xb8
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d12f      	bne.n	8001590 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	5a9b      	ldrh	r3, [r3, r2]
 8001538:	b29a      	uxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2104      	movs	r1, #4
 8001540:	430a      	orrs	r2, r1
 8001542:	b291      	uxth	r1, r2
 8001544:	2240      	movs	r2, #64	; 0x40
 8001546:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2240      	movs	r2, #64	; 0x40
 800154e:	5a9b      	ldrh	r3, [r3, r2]
 8001550:	b29a      	uxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2108      	movs	r1, #8
 8001558:	430a      	orrs	r2, r1
 800155a:	b291      	uxth	r1, r2
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	23b8      	movs	r3, #184	; 0xb8
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	2101      	movs	r1, #1
 8001568:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2254      	movs	r2, #84	; 0x54
 8001570:	5a9b      	ldrh	r3, [r3, r2]
 8001572:	b29b      	uxth	r3, r3
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	223c      	movs	r2, #60	; 0x3c
 8001578:	4013      	ands	r3, r2
 800157a:	0019      	movs	r1, r3
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	23b9      	movs	r3, #185	; 0xb9
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2101      	movs	r1, #1
 8001588:	0018      	movs	r0, r3
 800158a:	f001 fc01 	bl	8002d90 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800158e:	e02c      	b.n	80015ea <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	0018      	movs	r0, r3
 8001594:	f006 f982 	bl	800789c <HAL_PCD_SuspendCallback>
    return;
 8001598:	e027      	b.n	80015ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d010      	beq.n	80015c6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2244      	movs	r2, #68	; 0x44
 80015aa:	5a9b      	ldrh	r3, [r3, r2]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4914      	ldr	r1, [pc, #80]	; (8001604 <HAL_PCD_IRQHandler+0x280>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	b291      	uxth	r1, r2
 80015b8:	2244      	movs	r2, #68	; 0x44
 80015ba:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	0018      	movs	r0, r3
 80015c0:	f006 f938 	bl	8007834 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015c4:	e011      	b.n	80015ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4013      	ands	r3, r2
 80015ce:	d00c      	beq.n	80015ea <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2244      	movs	r2, #68	; 0x44
 80015d6:	5a9b      	ldrh	r3, [r3, r2]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	490a      	ldr	r1, [pc, #40]	; (8001608 <HAL_PCD_IRQHandler+0x284>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	b291      	uxth	r1, r2
 80015e4:	2244      	movs	r2, #68	; 0x44
 80015e6:	5299      	strh	r1, [r3, r2]

    return;
 80015e8:	46c0      	nop			; (mov r8, r8)
  }
}
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b004      	add	sp, #16
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	fffffbff 	.word	0xfffffbff
 80015f4:	ffffbfff 	.word	0xffffbfff
 80015f8:	ffffdfff 	.word	0xffffdfff
 80015fc:	ffffefff 	.word	0xffffefff
 8001600:	fffff7ff 	.word	0xfffff7ff
 8001604:	fffffdff 	.word	0xfffffdff
 8001608:	fffffeff 	.word	0xfffffeff

0800160c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	000a      	movs	r2, r1
 8001616:	1cfb      	adds	r3, r7, #3
 8001618:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	23aa      	movs	r3, #170	; 0xaa
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_PCD_SetAddress+0x1e>
 8001626:	2302      	movs	r3, #2
 8001628:	e017      	b.n	800165a <HAL_PCD_SetAddress+0x4e>
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	23aa      	movs	r3, #170	; 0xaa
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	2101      	movs	r1, #1
 8001632:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	1cfa      	adds	r2, r7, #3
 8001638:	2124      	movs	r1, #36	; 0x24
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	1cfb      	adds	r3, r7, #3
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	0019      	movs	r1, r3
 8001648:	0010      	movs	r0, r2
 800164a:	f004 fa9f 	bl	8005b8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	23aa      	movs	r3, #170	; 0xaa
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	2100      	movs	r1, #0
 8001656:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001662:	b590      	push	{r4, r7, lr}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	000c      	movs	r4, r1
 800166c:	0010      	movs	r0, r2
 800166e:	0019      	movs	r1, r3
 8001670:	1cfb      	adds	r3, r7, #3
 8001672:	1c22      	adds	r2, r4, #0
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	003b      	movs	r3, r7
 8001678:	1c02      	adds	r2, r0, #0
 800167a:	801a      	strh	r2, [r3, #0]
 800167c:	1cbb      	adds	r3, r7, #2
 800167e:	1c0a      	adds	r2, r1, #0
 8001680:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001682:	230b      	movs	r3, #11
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800168a:	1cfb      	adds	r3, r7, #3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b25b      	sxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	da0f      	bge.n	80016b4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001694:	1cfb      	adds	r3, r7, #3
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2207      	movs	r2, #7
 800169a:	4013      	ands	r3, r2
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	0013      	movs	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	18d3      	adds	r3, r2, r3
 80016aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	705a      	strb	r2, [r3, #1]
 80016b2:	e00f      	b.n	80016d4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016b4:	1cfb      	adds	r3, r7, #3
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2207      	movs	r2, #7
 80016ba:	401a      	ands	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	189b      	adds	r3, r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	3369      	adds	r3, #105	; 0x69
 80016c6:	33ff      	adds	r3, #255	; 0xff
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	18d3      	adds	r3, r2, r3
 80016cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016d4:	1cfb      	adds	r3, r7, #3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2207      	movs	r2, #7
 80016da:	4013      	ands	r3, r2
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016e2:	003b      	movs	r3, r7
 80016e4:	881a      	ldrh	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1cba      	adds	r2, r7, #2
 80016ee:	7812      	ldrb	r2, [r2, #0]
 80016f0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016f2:	1cbb      	adds	r3, r7, #2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d102      	bne.n	8001700 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	23aa      	movs	r3, #170	; 0xaa
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_PCD_EP_Open+0xae>
 800170c:	2302      	movs	r3, #2
 800170e:	e013      	b.n	8001738 <HAL_PCD_EP_Open+0xd6>
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	23aa      	movs	r3, #170	; 0xaa
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	2101      	movs	r1, #1
 8001718:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	0011      	movs	r1, r2
 8001722:	0018      	movs	r0, r3
 8001724:	f002 fa96 	bl	8003c54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	23aa      	movs	r3, #170	; 0xaa
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	2100      	movs	r1, #0
 8001730:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001732:	230b      	movs	r3, #11
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	781b      	ldrb	r3, [r3, #0]
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	b005      	add	sp, #20
 800173e:	bd90      	pop	{r4, r7, pc}

08001740 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	000a      	movs	r2, r1
 800174a:	1cfb      	adds	r3, r7, #3
 800174c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800174e:	1cfb      	adds	r3, r7, #3
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b25b      	sxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	da0f      	bge.n	8001778 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001758:	1cfb      	adds	r3, r7, #3
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2207      	movs	r2, #7
 800175e:	4013      	ands	r3, r2
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	0013      	movs	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	189b      	adds	r3, r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	18d3      	adds	r3, r2, r3
 800176e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	705a      	strb	r2, [r3, #1]
 8001776:	e00f      	b.n	8001798 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001778:	1cfb      	adds	r3, r7, #3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2207      	movs	r2, #7
 800177e:	401a      	ands	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	189b      	adds	r3, r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	3369      	adds	r3, #105	; 0x69
 800178a:	33ff      	adds	r3, #255	; 0xff
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	18d3      	adds	r3, r2, r3
 8001790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001798:	1cfb      	adds	r3, r7, #3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2207      	movs	r2, #7
 800179e:	4013      	ands	r3, r2
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	23aa      	movs	r3, #170	; 0xaa
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_PCD_EP_Close+0x76>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e011      	b.n	80017da <HAL_PCD_EP_Close+0x9a>
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	23aa      	movs	r3, #170	; 0xaa
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	2101      	movs	r1, #1
 80017be:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	0011      	movs	r1, r2
 80017c8:	0018      	movs	r0, r3
 80017ca:	f002 fde5 	bl	8004398 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	23aa      	movs	r3, #170	; 0xaa
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	2100      	movs	r1, #0
 80017d6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b004      	add	sp, #16
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	200b      	movs	r0, #11
 80017f0:	183b      	adds	r3, r7, r0
 80017f2:	1c0a      	adds	r2, r1, #0
 80017f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f6:	0001      	movs	r1, r0
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2207      	movs	r2, #7
 80017fe:	401a      	ands	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	189b      	adds	r3, r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	3369      	adds	r3, #105	; 0x69
 800180a:	33ff      	adds	r3, #255	; 0xff
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	18d3      	adds	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2200      	movs	r2, #0
 8001822:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2200      	movs	r2, #0
 8001828:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182a:	187b      	adds	r3, r7, r1
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2207      	movs	r2, #7
 8001830:	4013      	ands	r3, r2
 8001832:	b2da      	uxtb	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f002 ff69 	bl	8004718 <USB_EPStartXfer>

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b006      	add	sp, #24
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	200b      	movs	r0, #11
 800185e:	183b      	adds	r3, r7, r0
 8001860:	1c0a      	adds	r2, r1, #0
 8001862:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001864:	183b      	adds	r3, r7, r0
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2207      	movs	r2, #7
 800186a:	4013      	ands	r3, r2
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	0013      	movs	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	189b      	adds	r3, r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2224      	movs	r2, #36	; 0x24
 800188c:	2101      	movs	r1, #1
 800188e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2201      	movs	r2, #1
 80018a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018a2:	183b      	adds	r3, r7, r0
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2207      	movs	r2, #7
 80018a8:	4013      	ands	r3, r2
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f002 ff2d 	bl	8004718 <USB_EPStartXfer>

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b006      	add	sp, #24
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	000a      	movs	r2, r1
 80018d2:	1cfb      	adds	r3, r7, #3
 80018d4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018d6:	1cfb      	adds	r3, r7, #3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2207      	movs	r2, #7
 80018dc:	401a      	ands	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d901      	bls.n	80018ea <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e046      	b.n	8001978 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018ea:	1cfb      	adds	r3, r7, #3
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da0f      	bge.n	8001914 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f4:	1cfb      	adds	r3, r7, #3
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2207      	movs	r2, #7
 80018fa:	4013      	ands	r3, r2
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	0013      	movs	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	189b      	adds	r3, r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	18d3      	adds	r3, r2, r3
 800190a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	705a      	strb	r2, [r3, #1]
 8001912:	e00d      	b.n	8001930 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001914:	1cfb      	adds	r3, r7, #3
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	0013      	movs	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	189b      	adds	r3, r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	3369      	adds	r3, #105	; 0x69
 8001922:	33ff      	adds	r3, #255	; 0xff
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	18d3      	adds	r3, r2, r3
 8001928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001936:	1cfb      	adds	r3, r7, #3
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2207      	movs	r2, #7
 800193c:	4013      	ands	r3, r2
 800193e:	b2da      	uxtb	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	23aa      	movs	r3, #170	; 0xaa
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_PCD_EP_SetStall+0x8c>
 8001950:	2302      	movs	r3, #2
 8001952:	e011      	b.n	8001978 <HAL_PCD_EP_SetStall+0xb0>
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	23aa      	movs	r3, #170	; 0xaa
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	2101      	movs	r1, #1
 800195c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	0011      	movs	r1, r2
 8001966:	0018      	movs	r0, r3
 8001968:	f004 f80e 	bl	8005988 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	23aa      	movs	r3, #170	; 0xaa
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	2100      	movs	r1, #0
 8001974:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	000a      	movs	r2, r1
 800198a:	1cfb      	adds	r3, r7, #3
 800198c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800198e:	1cfb      	adds	r3, r7, #3
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	220f      	movs	r2, #15
 8001994:	401a      	ands	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d901      	bls.n	80019a2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e048      	b.n	8001a34 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019a2:	1cfb      	adds	r3, r7, #3
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da0f      	bge.n	80019cc <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ac:	1cfb      	adds	r3, r7, #3
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2207      	movs	r2, #7
 80019b2:	4013      	ands	r3, r2
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	0013      	movs	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	189b      	adds	r3, r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	18d3      	adds	r3, r2, r3
 80019c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	705a      	strb	r2, [r3, #1]
 80019ca:	e00f      	b.n	80019ec <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019cc:	1cfb      	adds	r3, r7, #3
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2207      	movs	r2, #7
 80019d2:	401a      	ands	r2, r3
 80019d4:	0013      	movs	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	189b      	adds	r3, r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	3369      	adds	r3, #105	; 0x69
 80019de:	33ff      	adds	r3, #255	; 0xff
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	18d3      	adds	r3, r2, r3
 80019e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f2:	1cfb      	adds	r3, r7, #3
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2207      	movs	r2, #7
 80019f8:	4013      	ands	r3, r2
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	23aa      	movs	r3, #170	; 0xaa
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_PCD_EP_ClrStall+0x90>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e011      	b.n	8001a34 <HAL_PCD_EP_ClrStall+0xb4>
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	23aa      	movs	r3, #170	; 0xaa
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	2101      	movs	r1, #1
 8001a18:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	0011      	movs	r1, r2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f004 f800 	bl	8005a28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	23aa      	movs	r3, #170	; 0xaa
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	2100      	movs	r1, #0
 8001a30:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b004      	add	sp, #16
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	b096      	sub	sp, #88	; 0x58
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a44:	f000 fbec 	bl	8002220 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	204e      	movs	r0, #78	; 0x4e
 8001a4e:	183b      	adds	r3, r7, r0
 8001a50:	2144      	movs	r1, #68	; 0x44
 8001a52:	5a52      	ldrh	r2, [r2, r1]
 8001a54:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a56:	183b      	adds	r3, r7, r0
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	244d      	movs	r4, #77	; 0x4d
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	210f      	movs	r1, #15
 8001a62:	400a      	ands	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d000      	beq.n	8001a70 <PCD_EP_ISR_Handler+0x34>
 8001a6e:	e18f      	b.n	8001d90 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	2210      	movs	r2, #16
 8001a76:	4013      	ands	r3, r2
 8001a78:	d155      	bne.n	8001b26 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	200e      	movs	r0, #14
 8001a84:	183b      	adds	r3, r7, r0
 8001a86:	49bb      	ldr	r1, [pc, #748]	; (8001d74 <PCD_EP_ISR_Handler+0x338>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	801a      	strh	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	183a      	adds	r2, r7, r0
 8001a92:	8812      	ldrh	r2, [r2, #0]
 8001a94:	49b8      	ldr	r1, [pc, #736]	; (8001d78 <PCD_EP_ISR_Handler+0x33c>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3328      	adds	r3, #40	; 0x28
 8001aa0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2250      	movs	r2, #80	; 0x50
 8001aa8:	5a9b      	ldrh	r3, [r3, r2]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	001a      	movs	r2, r3
 8001aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	18d2      	adds	r2, r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	18d3      	adds	r3, r2, r3
 8001abc:	4aaf      	ldr	r2, [pc, #700]	; (8001d7c <PCD_EP_ISR_Handler+0x340>)
 8001abe:	4694      	mov	ip, r2
 8001ac0:	4463      	add	r3, ip
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	059b      	lsls	r3, r3, #22
 8001ac6:	0d9a      	lsrs	r2, r3, #22
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	18d2      	adds	r2, r2, r3
 8001ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2100      	movs	r1, #0
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f005 fe8a 	bl	80077f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2224      	movs	r2, #36	; 0x24
 8001ae8:	5c9b      	ldrb	r3, [r3, r2]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <PCD_EP_ISR_Handler+0xb8>
 8001af0:	f000 fb96 	bl	8002220 <PCD_EP_ISR_Handler+0x7e4>
 8001af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <PCD_EP_ISR_Handler+0xc4>
 8001afc:	f000 fb90 	bl	8002220 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	5c9b      	ldrb	r3, [r3, r2]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	4252      	negs	r2, r2
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b291      	uxth	r1, r2
 8001b16:	224c      	movs	r2, #76	; 0x4c
 8001b18:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2224      	movs	r2, #36	; 0x24
 8001b1e:	2100      	movs	r1, #0
 8001b20:	5499      	strb	r1, [r3, r2]
 8001b22:	f000 fb7d 	bl	8002220 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3369      	adds	r3, #105	; 0x69
 8001b2a:	33ff      	adds	r3, #255	; 0xff
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	214a      	movs	r1, #74	; 0x4a
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	8812      	ldrh	r2, [r2, #0]
 8001b38:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	881a      	ldrh	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4013      	ands	r3, r2
 8001b44:	d037      	beq.n	8001bb6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2250      	movs	r2, #80	; 0x50
 8001b4c:	5a9b      	ldrh	r3, [r3, r2]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	001a      	movs	r2, r3
 8001b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	18d2      	adds	r2, r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	18d3      	adds	r3, r2, r3
 8001b60:	4a87      	ldr	r2, [pc, #540]	; (8001d80 <PCD_EP_ISR_Handler+0x344>)
 8001b62:	4694      	mov	ip, r2
 8001b64:	4463      	add	r3, ip
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	059b      	lsls	r3, r3, #22
 8001b6a:	0d9a      	lsrs	r2, r3, #22
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	22ac      	movs	r2, #172	; 0xac
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	1899      	adds	r1, r3, r2
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b82:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f004 f882 	bl	8005c8e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	2010      	movs	r0, #16
 8001b94:	183b      	adds	r3, r7, r0
 8001b96:	497b      	ldr	r1, [pc, #492]	; (8001d84 <PCD_EP_ISR_Handler+0x348>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	801a      	strh	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	183a      	adds	r2, r7, r0
 8001ba2:	8812      	ldrh	r2, [r2, #0]
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	b292      	uxth	r2, r2
 8001baa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f005 fdec 	bl	800778c <HAL_PCD_SetupStageCallback>
 8001bb4:	e334      	b.n	8002220 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bb6:	234a      	movs	r3, #74	; 0x4a
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2200      	movs	r2, #0
 8001bbc:	5e9b      	ldrsh	r3, [r3, r2]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db00      	blt.n	8001bc4 <PCD_EP_ISR_Handler+0x188>
 8001bc2:	e32d      	b.n	8002220 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	201e      	movs	r0, #30
 8001bce:	183b      	adds	r3, r7, r0
 8001bd0:	496c      	ldr	r1, [pc, #432]	; (8001d84 <PCD_EP_ISR_Handler+0x348>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	801a      	strh	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	183a      	adds	r2, r7, r0
 8001bdc:	8812      	ldrh	r2, [r2, #0]
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	430a      	orrs	r2, r1
 8001be2:	b292      	uxth	r2, r2
 8001be4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2250      	movs	r2, #80	; 0x50
 8001bec:	5a9b      	ldrh	r3, [r3, r2]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	18d2      	adds	r2, r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	18d3      	adds	r3, r2, r3
 8001c00:	4a5f      	ldr	r2, [pc, #380]	; (8001d80 <PCD_EP_ISR_Handler+0x344>)
 8001c02:	4694      	mov	ip, r2
 8001c04:	4463      	add	r3, ip
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	059b      	lsls	r3, r3, #22
 8001c0a:	0d9a      	lsrs	r2, r3, #22
 8001c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01a      	beq.n	8001c4e <PCD_EP_ISR_Handler+0x212>
 8001c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d016      	beq.n	8001c4e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	6959      	ldr	r1, [r3, #20]
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	f004 f82c 	bl	8005c8e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	18d2      	adds	r2, r2, r3
 8001c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c42:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2100      	movs	r1, #0
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f005 fdb4 	bl	80077b6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	214a      	movs	r1, #74	; 0x4a
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	8812      	ldrh	r2, [r2, #0]
 8001c58:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	881a      	ldrh	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	4013      	ands	r3, r2
 8001c64:	d000      	beq.n	8001c68 <PCD_EP_ISR_Handler+0x22c>
 8001c66:	e2db      	b.n	8002220 <PCD_EP_ISR_Handler+0x7e4>
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	881a      	ldrh	r2, [r3, #0]
 8001c6c:	23c0      	movs	r3, #192	; 0xc0
 8001c6e:	019b      	lsls	r3, r3, #6
 8001c70:	401a      	ands	r2, r3
 8001c72:	23c0      	movs	r3, #192	; 0xc0
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d100      	bne.n	8001c7c <PCD_EP_ISR_Handler+0x240>
 8001c7a:	e2d1      	b.n	8002220 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2250      	movs	r2, #80	; 0x50
 8001c88:	5a9b      	ldrh	r3, [r3, r2]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	189b      	adds	r3, r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	4a3a      	ldr	r2, [pc, #232]	; (8001d80 <PCD_EP_ISR_Handler+0x344>)
 8001c98:	4694      	mov	ip, r2
 8001c9a:	4463      	add	r3, ip
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	059b      	lsls	r3, r3, #22
 8001ca6:	0d9b      	lsrs	r3, r3, #22
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	801a      	strh	r2, [r3, #0]
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8001cb4:	d91a      	bls.n	8001cec <PCD_EP_ISR_Handler+0x2b0>
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	221f      	movs	r2, #31
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d102      	bne.n	8001cce <PCD_EP_ISR_Handler+0x292>
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	029b      	lsls	r3, r3, #10
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <PCD_EP_ISR_Handler+0x33c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	801a      	strh	r2, [r3, #0]
 8001cea:	e023      	b.n	8001d34 <PCD_EP_ISR_Handler+0x2f8>
 8001cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d108      	bne.n	8001d06 <PCD_EP_ISR_Handler+0x2ca>
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <PCD_EP_ISR_Handler+0x33c>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	801a      	strh	r2, [r3, #0]
 8001d04:	e016      	b.n	8001d34 <PCD_EP_ISR_Handler+0x2f8>
 8001d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2201      	movs	r2, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	d002      	beq.n	8001d1e <PCD_EP_ISR_Handler+0x2e2>
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	029b      	lsls	r3, r3, #10
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	2012      	movs	r0, #18
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	4911      	ldr	r1, [pc, #68]	; (8001d88 <PCD_EP_ISR_Handler+0x34c>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	183a      	adds	r2, r7, r0
 8001d4a:	8812      	ldrh	r2, [r2, #0]
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0149      	lsls	r1, r1, #5
 8001d50:	404a      	eors	r2, r1
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	183b      	adds	r3, r7, r0
 8001d56:	183a      	adds	r2, r7, r0
 8001d58:	8812      	ldrh	r2, [r2, #0]
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	0189      	lsls	r1, r1, #6
 8001d5e:	404a      	eors	r2, r1
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	183a      	adds	r2, r7, r0
 8001d68:	8812      	ldrh	r2, [r2, #0]
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <PCD_EP_ISR_Handler+0x350>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	e255      	b.n	8002220 <PCD_EP_ISR_Handler+0x7e4>
 8001d74:	ffff8f0f 	.word	0xffff8f0f
 8001d78:	ffff8000 	.word	0xffff8000
 8001d7c:	00000402 	.word	0x00000402
 8001d80:	00000406 	.word	0x00000406
 8001d84:	00000f8f 	.word	0x00000f8f
 8001d88:	ffffbf8f 	.word	0xffffbf8f
 8001d8c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	001a      	movs	r2, r3
 8001d96:	204d      	movs	r0, #77	; 0x4d
 8001d98:	183b      	adds	r3, r7, r0
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	18d2      	adds	r2, r2, r3
 8001da0:	214a      	movs	r1, #74	; 0x4a
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	2200      	movs	r2, #0
 8001dac:	5e9b      	ldrsh	r3, [r3, r2]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db00      	blt.n	8001db4 <PCD_EP_ISR_Handler+0x378>
 8001db2:	e0fa      	b.n	8001faa <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	001a      	movs	r2, r3
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	18d3      	adds	r3, r2, r3
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	2448      	movs	r4, #72	; 0x48
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	49d1      	ldr	r1, [pc, #836]	; (8002110 <PCD_EP_ISR_Handler+0x6d4>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	801a      	strh	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	183b      	adds	r3, r7, r0
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	18d3      	adds	r3, r2, r3
 8001dde:	193a      	adds	r2, r7, r4
 8001de0:	8812      	ldrh	r2, [r2, #0]
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	430a      	orrs	r2, r1
 8001de6:	b292      	uxth	r2, r2
 8001de8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	0013      	movs	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	189b      	adds	r3, r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	3369      	adds	r3, #105	; 0x69
 8001df8:	33ff      	adds	r3, #255	; 0xff
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	18d3      	adds	r3, r2, r3
 8001dfe:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e02:	7b1b      	ldrb	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d125      	bne.n	8001e54 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2250      	movs	r2, #80	; 0x50
 8001e0e:	5a9b      	ldrh	r3, [r3, r2]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	001a      	movs	r2, r3
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	18d2      	adds	r2, r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	18d3      	adds	r3, r2, r3
 8001e22:	4abc      	ldr	r2, [pc, #752]	; (8002114 <PCD_EP_ISR_Handler+0x6d8>)
 8001e24:	4694      	mov	ip, r2
 8001e26:	4463      	add	r3, ip
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	2450      	movs	r4, #80	; 0x50
 8001e2c:	193b      	adds	r3, r7, r4
 8001e2e:	0592      	lsls	r2, r2, #22
 8001e30:	0d92      	lsrs	r2, r2, #22
 8001e32:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001e34:	193b      	adds	r3, r7, r4
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d100      	bne.n	8001e3e <PCD_EP_ISR_Handler+0x402>
 8001e3c:	e08d      	b.n	8001f5a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e44:	6959      	ldr	r1, [r3, #20]
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	88da      	ldrh	r2, [r3, #6]
 8001e4a:	193b      	adds	r3, r7, r4
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	f003 ff1e 	bl	8005c8e <USB_ReadPMA>
 8001e52:	e082      	b.n	8001f5a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	78db      	ldrb	r3, [r3, #3]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d10c      	bne.n	8001e76 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e5c:	2350      	movs	r3, #80	; 0x50
 8001e5e:	18fc      	adds	r4, r7, r3
 8001e60:	234a      	movs	r3, #74	; 0x4a
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f000 f9ec 	bl	8002248 <HAL_PCD_EP_DB_Receive>
 8001e70:	0003      	movs	r3, r0
 8001e72:	8023      	strh	r3, [r4, #0]
 8001e74:	e071      	b.n	8001f5a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	18d3      	adds	r3, r2, r3
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	2052      	movs	r0, #82	; 0x52
 8001e8a:	183b      	adds	r3, r7, r0
 8001e8c:	49a2      	ldr	r1, [pc, #648]	; (8002118 <PCD_EP_ISR_Handler+0x6dc>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	001a      	movs	r2, r3
 8001e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	18d3      	adds	r3, r2, r3
 8001ea0:	183a      	adds	r2, r7, r0
 8001ea2:	8812      	ldrh	r2, [r2, #0]
 8001ea4:	499d      	ldr	r1, [pc, #628]	; (800211c <PCD_EP_ISR_Handler+0x6e0>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	18d3      	adds	r3, r2, r3
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	01db      	lsls	r3, r3, #7
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d024      	beq.n	8001f12 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2250      	movs	r2, #80	; 0x50
 8001ece:	5a9b      	ldrh	r3, [r3, r2]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	18d2      	adds	r2, r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	18d3      	adds	r3, r2, r3
 8001ee2:	4a8f      	ldr	r2, [pc, #572]	; (8002120 <PCD_EP_ISR_Handler+0x6e4>)
 8001ee4:	4694      	mov	ip, r2
 8001ee6:	4463      	add	r3, ip
 8001ee8:	881a      	ldrh	r2, [r3, #0]
 8001eea:	2450      	movs	r4, #80	; 0x50
 8001eec:	193b      	adds	r3, r7, r4
 8001eee:	0592      	lsls	r2, r2, #22
 8001ef0:	0d92      	lsrs	r2, r2, #22
 8001ef2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d02e      	beq.n	8001f5a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f02:	6959      	ldr	r1, [r3, #20]
 8001f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f06:	891a      	ldrh	r2, [r3, #8]
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	f003 febf 	bl	8005c8e <USB_ReadPMA>
 8001f10:	e023      	b.n	8001f5a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2250      	movs	r2, #80	; 0x50
 8001f18:	5a9b      	ldrh	r3, [r3, r2]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	18d2      	adds	r2, r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	18d3      	adds	r3, r2, r3
 8001f2c:	4a79      	ldr	r2, [pc, #484]	; (8002114 <PCD_EP_ISR_Handler+0x6d8>)
 8001f2e:	4694      	mov	ip, r2
 8001f30:	4463      	add	r3, ip
 8001f32:	881a      	ldrh	r2, [r3, #0]
 8001f34:	2450      	movs	r4, #80	; 0x50
 8001f36:	193b      	adds	r3, r7, r4
 8001f38:	0592      	lsls	r2, r2, #22
 8001f3a:	0d92      	lsrs	r2, r2, #22
 8001f3c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4c:	6959      	ldr	r1, [r3, #20]
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f50:	895a      	ldrh	r2, [r3, #10]
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	f003 fe9a 	bl	8005c8e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	2150      	movs	r1, #80	; 0x50
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	18d2      	adds	r2, r2, r3
 8001f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	18d2      	adds	r2, r2, r3
 8001f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f76:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x550>
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	881a      	ldrh	r2, [r3, #0]
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d207      	bcs.n	8001f9c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0011      	movs	r1, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f005 fc0e 	bl	80077b6 <HAL_PCD_DataOutStageCallback>
 8001f9a:	e006      	b.n	8001faa <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f002 fbb7 	bl	8004718 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001faa:	244a      	movs	r4, #74	; 0x4a
 8001fac:	193b      	adds	r3, r7, r4
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d100      	bne.n	8001fb8 <PCD_EP_ISR_Handler+0x57c>
 8001fb6:	e133      	b.n	8002220 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fb8:	204d      	movs	r0, #77	; 0x4d
 8001fba:	183b      	adds	r3, r7, r0
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	0013      	movs	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	189b      	adds	r3, r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	18d3      	adds	r3, r2, r3
 8001fcc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	183b      	adds	r3, r7, r0
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	18d3      	adds	r3, r2, r3
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	2542      	movs	r5, #66	; 0x42
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	494f      	ldr	r1, [pc, #316]	; (8002124 <PCD_EP_ISR_Handler+0x6e8>)
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	001a      	movs	r2, r3
 8001ff0:	183b      	adds	r3, r7, r0
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	18d3      	adds	r3, r2, r3
 8001ff8:	197a      	adds	r2, r7, r5
 8001ffa:	8812      	ldrh	r2, [r2, #0]
 8001ffc:	494a      	ldr	r1, [pc, #296]	; (8002128 <PCD_EP_ISR_Handler+0x6ec>)
 8001ffe:	430a      	orrs	r2, r1
 8002000:	b292      	uxth	r2, r2
 8002002:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002006:	78db      	ldrb	r3, [r3, #3]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d000      	beq.n	800200e <PCD_EP_ISR_Handler+0x5d2>
 800200c:	e0af      	b.n	800216e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002016:	7b1b      	ldrb	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d100      	bne.n	800201e <PCD_EP_ISR_Handler+0x5e2>
 800201c:	e09f      	b.n	800215e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800201e:	193b      	adds	r3, r7, r4
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	4013      	ands	r3, r2
 8002026:	d046      	beq.n	80020b6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d125      	bne.n	800207c <PCD_EP_ISR_Handler+0x640>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2250      	movs	r2, #80	; 0x50
 800203c:	5a9b      	ldrh	r3, [r3, r2]
 800203e:	b29b      	uxth	r3, r3
 8002040:	001a      	movs	r2, r3
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	189b      	adds	r3, r3, r2
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	00da      	lsls	r2, r3, #3
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	18d3      	adds	r3, r2, r3
 8002052:	4a33      	ldr	r2, [pc, #204]	; (8002120 <PCD_EP_ISR_Handler+0x6e4>)
 8002054:	4694      	mov	ip, r2
 8002056:	4463      	add	r3, ip
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	059b      	lsls	r3, r3, #22
 8002062:	0d9b      	lsrs	r3, r3, #22
 8002064:	b29a      	uxth	r2, r3
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <PCD_EP_ISR_Handler+0x6ec>)
 8002072:	4313      	orrs	r3, r2
 8002074:	b29a      	uxth	r2, r3
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	801a      	strh	r2, [r3, #0]
 800207a:	e070      	b.n	800215e <PCD_EP_ISR_Handler+0x722>
 800207c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d16c      	bne.n	800215e <PCD_EP_ISR_Handler+0x722>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2250      	movs	r2, #80	; 0x50
 8002090:	5a9b      	ldrh	r3, [r3, r2]
 8002092:	b29b      	uxth	r3, r3
 8002094:	001a      	movs	r2, r3
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	189b      	adds	r3, r3, r2
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	00da      	lsls	r2, r3, #3
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	18d3      	adds	r3, r2, r3
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <PCD_EP_ISR_Handler+0x6e4>)
 80020a8:	4694      	mov	ip, r2
 80020aa:	4463      	add	r3, ip
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	2200      	movs	r2, #0
 80020b2:	801a      	strh	r2, [r3, #0]
 80020b4:	e053      	b.n	800215e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	785b      	ldrb	r3, [r3, #1]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d133      	bne.n	800212c <PCD_EP_ISR_Handler+0x6f0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2250      	movs	r2, #80	; 0x50
 80020d0:	5a9b      	ldrh	r3, [r3, r2]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	001a      	movs	r2, r3
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	189b      	adds	r3, r3, r2
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
 80020dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	00da      	lsls	r2, r3, #3
 80020e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e4:	18d3      	adds	r3, r2, r3
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <PCD_EP_ISR_Handler+0x6d8>)
 80020e8:	4694      	mov	ip, r2
 80020ea:	4463      	add	r3, ip
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	059b      	lsls	r3, r3, #22
 80020f6:	0d9b      	lsrs	r3, r3, #22
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4a08      	ldr	r2, [pc, #32]	; (8002128 <PCD_EP_ISR_Handler+0x6ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	b29a      	uxth	r2, r3
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	e026      	b.n	800215e <PCD_EP_ISR_Handler+0x722>
 8002110:	00000f8f 	.word	0x00000f8f
 8002114:	00000406 	.word	0x00000406
 8002118:	ffff8f8f 	.word	0xffff8f8f
 800211c:	ffff80c0 	.word	0xffff80c0
 8002120:	00000402 	.word	0x00000402
 8002124:	ffff8f0f 	.word	0xffff8f0f
 8002128:	ffff8000 	.word	0xffff8000
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d114      	bne.n	800215e <PCD_EP_ISR_Handler+0x722>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2250      	movs	r2, #80	; 0x50
 800213a:	5a9b      	ldrh	r3, [r3, r2]
 800213c:	b29b      	uxth	r3, r3
 800213e:	001a      	movs	r2, r3
 8002140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002142:	189b      	adds	r3, r3, r2
 8002144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	00da      	lsls	r2, r3, #3
 800214c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214e:	18d3      	adds	r3, r2, r3
 8002150:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <PCD_EP_ISR_Handler+0x804>)
 8002152:	4694      	mov	ip, r2
 8002154:	4463      	add	r3, ip
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
 8002158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215a:	2200      	movs	r2, #0
 800215c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800215e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0011      	movs	r1, r2
 8002166:	0018      	movs	r0, r3
 8002168:	f005 fb46 	bl	80077f8 <HAL_PCD_DataInStageCallback>
 800216c:	e058      	b.n	8002220 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800216e:	234a      	movs	r3, #74	; 0x4a
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4013      	ands	r3, r2
 800217a:	d149      	bne.n	8002210 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2250      	movs	r2, #80	; 0x50
 8002182:	5a9b      	ldrh	r3, [r3, r2]
 8002184:	b29b      	uxth	r3, r3
 8002186:	001a      	movs	r2, r3
 8002188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	18d2      	adds	r2, r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	18d3      	adds	r3, r2, r3
 8002196:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <PCD_EP_ISR_Handler+0x808>)
 8002198:	4694      	mov	ip, r2
 800219a:	4463      	add	r3, ip
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	2140      	movs	r1, #64	; 0x40
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	0592      	lsls	r2, r2, #22
 80021a4:	0d92      	lsrs	r2, r2, #22
 80021a6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80021a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d907      	bls.n	80021c4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80021b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	1ad2      	subs	r2, r2, r3
 80021be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c0:	619a      	str	r2, [r3, #24]
 80021c2:	e002      	b.n	80021ca <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80021c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80021ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d107      	bne.n	80021e2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0011      	movs	r1, r2
 80021da:	0018      	movs	r0, r3
 80021dc:	f005 fb0c 	bl	80077f8 <HAL_PCD_DataInStageCallback>
 80021e0:	e01e      	b.n	8002220 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80021e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	2140      	movs	r1, #64	; 0x40
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	18d2      	adds	r2, r2, r3
 80021ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80021f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	187b      	adds	r3, r7, r1
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	18d2      	adds	r2, r2, r3
 80021fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f002 fa85 	bl	8004718 <USB_EPStartXfer>
 800220e:	e007      	b.n	8002220 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002210:	234a      	movs	r3, #74	; 0x4a
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0018      	movs	r0, r3
 800221c:	f000 f930 	bl	8002480 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2244      	movs	r2, #68	; 0x44
 8002226:	5a9b      	ldrh	r3, [r3, r2]
 8002228:	b29b      	uxth	r3, r3
 800222a:	b21b      	sxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	da01      	bge.n	8002234 <PCD_EP_ISR_Handler+0x7f8>
 8002230:	f7ff fc0a 	bl	8001a48 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b016      	add	sp, #88	; 0x58
 800223c:	bdb0      	pop	{r4, r5, r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	00000406 	.word	0x00000406
 8002244:	00000402 	.word	0x00000402

08002248 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	1dbb      	adds	r3, r7, #6
 8002254:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002256:	1dbb      	adds	r3, r7, #6
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	01db      	lsls	r3, r3, #7
 800225e:	4013      	ands	r3, r2
 8002260:	d100      	bne.n	8002264 <HAL_PCD_EP_DB_Receive+0x1c>
 8002262:	e07d      	b.n	8002360 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2250      	movs	r2, #80	; 0x50
 800226a:	5a9b      	ldrh	r3, [r3, r2]
 800226c:	b29b      	uxth	r3, r3
 800226e:	001a      	movs	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	18d2      	adds	r2, r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	4a7a      	ldr	r2, [pc, #488]	; (8002468 <HAL_PCD_EP_DB_Receive+0x220>)
 8002280:	4694      	mov	ip, r2
 8002282:	4463      	add	r3, ip
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	211a      	movs	r1, #26
 8002288:	187b      	adds	r3, r7, r1
 800228a:	0592      	lsls	r2, r2, #22
 800228c:	0d92      	lsrs	r2, r2, #22
 800228e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	187b      	adds	r3, r7, r1
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d307      	bcc.n	80022ac <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	187b      	adds	r3, r7, r1
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	1ad2      	subs	r2, r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	619a      	str	r2, [r3, #24]
 80022aa:	e002      	b.n	80022b2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d121      	bne.n	80022fe <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	001a      	movs	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	18d3      	adds	r3, r2, r3
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	2018      	movs	r0, #24
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	4966      	ldr	r1, [pc, #408]	; (800246c <HAL_PCD_EP_DB_Receive+0x224>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	183b      	adds	r3, r7, r0
 80022d8:	183a      	adds	r2, r7, r0
 80022da:	8812      	ldrh	r2, [r2, #0]
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0189      	lsls	r1, r1, #6
 80022e0:	404a      	eors	r2, r1
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	001a      	movs	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	18d3      	adds	r3, r2, r3
 80022f2:	183a      	adds	r2, r7, r0
 80022f4:	8812      	ldrh	r2, [r2, #0]
 80022f6:	495e      	ldr	r1, [pc, #376]	; (8002470 <HAL_PCD_EP_DB_Receive+0x228>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	b292      	uxth	r2, r2
 80022fc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022fe:	1dbb      	adds	r3, r7, #6
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	2240      	movs	r2, #64	; 0x40
 8002304:	4013      	ands	r3, r2
 8002306:	d01a      	beq.n	800233e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	001a      	movs	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	18d3      	adds	r3, r2, r3
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29a      	uxth	r2, r3
 800231a:	2016      	movs	r0, #22
 800231c:	183b      	adds	r3, r7, r0
 800231e:	4955      	ldr	r1, [pc, #340]	; (8002474 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002320:	400a      	ands	r2, r1
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	001a      	movs	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	18d3      	adds	r3, r2, r3
 8002332:	183a      	adds	r2, r7, r0
 8002334:	8812      	ldrh	r2, [r2, #0]
 8002336:	4950      	ldr	r1, [pc, #320]	; (8002478 <HAL_PCD_EP_DB_Receive+0x230>)
 8002338:	430a      	orrs	r2, r1
 800233a:	b292      	uxth	r2, r2
 800233c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800233e:	241a      	movs	r4, #26
 8002340:	193b      	adds	r3, r7, r4
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d100      	bne.n	800234a <HAL_PCD_EP_DB_Receive+0x102>
 8002348:	e086      	b.n	8002458 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	6959      	ldr	r1, [r3, #20]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	891a      	ldrh	r2, [r3, #8]
 8002356:	193b      	adds	r3, r7, r4
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f003 fc98 	bl	8005c8e <USB_ReadPMA>
 800235e:	e07b      	b.n	8002458 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2250      	movs	r2, #80	; 0x50
 8002366:	5a9b      	ldrh	r3, [r3, r2]
 8002368:	b29b      	uxth	r3, r3
 800236a:	001a      	movs	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	18d2      	adds	r2, r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	18d3      	adds	r3, r2, r3
 800237a:	4a40      	ldr	r2, [pc, #256]	; (800247c <HAL_PCD_EP_DB_Receive+0x234>)
 800237c:	4694      	mov	ip, r2
 800237e:	4463      	add	r3, ip
 8002380:	881a      	ldrh	r2, [r3, #0]
 8002382:	211a      	movs	r1, #26
 8002384:	187b      	adds	r3, r7, r1
 8002386:	0592      	lsls	r2, r2, #22
 8002388:	0d92      	lsrs	r2, r2, #22
 800238a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	187b      	adds	r3, r7, r1
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d307      	bcc.n	80023a8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	699a      	ldr	r2, [r3, #24]
 800239c:	187b      	adds	r3, r7, r1
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	1ad2      	subs	r2, r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	619a      	str	r2, [r3, #24]
 80023a6:	e002      	b.n	80023ae <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d121      	bne.n	80023fa <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	001a      	movs	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	18d3      	adds	r3, r2, r3
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	201e      	movs	r0, #30
 80023ca:	183b      	adds	r3, r7, r0
 80023cc:	4927      	ldr	r1, [pc, #156]	; (800246c <HAL_PCD_EP_DB_Receive+0x224>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	801a      	strh	r2, [r3, #0]
 80023d2:	183b      	adds	r3, r7, r0
 80023d4:	183a      	adds	r2, r7, r0
 80023d6:	8812      	ldrh	r2, [r2, #0]
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0189      	lsls	r1, r1, #6
 80023dc:	404a      	eors	r2, r1
 80023de:	801a      	strh	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	001a      	movs	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	18d3      	adds	r3, r2, r3
 80023ee:	183a      	adds	r2, r7, r0
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	491f      	ldr	r1, [pc, #124]	; (8002470 <HAL_PCD_EP_DB_Receive+0x228>)
 80023f4:	430a      	orrs	r2, r1
 80023f6:	b292      	uxth	r2, r2
 80023f8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023fa:	1dbb      	adds	r3, r7, #6
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	4013      	ands	r3, r2
 8002402:	d11a      	bne.n	800243a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	001a      	movs	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	18d3      	adds	r3, r2, r3
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29a      	uxth	r2, r3
 8002416:	201c      	movs	r0, #28
 8002418:	183b      	adds	r3, r7, r0
 800241a:	4916      	ldr	r1, [pc, #88]	; (8002474 <HAL_PCD_EP_DB_Receive+0x22c>)
 800241c:	400a      	ands	r2, r1
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	001a      	movs	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	18d3      	adds	r3, r2, r3
 800242e:	183a      	adds	r2, r7, r0
 8002430:	8812      	ldrh	r2, [r2, #0]
 8002432:	4911      	ldr	r1, [pc, #68]	; (8002478 <HAL_PCD_EP_DB_Receive+0x230>)
 8002434:	430a      	orrs	r2, r1
 8002436:	b292      	uxth	r2, r2
 8002438:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800243a:	241a      	movs	r4, #26
 800243c:	193b      	adds	r3, r7, r4
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6959      	ldr	r1, [r3, #20]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	895a      	ldrh	r2, [r3, #10]
 8002450:	193b      	adds	r3, r7, r4
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	f003 fc1b 	bl	8005c8e <USB_ReadPMA>
    }
  }

  return count;
 8002458:	231a      	movs	r3, #26
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	881b      	ldrh	r3, [r3, #0]
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b009      	add	sp, #36	; 0x24
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	00000402 	.word	0x00000402
 800246c:	ffffbf8f 	.word	0xffffbf8f
 8002470:	ffff8080 	.word	0xffff8080
 8002474:	ffff8f8f 	.word	0xffff8f8f
 8002478:	ffff80c0 	.word	0xffff80c0
 800247c:	00000406 	.word	0x00000406

08002480 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b0a4      	sub	sp, #144	; 0x90
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	1dbb      	adds	r3, r7, #6
 800248c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800248e:	1dbb      	adds	r3, r7, #6
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	2240      	movs	r2, #64	; 0x40
 8002494:	4013      	ands	r3, r2
 8002496:	d100      	bne.n	800249a <HAL_PCD_EP_DB_Transmit+0x1a>
 8002498:	e1e4      	b.n	8002864 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2250      	movs	r2, #80	; 0x50
 80024a0:	5a9b      	ldrh	r3, [r3, r2]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	001a      	movs	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	18d2      	adds	r2, r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	18d3      	adds	r3, r2, r3
 80024b4:	4ad0      	ldr	r2, [pc, #832]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x378>)
 80024b6:	4694      	mov	ip, r2
 80024b8:	4463      	add	r3, ip
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	2186      	movs	r1, #134	; 0x86
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	0592      	lsls	r2, r2, #22
 80024c2:	0d92      	lsrs	r2, r2, #22
 80024c4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d907      	bls.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	1ad2      	subs	r2, r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	619a      	str	r2, [r3, #24]
 80024e0:	e002      	b.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d000      	beq.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x72>
 80024f0:	e0b5      	b.n	800265e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d125      	bne.n	8002546 <HAL_PCD_EP_DB_Transmit+0xc6>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2250      	movs	r2, #80	; 0x50
 8002506:	5a9b      	ldrh	r3, [r3, r2]
 8002508:	b29b      	uxth	r3, r3
 800250a:	001a      	movs	r2, r3
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	189b      	adds	r3, r3, r2
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	00da      	lsls	r2, r3, #3
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	18d3      	adds	r3, r2, r3
 800251c:	4ab6      	ldr	r2, [pc, #728]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x378>)
 800251e:	4694      	mov	ip, r2
 8002520:	4463      	add	r3, ip
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
 8002524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	059b      	lsls	r3, r3, #22
 800252c:	0d9b      	lsrs	r3, r3, #22
 800252e:	b29a      	uxth	r2, r3
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	4ab0      	ldr	r2, [pc, #704]	; (80027fc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800253c:	4313      	orrs	r3, r2
 800253e:	b29a      	uxth	r2, r3
 8002540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e01b      	b.n	800257e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d117      	bne.n	800257e <HAL_PCD_EP_DB_Transmit+0xfe>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2250      	movs	r2, #80	; 0x50
 800255a:	5a9b      	ldrh	r3, [r3, r2]
 800255c:	b29b      	uxth	r3, r3
 800255e:	001a      	movs	r2, r3
 8002560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002562:	189b      	adds	r3, r3, r2
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00da      	lsls	r2, r3, #3
 800256c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256e:	18d3      	adds	r3, r2, r3
 8002570:	4aa1      	ldr	r2, [pc, #644]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002572:	4694      	mov	ip, r2
 8002574:	4463      	add	r3, ip
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	785b      	ldrb	r3, [r3, #1]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d125      	bne.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x158>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2250      	movs	r2, #80	; 0x50
 8002598:	5a9b      	ldrh	r3, [r3, r2]
 800259a:	b29b      	uxth	r3, r3
 800259c:	001a      	movs	r2, r3
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	189b      	adds	r3, r3, r2
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	00da      	lsls	r2, r3, #3
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	18d3      	adds	r3, r2, r3
 80025ae:	4a94      	ldr	r2, [pc, #592]	; (8002800 <HAL_PCD_EP_DB_Transmit+0x380>)
 80025b0:	4694      	mov	ip, r2
 80025b2:	4463      	add	r3, ip
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	059b      	lsls	r3, r3, #22
 80025be:	0d9b      	lsrs	r3, r3, #22
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	801a      	strh	r2, [r3, #0]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4a8b      	ldr	r2, [pc, #556]	; (80027fc <HAL_PCD_EP_DB_Transmit+0x37c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	801a      	strh	r2, [r3, #0]
 80025d6:	e018      	b.n	800260a <HAL_PCD_EP_DB_Transmit+0x18a>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d114      	bne.n	800260a <HAL_PCD_EP_DB_Transmit+0x18a>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2250      	movs	r2, #80	; 0x50
 80025e6:	5a9b      	ldrh	r3, [r3, r2]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	001a      	movs	r2, r3
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	00da      	lsls	r2, r3, #3
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	18d3      	adds	r3, r2, r3
 80025fc:	4a80      	ldr	r2, [pc, #512]	; (8002800 <HAL_PCD_EP_DB_Transmit+0x380>)
 80025fe:	4694      	mov	ip, r2
 8002600:	4463      	add	r3, ip
 8002602:	623b      	str	r3, [r7, #32]
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	2200      	movs	r2, #0
 8002608:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	0011      	movs	r1, r2
 8002612:	0018      	movs	r0, r3
 8002614:	f005 f8f0 	bl	80077f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002618:	1dbb      	adds	r3, r7, #6
 800261a:	881a      	ldrh	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	01db      	lsls	r3, r3, #7
 8002620:	4013      	ands	r3, r2
 8002622:	d100      	bne.n	8002626 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8002624:	e309      	b.n	8002c3a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	001a      	movs	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	18d3      	adds	r3, r2, r3
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29a      	uxth	r2, r3
 8002638:	2016      	movs	r0, #22
 800263a:	183b      	adds	r3, r7, r0
 800263c:	4971      	ldr	r1, [pc, #452]	; (8002804 <HAL_PCD_EP_DB_Transmit+0x384>)
 800263e:	400a      	ands	r2, r1
 8002640:	801a      	strh	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	001a      	movs	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	18d3      	adds	r3, r2, r3
 8002650:	183a      	adds	r2, r7, r0
 8002652:	8812      	ldrh	r2, [r2, #0]
 8002654:	496c      	ldr	r1, [pc, #432]	; (8002808 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002656:	430a      	orrs	r2, r1
 8002658:	b292      	uxth	r2, r2
 800265a:	801a      	strh	r2, [r3, #0]
 800265c:	e2ed      	b.n	8002c3a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800265e:	1dbb      	adds	r3, r7, #6
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	01db      	lsls	r3, r3, #7
 8002666:	4013      	ands	r3, r2
 8002668:	d01a      	beq.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	001a      	movs	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	18d3      	adds	r3, r2, r3
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29a      	uxth	r2, r3
 800267c:	208a      	movs	r0, #138	; 0x8a
 800267e:	183b      	adds	r3, r7, r0
 8002680:	4960      	ldr	r1, [pc, #384]	; (8002804 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002682:	400a      	ands	r2, r1
 8002684:	801a      	strh	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	001a      	movs	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	18d3      	adds	r3, r2, r3
 8002694:	183a      	adds	r2, r7, r0
 8002696:	8812      	ldrh	r2, [r2, #0]
 8002698:	495b      	ldr	r1, [pc, #364]	; (8002808 <HAL_PCD_EP_DB_Transmit+0x388>)
 800269a:	430a      	orrs	r2, r1
 800269c:	b292      	uxth	r2, r2
 800269e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2224      	movs	r2, #36	; 0x24
 80026a4:	5c9b      	ldrb	r3, [r3, r2]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d000      	beq.n	80026ac <HAL_PCD_EP_DB_Transmit+0x22c>
 80026aa:	e2c6      	b.n	8002c3a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	2186      	movs	r1, #134	; 0x86
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	18d2      	adds	r2, r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	18d2      	adds	r2, r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d30c      	bcc.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	218c      	movs	r1, #140	; 0x8c
 80026dc:	187a      	adds	r2, r7, r1
 80026de:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1ad2      	subs	r2, r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	621a      	str	r2, [r3, #32]
 80026ee:	e01a      	b.n	8002726 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80026f8:	2386      	movs	r3, #134	; 0x86
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	228c      	movs	r2, #140	; 0x8c
 8002700:	18ba      	adds	r2, r7, r2
 8002702:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]
 800270c:	e00b      	b.n	8002726 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2224      	movs	r2, #36	; 0x24
 8002712:	2100      	movs	r1, #0
 8002714:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	228c      	movs	r2, #140	; 0x8c
 800271c:	18ba      	adds	r2, r7, r2
 800271e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	785b      	ldrb	r3, [r3, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d000      	beq.n	8002730 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800272e:	e06d      	b.n	800280c <HAL_PCD_EP_DB_Transmit+0x38c>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2250      	movs	r2, #80	; 0x50
 800273c:	5a9b      	ldrh	r3, [r3, r2]
 800273e:	b29b      	uxth	r3, r3
 8002740:	001a      	movs	r2, r3
 8002742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002744:	189b      	adds	r3, r3, r2
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	00da      	lsls	r2, r3, #3
 800274e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002750:	18d3      	adds	r3, r2, r3
 8002752:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002754:	4694      	mov	ip, r2
 8002756:	4463      	add	r3, ip
 8002758:	63bb      	str	r3, [r7, #56]	; 0x38
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	059b      	lsls	r3, r3, #22
 8002762:	0d9b      	lsrs	r3, r3, #22
 8002764:	b29a      	uxth	r2, r3
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	228c      	movs	r2, #140	; 0x8c
 800276c:	18bb      	adds	r3, r7, r2
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b3e      	cmp	r3, #62	; 0x3e
 8002772:	d91a      	bls.n	80027aa <HAL_PCD_EP_DB_Transmit+0x32a>
 8002774:	18bb      	adds	r3, r7, r2
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	64bb      	str	r3, [r7, #72]	; 0x48
 800277c:	18bb      	adds	r3, r7, r2
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	221f      	movs	r2, #31
 8002782:	4013      	ands	r3, r2
 8002784:	d102      	bne.n	800278c <HAL_PCD_EP_DB_Transmit+0x30c>
 8002786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002788:	3b01      	subs	r3, #1
 800278a:	64bb      	str	r3, [r7, #72]	; 0x48
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29a      	uxth	r2, r3
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	b29b      	uxth	r3, r3
 8002796:	029b      	lsls	r3, r3, #10
 8002798:	b29b      	uxth	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <HAL_PCD_EP_DB_Transmit+0x37c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	e04f      	b.n	800284a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80027aa:	238c      	movs	r3, #140	; 0x8c
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d108      	bne.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x346>
 80027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4a10      	ldr	r2, [pc, #64]	; (80027fc <HAL_PCD_EP_DB_Transmit+0x37c>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	b29a      	uxth	r2, r3
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	801a      	strh	r2, [r3, #0]
 80027c4:	e041      	b.n	800284a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80027c6:	228c      	movs	r2, #140	; 0x8c
 80027c8:	18bb      	adds	r3, r7, r2
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80027d0:	18bb      	adds	r3, r7, r2
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	d002      	beq.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x360>
 80027da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027dc:	3301      	adds	r3, #1
 80027de:	64bb      	str	r3, [r7, #72]	; 0x48
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	029b      	lsls	r3, r3, #10
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4313      	orrs	r3, r2
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	e028      	b.n	800284a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80027f8:	00000402 	.word	0x00000402
 80027fc:	ffff8000 	.word	0xffff8000
 8002800:	00000406 	.word	0x00000406
 8002804:	ffff8f8f 	.word	0xffff8f8f
 8002808:	ffffc080 	.word	0xffffc080
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d11a      	bne.n	800284a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	647b      	str	r3, [r7, #68]	; 0x44
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2250      	movs	r2, #80	; 0x50
 8002820:	5a9b      	ldrh	r3, [r3, r2]
 8002822:	b29b      	uxth	r3, r3
 8002824:	001a      	movs	r2, r3
 8002826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002828:	189b      	adds	r3, r3, r2
 800282a:	647b      	str	r3, [r7, #68]	; 0x44
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00da      	lsls	r2, r3, #3
 8002832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002834:	18d3      	adds	r3, r2, r3
 8002836:	4adb      	ldr	r2, [pc, #876]	; (8002ba4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002838:	4694      	mov	ip, r2
 800283a:	4463      	add	r3, ip
 800283c:	643b      	str	r3, [r7, #64]	; 0x40
 800283e:	238c      	movs	r3, #140	; 0x8c
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b29a      	uxth	r2, r3
 8002846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002848:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	6959      	ldr	r1, [r3, #20]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	891a      	ldrh	r2, [r3, #8]
 8002856:	238c      	movs	r3, #140	; 0x8c
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f003 f9cd 	bl	8005bfc <USB_WritePMA>
 8002862:	e1ea      	b.n	8002c3a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2250      	movs	r2, #80	; 0x50
 800286a:	5a9b      	ldrh	r3, [r3, r2]
 800286c:	b29b      	uxth	r3, r3
 800286e:	001a      	movs	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	18d2      	adds	r2, r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	4aca      	ldr	r2, [pc, #808]	; (8002ba8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002880:	4694      	mov	ip, r2
 8002882:	4463      	add	r3, ip
 8002884:	881a      	ldrh	r2, [r3, #0]
 8002886:	2186      	movs	r1, #134	; 0x86
 8002888:	187b      	adds	r3, r7, r1
 800288a:	0592      	lsls	r2, r2, #22
 800288c:	0d92      	lsrs	r2, r2, #22
 800288e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	187b      	adds	r3, r7, r1
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d307      	bcc.n	80028ac <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	1ad2      	subs	r2, r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	619a      	str	r2, [r3, #24]
 80028aa:	e002      	b.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d000      	beq.n	80028bc <HAL_PCD_EP_DB_Transmit+0x43c>
 80028ba:	e0bb      	b.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d125      	bne.n	8002910 <HAL_PCD_EP_DB_Transmit+0x490>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2250      	movs	r2, #80	; 0x50
 80028d0:	5a9b      	ldrh	r3, [r3, r2]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	001a      	movs	r2, r3
 80028d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028d8:	189b      	adds	r3, r3, r2
 80028da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	00da      	lsls	r2, r3, #3
 80028e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	4aaf      	ldr	r2, [pc, #700]	; (8002ba4 <HAL_PCD_EP_DB_Transmit+0x724>)
 80028e8:	4694      	mov	ip, r2
 80028ea:	4463      	add	r3, ip
 80028ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80028ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	059b      	lsls	r3, r3, #22
 80028f6:	0d9b      	lsrs	r3, r3, #22
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	4aa9      	ldr	r2, [pc, #676]	; (8002bac <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002906:	4313      	orrs	r3, r2
 8002908:	b29a      	uxth	r2, r3
 800290a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800290c:	801a      	strh	r2, [r3, #0]
 800290e:	e01b      	b.n	8002948 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d117      	bne.n	8002948 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	667b      	str	r3, [r7, #100]	; 0x64
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2250      	movs	r2, #80	; 0x50
 8002924:	5a9b      	ldrh	r3, [r3, r2]
 8002926:	b29b      	uxth	r3, r3
 8002928:	001a      	movs	r2, r3
 800292a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800292c:	189b      	adds	r3, r3, r2
 800292e:	667b      	str	r3, [r7, #100]	; 0x64
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	00da      	lsls	r2, r3, #3
 8002936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002938:	18d3      	adds	r3, r2, r3
 800293a:	4a9a      	ldr	r2, [pc, #616]	; (8002ba4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800293c:	4694      	mov	ip, r2
 800293e:	4463      	add	r3, ip
 8002940:	663b      	str	r3, [r7, #96]	; 0x60
 8002942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002944:	2200      	movs	r2, #0
 8002946:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	677b      	str	r3, [r7, #116]	; 0x74
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d12b      	bne.n	80029ae <HAL_PCD_EP_DB_Transmit+0x52e>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2250      	movs	r2, #80	; 0x50
 8002962:	5a9b      	ldrh	r3, [r3, r2]
 8002964:	b29b      	uxth	r3, r3
 8002966:	001a      	movs	r2, r3
 8002968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296a:	189b      	adds	r3, r3, r2
 800296c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	00da      	lsls	r2, r3, #3
 8002974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002976:	18d3      	adds	r3, r2, r3
 8002978:	4a8b      	ldr	r2, [pc, #556]	; (8002ba8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800297a:	4694      	mov	ip, r2
 800297c:	4463      	add	r3, ip
 800297e:	2180      	movs	r1, #128	; 0x80
 8002980:	187a      	adds	r2, r7, r1
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	187b      	adds	r3, r7, r1
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	059b      	lsls	r3, r3, #22
 800298e:	0d9b      	lsrs	r3, r3, #22
 8002990:	b29a      	uxth	r2, r3
 8002992:	187b      	adds	r3, r7, r1
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	801a      	strh	r2, [r3, #0]
 8002998:	187b      	adds	r3, r7, r1
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4a82      	ldr	r2, [pc, #520]	; (8002bac <HAL_PCD_EP_DB_Transmit+0x72c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	801a      	strh	r2, [r3, #0]
 80029ac:	e018      	b.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x560>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d114      	bne.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x560>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2250      	movs	r2, #80	; 0x50
 80029bc:	5a9b      	ldrh	r3, [r3, r2]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	001a      	movs	r2, r3
 80029c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	677b      	str	r3, [r7, #116]	; 0x74
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	00da      	lsls	r2, r3, #3
 80029ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d0:	18d3      	adds	r3, r2, r3
 80029d2:	4a75      	ldr	r2, [pc, #468]	; (8002ba8 <HAL_PCD_EP_DB_Transmit+0x728>)
 80029d4:	4694      	mov	ip, r2
 80029d6:	4463      	add	r3, ip
 80029d8:	673b      	str	r3, [r7, #112]	; 0x70
 80029da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029dc:	2200      	movs	r2, #0
 80029de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	0011      	movs	r1, r2
 80029e8:	0018      	movs	r0, r3
 80029ea:	f004 ff05 	bl	80077f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029ee:	1dbb      	adds	r3, r7, #6
 80029f0:	881a      	ldrh	r2, [r3, #0]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	01db      	lsls	r3, r3, #7
 80029f6:	4013      	ands	r3, r2
 80029f8:	d000      	beq.n	80029fc <HAL_PCD_EP_DB_Transmit+0x57c>
 80029fa:	e11e      	b.n	8002c3a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	001a      	movs	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	18d3      	adds	r3, r2, r3
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	2088      	movs	r0, #136	; 0x88
 8002a10:	183b      	adds	r3, r7, r0
 8002a12:	4967      	ldr	r1, [pc, #412]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002a14:	400a      	ands	r2, r1
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	18d3      	adds	r3, r2, r3
 8002a26:	183a      	adds	r2, r7, r0
 8002a28:	8812      	ldrh	r2, [r2, #0]
 8002a2a:	4962      	ldr	r1, [pc, #392]	; (8002bb4 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	b292      	uxth	r2, r2
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	e102      	b.n	8002c3a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a34:	1dbb      	adds	r3, r7, #6
 8002a36:	881a      	ldrh	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	01db      	lsls	r3, r3, #7
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d11a      	bne.n	8002a76 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	001a      	movs	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	18d3      	adds	r3, r2, r3
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	204e      	movs	r0, #78	; 0x4e
 8002a54:	183b      	adds	r3, r7, r0
 8002a56:	4956      	ldr	r1, [pc, #344]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	001a      	movs	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	18d3      	adds	r3, r2, r3
 8002a6a:	183a      	adds	r2, r7, r0
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	4951      	ldr	r1, [pc, #324]	; (8002bb4 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002a70:	430a      	orrs	r2, r1
 8002a72:	b292      	uxth	r2, r2
 8002a74:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2224      	movs	r2, #36	; 0x24
 8002a7a:	5c9b      	ldrb	r3, [r3, r2]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d000      	beq.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x602>
 8002a80:	e0db      	b.n	8002c3a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	2186      	movs	r1, #134	; 0x86
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	18d2      	adds	r2, r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	18d2      	adds	r2, r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d30c      	bcc.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	218c      	movs	r1, #140	; 0x8c
 8002ab2:	187a      	adds	r2, r7, r1
 8002ab4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1ad2      	subs	r2, r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	621a      	str	r2, [r3, #32]
 8002ac4:	e01a      	b.n	8002afc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8002ace:	2386      	movs	r3, #134	; 0x86
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	228c      	movs	r2, #140	; 0x8c
 8002ad6:	18ba      	adds	r2, r7, r2
 8002ad8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2224      	movs	r2, #36	; 0x24
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]
 8002ae2:	e00b      	b.n	8002afc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	228c      	movs	r2, #140	; 0x8c
 8002aea:	18ba      	adds	r2, r7, r2
 8002aec:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2224      	movs	r2, #36	; 0x24
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	657b      	str	r3, [r7, #84]	; 0x54
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	785b      	ldrb	r3, [r3, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d000      	beq.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x68c>
 8002b0a:	e06e      	b.n	8002bea <HAL_PCD_EP_DB_Transmit+0x76a>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2250      	movs	r2, #80	; 0x50
 8002b18:	5a9b      	ldrh	r3, [r3, r2]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	001a      	movs	r2, r3
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b20:	189b      	adds	r3, r3, r2
 8002b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	00da      	lsls	r2, r3, #3
 8002b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2c:	18d3      	adds	r3, r2, r3
 8002b2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002b30:	4694      	mov	ip, r2
 8002b32:	4463      	add	r3, ip
 8002b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	059b      	lsls	r3, r3, #22
 8002b3e:	0d9b      	lsrs	r3, r3, #22
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	228c      	movs	r2, #140	; 0x8c
 8002b48:	18bb      	adds	r3, r7, r2
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b4e:	d91a      	bls.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x706>
 8002b50:	18bb      	adds	r3, r7, r2
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b58:	18bb      	adds	r3, r7, r2
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	221f      	movs	r2, #31
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d102      	bne.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8002b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b64:	3b01      	subs	r3, #1
 8002b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	e04d      	b.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002b86:	238c      	movs	r3, #140	; 0x8c
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d113      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x738>
 8002b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4a05      	ldr	r2, [pc, #20]	; (8002bac <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9e:	801a      	strh	r2, [r3, #0]
 8002ba0:	e03f      	b.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	00000402 	.word	0x00000402
 8002ba8:	00000406 	.word	0x00000406
 8002bac:	ffff8000 	.word	0xffff8000
 8002bb0:	ffff8f8f 	.word	0xffff8f8f
 8002bb4:	ffffc080 	.word	0xffffc080
 8002bb8:	228c      	movs	r2, #140	; 0x8c
 8002bba:	18bb      	adds	r3, r7, r2
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bc2:	18bb      	adds	r3, r7, r2
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d002      	beq.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x752>
 8002bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bce:	3301      	adds	r3, #1
 8002bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4313      	orrs	r3, r2
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	e01b      	b.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	785b      	ldrb	r3, [r3, #1]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d117      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2250      	movs	r2, #80	; 0x50
 8002bf8:	5a9b      	ldrh	r3, [r3, r2]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c00:	189b      	adds	r3, r3, r2
 8002c02:	657b      	str	r3, [r7, #84]	; 0x54
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	00da      	lsls	r2, r3, #3
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0c:	18d3      	adds	r3, r2, r3
 8002c0e:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <HAL_PCD_EP_DB_Transmit+0x814>)
 8002c10:	4694      	mov	ip, r2
 8002c12:	4463      	add	r3, ip
 8002c14:	653b      	str	r3, [r7, #80]	; 0x50
 8002c16:	238c      	movs	r3, #140	; 0x8c
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c20:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6959      	ldr	r1, [r3, #20]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	895a      	ldrh	r2, [r3, #10]
 8002c2e:	238c      	movs	r3, #140	; 0x8c
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f002 ffe1 	bl	8005bfc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	001a      	movs	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	18d3      	adds	r3, r2, r3
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	2014      	movs	r0, #20
 8002c4e:	183b      	adds	r3, r7, r0
 8002c50:	4911      	ldr	r1, [pc, #68]	; (8002c98 <HAL_PCD_EP_DB_Transmit+0x818>)
 8002c52:	400a      	ands	r2, r1
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	183b      	adds	r3, r7, r0
 8002c58:	183a      	adds	r2, r7, r0
 8002c5a:	8812      	ldrh	r2, [r2, #0]
 8002c5c:	2110      	movs	r1, #16
 8002c5e:	404a      	eors	r2, r1
 8002c60:	801a      	strh	r2, [r3, #0]
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	183a      	adds	r2, r7, r0
 8002c66:	8812      	ldrh	r2, [r2, #0]
 8002c68:	2120      	movs	r1, #32
 8002c6a:	404a      	eors	r2, r1
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	001a      	movs	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	18d3      	adds	r3, r2, r3
 8002c7c:	183a      	adds	r2, r7, r0
 8002c7e:	8812      	ldrh	r2, [r2, #0]
 8002c80:	4906      	ldr	r1, [pc, #24]	; (8002c9c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002c82:	430a      	orrs	r2, r1
 8002c84:	b292      	uxth	r2, r2
 8002c86:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b024      	add	sp, #144	; 0x90
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	00000406 	.word	0x00000406
 8002c98:	ffff8fbf 	.word	0xffff8fbf
 8002c9c:	ffff8080 	.word	0xffff8080

08002ca0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	0008      	movs	r0, r1
 8002caa:	0011      	movs	r1, r2
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	240a      	movs	r4, #10
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	1c02      	adds	r2, r0, #0
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	1c0a      	adds	r2, r1, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cbe:	0021      	movs	r1, r4
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	0013      	movs	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	189b      	adds	r3, r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	18d3      	adds	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e00b      	b.n	8002d00 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ce8:	230a      	movs	r3, #10
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	0013      	movs	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	3369      	adds	r3, #105	; 0x69
 8002cf8:	33ff      	adds	r3, #255	; 0xff
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d00:	2308      	movs	r3, #8
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d107      	bne.n	8002d1a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	80da      	strh	r2, [r3, #6]
 8002d18:	e00b      	b.n	8002d32 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0c1b      	lsrs	r3, r3, #16
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b007      	add	sp, #28
 8002d3a:	bd90      	pop	{r4, r7, pc}

08002d3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	23ba      	movs	r3, #186	; 0xba
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	2101      	movs	r1, #1
 8002d52:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	23b8      	movs	r3, #184	; 0xb8
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2254      	movs	r2, #84	; 0x54
 8002d62:	5a9b      	ldrh	r3, [r3, r2]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2201      	movs	r2, #1
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b299      	uxth	r1, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2254      	movs	r2, #84	; 0x54
 8002d70:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2254      	movs	r2, #84	; 0x54
 8002d76:	5a9b      	ldrh	r3, [r3, r2]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	b299      	uxth	r1, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2254      	movs	r2, #84	; 0x54
 8002d84:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	000a      	movs	r2, r1
 8002d9a:	1cfb      	adds	r3, r7, #3
 8002d9c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b002      	add	sp, #8
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b5b0      	push	{r4, r5, r7, lr}
 8002daa:	b08a      	sub	sp, #40	; 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f000 fbaf 	bl	800351a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dbc:	4bcf      	ldr	r3, [pc, #828]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	220c      	movs	r2, #12
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc6:	4bcd      	ldr	r3, [pc, #820]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	025b      	lsls	r3, r3, #9
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d100      	bne.n	8002dde <HAL_RCC_OscConfig+0x36>
 8002ddc:	e07e      	b.n	8002edc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d007      	beq.n	8002df4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d112      	bne.n	8002e10 <HAL_RCC_OscConfig+0x68>
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	025b      	lsls	r3, r3, #9
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d10d      	bne.n	8002e10 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	4bc1      	ldr	r3, [pc, #772]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d100      	bne.n	8002e02 <HAL_RCC_OscConfig+0x5a>
 8002e00:	e06b      	b.n	8002eda <HAL_RCC_OscConfig+0x132>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d167      	bne.n	8002eda <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f000 fb85 	bl	800351a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	025b      	lsls	r3, r3, #9
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_OscConfig+0x84>
 8002e1c:	4bb7      	ldr	r3, [pc, #732]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4bb6      	ldr	r3, [pc, #728]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	0249      	lsls	r1, r1, #9
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e027      	b.n	8002e7c <HAL_RCC_OscConfig+0xd4>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	23a0      	movs	r3, #160	; 0xa0
 8002e32:	02db      	lsls	r3, r3, #11
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d10e      	bne.n	8002e56 <HAL_RCC_OscConfig+0xae>
 8002e38:	4bb0      	ldr	r3, [pc, #704]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4baf      	ldr	r3, [pc, #700]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	02c9      	lsls	r1, r1, #11
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	4bad      	ldr	r3, [pc, #692]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4bac      	ldr	r3, [pc, #688]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e4c:	2180      	movs	r1, #128	; 0x80
 8002e4e:	0249      	lsls	r1, r1, #9
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e012      	b.n	8002e7c <HAL_RCC_OscConfig+0xd4>
 8002e56:	4ba9      	ldr	r3, [pc, #676]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4ba8      	ldr	r3, [pc, #672]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e5c:	49a8      	ldr	r1, [pc, #672]	; (8003100 <HAL_RCC_OscConfig+0x358>)
 8002e5e:	400a      	ands	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	4ba6      	ldr	r3, [pc, #664]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	025b      	lsls	r3, r3, #9
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4ba2      	ldr	r3, [pc, #648]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4ba1      	ldr	r3, [pc, #644]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002e76:	49a3      	ldr	r1, [pc, #652]	; (8003104 <HAL_RCC_OscConfig+0x35c>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d015      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fd fe9c 	bl	8000bc0 <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e8c:	e009      	b.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8e:	f7fd fe97 	bl	8000bc0 <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b64      	cmp	r3, #100	; 0x64
 8002e9a:	d902      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f000 fb3c 	bl	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ea2:	4b96      	ldr	r3, [pc, #600]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	029b      	lsls	r3, r3, #10
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d0ef      	beq.n	8002e8e <HAL_RCC_OscConfig+0xe6>
 8002eae:	e015      	b.n	8002edc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fd fe86 	bl	8000bc0 <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eba:	f7fd fe81 	bl	8000bc0 <HAL_GetTick>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	; 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e326      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ecc:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	029b      	lsls	r3, r3, #10
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x112>
 8002ed8:	e000      	b.n	8002edc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d100      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x140>
 8002ee6:	e08b      	b.n	8003000 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d13e      	bne.n	8002f78 <HAL_RCC_OscConfig+0x1d0>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d13b      	bne.n	8002f78 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002f00:	4b7e      	ldr	r3, [pc, #504]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2204      	movs	r2, #4
 8002f06:	4013      	ands	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_RCC_OscConfig+0x16c>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e302      	b.n	800351a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b79      	ldr	r3, [pc, #484]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a7b      	ldr	r2, [pc, #492]	; (8003108 <HAL_RCC_OscConfig+0x360>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	4b75      	ldr	r3, [pc, #468]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f2a:	4b74      	ldr	r3, [pc, #464]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2209      	movs	r2, #9
 8002f30:	4393      	bics	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	4b71      	ldr	r3, [pc, #452]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f3c:	f000 fc40 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8002f40:	0001      	movs	r1, r0
 8002f42:	4b6e      	ldr	r3, [pc, #440]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	220f      	movs	r2, #15
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	4a6f      	ldr	r2, [pc, #444]	; (800310c <HAL_RCC_OscConfig+0x364>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	000a      	movs	r2, r1
 8002f52:	40da      	lsrs	r2, r3
 8002f54:	4b6e      	ldr	r3, [pc, #440]	; (8003110 <HAL_RCC_OscConfig+0x368>)
 8002f56:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002f58:	4b6e      	ldr	r3, [pc, #440]	; (8003114 <HAL_RCC_OscConfig+0x36c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2513      	movs	r5, #19
 8002f5e:	197c      	adds	r4, r7, r5
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7fd fde7 	bl	8000b34 <HAL_InitTick>
 8002f66:	0003      	movs	r3, r0
 8002f68:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002f6a:	197b      	adds	r3, r7, r5
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d046      	beq.n	8003000 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002f72:	197b      	adds	r3, r7, r5
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	e2d0      	b.n	800351a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d027      	beq.n	8002fce <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2209      	movs	r2, #9
 8002f84:	4393      	bics	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fd fe16 	bl	8000bc0 <HAL_GetTick>
 8002f94:	0003      	movs	r3, r0
 8002f96:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fd fe11 	bl	8000bc0 <HAL_GetTick>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e2b6      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d0f1      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b51      	ldr	r3, [pc, #324]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a53      	ldr	r2, [pc, #332]	; (8003108 <HAL_RCC_OscConfig+0x360>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	021a      	lsls	r2, r3, #8
 8002fc6:	4b4d      	ldr	r3, [pc, #308]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	e018      	b.n	8003000 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b4b      	ldr	r3, [pc, #300]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b4a      	ldr	r3, [pc, #296]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	438a      	bics	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fd fdf1 	bl	8000bc0 <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fd fdec 	bl	8000bc0 <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e291      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d1f1      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2210      	movs	r2, #16
 8003006:	4013      	ands	r3, r2
 8003008:	d100      	bne.n	800300c <HAL_RCC_OscConfig+0x264>
 800300a:	e0a1      	b.n	8003150 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d140      	bne.n	8003094 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4013      	ands	r3, r2
 800301c:	d005      	beq.n	800302a <HAL_RCC_OscConfig+0x282>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e277      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800302a:	4b34      	ldr	r3, [pc, #208]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4a3a      	ldr	r2, [pc, #232]	; (8003118 <HAL_RCC_OscConfig+0x370>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003038:	4b30      	ldr	r3, [pc, #192]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800303e:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	0a19      	lsrs	r1, r3, #8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	061a      	lsls	r2, r3, #24
 800304c:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	0b5b      	lsrs	r3, r3, #13
 8003058:	3301      	adds	r3, #1
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	0212      	lsls	r2, r2, #8
 800305e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003060:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	210f      	movs	r1, #15
 8003068:	400b      	ands	r3, r1
 800306a:	4928      	ldr	r1, [pc, #160]	; (800310c <HAL_RCC_OscConfig+0x364>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_OscConfig+0x368>)
 8003072:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003074:	4b27      	ldr	r3, [pc, #156]	; (8003114 <HAL_RCC_OscConfig+0x36c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2513      	movs	r5, #19
 800307a:	197c      	adds	r4, r7, r5
 800307c:	0018      	movs	r0, r3
 800307e:	f7fd fd59 	bl	8000b34 <HAL_InitTick>
 8003082:	0003      	movs	r3, r0
 8003084:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003086:	197b      	adds	r3, r7, r5
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d060      	beq.n	8003150 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800308e:	197b      	adds	r3, r7, r5
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	e242      	b.n	800351a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d03f      	beq.n	800311c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 80030a2:	2180      	movs	r1, #128	; 0x80
 80030a4:	0049      	lsls	r1, r1, #1
 80030a6:	430a      	orrs	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fd fd89 	bl	8000bc0 <HAL_GetTick>
 80030ae:	0003      	movs	r3, r0
 80030b0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b4:	f7fd fd84 	bl	8000bc0 <HAL_GetTick>
 80030b8:	0002      	movs	r2, r0
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e229      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4013      	ands	r3, r2
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a10      	ldr	r2, [pc, #64]	; (8003118 <HAL_RCC_OscConfig+0x370>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	0a19      	lsrs	r1, r3, #8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	061a      	lsls	r2, r3, #24
 80030f4:	4b01      	ldr	r3, [pc, #4]	; (80030fc <HAL_RCC_OscConfig+0x354>)
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e029      	b.n	8003150 <HAL_RCC_OscConfig+0x3a8>
 80030fc:	40021000 	.word	0x40021000
 8003100:	fffeffff 	.word	0xfffeffff
 8003104:	fffbffff 	.word	0xfffbffff
 8003108:	ffffe0ff 	.word	0xffffe0ff
 800310c:	08007e48 	.word	0x08007e48
 8003110:	20000180 	.word	0x20000180
 8003114:	20000184 	.word	0x20000184
 8003118:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800311c:	4bbd      	ldr	r3, [pc, #756]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4bbc      	ldr	r3, [pc, #752]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003122:	49bd      	ldr	r1, [pc, #756]	; (8003418 <HAL_RCC_OscConfig+0x670>)
 8003124:	400a      	ands	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fd fd4a 	bl	8000bc0 <HAL_GetTick>
 800312c:	0003      	movs	r3, r0
 800312e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003132:	f7fd fd45 	bl	8000bc0 <HAL_GetTick>
 8003136:	0002      	movs	r2, r0
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1ea      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003144:	4bb3      	ldr	r3, [pc, #716]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4013      	ands	r3, r2
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2208      	movs	r2, #8
 8003156:	4013      	ands	r3, r2
 8003158:	d036      	beq.n	80031c8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d019      	beq.n	8003196 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003162:	4bac      	ldr	r3, [pc, #688]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003166:	4bab      	ldr	r3, [pc, #684]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003168:	2101      	movs	r1, #1
 800316a:	430a      	orrs	r2, r1
 800316c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7fd fd27 	bl	8000bc0 <HAL_GetTick>
 8003172:	0003      	movs	r3, r0
 8003174:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003178:	f7fd fd22 	bl	8000bc0 <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1c7      	b.n	800351a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800318a:	4ba2      	ldr	r3, [pc, #648]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 800318c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318e:	2202      	movs	r2, #2
 8003190:	4013      	ands	r3, r2
 8003192:	d0f1      	beq.n	8003178 <HAL_RCC_OscConfig+0x3d0>
 8003194:	e018      	b.n	80031c8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003196:	4b9f      	ldr	r3, [pc, #636]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800319a:	4b9e      	ldr	r3, [pc, #632]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 800319c:	2101      	movs	r1, #1
 800319e:	438a      	bics	r2, r1
 80031a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a2:	f7fd fd0d 	bl	8000bc0 <HAL_GetTick>
 80031a6:	0003      	movs	r3, r0
 80031a8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fd fd08 	bl	8000bc0 <HAL_GetTick>
 80031b0:	0002      	movs	r2, r0
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1ad      	b.n	800351a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031be:	4b95      	ldr	r3, [pc, #596]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	2202      	movs	r2, #2
 80031c4:	4013      	ands	r3, r2
 80031c6:	d1f1      	bne.n	80031ac <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2204      	movs	r2, #4
 80031ce:	4013      	ands	r3, r2
 80031d0:	d100      	bne.n	80031d4 <HAL_RCC_OscConfig+0x42c>
 80031d2:	e0ae      	b.n	8003332 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d4:	2027      	movs	r0, #39	; 0x27
 80031d6:	183b      	adds	r3, r7, r0
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031dc:	4b8d      	ldr	r3, [pc, #564]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80031de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	055b      	lsls	r3, r3, #21
 80031e4:	4013      	ands	r3, r2
 80031e6:	d109      	bne.n	80031fc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	4b8a      	ldr	r3, [pc, #552]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80031ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ec:	4b89      	ldr	r3, [pc, #548]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	0549      	lsls	r1, r1, #21
 80031f2:	430a      	orrs	r2, r1
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031f6:	183b      	adds	r3, r7, r0
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	4b87      	ldr	r3, [pc, #540]	; (800341c <HAL_RCC_OscConfig+0x674>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4013      	ands	r3, r2
 8003206:	d11a      	bne.n	800323e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003208:	4b84      	ldr	r3, [pc, #528]	; (800341c <HAL_RCC_OscConfig+0x674>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b83      	ldr	r3, [pc, #524]	; (800341c <HAL_RCC_OscConfig+0x674>)
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	0049      	lsls	r1, r1, #1
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fd fcd3 	bl	8000bc0 <HAL_GetTick>
 800321a:	0003      	movs	r3, r0
 800321c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003220:	f7fd fcce 	bl	8000bc0 <HAL_GetTick>
 8003224:	0002      	movs	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e173      	b.n	800351a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003232:	4b7a      	ldr	r3, [pc, #488]	; (800341c <HAL_RCC_OscConfig+0x674>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4013      	ands	r3, r2
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	429a      	cmp	r2, r3
 8003248:	d107      	bne.n	800325a <HAL_RCC_OscConfig+0x4b2>
 800324a:	4b72      	ldr	r3, [pc, #456]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 800324c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800324e:	4b71      	ldr	r3, [pc, #452]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	0049      	lsls	r1, r1, #1
 8003254:	430a      	orrs	r2, r1
 8003256:	651a      	str	r2, [r3, #80]	; 0x50
 8003258:	e031      	b.n	80032be <HAL_RCC_OscConfig+0x516>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x4d4>
 8003262:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003266:	4b6b      	ldr	r3, [pc, #428]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003268:	496b      	ldr	r1, [pc, #428]	; (8003418 <HAL_RCC_OscConfig+0x670>)
 800326a:	400a      	ands	r2, r1
 800326c:	651a      	str	r2, [r3, #80]	; 0x50
 800326e:	4b69      	ldr	r3, [pc, #420]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003272:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003274:	496a      	ldr	r1, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x678>)
 8003276:	400a      	ands	r2, r1
 8003278:	651a      	str	r2, [r3, #80]	; 0x50
 800327a:	e020      	b.n	80032be <HAL_RCC_OscConfig+0x516>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	23a0      	movs	r3, #160	; 0xa0
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	429a      	cmp	r2, r3
 8003286:	d10e      	bne.n	80032a6 <HAL_RCC_OscConfig+0x4fe>
 8003288:	4b62      	ldr	r3, [pc, #392]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 800328a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800328c:	4b61      	ldr	r3, [pc, #388]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 800328e:	2180      	movs	r1, #128	; 0x80
 8003290:	00c9      	lsls	r1, r1, #3
 8003292:	430a      	orrs	r2, r1
 8003294:	651a      	str	r2, [r3, #80]	; 0x50
 8003296:	4b5f      	ldr	r3, [pc, #380]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800329a:	4b5e      	ldr	r3, [pc, #376]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	0049      	lsls	r1, r1, #1
 80032a0:	430a      	orrs	r2, r1
 80032a2:	651a      	str	r2, [r3, #80]	; 0x50
 80032a4:	e00b      	b.n	80032be <HAL_RCC_OscConfig+0x516>
 80032a6:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80032a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032aa:	4b5a      	ldr	r3, [pc, #360]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80032ac:	495a      	ldr	r1, [pc, #360]	; (8003418 <HAL_RCC_OscConfig+0x670>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
 80032b2:	4b58      	ldr	r3, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80032b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b6:	4b57      	ldr	r3, [pc, #348]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80032b8:	4959      	ldr	r1, [pc, #356]	; (8003420 <HAL_RCC_OscConfig+0x678>)
 80032ba:	400a      	ands	r2, r1
 80032bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d015      	beq.n	80032f2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fd fc7b 	bl	8000bc0 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ce:	e009      	b.n	80032e4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fd fc76 	bl	8000bc0 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_RCC_OscConfig+0x67c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e11a      	b.n	800351a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032e4:	4b4b      	ldr	r3, [pc, #300]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80032e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4013      	ands	r3, r2
 80032ee:	d0ef      	beq.n	80032d0 <HAL_RCC_OscConfig+0x528>
 80032f0:	e014      	b.n	800331c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f2:	f7fd fc65 	bl	8000bc0 <HAL_GetTick>
 80032f6:	0003      	movs	r3, r0
 80032f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032fa:	e009      	b.n	8003310 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fd fc60 	bl	8000bc0 <HAL_GetTick>
 8003300:	0002      	movs	r2, r0
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	4a47      	ldr	r2, [pc, #284]	; (8003424 <HAL_RCC_OscConfig+0x67c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e104      	b.n	800351a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003310:	4b40      	ldr	r3, [pc, #256]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4013      	ands	r3, r2
 800331a:	d1ef      	bne.n	80032fc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800331c:	2327      	movs	r3, #39	; 0x27
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332a:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 800332c:	493e      	ldr	r1, [pc, #248]	; (8003428 <HAL_RCC_OscConfig+0x680>)
 800332e:	400a      	ands	r2, r1
 8003330:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2220      	movs	r2, #32
 8003338:	4013      	ands	r3, r2
 800333a:	d049      	beq.n	80033d0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d026      	beq.n	8003392 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003344:	4b33      	ldr	r3, [pc, #204]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	4b32      	ldr	r3, [pc, #200]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 800334a:	2101      	movs	r1, #1
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003356:	2101      	movs	r1, #1
 8003358:	430a      	orrs	r2, r1
 800335a:	635a      	str	r2, [r3, #52]	; 0x34
 800335c:	4b33      	ldr	r3, [pc, #204]	; (800342c <HAL_RCC_OscConfig+0x684>)
 800335e:	6a1a      	ldr	r2, [r3, #32]
 8003360:	4b32      	ldr	r3, [pc, #200]	; (800342c <HAL_RCC_OscConfig+0x684>)
 8003362:	2180      	movs	r1, #128	; 0x80
 8003364:	0189      	lsls	r1, r1, #6
 8003366:	430a      	orrs	r2, r1
 8003368:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fd fc29 	bl	8000bc0 <HAL_GetTick>
 800336e:	0003      	movs	r3, r0
 8003370:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003374:	f7fd fc24 	bl	8000bc0 <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0c9      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d0f1      	beq.n	8003374 <HAL_RCC_OscConfig+0x5cc>
 8003390:	e01e      	b.n	80033d0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 8003398:	2101      	movs	r1, #1
 800339a:	438a      	bics	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	4b23      	ldr	r3, [pc, #140]	; (800342c <HAL_RCC_OscConfig+0x684>)
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_RCC_OscConfig+0x684>)
 80033a4:	4922      	ldr	r1, [pc, #136]	; (8003430 <HAL_RCC_OscConfig+0x688>)
 80033a6:	400a      	ands	r2, r1
 80033a8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7fd fc09 	bl	8000bc0 <HAL_GetTick>
 80033ae:	0003      	movs	r3, r0
 80033b0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b4:	f7fd fc04 	bl	8000bc0 <HAL_GetTick>
 80033b8:	0002      	movs	r2, r0
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0a9      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033c6:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2202      	movs	r2, #2
 80033cc:	4013      	ands	r3, r2
 80033ce:	d1f1      	bne.n	80033b4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d100      	bne.n	80033da <HAL_RCC_OscConfig+0x632>
 80033d8:	e09e      	b.n	8003518 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	d100      	bne.n	80033e2 <HAL_RCC_OscConfig+0x63a>
 80033e0:	e077      	b.n	80034d2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d158      	bne.n	800349c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_OscConfig+0x66c>)
 80033f0:	4910      	ldr	r1, [pc, #64]	; (8003434 <HAL_RCC_OscConfig+0x68c>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fd fbe3 	bl	8000bc0 <HAL_GetTick>
 80033fa:	0003      	movs	r3, r0
 80033fc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033fe:	e01b      	b.n	8003438 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fd fbde 	bl	8000bc0 <HAL_GetTick>
 8003404:	0002      	movs	r2, r0
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d914      	bls.n	8003438 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e083      	b.n	800351a <HAL_RCC_OscConfig+0x772>
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	40021000 	.word	0x40021000
 8003418:	fffffeff 	.word	0xfffffeff
 800341c:	40007000 	.word	0x40007000
 8003420:	fffffbff 	.word	0xfffffbff
 8003424:	00001388 	.word	0x00001388
 8003428:	efffffff 	.word	0xefffffff
 800342c:	40010000 	.word	0x40010000
 8003430:	ffffdfff 	.word	0xffffdfff
 8003434:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003438:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	049b      	lsls	r3, r3, #18
 8003440:	4013      	ands	r3, r2
 8003442:	d1dd      	bne.n	8003400 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003444:	4b37      	ldr	r3, [pc, #220]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a37      	ldr	r2, [pc, #220]	; (8003528 <HAL_RCC_OscConfig+0x780>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345c:	431a      	orrs	r2, r3
 800345e:	4b31      	ldr	r3, [pc, #196]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 800346a:	2180      	movs	r1, #128	; 0x80
 800346c:	0449      	lsls	r1, r1, #17
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7fd fba5 	bl	8000bc0 <HAL_GetTick>
 8003476:	0003      	movs	r3, r0
 8003478:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd fba0 	bl	8000bc0 <HAL_GetTick>
 8003480:	0002      	movs	r2, r0
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e045      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800348e:	4b25      	ldr	r3, [pc, #148]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	049b      	lsls	r3, r3, #18
 8003496:	4013      	ands	r3, r2
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x6d4>
 800349a:	e03d      	b.n	8003518 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 80034a2:	4922      	ldr	r1, [pc, #136]	; (800352c <HAL_RCC_OscConfig+0x784>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fd fb8a 	bl	8000bc0 <HAL_GetTick>
 80034ac:	0003      	movs	r3, r0
 80034ae:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fd fb85 	bl	8000bc0 <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e02a      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	049b      	lsls	r3, r3, #18
 80034cc:	4013      	ands	r3, r2
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x70a>
 80034d0:	e022      	b.n	8003518 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e01d      	b.n	800351a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_OscConfig+0x77c>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	025b      	lsls	r3, r3, #9
 80034ea:	401a      	ands	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d10f      	bne.n	8003514 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	23f0      	movs	r3, #240	; 0xf0
 80034f8:	039b      	lsls	r3, r3, #14
 80034fa:	401a      	ands	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d107      	bne.n	8003514 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	23c0      	movs	r3, #192	; 0xc0
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	401a      	ands	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b00a      	add	sp, #40	; 0x28
 8003520:	bdb0      	pop	{r4, r5, r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	40021000 	.word	0x40021000
 8003528:	ff02ffff 	.word	0xff02ffff
 800352c:	feffffff 	.word	0xfeffffff

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b5b0      	push	{r4, r5, r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e128      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b96      	ldr	r3, [pc, #600]	; (80037a0 <HAL_RCC_ClockConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2201      	movs	r2, #1
 800354a:	4013      	ands	r3, r2
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d91e      	bls.n	8003590 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b93      	ldr	r3, [pc, #588]	; (80037a0 <HAL_RCC_ClockConfig+0x270>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2201      	movs	r2, #1
 8003558:	4393      	bics	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	4b90      	ldr	r3, [pc, #576]	; (80037a0 <HAL_RCC_ClockConfig+0x270>)
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003564:	f7fd fb2c 	bl	8000bc0 <HAL_GetTick>
 8003568:	0003      	movs	r3, r0
 800356a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356c:	e009      	b.n	8003582 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356e:	f7fd fb27 	bl	8000bc0 <HAL_GetTick>
 8003572:	0002      	movs	r2, r0
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	4a8a      	ldr	r2, [pc, #552]	; (80037a4 <HAL_RCC_ClockConfig+0x274>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e109      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b87      	ldr	r3, [pc, #540]	; (80037a0 <HAL_RCC_ClockConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2201      	movs	r2, #1
 8003588:	4013      	ands	r3, r2
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d1ee      	bne.n	800356e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800359a:	4b83      	ldr	r3, [pc, #524]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	22f0      	movs	r2, #240	; 0xf0
 80035a0:	4393      	bics	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	4b7f      	ldr	r3, [pc, #508]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 80035aa:	430a      	orrs	r2, r1
 80035ac:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2201      	movs	r2, #1
 80035b4:	4013      	ands	r3, r2
 80035b6:	d100      	bne.n	80035ba <HAL_RCC_ClockConfig+0x8a>
 80035b8:	e089      	b.n	80036ce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d107      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035c2:	4b79      	ldr	r3, [pc, #484]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	029b      	lsls	r3, r3, #10
 80035ca:	4013      	ands	r3, r2
 80035cc:	d120      	bne.n	8003610 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0e1      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035da:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	049b      	lsls	r3, r3, #18
 80035e2:	4013      	ands	r3, r2
 80035e4:	d114      	bne.n	8003610 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0d5      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035f2:	4b6d      	ldr	r3, [pc, #436]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2204      	movs	r2, #4
 80035f8:	4013      	ands	r3, r2
 80035fa:	d109      	bne.n	8003610 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0ca      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003600:	4b69      	ldr	r3, [pc, #420]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4013      	ands	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0c2      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003610:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2203      	movs	r2, #3
 8003616:	4393      	bics	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 8003620:	430a      	orrs	r2, r1
 8003622:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003624:	f7fd facc 	bl	8000bc0 <HAL_GetTick>
 8003628:	0003      	movs	r3, r0
 800362a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d111      	bne.n	8003658 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003634:	e009      	b.n	800364a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003636:	f7fd fac3 	bl	8000bc0 <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_RCC_ClockConfig+0x274>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0a5      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800364a:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	220c      	movs	r2, #12
 8003650:	4013      	ands	r3, r2
 8003652:	2b08      	cmp	r3, #8
 8003654:	d1ef      	bne.n	8003636 <HAL_RCC_ClockConfig+0x106>
 8003656:	e03a      	b.n	80036ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d111      	bne.n	8003684 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003660:	e009      	b.n	8003676 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003662:	f7fd faad 	bl	8000bc0 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <HAL_RCC_ClockConfig+0x274>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e08f      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003676:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	220c      	movs	r2, #12
 800367c:	4013      	ands	r3, r2
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d1ef      	bne.n	8003662 <HAL_RCC_ClockConfig+0x132>
 8003682:	e024      	b.n	80036ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d11b      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800368c:	e009      	b.n	80036a2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368e:	f7fd fa97 	bl	8000bc0 <HAL_GetTick>
 8003692:	0002      	movs	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	4a42      	ldr	r2, [pc, #264]	; (80037a4 <HAL_RCC_ClockConfig+0x274>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e079      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	220c      	movs	r2, #12
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d1ef      	bne.n	800368e <HAL_RCC_ClockConfig+0x15e>
 80036ae:	e00e      	b.n	80036ce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b0:	f7fd fa86 	bl	8000bc0 <HAL_GetTick>
 80036b4:	0002      	movs	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	4a3a      	ldr	r2, [pc, #232]	; (80037a4 <HAL_RCC_ClockConfig+0x274>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e068      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80036c4:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	220c      	movs	r2, #12
 80036ca:	4013      	ands	r3, r2
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ce:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_ClockConfig+0x270>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2201      	movs	r2, #1
 80036d4:	4013      	ands	r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d21e      	bcs.n	800371a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036dc:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <HAL_RCC_ClockConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2201      	movs	r2, #1
 80036e2:	4393      	bics	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_RCC_ClockConfig+0x270>)
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036ee:	f7fd fa67 	bl	8000bc0 <HAL_GetTick>
 80036f2:	0003      	movs	r3, r0
 80036f4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	e009      	b.n	800370c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f8:	f7fd fa62 	bl	8000bc0 <HAL_GetTick>
 80036fc:	0002      	movs	r2, r0
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <HAL_RCC_ClockConfig+0x274>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e044      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_ClockConfig+0x270>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2201      	movs	r2, #1
 8003712:	4013      	ands	r3, r2
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d1ee      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2204      	movs	r2, #4
 8003720:	4013      	ands	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a20      	ldr	r2, [pc, #128]	; (80037ac <HAL_RCC_ClockConfig+0x27c>)
 800372a:	4013      	ands	r3, r2
 800372c:	0019      	movs	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 8003734:	430a      	orrs	r2, r1
 8003736:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2208      	movs	r2, #8
 800373e:	4013      	ands	r3, r2
 8003740:	d00a      	beq.n	8003758 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	4a1a      	ldr	r2, [pc, #104]	; (80037b0 <HAL_RCC_ClockConfig+0x280>)
 8003748:	4013      	ands	r3, r2
 800374a:	0019      	movs	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	00da      	lsls	r2, r3, #3
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 8003754:	430a      	orrs	r2, r1
 8003756:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003758:	f000 f832 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800375c:	0001      	movs	r1, r0
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x278>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	220f      	movs	r2, #15
 8003766:	4013      	ands	r3, r2
 8003768:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <HAL_RCC_ClockConfig+0x284>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	000a      	movs	r2, r1
 800376e:	40da      	lsrs	r2, r3
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_RCC_ClockConfig+0x288>)
 8003772:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_RCC_ClockConfig+0x28c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	250b      	movs	r5, #11
 800377a:	197c      	adds	r4, r7, r5
 800377c:	0018      	movs	r0, r3
 800377e:	f7fd f9d9 	bl	8000b34 <HAL_InitTick>
 8003782:	0003      	movs	r3, r0
 8003784:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003786:	197b      	adds	r3, r7, r5
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800378e:	197b      	adds	r3, r7, r5
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	e000      	b.n	8003796 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bdb0      	pop	{r4, r5, r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	40022000 	.word	0x40022000
 80037a4:	00001388 	.word	0x00001388
 80037a8:	40021000 	.word	0x40021000
 80037ac:	fffff8ff 	.word	0xfffff8ff
 80037b0:	ffffc7ff 	.word	0xffffc7ff
 80037b4:	08007e48 	.word	0x08007e48
 80037b8:	20000180 	.word	0x20000180
 80037bc:	20000184 	.word	0x20000184

080037c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b08e      	sub	sp, #56	; 0x38
 80037c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80037c6:	4b4c      	ldr	r3, [pc, #304]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ce:	230c      	movs	r3, #12
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d014      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x40>
 80037d6:	d900      	bls.n	80037da <HAL_RCC_GetSysClockFreq+0x1a>
 80037d8:	e07b      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x112>
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d002      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x24>
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d00b      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x3a>
 80037e2:	e076      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80037e4:	4b44      	ldr	r3, [pc, #272]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2210      	movs	r2, #16
 80037ea:	4013      	ands	r3, r2
 80037ec:	d002      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80037ee:	4b43      	ldr	r3, [pc, #268]	; (80038fc <HAL_RCC_GetSysClockFreq+0x13c>)
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80037f2:	e07c      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <HAL_RCC_GetSysClockFreq+0x140>)
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037f8:	e079      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037fa:	4b42      	ldr	r3, [pc, #264]	; (8003904 <HAL_RCC_GetSysClockFreq+0x144>)
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037fe:	e076      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	0c9a      	lsrs	r2, r3, #18
 8003804:	230f      	movs	r3, #15
 8003806:	401a      	ands	r2, r3
 8003808:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <HAL_RCC_GetSysClockFreq+0x148>)
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	0d9a      	lsrs	r2, r3, #22
 8003812:	2303      	movs	r3, #3
 8003814:	4013      	ands	r3, r2
 8003816:	3301      	adds	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381a:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	025b      	lsls	r3, r3, #9
 8003822:	4013      	ands	r3, r2
 8003824:	d01a      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	4a35      	ldr	r2, [pc, #212]	; (8003904 <HAL_RCC_GetSysClockFreq+0x144>)
 8003830:	2300      	movs	r3, #0
 8003832:	69b8      	ldr	r0, [r7, #24]
 8003834:	69f9      	ldr	r1, [r7, #28]
 8003836:	f7fc fd13 	bl	8000260 <__aeabi_lmul>
 800383a:	0002      	movs	r2, r0
 800383c:	000b      	movs	r3, r1
 800383e:	0010      	movs	r0, r2
 8003840:	0019      	movs	r1, r3
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f7fc fce7 	bl	8000220 <__aeabi_uldivmod>
 8003852:	0002      	movs	r2, r0
 8003854:	000b      	movs	r3, r1
 8003856:	0013      	movs	r3, r2
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
 800385a:	e037      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800385c:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2210      	movs	r2, #16
 8003862:	4013      	ands	r3, r2
 8003864:	d01a      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4a23      	ldr	r2, [pc, #140]	; (80038fc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003870:	2300      	movs	r3, #0
 8003872:	68b8      	ldr	r0, [r7, #8]
 8003874:	68f9      	ldr	r1, [r7, #12]
 8003876:	f7fc fcf3 	bl	8000260 <__aeabi_lmul>
 800387a:	0002      	movs	r2, r0
 800387c:	000b      	movs	r3, r1
 800387e:	0010      	movs	r0, r2
 8003880:	0019      	movs	r1, r3
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f7fc fcc7 	bl	8000220 <__aeabi_uldivmod>
 8003892:	0002      	movs	r2, r0
 8003894:	000b      	movs	r3, r1
 8003896:	0013      	movs	r3, r2
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
 800389a:	e017      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	0018      	movs	r0, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	0019      	movs	r1, r3
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_RCC_GetSysClockFreq+0x140>)
 80038a6:	2300      	movs	r3, #0
 80038a8:	f7fc fcda 	bl	8000260 <__aeabi_lmul>
 80038ac:	0002      	movs	r2, r0
 80038ae:	000b      	movs	r3, r1
 80038b0:	0010      	movs	r0, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	001c      	movs	r4, r3
 80038b8:	2300      	movs	r3, #0
 80038ba:	001d      	movs	r5, r3
 80038bc:	0022      	movs	r2, r4
 80038be:	002b      	movs	r3, r5
 80038c0:	f7fc fcae 	bl	8000220 <__aeabi_uldivmod>
 80038c4:	0002      	movs	r2, r0
 80038c6:	000b      	movs	r3, r1
 80038c8:	0013      	movs	r3, r2
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80038d0:	e00d      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	0b5b      	lsrs	r3, r3, #13
 80038d8:	2207      	movs	r2, #7
 80038da:	4013      	ands	r3, r2
 80038dc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	3301      	adds	r3, #1
 80038e2:	2280      	movs	r2, #128	; 0x80
 80038e4:	0212      	lsls	r2, r2, #8
 80038e6:	409a      	lsls	r2, r3
 80038e8:	0013      	movs	r3, r2
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80038ec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b00e      	add	sp, #56	; 0x38
 80038f6:	bdb0      	pop	{r4, r5, r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	003d0900 	.word	0x003d0900
 8003900:	00f42400 	.word	0x00f42400
 8003904:	007a1200 	.word	0x007a1200
 8003908:	08007e58 	.word	0x08007e58

0800390c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003914:	2017      	movs	r0, #23
 8003916:	183b      	adds	r3, r7, r0
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2220      	movs	r2, #32
 8003922:	4013      	ands	r3, r2
 8003924:	d100      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003926:	e0c7      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003928:	4b93      	ldr	r3, [pc, #588]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800392a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	055b      	lsls	r3, r3, #21
 8003930:	4013      	ands	r3, r2
 8003932:	d109      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003934:	4b90      	ldr	r3, [pc, #576]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003938:	4b8f      	ldr	r3, [pc, #572]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	0549      	lsls	r1, r1, #21
 800393e:	430a      	orrs	r2, r1
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003942:	183b      	adds	r3, r7, r0
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	4b8c      	ldr	r3, [pc, #560]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4013      	ands	r3, r2
 8003952:	d11a      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003954:	4b89      	ldr	r3, [pc, #548]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	0049      	lsls	r1, r1, #1
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003962:	f7fd f92d 	bl	8000bc0 <HAL_GetTick>
 8003966:	0003      	movs	r3, r0
 8003968:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396a:	e008      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fd f928 	bl	8000bc0 <HAL_GetTick>
 8003970:	0002      	movs	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e0f7      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x262>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b7f      	ldr	r3, [pc, #508]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4013      	ands	r3, r2
 8003988:	d0f0      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800398a:	4b7b      	ldr	r3, [pc, #492]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	23c0      	movs	r3, #192	; 0xc0
 8003990:	039b      	lsls	r3, r3, #14
 8003992:	4013      	ands	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	23c0      	movs	r3, #192	; 0xc0
 800399c:	039b      	lsls	r3, r3, #14
 800399e:	4013      	ands	r3, r2
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d013      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	23c0      	movs	r3, #192	; 0xc0
 80039ac:	029b      	lsls	r3, r3, #10
 80039ae:	401a      	ands	r2, r3
 80039b0:	23c0      	movs	r3, #192	; 0xc0
 80039b2:	029b      	lsls	r3, r3, #10
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d10a      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039b8:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	029b      	lsls	r3, r3, #10
 80039c0:	401a      	ands	r2, r3
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	029b      	lsls	r3, r3, #10
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d101      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0cf      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80039d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039d2:	23c0      	movs	r3, #192	; 0xc0
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	4013      	ands	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d03b      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	23c0      	movs	r3, #192	; 0xc0
 80039e6:	029b      	lsls	r3, r3, #10
 80039e8:	4013      	ands	r3, r2
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d033      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2220      	movs	r2, #32
 80039f6:	4013      	ands	r3, r2
 80039f8:	d02e      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039fa:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	4a60      	ldr	r2, [pc, #384]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a04:	4b5c      	ldr	r3, [pc, #368]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a08:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	0309      	lsls	r1, r1, #12
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a12:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a16:	4b58      	ldr	r3, [pc, #352]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a18:	495a      	ldr	r1, [pc, #360]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003a1a:	400a      	ands	r2, r1
 8003a1c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003a1e:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d014      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2e:	f7fd f8c7 	bl	8000bc0 <HAL_GetTick>
 8003a32:	0003      	movs	r3, r0
 8003a34:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a36:	e009      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fd f8c2 	bl	8000bc0 <HAL_GetTick>
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	4a51      	ldr	r2, [pc, #324]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e090      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x262>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a4c:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4013      	ands	r3, r2
 8003a56:	d0ef      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d01f      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	23c0      	movs	r3, #192	; 0xc0
 8003a68:	029b      	lsls	r3, r3, #10
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	23c0      	movs	r3, #192	; 0xc0
 8003a6e:	029b      	lsls	r3, r3, #10
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d10c      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003a74:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a44      	ldr	r2, [pc, #272]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	23c0      	movs	r3, #192	; 0xc0
 8003a84:	039b      	lsls	r3, r3, #14
 8003a86:	401a      	ands	r2, r3
 8003a88:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	23c0      	movs	r3, #192	; 0xc0
 8003a98:	029b      	lsls	r3, r3, #10
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003aa2:	2317      	movs	r3, #23
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aac:	4b32      	ldr	r3, [pc, #200]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ab2:	4937      	ldr	r1, [pc, #220]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ab4:	400a      	ands	r2, r1
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2201      	movs	r2, #1
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	4393      	bics	r3, r2
 8003aca:	0019      	movs	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2202      	movs	r2, #2
 8003adc:	4013      	ands	r3, r2
 8003ade:	d009      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae0:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	220c      	movs	r2, #12
 8003ae6:	4393      	bics	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003af0:	430a      	orrs	r2, r1
 8003af2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2204      	movs	r2, #4
 8003afa:	4013      	ands	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003afe:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	4a24      	ldr	r2, [pc, #144]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	0019      	movs	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2208      	movs	r2, #8
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d009      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2240      	movs	r2, #64	; 0x40
 8003b36:	4013      	ands	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	4013      	ands	r3, r2
 8003b56:	d009      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5c:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b006      	add	sp, #24
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	fffcffff 	.word	0xfffcffff
 8003b84:	fff7ffff 	.word	0xfff7ffff
 8003b88:	00001388 	.word	0x00001388
 8003b8c:	ffcfffff 	.word	0xffcfffff
 8003b90:	efffffff 	.word	0xefffffff
 8003b94:	fffff3ff 	.word	0xfffff3ff
 8003b98:	ffffcfff 	.word	0xffffcfff
 8003b9c:	fbffffff 	.word	0xfbffffff
 8003ba0:	fff3ffff 	.word	0xfff3ffff

08003ba4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2244      	movs	r2, #68	; 0x44
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <USB_EnableGlobalInt+0x28>)
 8003bb6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	b299      	uxth	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2240      	movs	r2, #64	; 0x40
 8003bc0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	0000bf80 	.word	0x0000bf80

08003bd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <USB_DisableGlobalInt+0x30>)
 8003bda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2240      	movs	r2, #64	; 0x40
 8003be0:	5a9b      	ldrh	r3, [r3, r2]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	b292      	uxth	r2, r2
 8003be8:	43d2      	mvns	r2, r2
 8003bea:	b292      	uxth	r2, r2
 8003bec:	4013      	ands	r3, r2
 8003bee:	b299      	uxth	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2240      	movs	r2, #64	; 0x40
 8003bf4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b004      	add	sp, #16
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	0000bf80 	.word	0x0000bf80

08003c04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c04:	b084      	sub	sp, #16
 8003c06:	b590      	push	{r4, r7, lr}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	2004      	movs	r0, #4
 8003c10:	2410      	movs	r4, #16
 8003c12:	1900      	adds	r0, r0, r4
 8003c14:	2408      	movs	r4, #8
 8003c16:	46a4      	mov	ip, r4
 8003c18:	44bc      	add	ip, r7
 8003c1a:	4460      	add	r0, ip
 8003c1c:	6001      	str	r1, [r0, #0]
 8003c1e:	6042      	str	r2, [r0, #4]
 8003c20:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	2101      	movs	r1, #1
 8003c28:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2240      	movs	r2, #64	; 0x40
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2244      	movs	r2, #68	; 0x44
 8003c36:	2100      	movs	r1, #0
 8003c38:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2250      	movs	r2, #80	; 0x50
 8003c3e:	2100      	movs	r1, #0
 8003c40:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b003      	add	sp, #12
 8003c4a:	bc90      	pop	{r4, r7}
 8003c4c:	bc08      	pop	{r3}
 8003c4e:	b004      	add	sp, #16
 8003c50:	4718      	bx	r3
	...

08003c54 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b09c      	sub	sp, #112	; 0x70
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c5e:	236f      	movs	r3, #111	; 0x6f
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	18d3      	adds	r3, r2, r3
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	236c      	movs	r3, #108	; 0x6c
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	49a3      	ldr	r1, [pc, #652]	; (8003f08 <USB_ActivateEndpoint+0x2b4>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	78db      	ldrb	r3, [r3, #3]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d017      	beq.n	8003cb6 <USB_ActivateEndpoint+0x62>
 8003c86:	dc28      	bgt.n	8003cda <USB_ActivateEndpoint+0x86>
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d00e      	beq.n	8003caa <USB_ActivateEndpoint+0x56>
 8003c8c:	dc25      	bgt.n	8003cda <USB_ActivateEndpoint+0x86>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <USB_ActivateEndpoint+0x44>
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d018      	beq.n	8003cc8 <USB_ActivateEndpoint+0x74>
 8003c96:	e020      	b.n	8003cda <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c98:	226c      	movs	r2, #108	; 0x6c
 8003c9a:	18bb      	adds	r3, r7, r2
 8003c9c:	18ba      	adds	r2, r7, r2
 8003c9e:	8812      	ldrh	r2, [r2, #0]
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	0089      	lsls	r1, r1, #2
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	801a      	strh	r2, [r3, #0]
      break;
 8003ca8:	e01c      	b.n	8003ce4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003caa:	226c      	movs	r2, #108	; 0x6c
 8003cac:	18bb      	adds	r3, r7, r2
 8003cae:	18ba      	adds	r2, r7, r2
 8003cb0:	8812      	ldrh	r2, [r2, #0]
 8003cb2:	801a      	strh	r2, [r3, #0]
      break;
 8003cb4:	e016      	b.n	8003ce4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003cb6:	226c      	movs	r2, #108	; 0x6c
 8003cb8:	18bb      	adds	r3, r7, r2
 8003cba:	18ba      	adds	r2, r7, r2
 8003cbc:	8812      	ldrh	r2, [r2, #0]
 8003cbe:	21c0      	movs	r1, #192	; 0xc0
 8003cc0:	00c9      	lsls	r1, r1, #3
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	801a      	strh	r2, [r3, #0]
      break;
 8003cc6:	e00d      	b.n	8003ce4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003cc8:	226c      	movs	r2, #108	; 0x6c
 8003cca:	18bb      	adds	r3, r7, r2
 8003ccc:	18ba      	adds	r2, r7, r2
 8003cce:	8812      	ldrh	r2, [r2, #0]
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	00c9      	lsls	r1, r1, #3
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	801a      	strh	r2, [r3, #0]
      break;
 8003cd8:	e004      	b.n	8003ce4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003cda:	236f      	movs	r3, #111	; 0x6f
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
      break;
 8003ce2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	18d3      	adds	r3, r2, r3
 8003cee:	226c      	movs	r2, #108	; 0x6c
 8003cf0:	18ba      	adds	r2, r7, r2
 8003cf2:	8812      	ldrh	r2, [r2, #0]
 8003cf4:	4985      	ldr	r1, [pc, #532]	; (8003f0c <USB_ActivateEndpoint+0x2b8>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	b292      	uxth	r2, r2
 8003cfa:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	18d3      	adds	r3, r2, r3
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b21b      	sxth	r3, r3
 8003d0c:	4a80      	ldr	r2, [pc, #512]	; (8003f10 <USB_ActivateEndpoint+0x2bc>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	b21a      	sxth	r2, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b21a      	sxth	r2, r3
 8003d1c:	2166      	movs	r1, #102	; 0x66
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	18d3      	adds	r3, r2, r3
 8003d2c:	187a      	adds	r2, r7, r1
 8003d2e:	8812      	ldrh	r2, [r2, #0]
 8003d30:	4976      	ldr	r1, [pc, #472]	; (8003f0c <USB_ActivateEndpoint+0x2b8>)
 8003d32:	430a      	orrs	r2, r1
 8003d34:	b292      	uxth	r2, r2
 8003d36:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	7b1b      	ldrb	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d000      	beq.n	8003d42 <USB_ActivateEndpoint+0xee>
 8003d40:	e178      	b.n	8004034 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	785b      	ldrb	r3, [r3, #1]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d100      	bne.n	8003d4c <USB_ActivateEndpoint+0xf8>
 8003d4a:	e07a      	b.n	8003e42 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2250      	movs	r2, #80	; 0x50
 8003d54:	5a9b      	ldrh	r3, [r3, r2]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	001a      	movs	r2, r3
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	189b      	adds	r3, r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	00da      	lsls	r2, r3, #3
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	2280      	movs	r2, #128	; 0x80
 8003d6c:	00d2      	lsls	r2, r2, #3
 8003d6e:	4694      	mov	ip, r2
 8003d70:	4463      	add	r3, ip
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	88db      	ldrh	r3, [r3, #6]
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	18db      	adds	r3, r3, r3
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	18d2      	adds	r2, r2, r3
 8003d8e:	2112      	movs	r1, #18
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	8812      	ldrh	r2, [r2, #0]
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	2240      	movs	r2, #64	; 0x40
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d016      	beq.n	8003dce <USB_ActivateEndpoint+0x17a>
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	18d3      	adds	r3, r2, r3
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	2010      	movs	r0, #16
 8003db0:	183b      	adds	r3, r7, r0
 8003db2:	4957      	ldr	r1, [pc, #348]	; (8003f10 <USB_ActivateEndpoint+0x2bc>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	18d3      	adds	r3, r2, r3
 8003dc2:	183a      	adds	r2, r7, r0
 8003dc4:	8812      	ldrh	r2, [r2, #0]
 8003dc6:	4953      	ldr	r1, [pc, #332]	; (8003f14 <USB_ActivateEndpoint+0x2c0>)
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	b292      	uxth	r2, r2
 8003dcc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	78db      	ldrb	r3, [r3, #3]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d01d      	beq.n	8003e12 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	18d3      	adds	r3, r2, r3
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	200c      	movs	r0, #12
 8003de6:	183b      	adds	r3, r7, r0
 8003de8:	494b      	ldr	r1, [pc, #300]	; (8003f18 <USB_ActivateEndpoint+0x2c4>)
 8003dea:	400a      	ands	r2, r1
 8003dec:	801a      	strh	r2, [r3, #0]
 8003dee:	183b      	adds	r3, r7, r0
 8003df0:	183a      	adds	r2, r7, r0
 8003df2:	8812      	ldrh	r2, [r2, #0]
 8003df4:	2120      	movs	r1, #32
 8003df6:	404a      	eors	r2, r1
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	18d3      	adds	r3, r2, r3
 8003e04:	183a      	adds	r2, r7, r0
 8003e06:	8812      	ldrh	r2, [r2, #0]
 8003e08:	4940      	ldr	r1, [pc, #256]	; (8003f0c <USB_ActivateEndpoint+0x2b8>)
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	b292      	uxth	r2, r2
 8003e0e:	801a      	strh	r2, [r3, #0]
 8003e10:	e2b4      	b.n	800437c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	18d3      	adds	r3, r2, r3
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	200e      	movs	r0, #14
 8003e22:	183b      	adds	r3, r7, r0
 8003e24:	493c      	ldr	r1, [pc, #240]	; (8003f18 <USB_ActivateEndpoint+0x2c4>)
 8003e26:	400a      	ands	r2, r1
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	183a      	adds	r2, r7, r0
 8003e36:	8812      	ldrh	r2, [r2, #0]
 8003e38:	4934      	ldr	r1, [pc, #208]	; (8003f0c <USB_ActivateEndpoint+0x2b8>)
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	e29c      	b.n	800437c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2250      	movs	r2, #80	; 0x50
 8003e4a:	5a9b      	ldrh	r3, [r3, r2]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	001a      	movs	r2, r3
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	00da      	lsls	r2, r3, #3
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	4a2e      	ldr	r2, [pc, #184]	; (8003f1c <USB_ActivateEndpoint+0x2c8>)
 8003e62:	4694      	mov	ip, r2
 8003e64:	4463      	add	r3, ip
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	88db      	ldrh	r3, [r3, #6]
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	18db      	adds	r3, r3, r3
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2250      	movs	r2, #80	; 0x50
 8003e80:	5a9b      	ldrh	r3, [r3, r2]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	001a      	movs	r2, r3
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	189b      	adds	r3, r3, r2
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	00da      	lsls	r2, r3, #3
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	18d3      	adds	r3, r2, r3
 8003e96:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <USB_ActivateEndpoint+0x2cc>)
 8003e98:	4694      	mov	ip, r2
 8003e9a:	4463      	add	r3, ip
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	059b      	lsls	r3, r3, #22
 8003ea6:	0d9b      	lsrs	r3, r3, #22
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8003eb4:	d91a      	bls.n	8003eec <USB_ActivateEndpoint+0x298>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	221f      	movs	r2, #31
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d102      	bne.n	8003ece <USB_ActivateEndpoint+0x27a>
 8003ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	029b      	lsls	r3, r3, #10
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	4313      	orrs	r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <USB_ActivateEndpoint+0x2d0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	e034      	b.n	8003f56 <USB_ActivateEndpoint+0x302>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d119      	bne.n	8003f28 <USB_ActivateEndpoint+0x2d4>
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <USB_ActivateEndpoint+0x2d0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e027      	b.n	8003f56 <USB_ActivateEndpoint+0x302>
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	ffff898f 	.word	0xffff898f
 8003f0c:	ffff8080 	.word	0xffff8080
 8003f10:	ffff8f8f 	.word	0xffff8f8f
 8003f14:	ffff80c0 	.word	0xffff80c0
 8003f18:	ffff8fbf 	.word	0xffff8fbf
 8003f1c:	00000404 	.word	0x00000404
 8003f20:	00000406 	.word	0x00000406
 8003f24:	ffff8000 	.word	0xffff8000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2201      	movs	r2, #1
 8003f36:	4013      	ands	r3, r2
 8003f38:	d002      	beq.n	8003f40 <USB_ActivateEndpoint+0x2ec>
 8003f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	029b      	lsls	r3, r3, #10
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	18d2      	adds	r2, r2, r3
 8003f60:	2122      	movs	r1, #34	; 0x22
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	801a      	strh	r2, [r3, #0]
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	881a      	ldrh	r2, [r3, #0]
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	01db      	lsls	r3, r3, #7
 8003f70:	4013      	ands	r3, r2
 8003f72:	d016      	beq.n	8003fa2 <USB_ActivateEndpoint+0x34e>
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	18d3      	adds	r3, r2, r3
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	2020      	movs	r0, #32
 8003f84:	183b      	adds	r3, r7, r0
 8003f86:	49dd      	ldr	r1, [pc, #884]	; (80042fc <USB_ActivateEndpoint+0x6a8>)
 8003f88:	400a      	ands	r2, r1
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	18d3      	adds	r3, r2, r3
 8003f96:	183a      	adds	r2, r7, r0
 8003f98:	8812      	ldrh	r2, [r2, #0]
 8003f9a:	49d9      	ldr	r1, [pc, #868]	; (8004300 <USB_ActivateEndpoint+0x6ac>)
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d125      	bne.n	8003ff6 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	18d3      	adds	r3, r2, r3
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	201c      	movs	r0, #28
 8003fba:	183b      	adds	r3, r7, r0
 8003fbc:	49d1      	ldr	r1, [pc, #836]	; (8004304 <USB_ActivateEndpoint+0x6b0>)
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	183b      	adds	r3, r7, r0
 8003fc4:	183a      	adds	r2, r7, r0
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	2180      	movs	r1, #128	; 0x80
 8003fca:	0149      	lsls	r1, r1, #5
 8003fcc:	404a      	eors	r2, r1
 8003fce:	801a      	strh	r2, [r3, #0]
 8003fd0:	183b      	adds	r3, r7, r0
 8003fd2:	183a      	adds	r2, r7, r0
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	2180      	movs	r1, #128	; 0x80
 8003fd8:	0189      	lsls	r1, r1, #6
 8003fda:	404a      	eors	r2, r1
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	18d3      	adds	r3, r2, r3
 8003fe8:	183a      	adds	r2, r7, r0
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	49c6      	ldr	r1, [pc, #792]	; (8004308 <USB_ActivateEndpoint+0x6b4>)
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	e1c2      	b.n	800437c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	18d3      	adds	r3, r2, r3
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29a      	uxth	r2, r3
 8004004:	201e      	movs	r0, #30
 8004006:	183b      	adds	r3, r7, r0
 8004008:	49be      	ldr	r1, [pc, #760]	; (8004304 <USB_ActivateEndpoint+0x6b0>)
 800400a:	400a      	ands	r2, r1
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	183b      	adds	r3, r7, r0
 8004010:	183a      	adds	r2, r7, r0
 8004012:	8812      	ldrh	r2, [r2, #0]
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0189      	lsls	r1, r1, #6
 8004018:	404a      	eors	r2, r1
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	18d3      	adds	r3, r2, r3
 8004026:	183a      	adds	r2, r7, r0
 8004028:	8812      	ldrh	r2, [r2, #0]
 800402a:	49b7      	ldr	r1, [pc, #732]	; (8004308 <USB_ActivateEndpoint+0x6b4>)
 800402c:	430a      	orrs	r2, r1
 800402e:	b292      	uxth	r2, r2
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	e1a3      	b.n	800437c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	78db      	ldrb	r3, [r3, #3]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d117      	bne.n	800406c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29a      	uxth	r2, r3
 800404a:	2062      	movs	r0, #98	; 0x62
 800404c:	183b      	adds	r3, r7, r0
 800404e:	49ab      	ldr	r1, [pc, #684]	; (80042fc <USB_ActivateEndpoint+0x6a8>)
 8004050:	400a      	ands	r2, r1
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	18d3      	adds	r3, r2, r3
 800405e:	183a      	adds	r2, r7, r0
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	49aa      	ldr	r1, [pc, #680]	; (800430c <USB_ActivateEndpoint+0x6b8>)
 8004064:	430a      	orrs	r2, r1
 8004066:	b292      	uxth	r2, r2
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	e016      	b.n	800409a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	18d3      	adds	r3, r2, r3
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29a      	uxth	r2, r3
 800407a:	2064      	movs	r0, #100	; 0x64
 800407c:	183b      	adds	r3, r7, r0
 800407e:	49a4      	ldr	r1, [pc, #656]	; (8004310 <USB_ActivateEndpoint+0x6bc>)
 8004080:	400a      	ands	r2, r1
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	18d3      	adds	r3, r2, r3
 800408e:	183a      	adds	r2, r7, r0
 8004090:	8812      	ldrh	r2, [r2, #0]
 8004092:	499d      	ldr	r1, [pc, #628]	; (8004308 <USB_ActivateEndpoint+0x6b4>)
 8004094:	430a      	orrs	r2, r1
 8004096:	b292      	uxth	r2, r2
 8004098:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2250      	movs	r2, #80	; 0x50
 80040a2:	5a9b      	ldrh	r3, [r3, r2]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	001a      	movs	r2, r3
 80040a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	00da      	lsls	r2, r3, #3
 80040b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b6:	18d3      	adds	r3, r2, r3
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	00d2      	lsls	r2, r2, #3
 80040bc:	4694      	mov	ip, r2
 80040be:	4463      	add	r3, ip
 80040c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	891b      	ldrh	r3, [r3, #8]
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	18db      	adds	r3, r3, r3
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d0:	801a      	strh	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	657b      	str	r3, [r7, #84]	; 0x54
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2250      	movs	r2, #80	; 0x50
 80040da:	5a9b      	ldrh	r3, [r3, r2]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	001a      	movs	r2, r3
 80040e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	657b      	str	r3, [r7, #84]	; 0x54
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	00da      	lsls	r2, r3, #3
 80040ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ee:	18d3      	adds	r3, r2, r3
 80040f0:	4a88      	ldr	r2, [pc, #544]	; (8004314 <USB_ActivateEndpoint+0x6c0>)
 80040f2:	4694      	mov	ip, r2
 80040f4:	4463      	add	r3, ip
 80040f6:	653b      	str	r3, [r7, #80]	; 0x50
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	895b      	ldrh	r3, [r3, #10]
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	b29b      	uxth	r3, r3
 8004100:	18db      	adds	r3, r3, r3
 8004102:	b29a      	uxth	r2, r3
 8004104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004106:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	785b      	ldrb	r3, [r3, #1]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d000      	beq.n	8004112 <USB_ActivateEndpoint+0x4be>
 8004110:	e087      	b.n	8004222 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	18d2      	adds	r2, r2, r3
 800411c:	2140      	movs	r1, #64	; 0x40
 800411e:	187b      	adds	r3, r7, r1
 8004120:	8812      	ldrh	r2, [r2, #0]
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	187b      	adds	r3, r7, r1
 8004126:	881a      	ldrh	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	01db      	lsls	r3, r3, #7
 800412c:	4013      	ands	r3, r2
 800412e:	d016      	beq.n	800415e <USB_ActivateEndpoint+0x50a>
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	18d3      	adds	r3, r2, r3
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29a      	uxth	r2, r3
 800413e:	203e      	movs	r0, #62	; 0x3e
 8004140:	183b      	adds	r3, r7, r0
 8004142:	496e      	ldr	r1, [pc, #440]	; (80042fc <USB_ActivateEndpoint+0x6a8>)
 8004144:	400a      	ands	r2, r1
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	18d3      	adds	r3, r2, r3
 8004152:	183a      	adds	r2, r7, r0
 8004154:	8812      	ldrh	r2, [r2, #0]
 8004156:	496a      	ldr	r1, [pc, #424]	; (8004300 <USB_ActivateEndpoint+0x6ac>)
 8004158:	430a      	orrs	r2, r1
 800415a:	b292      	uxth	r2, r2
 800415c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	18d2      	adds	r2, r2, r3
 8004168:	213c      	movs	r1, #60	; 0x3c
 800416a:	187b      	adds	r3, r7, r1
 800416c:	8812      	ldrh	r2, [r2, #0]
 800416e:	801a      	strh	r2, [r3, #0]
 8004170:	187b      	adds	r3, r7, r1
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	2240      	movs	r2, #64	; 0x40
 8004176:	4013      	ands	r3, r2
 8004178:	d016      	beq.n	80041a8 <USB_ActivateEndpoint+0x554>
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	18d3      	adds	r3, r2, r3
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29a      	uxth	r2, r3
 8004188:	203a      	movs	r0, #58	; 0x3a
 800418a:	183b      	adds	r3, r7, r0
 800418c:	495b      	ldr	r1, [pc, #364]	; (80042fc <USB_ActivateEndpoint+0x6a8>)
 800418e:	400a      	ands	r2, r1
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	18d3      	adds	r3, r2, r3
 800419c:	183a      	adds	r2, r7, r0
 800419e:	8812      	ldrh	r2, [r2, #0]
 80041a0:	495d      	ldr	r1, [pc, #372]	; (8004318 <USB_ActivateEndpoint+0x6c4>)
 80041a2:	430a      	orrs	r2, r1
 80041a4:	b292      	uxth	r2, r2
 80041a6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	18d3      	adds	r3, r2, r3
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	2038      	movs	r0, #56	; 0x38
 80041b8:	183b      	adds	r3, r7, r0
 80041ba:	4952      	ldr	r1, [pc, #328]	; (8004304 <USB_ActivateEndpoint+0x6b0>)
 80041bc:	400a      	ands	r2, r1
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	183b      	adds	r3, r7, r0
 80041c2:	183a      	adds	r2, r7, r0
 80041c4:	8812      	ldrh	r2, [r2, #0]
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	0149      	lsls	r1, r1, #5
 80041ca:	404a      	eors	r2, r1
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	183b      	adds	r3, r7, r0
 80041d0:	183a      	adds	r2, r7, r0
 80041d2:	8812      	ldrh	r2, [r2, #0]
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	0189      	lsls	r1, r1, #6
 80041d8:	404a      	eors	r2, r1
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	18d3      	adds	r3, r2, r3
 80041e6:	183a      	adds	r2, r7, r0
 80041e8:	8812      	ldrh	r2, [r2, #0]
 80041ea:	4947      	ldr	r1, [pc, #284]	; (8004308 <USB_ActivateEndpoint+0x6b4>)
 80041ec:	430a      	orrs	r2, r1
 80041ee:	b292      	uxth	r2, r2
 80041f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29a      	uxth	r2, r3
 8004200:	2036      	movs	r0, #54	; 0x36
 8004202:	183b      	adds	r3, r7, r0
 8004204:	4945      	ldr	r1, [pc, #276]	; (800431c <USB_ActivateEndpoint+0x6c8>)
 8004206:	400a      	ands	r2, r1
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	18d3      	adds	r3, r2, r3
 8004214:	183a      	adds	r2, r7, r0
 8004216:	8812      	ldrh	r2, [r2, #0]
 8004218:	493b      	ldr	r1, [pc, #236]	; (8004308 <USB_ActivateEndpoint+0x6b4>)
 800421a:	430a      	orrs	r2, r1
 800421c:	b292      	uxth	r2, r2
 800421e:	801a      	strh	r2, [r3, #0]
 8004220:	e0ac      	b.n	800437c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	18d2      	adds	r2, r2, r3
 800422c:	214e      	movs	r1, #78	; 0x4e
 800422e:	187b      	adds	r3, r7, r1
 8004230:	8812      	ldrh	r2, [r2, #0]
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	187b      	adds	r3, r7, r1
 8004236:	881a      	ldrh	r2, [r3, #0]
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	01db      	lsls	r3, r3, #7
 800423c:	4013      	ands	r3, r2
 800423e:	d016      	beq.n	800426e <USB_ActivateEndpoint+0x61a>
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	18d3      	adds	r3, r2, r3
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29a      	uxth	r2, r3
 800424e:	204c      	movs	r0, #76	; 0x4c
 8004250:	183b      	adds	r3, r7, r0
 8004252:	492a      	ldr	r1, [pc, #168]	; (80042fc <USB_ActivateEndpoint+0x6a8>)
 8004254:	400a      	ands	r2, r1
 8004256:	801a      	strh	r2, [r3, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	18d3      	adds	r3, r2, r3
 8004262:	183a      	adds	r2, r7, r0
 8004264:	8812      	ldrh	r2, [r2, #0]
 8004266:	4926      	ldr	r1, [pc, #152]	; (8004300 <USB_ActivateEndpoint+0x6ac>)
 8004268:	430a      	orrs	r2, r1
 800426a:	b292      	uxth	r2, r2
 800426c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	18d2      	adds	r2, r2, r3
 8004278:	214a      	movs	r1, #74	; 0x4a
 800427a:	187b      	adds	r3, r7, r1
 800427c:	8812      	ldrh	r2, [r2, #0]
 800427e:	801a      	strh	r2, [r3, #0]
 8004280:	187b      	adds	r3, r7, r1
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	2240      	movs	r2, #64	; 0x40
 8004286:	4013      	ands	r3, r2
 8004288:	d016      	beq.n	80042b8 <USB_ActivateEndpoint+0x664>
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	18d3      	adds	r3, r2, r3
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29a      	uxth	r2, r3
 8004298:	2048      	movs	r0, #72	; 0x48
 800429a:	183b      	adds	r3, r7, r0
 800429c:	4917      	ldr	r1, [pc, #92]	; (80042fc <USB_ActivateEndpoint+0x6a8>)
 800429e:	400a      	ands	r2, r1
 80042a0:	801a      	strh	r2, [r3, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	18d3      	adds	r3, r2, r3
 80042ac:	183a      	adds	r2, r7, r0
 80042ae:	8812      	ldrh	r2, [r2, #0]
 80042b0:	4919      	ldr	r1, [pc, #100]	; (8004318 <USB_ActivateEndpoint+0x6c4>)
 80042b2:	430a      	orrs	r2, r1
 80042b4:	b292      	uxth	r2, r2
 80042b6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	78db      	ldrb	r3, [r3, #3]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d02f      	beq.n	8004320 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	18d3      	adds	r3, r2, r3
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	2044      	movs	r0, #68	; 0x44
 80042d0:	183b      	adds	r3, r7, r0
 80042d2:	4912      	ldr	r1, [pc, #72]	; (800431c <USB_ActivateEndpoint+0x6c8>)
 80042d4:	400a      	ands	r2, r1
 80042d6:	801a      	strh	r2, [r3, #0]
 80042d8:	183b      	adds	r3, r7, r0
 80042da:	183a      	adds	r2, r7, r0
 80042dc:	8812      	ldrh	r2, [r2, #0]
 80042de:	2120      	movs	r1, #32
 80042e0:	404a      	eors	r2, r1
 80042e2:	801a      	strh	r2, [r3, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	183a      	adds	r2, r7, r0
 80042f0:	8812      	ldrh	r2, [r2, #0]
 80042f2:	4905      	ldr	r1, [pc, #20]	; (8004308 <USB_ActivateEndpoint+0x6b4>)
 80042f4:	430a      	orrs	r2, r1
 80042f6:	b292      	uxth	r2, r2
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	e028      	b.n	800434e <USB_ActivateEndpoint+0x6fa>
 80042fc:	ffff8f8f 	.word	0xffff8f8f
 8004300:	ffffc080 	.word	0xffffc080
 8004304:	ffffbf8f 	.word	0xffffbf8f
 8004308:	ffff8080 	.word	0xffff8080
 800430c:	ffff8180 	.word	0xffff8180
 8004310:	ffff8e8f 	.word	0xffff8e8f
 8004314:	00000404 	.word	0x00000404
 8004318:	ffff80c0 	.word	0xffff80c0
 800431c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	18d3      	adds	r3, r2, r3
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29a      	uxth	r2, r3
 800432e:	2046      	movs	r0, #70	; 0x46
 8004330:	183b      	adds	r3, r7, r0
 8004332:	4916      	ldr	r1, [pc, #88]	; (800438c <USB_ActivateEndpoint+0x738>)
 8004334:	400a      	ands	r2, r1
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	18d3      	adds	r3, r2, r3
 8004342:	183a      	adds	r2, r7, r0
 8004344:	8812      	ldrh	r2, [r2, #0]
 8004346:	4912      	ldr	r1, [pc, #72]	; (8004390 <USB_ActivateEndpoint+0x73c>)
 8004348:	430a      	orrs	r2, r1
 800434a:	b292      	uxth	r2, r2
 800434c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	18d3      	adds	r3, r2, r3
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29a      	uxth	r2, r3
 800435c:	2042      	movs	r0, #66	; 0x42
 800435e:	183b      	adds	r3, r7, r0
 8004360:	490c      	ldr	r1, [pc, #48]	; (8004394 <USB_ActivateEndpoint+0x740>)
 8004362:	400a      	ands	r2, r1
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	18d3      	adds	r3, r2, r3
 8004370:	183a      	adds	r2, r7, r0
 8004372:	8812      	ldrh	r2, [r2, #0]
 8004374:	4906      	ldr	r1, [pc, #24]	; (8004390 <USB_ActivateEndpoint+0x73c>)
 8004376:	430a      	orrs	r2, r1
 8004378:	b292      	uxth	r2, r2
 800437a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800437c:	236f      	movs	r3, #111	; 0x6f
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	781b      	ldrb	r3, [r3, #0]
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b01c      	add	sp, #112	; 0x70
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	ffff8fbf 	.word	0xffff8fbf
 8004390:	ffff8080 	.word	0xffff8080
 8004394:	ffffbf8f 	.word	0xffffbf8f

08004398 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	7b1b      	ldrb	r3, [r3, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d000      	beq.n	80043ac <USB_DeactivateEndpoint+0x14>
 80043aa:	e07e      	b.n	80044aa <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	785b      	ldrb	r3, [r3, #1]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d03c      	beq.n	800442e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	18d2      	adds	r2, r2, r3
 80043be:	210c      	movs	r1, #12
 80043c0:	187b      	adds	r3, r7, r1
 80043c2:	8812      	ldrh	r2, [r2, #0]
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	2240      	movs	r2, #64	; 0x40
 80043cc:	4013      	ands	r3, r2
 80043ce:	d016      	beq.n	80043fe <USB_DeactivateEndpoint+0x66>
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	18d3      	adds	r3, r2, r3
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29a      	uxth	r2, r3
 80043de:	200a      	movs	r0, #10
 80043e0:	183b      	adds	r3, r7, r0
 80043e2:	49c7      	ldr	r1, [pc, #796]	; (8004700 <USB_DeactivateEndpoint+0x368>)
 80043e4:	400a      	ands	r2, r1
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	18d3      	adds	r3, r2, r3
 80043f2:	183a      	adds	r2, r7, r0
 80043f4:	8812      	ldrh	r2, [r2, #0]
 80043f6:	49c3      	ldr	r1, [pc, #780]	; (8004704 <USB_DeactivateEndpoint+0x36c>)
 80043f8:	430a      	orrs	r2, r1
 80043fa:	b292      	uxth	r2, r2
 80043fc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	18d3      	adds	r3, r2, r3
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29a      	uxth	r2, r3
 800440c:	2008      	movs	r0, #8
 800440e:	183b      	adds	r3, r7, r0
 8004410:	49bd      	ldr	r1, [pc, #756]	; (8004708 <USB_DeactivateEndpoint+0x370>)
 8004412:	400a      	ands	r2, r1
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	18d3      	adds	r3, r2, r3
 8004420:	183a      	adds	r2, r7, r0
 8004422:	8812      	ldrh	r2, [r2, #0]
 8004424:	49b9      	ldr	r1, [pc, #740]	; (800470c <USB_DeactivateEndpoint+0x374>)
 8004426:	430a      	orrs	r2, r1
 8004428:	b292      	uxth	r2, r2
 800442a:	801a      	strh	r2, [r3, #0]
 800442c:	e163      	b.n	80046f6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	18d2      	adds	r2, r2, r3
 8004438:	2112      	movs	r1, #18
 800443a:	187b      	adds	r3, r7, r1
 800443c:	8812      	ldrh	r2, [r2, #0]
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	187b      	adds	r3, r7, r1
 8004442:	881a      	ldrh	r2, [r3, #0]
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	01db      	lsls	r3, r3, #7
 8004448:	4013      	ands	r3, r2
 800444a:	d016      	beq.n	800447a <USB_DeactivateEndpoint+0xe2>
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	18d3      	adds	r3, r2, r3
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29a      	uxth	r2, r3
 800445a:	2010      	movs	r0, #16
 800445c:	183b      	adds	r3, r7, r0
 800445e:	49a8      	ldr	r1, [pc, #672]	; (8004700 <USB_DeactivateEndpoint+0x368>)
 8004460:	400a      	ands	r2, r1
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	18d3      	adds	r3, r2, r3
 800446e:	183a      	adds	r2, r7, r0
 8004470:	8812      	ldrh	r2, [r2, #0]
 8004472:	49a7      	ldr	r1, [pc, #668]	; (8004710 <USB_DeactivateEndpoint+0x378>)
 8004474:	430a      	orrs	r2, r1
 8004476:	b292      	uxth	r2, r2
 8004478:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	18d3      	adds	r3, r2, r3
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29a      	uxth	r2, r3
 8004488:	200e      	movs	r0, #14
 800448a:	183b      	adds	r3, r7, r0
 800448c:	49a1      	ldr	r1, [pc, #644]	; (8004714 <USB_DeactivateEndpoint+0x37c>)
 800448e:	400a      	ands	r2, r1
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	18d3      	adds	r3, r2, r3
 800449c:	183a      	adds	r2, r7, r0
 800449e:	8812      	ldrh	r2, [r2, #0]
 80044a0:	499a      	ldr	r1, [pc, #616]	; (800470c <USB_DeactivateEndpoint+0x374>)
 80044a2:	430a      	orrs	r2, r1
 80044a4:	b292      	uxth	r2, r2
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	e125      	b.n	80046f6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d000      	beq.n	80044b4 <USB_DeactivateEndpoint+0x11c>
 80044b2:	e090      	b.n	80045d6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	18d2      	adds	r2, r2, r3
 80044be:	2120      	movs	r1, #32
 80044c0:	187b      	adds	r3, r7, r1
 80044c2:	8812      	ldrh	r2, [r2, #0]
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	187b      	adds	r3, r7, r1
 80044c8:	881a      	ldrh	r2, [r3, #0]
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	01db      	lsls	r3, r3, #7
 80044ce:	4013      	ands	r3, r2
 80044d0:	d016      	beq.n	8004500 <USB_DeactivateEndpoint+0x168>
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	18d3      	adds	r3, r2, r3
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29a      	uxth	r2, r3
 80044e0:	201e      	movs	r0, #30
 80044e2:	183b      	adds	r3, r7, r0
 80044e4:	4986      	ldr	r1, [pc, #536]	; (8004700 <USB_DeactivateEndpoint+0x368>)
 80044e6:	400a      	ands	r2, r1
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	18d3      	adds	r3, r2, r3
 80044f4:	183a      	adds	r2, r7, r0
 80044f6:	8812      	ldrh	r2, [r2, #0]
 80044f8:	4985      	ldr	r1, [pc, #532]	; (8004710 <USB_DeactivateEndpoint+0x378>)
 80044fa:	430a      	orrs	r2, r1
 80044fc:	b292      	uxth	r2, r2
 80044fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	18d2      	adds	r2, r2, r3
 800450a:	211c      	movs	r1, #28
 800450c:	187b      	adds	r3, r7, r1
 800450e:	8812      	ldrh	r2, [r2, #0]
 8004510:	801a      	strh	r2, [r3, #0]
 8004512:	187b      	adds	r3, r7, r1
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	2240      	movs	r2, #64	; 0x40
 8004518:	4013      	ands	r3, r2
 800451a:	d016      	beq.n	800454a <USB_DeactivateEndpoint+0x1b2>
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	18d3      	adds	r3, r2, r3
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29a      	uxth	r2, r3
 800452a:	201a      	movs	r0, #26
 800452c:	183b      	adds	r3, r7, r0
 800452e:	4974      	ldr	r1, [pc, #464]	; (8004700 <USB_DeactivateEndpoint+0x368>)
 8004530:	400a      	ands	r2, r1
 8004532:	801a      	strh	r2, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	18d3      	adds	r3, r2, r3
 800453e:	183a      	adds	r2, r7, r0
 8004540:	8812      	ldrh	r2, [r2, #0]
 8004542:	4970      	ldr	r1, [pc, #448]	; (8004704 <USB_DeactivateEndpoint+0x36c>)
 8004544:	430a      	orrs	r2, r1
 8004546:	b292      	uxth	r2, r2
 8004548:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	18d3      	adds	r3, r2, r3
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29a      	uxth	r2, r3
 8004558:	2018      	movs	r0, #24
 800455a:	183b      	adds	r3, r7, r0
 800455c:	4968      	ldr	r1, [pc, #416]	; (8004700 <USB_DeactivateEndpoint+0x368>)
 800455e:	400a      	ands	r2, r1
 8004560:	801a      	strh	r2, [r3, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	18d3      	adds	r3, r2, r3
 800456c:	183a      	adds	r2, r7, r0
 800456e:	8812      	ldrh	r2, [r2, #0]
 8004570:	4964      	ldr	r1, [pc, #400]	; (8004704 <USB_DeactivateEndpoint+0x36c>)
 8004572:	430a      	orrs	r2, r1
 8004574:	b292      	uxth	r2, r2
 8004576:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	18d3      	adds	r3, r2, r3
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29a      	uxth	r2, r3
 8004586:	2016      	movs	r0, #22
 8004588:	183b      	adds	r3, r7, r0
 800458a:	4962      	ldr	r1, [pc, #392]	; (8004714 <USB_DeactivateEndpoint+0x37c>)
 800458c:	400a      	ands	r2, r1
 800458e:	801a      	strh	r2, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	18d3      	adds	r3, r2, r3
 800459a:	183a      	adds	r2, r7, r0
 800459c:	8812      	ldrh	r2, [r2, #0]
 800459e:	495b      	ldr	r1, [pc, #364]	; (800470c <USB_DeactivateEndpoint+0x374>)
 80045a0:	430a      	orrs	r2, r1
 80045a2:	b292      	uxth	r2, r2
 80045a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	18d3      	adds	r3, r2, r3
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	2014      	movs	r0, #20
 80045b6:	183b      	adds	r3, r7, r0
 80045b8:	4953      	ldr	r1, [pc, #332]	; (8004708 <USB_DeactivateEndpoint+0x370>)
 80045ba:	400a      	ands	r2, r1
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	18d3      	adds	r3, r2, r3
 80045c8:	183a      	adds	r2, r7, r0
 80045ca:	8812      	ldrh	r2, [r2, #0]
 80045cc:	494f      	ldr	r1, [pc, #316]	; (800470c <USB_DeactivateEndpoint+0x374>)
 80045ce:	430a      	orrs	r2, r1
 80045d0:	b292      	uxth	r2, r2
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	e08f      	b.n	80046f6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	18d2      	adds	r2, r2, r3
 80045e0:	212e      	movs	r1, #46	; 0x2e
 80045e2:	187b      	adds	r3, r7, r1
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	01db      	lsls	r3, r3, #7
 80045f0:	4013      	ands	r3, r2
 80045f2:	d016      	beq.n	8004622 <USB_DeactivateEndpoint+0x28a>
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29a      	uxth	r2, r3
 8004602:	202c      	movs	r0, #44	; 0x2c
 8004604:	183b      	adds	r3, r7, r0
 8004606:	493e      	ldr	r1, [pc, #248]	; (8004700 <USB_DeactivateEndpoint+0x368>)
 8004608:	400a      	ands	r2, r1
 800460a:	801a      	strh	r2, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	18d3      	adds	r3, r2, r3
 8004616:	183a      	adds	r2, r7, r0
 8004618:	8812      	ldrh	r2, [r2, #0]
 800461a:	493d      	ldr	r1, [pc, #244]	; (8004710 <USB_DeactivateEndpoint+0x378>)
 800461c:	430a      	orrs	r2, r1
 800461e:	b292      	uxth	r2, r2
 8004620:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	18d2      	adds	r2, r2, r3
 800462c:	212a      	movs	r1, #42	; 0x2a
 800462e:	187b      	adds	r3, r7, r1
 8004630:	8812      	ldrh	r2, [r2, #0]
 8004632:	801a      	strh	r2, [r3, #0]
 8004634:	187b      	adds	r3, r7, r1
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	2240      	movs	r2, #64	; 0x40
 800463a:	4013      	ands	r3, r2
 800463c:	d016      	beq.n	800466c <USB_DeactivateEndpoint+0x2d4>
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	18d3      	adds	r3, r2, r3
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29a      	uxth	r2, r3
 800464c:	2028      	movs	r0, #40	; 0x28
 800464e:	183b      	adds	r3, r7, r0
 8004650:	492b      	ldr	r1, [pc, #172]	; (8004700 <USB_DeactivateEndpoint+0x368>)
 8004652:	400a      	ands	r2, r1
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	18d3      	adds	r3, r2, r3
 8004660:	183a      	adds	r2, r7, r0
 8004662:	8812      	ldrh	r2, [r2, #0]
 8004664:	4927      	ldr	r1, [pc, #156]	; (8004704 <USB_DeactivateEndpoint+0x36c>)
 8004666:	430a      	orrs	r2, r1
 8004668:	b292      	uxth	r2, r2
 800466a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29a      	uxth	r2, r3
 800467a:	2026      	movs	r0, #38	; 0x26
 800467c:	183b      	adds	r3, r7, r0
 800467e:	4920      	ldr	r1, [pc, #128]	; (8004700 <USB_DeactivateEndpoint+0x368>)
 8004680:	400a      	ands	r2, r1
 8004682:	801a      	strh	r2, [r3, #0]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	18d3      	adds	r3, r2, r3
 800468e:	183a      	adds	r2, r7, r0
 8004690:	8812      	ldrh	r2, [r2, #0]
 8004692:	491f      	ldr	r1, [pc, #124]	; (8004710 <USB_DeactivateEndpoint+0x378>)
 8004694:	430a      	orrs	r2, r1
 8004696:	b292      	uxth	r2, r2
 8004698:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	18d3      	adds	r3, r2, r3
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	2024      	movs	r0, #36	; 0x24
 80046aa:	183b      	adds	r3, r7, r0
 80046ac:	4916      	ldr	r1, [pc, #88]	; (8004708 <USB_DeactivateEndpoint+0x370>)
 80046ae:	400a      	ands	r2, r1
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	18d3      	adds	r3, r2, r3
 80046bc:	183a      	adds	r2, r7, r0
 80046be:	8812      	ldrh	r2, [r2, #0]
 80046c0:	4912      	ldr	r1, [pc, #72]	; (800470c <USB_DeactivateEndpoint+0x374>)
 80046c2:	430a      	orrs	r2, r1
 80046c4:	b292      	uxth	r2, r2
 80046c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	18d3      	adds	r3, r2, r3
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	2022      	movs	r0, #34	; 0x22
 80046d8:	183b      	adds	r3, r7, r0
 80046da:	490e      	ldr	r1, [pc, #56]	; (8004714 <USB_DeactivateEndpoint+0x37c>)
 80046dc:	400a      	ands	r2, r1
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	18d3      	adds	r3, r2, r3
 80046ea:	183a      	adds	r2, r7, r0
 80046ec:	8812      	ldrh	r2, [r2, #0]
 80046ee:	4907      	ldr	r1, [pc, #28]	; (800470c <USB_DeactivateEndpoint+0x374>)
 80046f0:	430a      	orrs	r2, r1
 80046f2:	b292      	uxth	r2, r2
 80046f4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b00c      	add	sp, #48	; 0x30
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	ffff8f8f 	.word	0xffff8f8f
 8004704:	ffff80c0 	.word	0xffff80c0
 8004708:	ffff8fbf 	.word	0xffff8fbf
 800470c:	ffff8080 	.word	0xffff8080
 8004710:	ffffc080 	.word	0xffffc080
 8004714:	ffffbf8f 	.word	0xffffbf8f

08004718 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b0c3      	sub	sp, #268	; 0x10c
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d001      	beq.n	800472e <USB_EPStartXfer+0x16>
 800472a:	f000 fd2d 	bl	8005188 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d905      	bls.n	8004746 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	1d7a      	adds	r2, r7, #5
 8004740:	32ff      	adds	r2, #255	; 0xff
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e004      	b.n	8004750 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	1d7a      	adds	r2, r7, #5
 800474c:	32ff      	adds	r2, #255	; 0xff
 800474e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	7b1b      	ldrb	r3, [r3, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d125      	bne.n	80047a4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6959      	ldr	r1, [r3, #20]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	88da      	ldrh	r2, [r3, #6]
 8004760:	1d7b      	adds	r3, r7, #5
 8004762:	33ff      	adds	r3, #255	; 0xff
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f001 fa47 	bl	8005bfc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2250      	movs	r2, #80	; 0x50
 8004776:	5a9b      	ldrh	r3, [r3, r2]
 8004778:	b29b      	uxth	r3, r3
 800477a:	001a      	movs	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	189b      	adds	r3, r3, r2
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	00da      	lsls	r2, r3, #3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	18d3      	adds	r3, r2, r3
 800478c:	4ad7      	ldr	r2, [pc, #860]	; (8004aec <USB_EPStartXfer+0x3d4>)
 800478e:	4694      	mov	ip, r2
 8004790:	4463      	add	r3, ip
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	1d7b      	adds	r3, r7, #5
 8004796:	33ff      	adds	r3, #255	; 0xff
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	f000 fccd 	bl	800513e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	78db      	ldrb	r3, [r3, #3]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d000      	beq.n	80047ae <USB_EPStartXfer+0x96>
 80047ac:	e362      	b.n	8004e74 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6a1a      	ldr	r2, [r3, #32]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d800      	bhi.n	80047bc <USB_EPStartXfer+0xa4>
 80047ba:	e309      	b.n	8004dd0 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	2056      	movs	r0, #86	; 0x56
 80047cc:	183b      	adds	r3, r7, r0
 80047ce:	49c8      	ldr	r1, [pc, #800]	; (8004af0 <USB_EPStartXfer+0x3d8>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	801a      	strh	r2, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	18d3      	adds	r3, r2, r3
 80047de:	183a      	adds	r2, r7, r0
 80047e0:	8812      	ldrh	r2, [r2, #0]
 80047e2:	49c4      	ldr	r1, [pc, #784]	; (8004af4 <USB_EPStartXfer+0x3dc>)
 80047e4:	430a      	orrs	r2, r1
 80047e6:	b292      	uxth	r2, r2
 80047e8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6a1a      	ldr	r2, [r3, #32]
 80047ee:	1d7b      	adds	r3, r7, #5
 80047f0:	33ff      	adds	r3, #255	; 0xff
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1ad2      	subs	r2, r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	18d3      	adds	r3, r2, r3
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	001a      	movs	r2, r3
 800480a:	2340      	movs	r3, #64	; 0x40
 800480c:	4013      	ands	r3, r2
 800480e:	d100      	bne.n	8004812 <USB_EPStartXfer+0xfa>
 8004810:	e176      	b.n	8004b00 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	633b      	str	r3, [r7, #48]	; 0x30
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	785b      	ldrb	r3, [r3, #1]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d000      	beq.n	8004820 <USB_EPStartXfer+0x108>
 800481e:	e074      	b.n	800490a <USB_EPStartXfer+0x1f2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2250      	movs	r2, #80	; 0x50
 8004828:	5a9b      	ldrh	r3, [r3, r2]
 800482a:	b29b      	uxth	r3, r3
 800482c:	001a      	movs	r2, r3
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	189b      	adds	r3, r3, r2
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	00da      	lsls	r2, r3, #3
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	18d3      	adds	r3, r2, r3
 800483e:	4aae      	ldr	r2, [pc, #696]	; (8004af8 <USB_EPStartXfer+0x3e0>)
 8004840:	4694      	mov	ip, r2
 8004842:	4463      	add	r3, ip
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	059b      	lsls	r3, r3, #22
 800484e:	0d9b      	lsrs	r3, r3, #22
 8004850:	b29a      	uxth	r2, r3
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	1d7b      	adds	r3, r7, #5
 8004858:	33ff      	adds	r3, #255	; 0xff
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b3e      	cmp	r3, #62	; 0x3e
 800485e:	d924      	bls.n	80048aa <USB_EPStartXfer+0x192>
 8004860:	1d7b      	adds	r3, r7, #5
 8004862:	33ff      	adds	r3, #255	; 0xff
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	1c7a      	adds	r2, r7, #1
 800486a:	32ff      	adds	r2, #255	; 0xff
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	1d7b      	adds	r3, r7, #5
 8004870:	33ff      	adds	r3, #255	; 0xff
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	221f      	movs	r2, #31
 8004876:	4013      	ands	r3, r2
 8004878:	d106      	bne.n	8004888 <USB_EPStartXfer+0x170>
 800487a:	1c7b      	adds	r3, r7, #1
 800487c:	33ff      	adds	r3, #255	; 0xff
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3b01      	subs	r3, #1
 8004882:	1c7a      	adds	r2, r7, #1
 8004884:	32ff      	adds	r2, #255	; 0xff
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29a      	uxth	r2, r3
 800488e:	1c7b      	adds	r3, r7, #1
 8004890:	33ff      	adds	r3, #255	; 0xff
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	029b      	lsls	r3, r3, #10
 8004898:	b29b      	uxth	r3, r3
 800489a:	4313      	orrs	r3, r2
 800489c:	b29b      	uxth	r3, r3
 800489e:	4a97      	ldr	r2, [pc, #604]	; (8004afc <USB_EPStartXfer+0x3e4>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	e04a      	b.n	8004940 <USB_EPStartXfer+0x228>
 80048aa:	1d7b      	adds	r3, r7, #5
 80048ac:	33ff      	adds	r3, #255	; 0xff
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d108      	bne.n	80048c6 <USB_EPStartXfer+0x1ae>
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	4a90      	ldr	r2, [pc, #576]	; (8004afc <USB_EPStartXfer+0x3e4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	b29a      	uxth	r2, r3
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	e03c      	b.n	8004940 <USB_EPStartXfer+0x228>
 80048c6:	1d7b      	adds	r3, r7, #5
 80048c8:	33ff      	adds	r3, #255	; 0xff
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	1c7a      	adds	r2, r7, #1
 80048d0:	32ff      	adds	r2, #255	; 0xff
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	1d7b      	adds	r3, r7, #5
 80048d6:	33ff      	adds	r3, #255	; 0xff
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2201      	movs	r2, #1
 80048dc:	4013      	ands	r3, r2
 80048de:	d006      	beq.n	80048ee <USB_EPStartXfer+0x1d6>
 80048e0:	1c7b      	adds	r3, r7, #1
 80048e2:	33ff      	adds	r3, #255	; 0xff
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	1c7a      	adds	r2, r7, #1
 80048ea:	32ff      	adds	r2, #255	; 0xff
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	1c7b      	adds	r3, r7, #1
 80048f6:	33ff      	adds	r3, #255	; 0xff
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	029b      	lsls	r3, r3, #10
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4313      	orrs	r3, r2
 8004902:	b29a      	uxth	r2, r3
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	801a      	strh	r2, [r3, #0]
 8004908:	e01a      	b.n	8004940 <USB_EPStartXfer+0x228>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	785b      	ldrb	r3, [r3, #1]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d116      	bne.n	8004940 <USB_EPStartXfer+0x228>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2250      	movs	r2, #80	; 0x50
 8004916:	5a9b      	ldrh	r3, [r3, r2]
 8004918:	b29b      	uxth	r3, r3
 800491a:	001a      	movs	r2, r3
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	189b      	adds	r3, r3, r2
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	00da      	lsls	r2, r3, #3
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	18d3      	adds	r3, r2, r3
 800492c:	4a72      	ldr	r2, [pc, #456]	; (8004af8 <USB_EPStartXfer+0x3e0>)
 800492e:	4694      	mov	ip, r2
 8004930:	4463      	add	r3, ip
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004934:	1d7b      	adds	r3, r7, #5
 8004936:	33ff      	adds	r3, #255	; 0xff
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	b29a      	uxth	r2, r3
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004940:	2076      	movs	r0, #118	; 0x76
 8004942:	183b      	adds	r3, r7, r0
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	8952      	ldrh	r2, [r2, #10]
 8004948:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6959      	ldr	r1, [r3, #20]
 800494e:	1d7b      	adds	r3, r7, #5
 8004950:	33ff      	adds	r3, #255	; 0xff
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	b29c      	uxth	r4, r3
 8004956:	183b      	adds	r3, r7, r0
 8004958:	881a      	ldrh	r2, [r3, #0]
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	0023      	movs	r3, r4
 800495e:	f001 f94d 	bl	8005bfc <USB_WritePMA>
            ep->xfer_buff += len;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	1d7b      	adds	r3, r7, #5
 8004968:	33ff      	adds	r3, #255	; 0xff
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	18d2      	adds	r2, r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d908      	bls.n	8004990 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	1d7b      	adds	r3, r7, #5
 8004984:	33ff      	adds	r3, #255	; 0xff
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1ad2      	subs	r2, r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	621a      	str	r2, [r3, #32]
 800498e:	e007      	b.n	80049a0 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	1d7a      	adds	r2, r7, #5
 8004996:	32ff      	adds	r2, #255	; 0xff
 8004998:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2200      	movs	r2, #0
 800499e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	785b      	ldrb	r3, [r3, #1]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d000      	beq.n	80049aa <USB_EPStartXfer+0x292>
 80049a8:	e070      	b.n	8004a8c <USB_EPStartXfer+0x374>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2250      	movs	r2, #80	; 0x50
 80049b2:	5a9b      	ldrh	r3, [r3, r2]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	001a      	movs	r2, r3
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	189b      	adds	r3, r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	00da      	lsls	r2, r3, #3
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	18d3      	adds	r3, r2, r3
 80049c8:	4a48      	ldr	r2, [pc, #288]	; (8004aec <USB_EPStartXfer+0x3d4>)
 80049ca:	4694      	mov	ip, r2
 80049cc:	4463      	add	r3, ip
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	059b      	lsls	r3, r3, #22
 80049d8:	0d9b      	lsrs	r3, r3, #22
 80049da:	b29a      	uxth	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	1d7b      	adds	r3, r7, #5
 80049e2:	33ff      	adds	r3, #255	; 0xff
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b3e      	cmp	r3, #62	; 0x3e
 80049e8:	d922      	bls.n	8004a30 <USB_EPStartXfer+0x318>
 80049ea:	1d7b      	adds	r3, r7, #5
 80049ec:	33ff      	adds	r3, #255	; 0xff
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	21fc      	movs	r1, #252	; 0xfc
 80049f4:	187a      	adds	r2, r7, r1
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	1d7b      	adds	r3, r7, #5
 80049fa:	33ff      	adds	r3, #255	; 0xff
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	221f      	movs	r2, #31
 8004a00:	4013      	ands	r3, r2
 8004a02:	d104      	bne.n	8004a0e <USB_EPStartXfer+0x2f6>
 8004a04:	187b      	adds	r3, r7, r1
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	187a      	adds	r2, r7, r1
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	23fc      	movs	r3, #252	; 0xfc
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	029b      	lsls	r3, r3, #10
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	4a35      	ldr	r2, [pc, #212]	; (8004afc <USB_EPStartXfer+0x3e4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	e04a      	b.n	8004ac6 <USB_EPStartXfer+0x3ae>
 8004a30:	1d7b      	adds	r3, r7, #5
 8004a32:	33ff      	adds	r3, #255	; 0xff
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <USB_EPStartXfer+0x334>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	4a2e      	ldr	r2, [pc, #184]	; (8004afc <USB_EPStartXfer+0x3e4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	e03c      	b.n	8004ac6 <USB_EPStartXfer+0x3ae>
 8004a4c:	1d7b      	adds	r3, r7, #5
 8004a4e:	33ff      	adds	r3, #255	; 0xff
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	21fc      	movs	r1, #252	; 0xfc
 8004a56:	187a      	adds	r2, r7, r1
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	1d7b      	adds	r3, r7, #5
 8004a5c:	33ff      	adds	r3, #255	; 0xff
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	4013      	ands	r3, r2
 8004a64:	d004      	beq.n	8004a70 <USB_EPStartXfer+0x358>
 8004a66:	187b      	adds	r3, r7, r1
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	187a      	adds	r2, r7, r1
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	23fc      	movs	r3, #252	; 0xfc
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	029b      	lsls	r3, r3, #10
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	4313      	orrs	r3, r2
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	801a      	strh	r2, [r3, #0]
 8004a8a:	e01c      	b.n	8004ac6 <USB_EPStartXfer+0x3ae>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d118      	bne.n	8004ac6 <USB_EPStartXfer+0x3ae>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2250      	movs	r2, #80	; 0x50
 8004a9c:	5a9b      	ldrh	r3, [r3, r2]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	001a      	movs	r2, r3
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	189b      	adds	r3, r3, r2
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	00da      	lsls	r2, r3, #3
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	18d3      	adds	r3, r2, r3
 8004ab2:	4a0e      	ldr	r2, [pc, #56]	; (8004aec <USB_EPStartXfer+0x3d4>)
 8004ab4:	4694      	mov	ip, r2
 8004ab6:	4463      	add	r3, ip
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	1d7b      	adds	r3, r7, #5
 8004abc:	33ff      	adds	r3, #255	; 0xff
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ac6:	2076      	movs	r0, #118	; 0x76
 8004ac8:	183b      	adds	r3, r7, r0
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	8912      	ldrh	r2, [r2, #8]
 8004ace:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6959      	ldr	r1, [r3, #20]
 8004ad4:	1d7b      	adds	r3, r7, #5
 8004ad6:	33ff      	adds	r3, #255	; 0xff
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b29c      	uxth	r4, r3
 8004adc:	183b      	adds	r3, r7, r0
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	0023      	movs	r3, r4
 8004ae4:	f001 f88a 	bl	8005bfc <USB_WritePMA>
 8004ae8:	e329      	b.n	800513e <USB_EPStartXfer+0xa26>
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	00000402 	.word	0x00000402
 8004af0:	ffff8f8f 	.word	0xffff8f8f
 8004af4:	ffff8180 	.word	0xffff8180
 8004af8:	00000406 	.word	0x00000406
 8004afc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d000      	beq.n	8004b0a <USB_EPStartXfer+0x3f2>
 8004b08:	e070      	b.n	8004bec <USB_EPStartXfer+0x4d4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2250      	movs	r2, #80	; 0x50
 8004b12:	5a9b      	ldrh	r3, [r3, r2]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	001a      	movs	r2, r3
 8004b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	00da      	lsls	r2, r3, #3
 8004b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b26:	18d3      	adds	r3, r2, r3
 8004b28:	4acd      	ldr	r2, [pc, #820]	; (8004e60 <USB_EPStartXfer+0x748>)
 8004b2a:	4694      	mov	ip, r2
 8004b2c:	4463      	add	r3, ip
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	059b      	lsls	r3, r3, #22
 8004b38:	0d9b      	lsrs	r3, r3, #22
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	1d7b      	adds	r3, r7, #5
 8004b42:	33ff      	adds	r3, #255	; 0xff
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b3e      	cmp	r3, #62	; 0x3e
 8004b48:	d922      	bls.n	8004b90 <USB_EPStartXfer+0x478>
 8004b4a:	1d7b      	adds	r3, r7, #5
 8004b4c:	33ff      	adds	r3, #255	; 0xff
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	21f8      	movs	r1, #248	; 0xf8
 8004b54:	187a      	adds	r2, r7, r1
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	1d7b      	adds	r3, r7, #5
 8004b5a:	33ff      	adds	r3, #255	; 0xff
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	221f      	movs	r2, #31
 8004b60:	4013      	ands	r3, r2
 8004b62:	d104      	bne.n	8004b6e <USB_EPStartXfer+0x456>
 8004b64:	187b      	adds	r3, r7, r1
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	187a      	adds	r2, r7, r1
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	23f8      	movs	r3, #248	; 0xf8
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	029b      	lsls	r3, r3, #10
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	4ab7      	ldr	r2, [pc, #732]	; (8004e64 <USB_EPStartXfer+0x74c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8c:	801a      	strh	r2, [r3, #0]
 8004b8e:	e04a      	b.n	8004c26 <USB_EPStartXfer+0x50e>
 8004b90:	1d7b      	adds	r3, r7, #5
 8004b92:	33ff      	adds	r3, #255	; 0xff
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <USB_EPStartXfer+0x494>
 8004b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	4ab0      	ldr	r2, [pc, #704]	; (8004e64 <USB_EPStartXfer+0x74c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	e03c      	b.n	8004c26 <USB_EPStartXfer+0x50e>
 8004bac:	1d7b      	adds	r3, r7, #5
 8004bae:	33ff      	adds	r3, #255	; 0xff
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	21f8      	movs	r1, #248	; 0xf8
 8004bb6:	187a      	adds	r2, r7, r1
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	1d7b      	adds	r3, r7, #5
 8004bbc:	33ff      	adds	r3, #255	; 0xff
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <USB_EPStartXfer+0x4b8>
 8004bc6:	187b      	adds	r3, r7, r1
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	187a      	adds	r2, r7, r1
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	23f8      	movs	r3, #248	; 0xf8
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	029b      	lsls	r3, r3, #10
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	4313      	orrs	r3, r2
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	e01c      	b.n	8004c26 <USB_EPStartXfer+0x50e>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d118      	bne.n	8004c26 <USB_EPStartXfer+0x50e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2250      	movs	r2, #80	; 0x50
 8004bfc:	5a9b      	ldrh	r3, [r3, r2]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	001a      	movs	r2, r3
 8004c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c04:	189b      	adds	r3, r3, r2
 8004c06:	653b      	str	r3, [r7, #80]	; 0x50
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	00da      	lsls	r2, r3, #3
 8004c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c10:	18d3      	adds	r3, r2, r3
 8004c12:	4a93      	ldr	r2, [pc, #588]	; (8004e60 <USB_EPStartXfer+0x748>)
 8004c14:	4694      	mov	ip, r2
 8004c16:	4463      	add	r3, ip
 8004c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c1a:	1d7b      	adds	r3, r7, #5
 8004c1c:	33ff      	adds	r3, #255	; 0xff
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c26:	2076      	movs	r0, #118	; 0x76
 8004c28:	183b      	adds	r3, r7, r0
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	8912      	ldrh	r2, [r2, #8]
 8004c2e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	6959      	ldr	r1, [r3, #20]
 8004c34:	1d7b      	adds	r3, r7, #5
 8004c36:	33ff      	adds	r3, #255	; 0xff
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	b29c      	uxth	r4, r3
 8004c3c:	183b      	adds	r3, r7, r0
 8004c3e:	881a      	ldrh	r2, [r3, #0]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	0023      	movs	r3, r4
 8004c44:	f000 ffda 	bl	8005bfc <USB_WritePMA>
            ep->xfer_buff += len;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	1d7b      	adds	r3, r7, #5
 8004c4e:	33ff      	adds	r3, #255	; 0xff
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	18d2      	adds	r2, r2, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6a1a      	ldr	r2, [r3, #32]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d908      	bls.n	8004c76 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6a1a      	ldr	r2, [r3, #32]
 8004c68:	1d7b      	adds	r3, r7, #5
 8004c6a:	33ff      	adds	r3, #255	; 0xff
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	621a      	str	r2, [r3, #32]
 8004c74:	e007      	b.n	8004c86 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	1d7a      	adds	r2, r7, #5
 8004c7c:	32ff      	adds	r2, #255	; 0xff
 8004c7e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d000      	beq.n	8004c94 <USB_EPStartXfer+0x57c>
 8004c92:	e070      	b.n	8004d76 <USB_EPStartXfer+0x65e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2250      	movs	r2, #80	; 0x50
 8004c9c:	5a9b      	ldrh	r3, [r3, r2]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	001a      	movs	r2, r3
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	00da      	lsls	r2, r3, #3
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	18d3      	adds	r3, r2, r3
 8004cb2:	4a6d      	ldr	r2, [pc, #436]	; (8004e68 <USB_EPStartXfer+0x750>)
 8004cb4:	4694      	mov	ip, r2
 8004cb6:	4463      	add	r3, ip
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	059b      	lsls	r3, r3, #22
 8004cc2:	0d9b      	lsrs	r3, r3, #22
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	1d7b      	adds	r3, r7, #5
 8004ccc:	33ff      	adds	r3, #255	; 0xff
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8004cd2:	d922      	bls.n	8004d1a <USB_EPStartXfer+0x602>
 8004cd4:	1d7b      	adds	r3, r7, #5
 8004cd6:	33ff      	adds	r3, #255	; 0xff
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	21f4      	movs	r1, #244	; 0xf4
 8004cde:	187a      	adds	r2, r7, r1
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	1d7b      	adds	r3, r7, #5
 8004ce4:	33ff      	adds	r3, #255	; 0xff
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	221f      	movs	r2, #31
 8004cea:	4013      	ands	r3, r2
 8004cec:	d104      	bne.n	8004cf8 <USB_EPStartXfer+0x5e0>
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	187a      	adds	r2, r7, r1
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	23f4      	movs	r3, #244	; 0xf4
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	029b      	lsls	r3, r3, #10
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	4a55      	ldr	r2, [pc, #340]	; (8004e64 <USB_EPStartXfer+0x74c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	e048      	b.n	8004dac <USB_EPStartXfer+0x694>
 8004d1a:	1d7b      	adds	r3, r7, #5
 8004d1c:	33ff      	adds	r3, #255	; 0xff
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <USB_EPStartXfer+0x61e>
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	4a4e      	ldr	r2, [pc, #312]	; (8004e64 <USB_EPStartXfer+0x74c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d32:	801a      	strh	r2, [r3, #0]
 8004d34:	e03a      	b.n	8004dac <USB_EPStartXfer+0x694>
 8004d36:	1d7b      	adds	r3, r7, #5
 8004d38:	33ff      	adds	r3, #255	; 0xff
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	21f4      	movs	r1, #244	; 0xf4
 8004d40:	187a      	adds	r2, r7, r1
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	1d7b      	adds	r3, r7, #5
 8004d46:	33ff      	adds	r3, #255	; 0xff
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <USB_EPStartXfer+0x642>
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	187a      	adds	r2, r7, r1
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	23f4      	movs	r3, #244	; 0xf4
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	029b      	lsls	r3, r3, #10
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	e01a      	b.n	8004dac <USB_EPStartXfer+0x694>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d116      	bne.n	8004dac <USB_EPStartXfer+0x694>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2250      	movs	r2, #80	; 0x50
 8004d82:	5a9b      	ldrh	r3, [r3, r2]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	001a      	movs	r2, r3
 8004d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	00da      	lsls	r2, r3, #3
 8004d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d96:	18d3      	adds	r3, r2, r3
 8004d98:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <USB_EPStartXfer+0x750>)
 8004d9a:	4694      	mov	ip, r2
 8004d9c:	4463      	add	r3, ip
 8004d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da0:	1d7b      	adds	r3, r7, #5
 8004da2:	33ff      	adds	r3, #255	; 0xff
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004dac:	2076      	movs	r0, #118	; 0x76
 8004dae:	183b      	adds	r3, r7, r0
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	8952      	ldrh	r2, [r2, #10]
 8004db4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6959      	ldr	r1, [r3, #20]
 8004dba:	1d7b      	adds	r3, r7, #5
 8004dbc:	33ff      	adds	r3, #255	; 0xff
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	b29c      	uxth	r4, r3
 8004dc2:	183b      	adds	r3, r7, r0
 8004dc4:	881a      	ldrh	r2, [r3, #0]
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	0023      	movs	r3, r4
 8004dca:	f000 ff17 	bl	8005bfc <USB_WritePMA>
 8004dce:	e1b6      	b.n	800513e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	1d7a      	adds	r2, r7, #5
 8004dd6:	32ff      	adds	r2, #255	; 0xff
 8004dd8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	18d3      	adds	r3, r2, r3
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	2062      	movs	r0, #98	; 0x62
 8004dea:	183b      	adds	r3, r7, r0
 8004dec:	491f      	ldr	r1, [pc, #124]	; (8004e6c <USB_EPStartXfer+0x754>)
 8004dee:	400a      	ands	r2, r1
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	18d3      	adds	r3, r2, r3
 8004dfc:	183a      	adds	r2, r7, r0
 8004dfe:	8812      	ldrh	r2, [r2, #0]
 8004e00:	491b      	ldr	r1, [pc, #108]	; (8004e70 <USB_EPStartXfer+0x758>)
 8004e02:	430a      	orrs	r2, r1
 8004e04:	b292      	uxth	r2, r2
 8004e06:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2250      	movs	r2, #80	; 0x50
 8004e10:	5a9b      	ldrh	r3, [r3, r2]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	001a      	movs	r2, r3
 8004e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e18:	189b      	adds	r3, r3, r2
 8004e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	00da      	lsls	r2, r3, #3
 8004e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e24:	18d3      	adds	r3, r2, r3
 8004e26:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <USB_EPStartXfer+0x748>)
 8004e28:	4694      	mov	ip, r2
 8004e2a:	4463      	add	r3, ip
 8004e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e2e:	1d7b      	adds	r3, r7, #5
 8004e30:	33ff      	adds	r3, #255	; 0xff
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e3a:	2076      	movs	r0, #118	; 0x76
 8004e3c:	183b      	adds	r3, r7, r0
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	8912      	ldrh	r2, [r2, #8]
 8004e42:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	6959      	ldr	r1, [r3, #20]
 8004e48:	1d7b      	adds	r3, r7, #5
 8004e4a:	33ff      	adds	r3, #255	; 0xff
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	b29c      	uxth	r4, r3
 8004e50:	183b      	adds	r3, r7, r0
 8004e52:	881a      	ldrh	r2, [r3, #0]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	0023      	movs	r3, r4
 8004e58:	f000 fed0 	bl	8005bfc <USB_WritePMA>
 8004e5c:	e16f      	b.n	800513e <USB_EPStartXfer+0xa26>
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	00000402 	.word	0x00000402
 8004e64:	ffff8000 	.word	0xffff8000
 8004e68:	00000406 	.word	0x00000406
 8004e6c:	ffff8e8f 	.word	0xffff8e8f
 8004e70:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	1d7b      	adds	r3, r7, #5
 8004e7a:	33ff      	adds	r3, #255	; 0xff
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	1ad2      	subs	r2, r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	18d3      	adds	r3, r2, r3
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	001a      	movs	r2, r3
 8004e94:	2340      	movs	r3, #64	; 0x40
 8004e96:	4013      	ands	r3, r2
 8004e98:	d100      	bne.n	8004e9c <USB_EPStartXfer+0x784>
 8004e9a:	e0a4      	b.n	8004fe6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	785b      	ldrb	r3, [r3, #1]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d000      	beq.n	8004eaa <USB_EPStartXfer+0x792>
 8004ea8:	e070      	b.n	8004f8c <USB_EPStartXfer+0x874>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2250      	movs	r2, #80	; 0x50
 8004eb2:	5a9b      	ldrh	r3, [r3, r2]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eba:	189b      	adds	r3, r3, r2
 8004ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	00da      	lsls	r2, r3, #3
 8004ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec6:	18d3      	adds	r3, r2, r3
 8004ec8:	4abc      	ldr	r2, [pc, #752]	; (80051bc <USB_EPStartXfer+0xaa4>)
 8004eca:	4694      	mov	ip, r2
 8004ecc:	4463      	add	r3, ip
 8004ece:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	059b      	lsls	r3, r3, #22
 8004ed8:	0d9b      	lsrs	r3, r3, #22
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	1d7b      	adds	r3, r7, #5
 8004ee2:	33ff      	adds	r3, #255	; 0xff
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee8:	d922      	bls.n	8004f30 <USB_EPStartXfer+0x818>
 8004eea:	1d7b      	adds	r3, r7, #5
 8004eec:	33ff      	adds	r3, #255	; 0xff
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	21f0      	movs	r1, #240	; 0xf0
 8004ef4:	187a      	adds	r2, r7, r1
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	1d7b      	adds	r3, r7, #5
 8004efa:	33ff      	adds	r3, #255	; 0xff
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	221f      	movs	r2, #31
 8004f00:	4013      	ands	r3, r2
 8004f02:	d104      	bne.n	8004f0e <USB_EPStartXfer+0x7f6>
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	187a      	adds	r2, r7, r1
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	23f0      	movs	r3, #240	; 0xf0
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	029b      	lsls	r3, r3, #10
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	4313      	orrs	r3, r2
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	4aa6      	ldr	r2, [pc, #664]	; (80051c0 <USB_EPStartXfer+0xaa8>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f2c:	801a      	strh	r2, [r3, #0]
 8004f2e:	e048      	b.n	8004fc2 <USB_EPStartXfer+0x8aa>
 8004f30:	1d7b      	adds	r3, r7, #5
 8004f32:	33ff      	adds	r3, #255	; 0xff
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d108      	bne.n	8004f4c <USB_EPStartXfer+0x834>
 8004f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4a9f      	ldr	r2, [pc, #636]	; (80051c0 <USB_EPStartXfer+0xaa8>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f48:	801a      	strh	r2, [r3, #0]
 8004f4a:	e03a      	b.n	8004fc2 <USB_EPStartXfer+0x8aa>
 8004f4c:	1d7b      	adds	r3, r7, #5
 8004f4e:	33ff      	adds	r3, #255	; 0xff
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	21f0      	movs	r1, #240	; 0xf0
 8004f56:	187a      	adds	r2, r7, r1
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	1d7b      	adds	r3, r7, #5
 8004f5c:	33ff      	adds	r3, #255	; 0xff
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2201      	movs	r2, #1
 8004f62:	4013      	ands	r3, r2
 8004f64:	d004      	beq.n	8004f70 <USB_EPStartXfer+0x858>
 8004f66:	187b      	adds	r3, r7, r1
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	187a      	adds	r2, r7, r1
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	23f0      	movs	r3, #240	; 0xf0
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	029b      	lsls	r3, r3, #10
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f88:	801a      	strh	r2, [r3, #0]
 8004f8a:	e01a      	b.n	8004fc2 <USB_EPStartXfer+0x8aa>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d116      	bne.n	8004fc2 <USB_EPStartXfer+0x8aa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2250      	movs	r2, #80	; 0x50
 8004f98:	5a9b      	ldrh	r3, [r3, r2]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	673b      	str	r3, [r7, #112]	; 0x70
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	00da      	lsls	r2, r3, #3
 8004faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fac:	18d3      	adds	r3, r2, r3
 8004fae:	4a83      	ldr	r2, [pc, #524]	; (80051bc <USB_EPStartXfer+0xaa4>)
 8004fb0:	4694      	mov	ip, r2
 8004fb2:	4463      	add	r3, ip
 8004fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fb6:	1d7b      	adds	r3, r7, #5
 8004fb8:	33ff      	adds	r3, #255	; 0xff
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004fc2:	2076      	movs	r0, #118	; 0x76
 8004fc4:	183b      	adds	r3, r7, r0
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	8952      	ldrh	r2, [r2, #10]
 8004fca:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6959      	ldr	r1, [r3, #20]
 8004fd0:	1d7b      	adds	r3, r7, #5
 8004fd2:	33ff      	adds	r3, #255	; 0xff
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	b29c      	uxth	r4, r3
 8004fd8:	183b      	adds	r3, r7, r0
 8004fda:	881a      	ldrh	r2, [r3, #0]
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	0023      	movs	r3, r4
 8004fe0:	f000 fe0c 	bl	8005bfc <USB_WritePMA>
 8004fe4:	e0ab      	b.n	800513e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d000      	beq.n	8004ff0 <USB_EPStartXfer+0x8d8>
 8004fee:	e070      	b.n	80050d2 <USB_EPStartXfer+0x9ba>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2250      	movs	r2, #80	; 0x50
 8004ff8:	5a9b      	ldrh	r3, [r3, r2]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	001a      	movs	r2, r3
 8004ffe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005000:	189b      	adds	r3, r3, r2
 8005002:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	00da      	lsls	r2, r3, #3
 800500a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800500c:	18d3      	adds	r3, r2, r3
 800500e:	4a6d      	ldr	r2, [pc, #436]	; (80051c4 <USB_EPStartXfer+0xaac>)
 8005010:	4694      	mov	ip, r2
 8005012:	4463      	add	r3, ip
 8005014:	67bb      	str	r3, [r7, #120]	; 0x78
 8005016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	059b      	lsls	r3, r3, #22
 800501e:	0d9b      	lsrs	r3, r3, #22
 8005020:	b29a      	uxth	r2, r3
 8005022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005024:	801a      	strh	r2, [r3, #0]
 8005026:	1d7b      	adds	r3, r7, #5
 8005028:	33ff      	adds	r3, #255	; 0xff
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b3e      	cmp	r3, #62	; 0x3e
 800502e:	d922      	bls.n	8005076 <USB_EPStartXfer+0x95e>
 8005030:	1d7b      	adds	r3, r7, #5
 8005032:	33ff      	adds	r3, #255	; 0xff
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	21ec      	movs	r1, #236	; 0xec
 800503a:	187a      	adds	r2, r7, r1
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	1d7b      	adds	r3, r7, #5
 8005040:	33ff      	adds	r3, #255	; 0xff
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	221f      	movs	r2, #31
 8005046:	4013      	ands	r3, r2
 8005048:	d104      	bne.n	8005054 <USB_EPStartXfer+0x93c>
 800504a:	187b      	adds	r3, r7, r1
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3b01      	subs	r3, #1
 8005050:	187a      	adds	r2, r7, r1
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29a      	uxth	r2, r3
 800505a:	23ec      	movs	r3, #236	; 0xec
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	029b      	lsls	r3, r3, #10
 8005064:	b29b      	uxth	r3, r3
 8005066:	4313      	orrs	r3, r2
 8005068:	b29b      	uxth	r3, r3
 800506a:	4a55      	ldr	r2, [pc, #340]	; (80051c0 <USB_EPStartXfer+0xaa8>)
 800506c:	4313      	orrs	r3, r2
 800506e:	b29a      	uxth	r2, r3
 8005070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e052      	b.n	800511c <USB_EPStartXfer+0xa04>
 8005076:	1d7b      	adds	r3, r7, #5
 8005078:	33ff      	adds	r3, #255	; 0xff
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d108      	bne.n	8005092 <USB_EPStartXfer+0x97a>
 8005080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	4a4e      	ldr	r2, [pc, #312]	; (80051c0 <USB_EPStartXfer+0xaa8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	b29a      	uxth	r2, r3
 800508c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800508e:	801a      	strh	r2, [r3, #0]
 8005090:	e044      	b.n	800511c <USB_EPStartXfer+0xa04>
 8005092:	1d7b      	adds	r3, r7, #5
 8005094:	33ff      	adds	r3, #255	; 0xff
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	21ec      	movs	r1, #236	; 0xec
 800509c:	187a      	adds	r2, r7, r1
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	1d7b      	adds	r3, r7, #5
 80050a2:	33ff      	adds	r3, #255	; 0xff
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2201      	movs	r2, #1
 80050a8:	4013      	ands	r3, r2
 80050aa:	d004      	beq.n	80050b6 <USB_EPStartXfer+0x99e>
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	187a      	adds	r2, r7, r1
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	23ec      	movs	r3, #236	; 0xec
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	029b      	lsls	r3, r3, #10
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	4313      	orrs	r3, r2
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ce:	801a      	strh	r2, [r3, #0]
 80050d0:	e024      	b.n	800511c <USB_EPStartXfer+0xa04>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	785b      	ldrb	r3, [r3, #1]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d120      	bne.n	800511c <USB_EPStartXfer+0xa04>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2184      	movs	r1, #132	; 0x84
 80050de:	187a      	adds	r2, r7, r1
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2250      	movs	r2, #80	; 0x50
 80050e6:	5a9b      	ldrh	r3, [r3, r2]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	001a      	movs	r2, r3
 80050ec:	187b      	adds	r3, r7, r1
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	189b      	adds	r3, r3, r2
 80050f2:	187a      	adds	r2, r7, r1
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	00da      	lsls	r2, r3, #3
 80050fc:	187b      	adds	r3, r7, r1
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	18d3      	adds	r3, r2, r3
 8005102:	4a30      	ldr	r2, [pc, #192]	; (80051c4 <USB_EPStartXfer+0xaac>)
 8005104:	4694      	mov	ip, r2
 8005106:	4463      	add	r3, ip
 8005108:	2180      	movs	r1, #128	; 0x80
 800510a:	187a      	adds	r2, r7, r1
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	1d7b      	adds	r3, r7, #5
 8005110:	33ff      	adds	r3, #255	; 0xff
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	b29a      	uxth	r2, r3
 8005116:	187b      	adds	r3, r7, r1
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800511c:	2076      	movs	r0, #118	; 0x76
 800511e:	183b      	adds	r3, r7, r0
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	8912      	ldrh	r2, [r2, #8]
 8005124:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6959      	ldr	r1, [r3, #20]
 800512a:	1d7b      	adds	r3, r7, #5
 800512c:	33ff      	adds	r3, #255	; 0xff
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	b29c      	uxth	r4, r3
 8005132:	183b      	adds	r3, r7, r0
 8005134:	881a      	ldrh	r2, [r3, #0]
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	0023      	movs	r3, r4
 800513a:	f000 fd5f 	bl	8005bfc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	18d3      	adds	r3, r2, r3
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29a      	uxth	r2, r3
 800514c:	200a      	movs	r0, #10
 800514e:	183b      	adds	r3, r7, r0
 8005150:	491d      	ldr	r1, [pc, #116]	; (80051c8 <USB_EPStartXfer+0xab0>)
 8005152:	400a      	ands	r2, r1
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	183b      	adds	r3, r7, r0
 8005158:	183a      	adds	r2, r7, r0
 800515a:	8812      	ldrh	r2, [r2, #0]
 800515c:	2110      	movs	r1, #16
 800515e:	404a      	eors	r2, r1
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	183b      	adds	r3, r7, r0
 8005164:	183a      	adds	r2, r7, r0
 8005166:	8812      	ldrh	r2, [r2, #0]
 8005168:	2120      	movs	r1, #32
 800516a:	404a      	eors	r2, r1
 800516c:	801a      	strh	r2, [r3, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	18d3      	adds	r3, r2, r3
 8005178:	183a      	adds	r2, r7, r0
 800517a:	8812      	ldrh	r2, [r2, #0]
 800517c:	4913      	ldr	r1, [pc, #76]	; (80051cc <USB_EPStartXfer+0xab4>)
 800517e:	430a      	orrs	r2, r1
 8005180:	b292      	uxth	r2, r2
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	f000 fbf4 	bl	8005970 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	7b1b      	ldrb	r3, [r3, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d000      	beq.n	8005192 <USB_EPStartXfer+0xa7a>
 8005190:	e0a9      	b.n	80052e6 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	429a      	cmp	r2, r3
 800519c:	d918      	bls.n	80051d0 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	1d7a      	adds	r2, r7, #5
 80051a4:	32ff      	adds	r2, #255	; 0xff
 80051a6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	1d7b      	adds	r3, r7, #5
 80051ae:	33ff      	adds	r3, #255	; 0xff
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	619a      	str	r2, [r3, #24]
 80051b8:	e012      	b.n	80051e0 <USB_EPStartXfer+0xac8>
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	00000406 	.word	0x00000406
 80051c0:	ffff8000 	.word	0xffff8000
 80051c4:	00000402 	.word	0x00000402
 80051c8:	ffff8fbf 	.word	0xffff8fbf
 80051cc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	1d7a      	adds	r2, r7, #5
 80051d6:	32ff      	adds	r2, #255	; 0xff
 80051d8:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2200      	movs	r2, #0
 80051de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2190      	movs	r1, #144	; 0x90
 80051e4:	187a      	adds	r2, r7, r1
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2250      	movs	r2, #80	; 0x50
 80051ec:	5a9b      	ldrh	r3, [r3, r2]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	001a      	movs	r2, r3
 80051f2:	187b      	adds	r3, r7, r1
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	187a      	adds	r2, r7, r1
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	00da      	lsls	r2, r3, #3
 8005202:	187b      	adds	r3, r7, r1
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	18d3      	adds	r3, r2, r3
 8005208:	4acf      	ldr	r2, [pc, #828]	; (8005548 <USB_EPStartXfer+0xe30>)
 800520a:	4694      	mov	ip, r2
 800520c:	4463      	add	r3, ip
 800520e:	218c      	movs	r1, #140	; 0x8c
 8005210:	187a      	adds	r2, r7, r1
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	187b      	adds	r3, r7, r1
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	059b      	lsls	r3, r3, #22
 800521e:	0d9b      	lsrs	r3, r3, #22
 8005220:	b29a      	uxth	r2, r3
 8005222:	187b      	adds	r3, r7, r1
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	1d7b      	adds	r3, r7, #5
 800522a:	33ff      	adds	r3, #255	; 0xff
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b3e      	cmp	r3, #62	; 0x3e
 8005230:	d925      	bls.n	800527e <USB_EPStartXfer+0xb66>
 8005232:	1d7b      	adds	r3, r7, #5
 8005234:	33ff      	adds	r3, #255	; 0xff
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	21e8      	movs	r1, #232	; 0xe8
 800523c:	187a      	adds	r2, r7, r1
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	1d7b      	adds	r3, r7, #5
 8005242:	33ff      	adds	r3, #255	; 0xff
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	221f      	movs	r2, #31
 8005248:	4013      	ands	r3, r2
 800524a:	d104      	bne.n	8005256 <USB_EPStartXfer+0xb3e>
 800524c:	187b      	adds	r3, r7, r1
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3b01      	subs	r3, #1
 8005252:	187a      	adds	r2, r7, r1
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	218c      	movs	r1, #140	; 0x8c
 8005258:	187b      	adds	r3, r7, r1
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29a      	uxth	r2, r3
 8005260:	23e8      	movs	r3, #232	; 0xe8
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	b29b      	uxth	r3, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	b29b      	uxth	r3, r3
 8005270:	4ab6      	ldr	r2, [pc, #728]	; (800554c <USB_EPStartXfer+0xe34>)
 8005272:	4313      	orrs	r3, r2
 8005274:	b29a      	uxth	r2, r3
 8005276:	187b      	adds	r3, r7, r1
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	e353      	b.n	8005926 <USB_EPStartXfer+0x120e>
 800527e:	1d7b      	adds	r3, r7, #5
 8005280:	33ff      	adds	r3, #255	; 0xff
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10b      	bne.n	80052a0 <USB_EPStartXfer+0xb88>
 8005288:	218c      	movs	r1, #140	; 0x8c
 800528a:	187b      	adds	r3, r7, r1
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	4aae      	ldr	r2, [pc, #696]	; (800554c <USB_EPStartXfer+0xe34>)
 8005294:	4313      	orrs	r3, r2
 8005296:	b29a      	uxth	r2, r3
 8005298:	187b      	adds	r3, r7, r1
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	801a      	strh	r2, [r3, #0]
 800529e:	e342      	b.n	8005926 <USB_EPStartXfer+0x120e>
 80052a0:	1d7b      	adds	r3, r7, #5
 80052a2:	33ff      	adds	r3, #255	; 0xff
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	21e8      	movs	r1, #232	; 0xe8
 80052aa:	187a      	adds	r2, r7, r1
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	1d7b      	adds	r3, r7, #5
 80052b0:	33ff      	adds	r3, #255	; 0xff
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2201      	movs	r2, #1
 80052b6:	4013      	ands	r3, r2
 80052b8:	d004      	beq.n	80052c4 <USB_EPStartXfer+0xbac>
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	187a      	adds	r2, r7, r1
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	218c      	movs	r1, #140	; 0x8c
 80052c6:	187b      	adds	r3, r7, r1
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	23e8      	movs	r3, #232	; 0xe8
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	029b      	lsls	r3, r3, #10
 80052d8:	b29b      	uxth	r3, r3
 80052da:	4313      	orrs	r3, r2
 80052dc:	b29a      	uxth	r2, r3
 80052de:	187b      	adds	r3, r7, r1
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	e31f      	b.n	8005926 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	78db      	ldrb	r3, [r3, #3]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d000      	beq.n	80052f0 <USB_EPStartXfer+0xbd8>
 80052ee:	e191      	b.n	8005614 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d000      	beq.n	80052fa <USB_EPStartXfer+0xbe2>
 80052f8:	e07c      	b.n	80053f4 <USB_EPStartXfer+0xcdc>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	21ac      	movs	r1, #172	; 0xac
 80052fe:	187a      	adds	r2, r7, r1
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2250      	movs	r2, #80	; 0x50
 8005306:	5a9b      	ldrh	r3, [r3, r2]
 8005308:	b29b      	uxth	r3, r3
 800530a:	001a      	movs	r2, r3
 800530c:	187b      	adds	r3, r7, r1
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	189b      	adds	r3, r3, r2
 8005312:	187a      	adds	r2, r7, r1
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	00da      	lsls	r2, r3, #3
 800531c:	187b      	adds	r3, r7, r1
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	18d3      	adds	r3, r2, r3
 8005322:	4a8b      	ldr	r2, [pc, #556]	; (8005550 <USB_EPStartXfer+0xe38>)
 8005324:	4694      	mov	ip, r2
 8005326:	4463      	add	r3, ip
 8005328:	21a8      	movs	r1, #168	; 0xa8
 800532a:	187a      	adds	r2, r7, r1
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	187b      	adds	r3, r7, r1
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	059b      	lsls	r3, r3, #22
 8005338:	0d9b      	lsrs	r3, r3, #22
 800533a:	b29a      	uxth	r2, r3
 800533c:	187b      	adds	r3, r7, r1
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b3e      	cmp	r3, #62	; 0x3e
 8005348:	d923      	bls.n	8005392 <USB_EPStartXfer+0xc7a>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	21e4      	movs	r1, #228	; 0xe4
 8005352:	187a      	adds	r2, r7, r1
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	221f      	movs	r2, #31
 800535c:	4013      	ands	r3, r2
 800535e:	d104      	bne.n	800536a <USB_EPStartXfer+0xc52>
 8005360:	187b      	adds	r3, r7, r1
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3b01      	subs	r3, #1
 8005366:	187a      	adds	r2, r7, r1
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	21a8      	movs	r1, #168	; 0xa8
 800536c:	187b      	adds	r3, r7, r1
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29a      	uxth	r2, r3
 8005374:	23e4      	movs	r3, #228	; 0xe4
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	029b      	lsls	r3, r3, #10
 800537e:	b29b      	uxth	r3, r3
 8005380:	4313      	orrs	r3, r2
 8005382:	b29b      	uxth	r3, r3
 8005384:	4a71      	ldr	r2, [pc, #452]	; (800554c <USB_EPStartXfer+0xe34>)
 8005386:	4313      	orrs	r3, r2
 8005388:	b29a      	uxth	r2, r3
 800538a:	187b      	adds	r3, r7, r1
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	801a      	strh	r2, [r3, #0]
 8005390:	e054      	b.n	800543c <USB_EPStartXfer+0xd24>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <USB_EPStartXfer+0xc9a>
 800539a:	21a8      	movs	r1, #168	; 0xa8
 800539c:	187b      	adds	r3, r7, r1
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4a69      	ldr	r2, [pc, #420]	; (800554c <USB_EPStartXfer+0xe34>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	187b      	adds	r3, r7, r1
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	e044      	b.n	800543c <USB_EPStartXfer+0xd24>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	21e4      	movs	r1, #228	; 0xe4
 80053ba:	187a      	adds	r2, r7, r1
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2201      	movs	r2, #1
 80053c4:	4013      	ands	r3, r2
 80053c6:	d004      	beq.n	80053d2 <USB_EPStartXfer+0xcba>
 80053c8:	187b      	adds	r3, r7, r1
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	187a      	adds	r2, r7, r1
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	21a8      	movs	r1, #168	; 0xa8
 80053d4:	187b      	adds	r3, r7, r1
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29a      	uxth	r2, r3
 80053dc:	23e4      	movs	r3, #228	; 0xe4
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	029b      	lsls	r3, r3, #10
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	4313      	orrs	r3, r2
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	187b      	adds	r3, r7, r1
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	e023      	b.n	800543c <USB_EPStartXfer+0xd24>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d11f      	bne.n	800543c <USB_EPStartXfer+0xd24>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	21b4      	movs	r1, #180	; 0xb4
 8005400:	187a      	adds	r2, r7, r1
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2250      	movs	r2, #80	; 0x50
 8005408:	5a9b      	ldrh	r3, [r3, r2]
 800540a:	b29b      	uxth	r3, r3
 800540c:	001a      	movs	r2, r3
 800540e:	187b      	adds	r3, r7, r1
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	189b      	adds	r3, r3, r2
 8005414:	187a      	adds	r2, r7, r1
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	00da      	lsls	r2, r3, #3
 800541e:	187b      	adds	r3, r7, r1
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	18d3      	adds	r3, r2, r3
 8005424:	4a4a      	ldr	r2, [pc, #296]	; (8005550 <USB_EPStartXfer+0xe38>)
 8005426:	4694      	mov	ip, r2
 8005428:	4463      	add	r3, ip
 800542a:	21b0      	movs	r1, #176	; 0xb0
 800542c:	187a      	adds	r2, r7, r1
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	b29a      	uxth	r2, r3
 8005436:	187b      	adds	r3, r7, r1
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	801a      	strh	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	22a4      	movs	r2, #164	; 0xa4
 8005440:	18ba      	adds	r2, r7, r2
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d000      	beq.n	800544e <USB_EPStartXfer+0xd36>
 800544c:	e082      	b.n	8005554 <USB_EPStartXfer+0xe3c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	219c      	movs	r1, #156	; 0x9c
 8005452:	187a      	adds	r2, r7, r1
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2250      	movs	r2, #80	; 0x50
 800545a:	5a9b      	ldrh	r3, [r3, r2]
 800545c:	b29b      	uxth	r3, r3
 800545e:	001a      	movs	r2, r3
 8005460:	187b      	adds	r3, r7, r1
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	189b      	adds	r3, r3, r2
 8005466:	187a      	adds	r2, r7, r1
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	00da      	lsls	r2, r3, #3
 8005470:	187b      	adds	r3, r7, r1
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	18d3      	adds	r3, r2, r3
 8005476:	4a34      	ldr	r2, [pc, #208]	; (8005548 <USB_EPStartXfer+0xe30>)
 8005478:	4694      	mov	ip, r2
 800547a:	4463      	add	r3, ip
 800547c:	2198      	movs	r1, #152	; 0x98
 800547e:	187a      	adds	r2, r7, r1
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	187b      	adds	r3, r7, r1
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	059b      	lsls	r3, r3, #22
 800548c:	0d9b      	lsrs	r3, r3, #22
 800548e:	b29a      	uxth	r2, r3
 8005490:	187b      	adds	r3, r7, r1
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b3e      	cmp	r3, #62	; 0x3e
 800549c:	d923      	bls.n	80054e6 <USB_EPStartXfer+0xdce>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	21e0      	movs	r1, #224	; 0xe0
 80054a6:	187a      	adds	r2, r7, r1
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	221f      	movs	r2, #31
 80054b0:	4013      	ands	r3, r2
 80054b2:	d104      	bne.n	80054be <USB_EPStartXfer+0xda6>
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	187a      	adds	r2, r7, r1
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	2198      	movs	r1, #152	; 0x98
 80054c0:	187b      	adds	r3, r7, r1
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	23e0      	movs	r3, #224	; 0xe0
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	4313      	orrs	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	4a1c      	ldr	r2, [pc, #112]	; (800554c <USB_EPStartXfer+0xe34>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	b29a      	uxth	r2, r3
 80054de:	187b      	adds	r3, r7, r1
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e057      	b.n	8005596 <USB_EPStartXfer+0xe7e>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <USB_EPStartXfer+0xdee>
 80054ee:	2198      	movs	r1, #152	; 0x98
 80054f0:	187b      	adds	r3, r7, r1
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4a14      	ldr	r2, [pc, #80]	; (800554c <USB_EPStartXfer+0xe34>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	187b      	adds	r3, r7, r1
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e047      	b.n	8005596 <USB_EPStartXfer+0xe7e>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	21e0      	movs	r1, #224	; 0xe0
 800550e:	187a      	adds	r2, r7, r1
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2201      	movs	r2, #1
 8005518:	4013      	ands	r3, r2
 800551a:	d004      	beq.n	8005526 <USB_EPStartXfer+0xe0e>
 800551c:	187b      	adds	r3, r7, r1
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	187a      	adds	r2, r7, r1
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	2198      	movs	r1, #152	; 0x98
 8005528:	187b      	adds	r3, r7, r1
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29a      	uxth	r2, r3
 8005530:	23e0      	movs	r3, #224	; 0xe0
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	029b      	lsls	r3, r3, #10
 800553a:	b29b      	uxth	r3, r3
 800553c:	4313      	orrs	r3, r2
 800553e:	b29a      	uxth	r2, r3
 8005540:	187b      	adds	r3, r7, r1
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	e026      	b.n	8005596 <USB_EPStartXfer+0xe7e>
 8005548:	00000406 	.word	0x00000406
 800554c:	ffff8000 	.word	0xffff8000
 8005550:	00000402 	.word	0x00000402
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d11c      	bne.n	8005596 <USB_EPStartXfer+0xe7e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2250      	movs	r2, #80	; 0x50
 8005560:	5a9b      	ldrh	r3, [r3, r2]
 8005562:	b29b      	uxth	r3, r3
 8005564:	001a      	movs	r2, r3
 8005566:	21a4      	movs	r1, #164	; 0xa4
 8005568:	187b      	adds	r3, r7, r1
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	189b      	adds	r3, r3, r2
 800556e:	187a      	adds	r2, r7, r1
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	00da      	lsls	r2, r3, #3
 8005578:	187b      	adds	r3, r7, r1
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	18d3      	adds	r3, r2, r3
 800557e:	4ad2      	ldr	r2, [pc, #840]	; (80058c8 <USB_EPStartXfer+0x11b0>)
 8005580:	4694      	mov	ip, r2
 8005582:	4463      	add	r3, ip
 8005584:	21a0      	movs	r1, #160	; 0xa0
 8005586:	187a      	adds	r2, r7, r1
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	b29a      	uxth	r2, r3
 8005590:	187b      	adds	r3, r7, r1
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d100      	bne.n	80055a0 <USB_EPStartXfer+0xe88>
 800559e:	e1c2      	b.n	8005926 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	18d2      	adds	r2, r2, r3
 80055aa:	2196      	movs	r1, #150	; 0x96
 80055ac:	187b      	adds	r3, r7, r1
 80055ae:	8812      	ldrh	r2, [r2, #0]
 80055b0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80055b2:	187b      	adds	r3, r7, r1
 80055b4:	881a      	ldrh	r2, [r3, #0]
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	01db      	lsls	r3, r3, #7
 80055ba:	4013      	ands	r3, r2
 80055bc:	d004      	beq.n	80055c8 <USB_EPStartXfer+0xeb0>
 80055be:	187b      	adds	r3, r7, r1
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	2240      	movs	r2, #64	; 0x40
 80055c4:	4013      	ands	r3, r2
 80055c6:	d10d      	bne.n	80055e4 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80055c8:	2196      	movs	r1, #150	; 0x96
 80055ca:	187b      	adds	r3, r7, r1
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	2380      	movs	r3, #128	; 0x80
 80055d0:	01db      	lsls	r3, r3, #7
 80055d2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80055d4:	d000      	beq.n	80055d8 <USB_EPStartXfer+0xec0>
 80055d6:	e1a6      	b.n	8005926 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	2240      	movs	r2, #64	; 0x40
 80055de:	4013      	ands	r3, r2
 80055e0:	d000      	beq.n	80055e4 <USB_EPStartXfer+0xecc>
 80055e2:	e1a0      	b.n	8005926 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	18d3      	adds	r3, r2, r3
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	2094      	movs	r0, #148	; 0x94
 80055f4:	183b      	adds	r3, r7, r0
 80055f6:	49b5      	ldr	r1, [pc, #724]	; (80058cc <USB_EPStartXfer+0x11b4>)
 80055f8:	400a      	ands	r2, r1
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	18d3      	adds	r3, r2, r3
 8005606:	183a      	adds	r2, r7, r0
 8005608:	8812      	ldrh	r2, [r2, #0]
 800560a:	49b1      	ldr	r1, [pc, #708]	; (80058d0 <USB_EPStartXfer+0x11b8>)
 800560c:	430a      	orrs	r2, r1
 800560e:	b292      	uxth	r2, r2
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	e188      	b.n	8005926 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	78db      	ldrb	r3, [r3, #3]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d000      	beq.n	800561e <USB_EPStartXfer+0xf06>
 800561c:	e181      	b.n	8005922 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d90d      	bls.n	8005646 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	1d7a      	adds	r2, r7, #5
 8005630:	32ff      	adds	r2, #255	; 0xff
 8005632:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	1d7b      	adds	r3, r7, #5
 800563a:	33ff      	adds	r3, #255	; 0xff
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	619a      	str	r2, [r3, #24]
 8005644:	e007      	b.n	8005656 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	1d7a      	adds	r2, r7, #5
 800564c:	32ff      	adds	r2, #255	; 0xff
 800564e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	785b      	ldrb	r3, [r3, #1]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d000      	beq.n	8005660 <USB_EPStartXfer+0xf48>
 800565e:	e082      	b.n	8005766 <USB_EPStartXfer+0x104e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	21cc      	movs	r1, #204	; 0xcc
 8005664:	187a      	adds	r2, r7, r1
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2250      	movs	r2, #80	; 0x50
 800566c:	5a9b      	ldrh	r3, [r3, r2]
 800566e:	b29b      	uxth	r3, r3
 8005670:	001a      	movs	r2, r3
 8005672:	187b      	adds	r3, r7, r1
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	189b      	adds	r3, r3, r2
 8005678:	187a      	adds	r2, r7, r1
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00da      	lsls	r2, r3, #3
 8005682:	187b      	adds	r3, r7, r1
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	18d3      	adds	r3, r2, r3
 8005688:	4a92      	ldr	r2, [pc, #584]	; (80058d4 <USB_EPStartXfer+0x11bc>)
 800568a:	4694      	mov	ip, r2
 800568c:	4463      	add	r3, ip
 800568e:	21c8      	movs	r1, #200	; 0xc8
 8005690:	187a      	adds	r2, r7, r1
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	187b      	adds	r3, r7, r1
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	059b      	lsls	r3, r3, #22
 800569e:	0d9b      	lsrs	r3, r3, #22
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	187b      	adds	r3, r7, r1
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	1d7b      	adds	r3, r7, #5
 80056aa:	33ff      	adds	r3, #255	; 0xff
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b3e      	cmp	r3, #62	; 0x3e
 80056b0:	d925      	bls.n	80056fe <USB_EPStartXfer+0xfe6>
 80056b2:	1d7b      	adds	r3, r7, #5
 80056b4:	33ff      	adds	r3, #255	; 0xff
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	21dc      	movs	r1, #220	; 0xdc
 80056bc:	187a      	adds	r2, r7, r1
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	1d7b      	adds	r3, r7, #5
 80056c2:	33ff      	adds	r3, #255	; 0xff
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	221f      	movs	r2, #31
 80056c8:	4013      	ands	r3, r2
 80056ca:	d104      	bne.n	80056d6 <USB_EPStartXfer+0xfbe>
 80056cc:	187b      	adds	r3, r7, r1
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	187a      	adds	r2, r7, r1
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	21c8      	movs	r1, #200	; 0xc8
 80056d8:	187b      	adds	r3, r7, r1
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29a      	uxth	r2, r3
 80056e0:	23dc      	movs	r3, #220	; 0xdc
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	029b      	lsls	r3, r3, #10
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	4313      	orrs	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	4a79      	ldr	r2, [pc, #484]	; (80058d8 <USB_EPStartXfer+0x11c0>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	187b      	adds	r3, r7, r1
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	801a      	strh	r2, [r3, #0]
 80056fc:	e058      	b.n	80057b0 <USB_EPStartXfer+0x1098>
 80056fe:	1d7b      	adds	r3, r7, #5
 8005700:	33ff      	adds	r3, #255	; 0xff
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <USB_EPStartXfer+0x1008>
 8005708:	21c8      	movs	r1, #200	; 0xc8
 800570a:	187b      	adds	r3, r7, r1
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	4a71      	ldr	r2, [pc, #452]	; (80058d8 <USB_EPStartXfer+0x11c0>)
 8005714:	4313      	orrs	r3, r2
 8005716:	b29a      	uxth	r2, r3
 8005718:	187b      	adds	r3, r7, r1
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	e047      	b.n	80057b0 <USB_EPStartXfer+0x1098>
 8005720:	1d7b      	adds	r3, r7, #5
 8005722:	33ff      	adds	r3, #255	; 0xff
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	21dc      	movs	r1, #220	; 0xdc
 800572a:	187a      	adds	r2, r7, r1
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	1d7b      	adds	r3, r7, #5
 8005730:	33ff      	adds	r3, #255	; 0xff
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2201      	movs	r2, #1
 8005736:	4013      	ands	r3, r2
 8005738:	d004      	beq.n	8005744 <USB_EPStartXfer+0x102c>
 800573a:	187b      	adds	r3, r7, r1
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3301      	adds	r3, #1
 8005740:	187a      	adds	r2, r7, r1
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	21c8      	movs	r1, #200	; 0xc8
 8005746:	187b      	adds	r3, r7, r1
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29a      	uxth	r2, r3
 800574e:	23dc      	movs	r3, #220	; 0xdc
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	029b      	lsls	r3, r3, #10
 8005758:	b29b      	uxth	r3, r3
 800575a:	4313      	orrs	r3, r2
 800575c:	b29a      	uxth	r2, r3
 800575e:	187b      	adds	r3, r7, r1
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	e024      	b.n	80057b0 <USB_EPStartXfer+0x1098>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d120      	bne.n	80057b0 <USB_EPStartXfer+0x1098>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	21d4      	movs	r1, #212	; 0xd4
 8005772:	187a      	adds	r2, r7, r1
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2250      	movs	r2, #80	; 0x50
 800577a:	5a9b      	ldrh	r3, [r3, r2]
 800577c:	b29b      	uxth	r3, r3
 800577e:	001a      	movs	r2, r3
 8005780:	187b      	adds	r3, r7, r1
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	189b      	adds	r3, r3, r2
 8005786:	187a      	adds	r2, r7, r1
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	00da      	lsls	r2, r3, #3
 8005790:	187b      	adds	r3, r7, r1
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	18d3      	adds	r3, r2, r3
 8005796:	4a4f      	ldr	r2, [pc, #316]	; (80058d4 <USB_EPStartXfer+0x11bc>)
 8005798:	4694      	mov	ip, r2
 800579a:	4463      	add	r3, ip
 800579c:	21d0      	movs	r1, #208	; 0xd0
 800579e:	187a      	adds	r2, r7, r1
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	1d7b      	adds	r3, r7, #5
 80057a4:	33ff      	adds	r3, #255	; 0xff
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	187b      	adds	r3, r7, r1
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	22c4      	movs	r2, #196	; 0xc4
 80057b4:	18ba      	adds	r2, r7, r2
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d000      	beq.n	80057c2 <USB_EPStartXfer+0x10aa>
 80057c0:	e08c      	b.n	80058dc <USB_EPStartXfer+0x11c4>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	21bc      	movs	r1, #188	; 0xbc
 80057c6:	187a      	adds	r2, r7, r1
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2250      	movs	r2, #80	; 0x50
 80057ce:	5a9b      	ldrh	r3, [r3, r2]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	001a      	movs	r2, r3
 80057d4:	187b      	adds	r3, r7, r1
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	189b      	adds	r3, r3, r2
 80057da:	187a      	adds	r2, r7, r1
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	00da      	lsls	r2, r3, #3
 80057e4:	187b      	adds	r3, r7, r1
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	18d3      	adds	r3, r2, r3
 80057ea:	4a37      	ldr	r2, [pc, #220]	; (80058c8 <USB_EPStartXfer+0x11b0>)
 80057ec:	4694      	mov	ip, r2
 80057ee:	4463      	add	r3, ip
 80057f0:	21b8      	movs	r1, #184	; 0xb8
 80057f2:	187a      	adds	r2, r7, r1
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	187b      	adds	r3, r7, r1
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	059b      	lsls	r3, r3, #22
 8005800:	0d9b      	lsrs	r3, r3, #22
 8005802:	b29a      	uxth	r2, r3
 8005804:	187b      	adds	r3, r7, r1
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	1d7b      	adds	r3, r7, #5
 800580c:	33ff      	adds	r3, #255	; 0xff
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b3e      	cmp	r3, #62	; 0x3e
 8005812:	d925      	bls.n	8005860 <USB_EPStartXfer+0x1148>
 8005814:	1d7b      	adds	r3, r7, #5
 8005816:	33ff      	adds	r3, #255	; 0xff
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	21d8      	movs	r1, #216	; 0xd8
 800581e:	187a      	adds	r2, r7, r1
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	1d7b      	adds	r3, r7, #5
 8005824:	33ff      	adds	r3, #255	; 0xff
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	221f      	movs	r2, #31
 800582a:	4013      	ands	r3, r2
 800582c:	d104      	bne.n	8005838 <USB_EPStartXfer+0x1120>
 800582e:	187b      	adds	r3, r7, r1
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3b01      	subs	r3, #1
 8005834:	187a      	adds	r2, r7, r1
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	21b8      	movs	r1, #184	; 0xb8
 800583a:	187b      	adds	r3, r7, r1
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29a      	uxth	r2, r3
 8005842:	23d8      	movs	r3, #216	; 0xd8
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	029b      	lsls	r3, r3, #10
 800584c:	b29b      	uxth	r3, r3
 800584e:	4313      	orrs	r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <USB_EPStartXfer+0x11c0>)
 8005854:	4313      	orrs	r3, r2
 8005856:	b29a      	uxth	r2, r3
 8005858:	187b      	adds	r3, r7, r1
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	e062      	b.n	8005926 <USB_EPStartXfer+0x120e>
 8005860:	1d7b      	adds	r3, r7, #5
 8005862:	33ff      	adds	r3, #255	; 0xff
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <USB_EPStartXfer+0x116a>
 800586a:	21b8      	movs	r1, #184	; 0xb8
 800586c:	187b      	adds	r3, r7, r1
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <USB_EPStartXfer+0x11c0>)
 8005876:	4313      	orrs	r3, r2
 8005878:	b29a      	uxth	r2, r3
 800587a:	187b      	adds	r3, r7, r1
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	801a      	strh	r2, [r3, #0]
 8005880:	e051      	b.n	8005926 <USB_EPStartXfer+0x120e>
 8005882:	1d7b      	adds	r3, r7, #5
 8005884:	33ff      	adds	r3, #255	; 0xff
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	21d8      	movs	r1, #216	; 0xd8
 800588c:	187a      	adds	r2, r7, r1
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	1d7b      	adds	r3, r7, #5
 8005892:	33ff      	adds	r3, #255	; 0xff
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2201      	movs	r2, #1
 8005898:	4013      	ands	r3, r2
 800589a:	d004      	beq.n	80058a6 <USB_EPStartXfer+0x118e>
 800589c:	187b      	adds	r3, r7, r1
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	187a      	adds	r2, r7, r1
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	21b8      	movs	r1, #184	; 0xb8
 80058a8:	187b      	adds	r3, r7, r1
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	23d8      	movs	r3, #216	; 0xd8
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	029b      	lsls	r3, r3, #10
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	4313      	orrs	r3, r2
 80058be:	b29a      	uxth	r2, r3
 80058c0:	187b      	adds	r3, r7, r1
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	e02e      	b.n	8005926 <USB_EPStartXfer+0x120e>
 80058c8:	00000406 	.word	0x00000406
 80058cc:	ffff8f8f 	.word	0xffff8f8f
 80058d0:	ffff80c0 	.word	0xffff80c0
 80058d4:	00000402 	.word	0x00000402
 80058d8:	ffff8000 	.word	0xffff8000
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d120      	bne.n	8005926 <USB_EPStartXfer+0x120e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2250      	movs	r2, #80	; 0x50
 80058e8:	5a9b      	ldrh	r3, [r3, r2]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	001a      	movs	r2, r3
 80058ee:	21c4      	movs	r1, #196	; 0xc4
 80058f0:	187b      	adds	r3, r7, r1
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	189b      	adds	r3, r3, r2
 80058f6:	187a      	adds	r2, r7, r1
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	00da      	lsls	r2, r3, #3
 8005900:	187b      	adds	r3, r7, r1
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	18d3      	adds	r3, r2, r3
 8005906:	4a1d      	ldr	r2, [pc, #116]	; (800597c <USB_EPStartXfer+0x1264>)
 8005908:	4694      	mov	ip, r2
 800590a:	4463      	add	r3, ip
 800590c:	21c0      	movs	r1, #192	; 0xc0
 800590e:	187a      	adds	r2, r7, r1
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	1d7b      	adds	r3, r7, #5
 8005914:	33ff      	adds	r3, #255	; 0xff
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	b29a      	uxth	r2, r3
 800591a:	187b      	adds	r3, r7, r1
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	e001      	b.n	8005926 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e025      	b.n	8005972 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	18d3      	adds	r3, r2, r3
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29a      	uxth	r2, r3
 8005934:	208a      	movs	r0, #138	; 0x8a
 8005936:	183b      	adds	r3, r7, r0
 8005938:	4911      	ldr	r1, [pc, #68]	; (8005980 <USB_EPStartXfer+0x1268>)
 800593a:	400a      	ands	r2, r1
 800593c:	801a      	strh	r2, [r3, #0]
 800593e:	183b      	adds	r3, r7, r0
 8005940:	183a      	adds	r2, r7, r0
 8005942:	8812      	ldrh	r2, [r2, #0]
 8005944:	2180      	movs	r1, #128	; 0x80
 8005946:	0149      	lsls	r1, r1, #5
 8005948:	404a      	eors	r2, r1
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	183b      	adds	r3, r7, r0
 800594e:	183a      	adds	r2, r7, r0
 8005950:	8812      	ldrh	r2, [r2, #0]
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	0189      	lsls	r1, r1, #6
 8005956:	404a      	eors	r2, r1
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	18d3      	adds	r3, r2, r3
 8005964:	183a      	adds	r2, r7, r0
 8005966:	8812      	ldrh	r2, [r2, #0]
 8005968:	4906      	ldr	r1, [pc, #24]	; (8005984 <USB_EPStartXfer+0x126c>)
 800596a:	430a      	orrs	r2, r1
 800596c:	b292      	uxth	r2, r2
 800596e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	0018      	movs	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	b043      	add	sp, #268	; 0x10c
 8005978:	bd90      	pop	{r4, r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	00000406 	.word	0x00000406
 8005980:	ffffbf8f 	.word	0xffffbf8f
 8005984:	ffff8080 	.word	0xffff8080

08005988 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01d      	beq.n	80059d6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	18d3      	adds	r3, r2, r3
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	200c      	movs	r0, #12
 80059aa:	183b      	adds	r3, r7, r0
 80059ac:	491b      	ldr	r1, [pc, #108]	; (8005a1c <USB_EPSetStall+0x94>)
 80059ae:	400a      	ands	r2, r1
 80059b0:	801a      	strh	r2, [r3, #0]
 80059b2:	183b      	adds	r3, r7, r0
 80059b4:	183a      	adds	r2, r7, r0
 80059b6:	8812      	ldrh	r2, [r2, #0]
 80059b8:	2110      	movs	r1, #16
 80059ba:	404a      	eors	r2, r1
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	18d3      	adds	r3, r2, r3
 80059c8:	183a      	adds	r2, r7, r0
 80059ca:	8812      	ldrh	r2, [r2, #0]
 80059cc:	4914      	ldr	r1, [pc, #80]	; (8005a20 <USB_EPSetStall+0x98>)
 80059ce:	430a      	orrs	r2, r1
 80059d0:	b292      	uxth	r2, r2
 80059d2:	801a      	strh	r2, [r3, #0]
 80059d4:	e01d      	b.n	8005a12 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	18d3      	adds	r3, r2, r3
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	200e      	movs	r0, #14
 80059e6:	183b      	adds	r3, r7, r0
 80059e8:	490e      	ldr	r1, [pc, #56]	; (8005a24 <USB_EPSetStall+0x9c>)
 80059ea:	400a      	ands	r2, r1
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	183b      	adds	r3, r7, r0
 80059f0:	183a      	adds	r2, r7, r0
 80059f2:	8812      	ldrh	r2, [r2, #0]
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	0149      	lsls	r1, r1, #5
 80059f8:	404a      	eors	r2, r1
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	18d3      	adds	r3, r2, r3
 8005a06:	183a      	adds	r2, r7, r0
 8005a08:	8812      	ldrh	r2, [r2, #0]
 8005a0a:	4905      	ldr	r1, [pc, #20]	; (8005a20 <USB_EPSetStall+0x98>)
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	b292      	uxth	r2, r2
 8005a10:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	0018      	movs	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b004      	add	sp, #16
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	ffff8fbf 	.word	0xffff8fbf
 8005a20:	ffff8080 	.word	0xffff8080
 8005a24:	ffffbf8f 	.word	0xffffbf8f

08005a28 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	7b1b      	ldrb	r3, [r3, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d000      	beq.n	8005a3c <USB_EPClearStall+0x14>
 8005a3a:	e095      	b.n	8005b68 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d046      	beq.n	8005ad2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	18d2      	adds	r2, r2, r3
 8005a4e:	2110      	movs	r1, #16
 8005a50:	187b      	adds	r3, r7, r1
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	801a      	strh	r2, [r3, #0]
 8005a56:	187b      	adds	r3, r7, r1
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	2240      	movs	r2, #64	; 0x40
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d016      	beq.n	8005a8e <USB_EPClearStall+0x66>
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	18d3      	adds	r3, r2, r3
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	200e      	movs	r0, #14
 8005a70:	183b      	adds	r3, r7, r0
 8005a72:	4940      	ldr	r1, [pc, #256]	; (8005b74 <USB_EPClearStall+0x14c>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	18d3      	adds	r3, r2, r3
 8005a82:	183a      	adds	r2, r7, r0
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	493c      	ldr	r1, [pc, #240]	; (8005b78 <USB_EPClearStall+0x150>)
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	b292      	uxth	r2, r2
 8005a8c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	78db      	ldrb	r3, [r3, #3]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d068      	beq.n	8005b68 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	18d3      	adds	r3, r2, r3
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	200c      	movs	r0, #12
 8005aa6:	183b      	adds	r3, r7, r0
 8005aa8:	4934      	ldr	r1, [pc, #208]	; (8005b7c <USB_EPClearStall+0x154>)
 8005aaa:	400a      	ands	r2, r1
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	183b      	adds	r3, r7, r0
 8005ab0:	183a      	adds	r2, r7, r0
 8005ab2:	8812      	ldrh	r2, [r2, #0]
 8005ab4:	2120      	movs	r1, #32
 8005ab6:	404a      	eors	r2, r1
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	18d3      	adds	r3, r2, r3
 8005ac4:	183a      	adds	r2, r7, r0
 8005ac6:	8812      	ldrh	r2, [r2, #0]
 8005ac8:	492d      	ldr	r1, [pc, #180]	; (8005b80 <USB_EPClearStall+0x158>)
 8005aca:	430a      	orrs	r2, r1
 8005acc:	b292      	uxth	r2, r2
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	e04a      	b.n	8005b68 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	18d2      	adds	r2, r2, r3
 8005adc:	2116      	movs	r1, #22
 8005ade:	187b      	adds	r3, r7, r1
 8005ae0:	8812      	ldrh	r2, [r2, #0]
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	187b      	adds	r3, r7, r1
 8005ae6:	881a      	ldrh	r2, [r3, #0]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	01db      	lsls	r3, r3, #7
 8005aec:	4013      	ands	r3, r2
 8005aee:	d016      	beq.n	8005b1e <USB_EPClearStall+0xf6>
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	18d3      	adds	r3, r2, r3
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	2014      	movs	r0, #20
 8005b00:	183b      	adds	r3, r7, r0
 8005b02:	491c      	ldr	r1, [pc, #112]	; (8005b74 <USB_EPClearStall+0x14c>)
 8005b04:	400a      	ands	r2, r1
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	18d3      	adds	r3, r2, r3
 8005b12:	183a      	adds	r2, r7, r0
 8005b14:	8812      	ldrh	r2, [r2, #0]
 8005b16:	491b      	ldr	r1, [pc, #108]	; (8005b84 <USB_EPClearStall+0x15c>)
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	b292      	uxth	r2, r2
 8005b1c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	2012      	movs	r0, #18
 8005b2e:	183b      	adds	r3, r7, r0
 8005b30:	4915      	ldr	r1, [pc, #84]	; (8005b88 <USB_EPClearStall+0x160>)
 8005b32:	400a      	ands	r2, r1
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	183b      	adds	r3, r7, r0
 8005b38:	183a      	adds	r2, r7, r0
 8005b3a:	8812      	ldrh	r2, [r2, #0]
 8005b3c:	2180      	movs	r1, #128	; 0x80
 8005b3e:	0149      	lsls	r1, r1, #5
 8005b40:	404a      	eors	r2, r1
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	183b      	adds	r3, r7, r0
 8005b46:	183a      	adds	r2, r7, r0
 8005b48:	8812      	ldrh	r2, [r2, #0]
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	0189      	lsls	r1, r1, #6
 8005b4e:	404a      	eors	r2, r1
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	18d3      	adds	r3, r2, r3
 8005b5c:	183a      	adds	r2, r7, r0
 8005b5e:	8812      	ldrh	r2, [r2, #0]
 8005b60:	4907      	ldr	r1, [pc, #28]	; (8005b80 <USB_EPClearStall+0x158>)
 8005b62:	430a      	orrs	r2, r1
 8005b64:	b292      	uxth	r2, r2
 8005b66:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b006      	add	sp, #24
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	ffff8f8f 	.word	0xffff8f8f
 8005b78:	ffff80c0 	.word	0xffff80c0
 8005b7c:	ffff8fbf 	.word	0xffff8fbf
 8005b80:	ffff8080 	.word	0xffff8080
 8005b84:	ffffc080 	.word	0xffffc080
 8005b88:	ffffbf8f 	.word	0xffffbf8f

08005b8c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	000a      	movs	r2, r1
 8005b96:	1cfb      	adds	r3, r7, #3
 8005b98:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005b9a:	1cfb      	adds	r3, r7, #3
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	224c      	movs	r2, #76	; 0x4c
 8005ba6:	2180      	movs	r1, #128	; 0x80
 8005ba8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	0018      	movs	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b002      	add	sp, #8
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2258      	movs	r2, #88	; 0x58
 8005bc0:	5a9b      	ldrh	r3, [r3, r2]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4a05      	ldr	r2, [pc, #20]	; (8005bdc <USB_DevConnect+0x28>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	b299      	uxth	r1, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2258      	movs	r2, #88	; 0x58
 8005bce:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b002      	add	sp, #8
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	ffff8000 	.word	0xffff8000

08005be0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2244      	movs	r2, #68	; 0x44
 8005bec:	5a9b      	ldrh	r3, [r3, r2]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
}
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b004      	add	sp, #16
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	; 0x28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	0019      	movs	r1, r3
 8005c08:	1dbb      	adds	r3, r7, #6
 8005c0a:	801a      	strh	r2, [r3, #0]
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	1c0a      	adds	r2, r1, #0
 8005c10:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005c12:	1d3b      	adds	r3, r7, #4
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	3301      	adds	r3, #1
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c24:	1dbb      	adds	r3, r7, #6
 8005c26:	881a      	ldrh	r2, [r3, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	18d3      	adds	r3, r2, r3
 8005c2c:	2280      	movs	r2, #128	; 0x80
 8005c2e:	00d2      	lsls	r2, r2, #3
 8005c30:	4694      	mov	ip, r2
 8005c32:	4463      	add	r3, ip
 8005c34:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	e020      	b.n	8005c7e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	781a      	ldrb	r2, [r3, #0]
 8005c40:	2112      	movs	r1, #18
 8005c42:	187b      	adds	r3, r7, r1
 8005c44:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	b21a      	sxth	r2, r3
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	2000      	movs	r0, #0
 8005c54:	5e1b      	ldrsh	r3, [r3, r0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	b21a      	sxth	r2, r3
 8005c5a:	187b      	adds	r3, r7, r1
 8005c5c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	187a      	adds	r2, r7, r1
 8005c62:	8812      	ldrh	r2, [r2, #0]
 8005c64:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	3302      	adds	r3, #2
 8005c6a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	3301      	adds	r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1db      	bne.n	8005c3c <USB_WritePMA+0x40>
  }
}
 8005c84:	46c0      	nop			; (mov r8, r8)
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b00a      	add	sp, #40	; 0x28
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b08a      	sub	sp, #40	; 0x28
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	0019      	movs	r1, r3
 8005c9a:	1dbb      	adds	r3, r7, #6
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	1d3b      	adds	r3, r7, #4
 8005ca0:	1c0a      	adds	r2, r1, #0
 8005ca2:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cb6:	1dbb      	adds	r3, r7, #6
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	18d3      	adds	r3, r2, r3
 8005cbe:	2280      	movs	r2, #128	; 0x80
 8005cc0:	00d2      	lsls	r2, r2, #3
 8005cc2:	4694      	mov	ip, r2
 8005cc4:	4463      	add	r3, ip
 8005cc6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ccc:	e018      	b.n	8005d00 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	3302      	adds	r3, #2
 8005cda:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e3      	bne.n	8005cce <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	701a      	strb	r2, [r3, #0]
  }
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b00a      	add	sp, #40	; 0x28
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	000a      	movs	r2, r1
 8005d36:	1cfb      	adds	r3, r7, #3
 8005d38:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	2203      	movs	r2, #3
 8005d40:	2181      	movs	r1, #129	; 0x81
 8005d42:	f001 fe5a 	bl	80079fa <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005d4c:	2010      	movs	r0, #16
 8005d4e:	f001 ffd7 	bl	8007d00 <USBD_static_malloc>
 8005d52:	0001      	movs	r1, r0
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	23ae      	movs	r3, #174	; 0xae
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	23ae      	movs	r3, #174	; 0xae
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	58d3      	ldr	r3, [r2, r3]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e006      	b.n	8005d7a <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	23ae      	movs	r3, #174	; 0xae
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	58d3      	ldr	r3, [r2, r3]
 8005d74:	2200      	movs	r2, #0
 8005d76:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b002      	add	sp, #8
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	000a      	movs	r2, r1
 8005d8c:	1cfb      	adds	r3, r7, #3
 8005d8e:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2181      	movs	r1, #129	; 0x81
 8005d94:	0018      	movs	r0, r3
 8005d96:	f001 fe67 	bl	8007a68 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	23ae      	movs	r3, #174	; 0xae
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	58d3      	ldr	r3, [r2, r3]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00b      	beq.n	8005dc4 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	23ae      	movs	r3, #174	; 0xae
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	58d3      	ldr	r3, [r2, r3]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f001 ffaf 	bl	8007d18 <USBD_static_free>
    pdev->pClassData = NULL;
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	23ae      	movs	r3, #174	; 0xae
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	b002      	add	sp, #8
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	23ae      	movs	r3, #174	; 0xae
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	58d3      	ldr	r3, [r2, r3]
 8005de2:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005de4:	231e      	movs	r3, #30
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	2200      	movs	r2, #0
 8005dea:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005df0:	230e      	movs	r3, #14
 8005df2:	18fb      	adds	r3, r7, r3
 8005df4:	2200      	movs	r2, #0
 8005df6:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005df8:	2317      	movs	r3, #23
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	001a      	movs	r2, r3
 8005e06:	2360      	movs	r3, #96	; 0x60
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d03a      	beq.n	8005e82 <USBD_HID_Setup+0xb2>
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d000      	beq.n	8005e12 <USBD_HID_Setup+0x42>
 8005e10:	e0d6      	b.n	8005fc0 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	2b0b      	cmp	r3, #11
 8005e18:	d008      	beq.n	8005e2c <USBD_HID_Setup+0x5c>
 8005e1a:	dc26      	bgt.n	8005e6a <USBD_HID_Setup+0x9a>
 8005e1c:	2b0a      	cmp	r3, #10
 8005e1e:	d013      	beq.n	8005e48 <USBD_HID_Setup+0x78>
 8005e20:	dc23      	bgt.n	8005e6a <USBD_HID_Setup+0x9a>
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d019      	beq.n	8005e5a <USBD_HID_Setup+0x8a>
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d007      	beq.n	8005e3a <USBD_HID_Setup+0x6a>
 8005e2a:	e01e      	b.n	8005e6a <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	885b      	ldrh	r3, [r3, #2]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	001a      	movs	r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	601a      	str	r2, [r3, #0]
          break;
 8005e38:	e022      	b.n	8005e80 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005e3a:	6939      	ldr	r1, [r7, #16]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	0018      	movs	r0, r3
 8005e42:	f001 fabf 	bl	80073c4 <USBD_CtlSendData>
          break;
 8005e46:	e01b      	b.n	8005e80 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	885b      	ldrh	r3, [r3, #2]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	001a      	movs	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]
          break;
 8005e58:	e012      	b.n	8005e80 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1d19      	adds	r1, r3, #4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	0018      	movs	r0, r3
 8005e64:	f001 faae 	bl	80073c4 <USBD_CtlSendData>
          break;
 8005e68:	e00a      	b.n	8005e80 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	0011      	movs	r1, r2
 8005e70:	0018      	movs	r0, r3
 8005e72:	f001 fa29 	bl	80072c8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e76:	2317      	movs	r3, #23
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	701a      	strb	r2, [r3, #0]
          break;
 8005e7e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005e80:	e0a9      	b.n	8005fd6 <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	785b      	ldrb	r3, [r3, #1]
 8005e86:	2b0b      	cmp	r3, #11
 8005e88:	d100      	bne.n	8005e8c <USBD_HID_Setup+0xbc>
 8005e8a:	e075      	b.n	8005f78 <USBD_HID_Setup+0x1a8>
 8005e8c:	dd00      	ble.n	8005e90 <USBD_HID_Setup+0xc0>
 8005e8e:	e08b      	b.n	8005fa8 <USBD_HID_Setup+0x1d8>
 8005e90:	2b0a      	cmp	r3, #10
 8005e92:	d057      	beq.n	8005f44 <USBD_HID_Setup+0x174>
 8005e94:	dd00      	ble.n	8005e98 <USBD_HID_Setup+0xc8>
 8005e96:	e087      	b.n	8005fa8 <USBD_HID_Setup+0x1d8>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <USBD_HID_Setup+0xd2>
 8005e9c:	2b06      	cmp	r3, #6
 8005e9e:	d019      	beq.n	8005ed4 <USBD_HID_Setup+0x104>
 8005ea0:	e082      	b.n	8005fa8 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	23a7      	movs	r3, #167	; 0xa7
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	5cd3      	ldrb	r3, [r2, r3]
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d107      	bne.n	8005ebe <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005eae:	230e      	movs	r3, #14
 8005eb0:	18f9      	adds	r1, r7, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f001 fa84 	bl	80073c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ebc:	e07f      	b.n	8005fbe <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	0011      	movs	r1, r2
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f001 f9ff 	bl	80072c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005eca:	2317      	movs	r3, #23
 8005ecc:	18fb      	adds	r3, r7, r3
 8005ece:	2202      	movs	r2, #2
 8005ed0:	701a      	strb	r2, [r3, #0]
          break;
 8005ed2:	e074      	b.n	8005fbe <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	885b      	ldrh	r3, [r3, #2]
 8005ed8:	0a1b      	lsrs	r3, r3, #8
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b22      	cmp	r3, #34	; 0x22
 8005ede:	d10b      	bne.n	8005ef8 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	88db      	ldrh	r3, [r3, #6]
 8005ee4:	221e      	movs	r2, #30
 8005ee6:	18ba      	adds	r2, r7, r2
 8005ee8:	b299      	uxth	r1, r3
 8005eea:	293f      	cmp	r1, #63	; 0x3f
 8005eec:	d900      	bls.n	8005ef0 <USBD_HID_Setup+0x120>
 8005eee:	233f      	movs	r3, #63	; 0x3f
 8005ef0:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8005ef2:	4b3c      	ldr	r3, [pc, #240]	; (8005fe4 <USBD_HID_Setup+0x214>)
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	e01c      	b.n	8005f32 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	885b      	ldrh	r3, [r3, #2]
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b21      	cmp	r3, #33	; 0x21
 8005f02:	d10b      	bne.n	8005f1c <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8005f04:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <USBD_HID_Setup+0x218>)
 8005f06:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	88db      	ldrh	r3, [r3, #6]
 8005f0c:	221e      	movs	r2, #30
 8005f0e:	18ba      	adds	r2, r7, r2
 8005f10:	b299      	uxth	r1, r3
 8005f12:	2909      	cmp	r1, #9
 8005f14:	d900      	bls.n	8005f18 <USBD_HID_Setup+0x148>
 8005f16:	2309      	movs	r3, #9
 8005f18:	8013      	strh	r3, [r2, #0]
 8005f1a:	e00a      	b.n	8005f32 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0011      	movs	r1, r2
 8005f22:	0018      	movs	r0, r3
 8005f24:	f001 f9d0 	bl	80072c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f28:	2317      	movs	r3, #23
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	701a      	strb	r2, [r3, #0]
            break;
 8005f30:	e045      	b.n	8005fbe <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005f32:	231e      	movs	r3, #30
 8005f34:	18fb      	adds	r3, r7, r3
 8005f36:	881a      	ldrh	r2, [r3, #0]
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f001 fa41 	bl	80073c4 <USBD_CtlSendData>
          break;
 8005f42:	e03c      	b.n	8005fbe <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	23a7      	movs	r3, #167	; 0xa7
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	5cd3      	ldrb	r3, [r2, r3]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d108      	bne.n	8005f62 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	3308      	adds	r3, #8
 8005f54:	0019      	movs	r1, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f001 fa32 	bl	80073c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f60:	e02d      	b.n	8005fbe <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	0011      	movs	r1, r2
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f001 f9ad 	bl	80072c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f6e:	2317      	movs	r3, #23
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	2202      	movs	r2, #2
 8005f74:	701a      	strb	r2, [r3, #0]
          break;
 8005f76:	e022      	b.n	8005fbe <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	23a7      	movs	r3, #167	; 0xa7
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	5cd3      	ldrb	r3, [r2, r3]
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d106      	bne.n	8005f92 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	885b      	ldrh	r3, [r3, #2]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	001a      	movs	r2, r3
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f90:	e015      	b.n	8005fbe <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	0011      	movs	r1, r2
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f001 f995 	bl	80072c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f9e:	2317      	movs	r3, #23
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	701a      	strb	r2, [r3, #0]
          break;
 8005fa6:	e00a      	b.n	8005fbe <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	0011      	movs	r1, r2
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f001 f98a 	bl	80072c8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005fb4:	2317      	movs	r3, #23
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	2202      	movs	r2, #2
 8005fba:	701a      	strb	r2, [r3, #0]
          break;
 8005fbc:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005fbe:	e00a      	b.n	8005fd6 <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	0011      	movs	r1, r2
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f001 f97e 	bl	80072c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005fcc:	2317      	movs	r3, #23
 8005fce:	18fb      	adds	r3, r7, r3
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	701a      	strb	r2, [r3, #0]
      break;
 8005fd4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005fd6:	2317      	movs	r3, #23
 8005fd8:	18fb      	adds	r3, r7, r3
 8005fda:	781b      	ldrb	r3, [r3, #0]
}
 8005fdc:	0018      	movs	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b008      	add	sp, #32
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20000248 	.word	0x20000248
 8005fe8:	20000230 	.word	0x20000230

08005fec <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	1dbb      	adds	r3, r7, #6
 8005ff8:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	23ae      	movs	r3, #174	; 0xae
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	58d3      	ldr	r3, [r2, r3]
 8006002:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	23a7      	movs	r3, #167	; 0xa7
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	5cd3      	ldrb	r3, [r2, r3]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d10d      	bne.n	800602c <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	7b1b      	ldrb	r3, [r3, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2201      	movs	r2, #1
 800601c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800601e:	1dbb      	adds	r3, r7, #6
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	2181      	movs	r1, #129	; 0x81
 8006028:	f001 fdfb 	bl	8007c22 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	0018      	movs	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	b006      	add	sp, #24
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2222      	movs	r2, #34	; 0x22
 8006044:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006046:	4b02      	ldr	r3, [pc, #8]	; (8006050 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8006048:	0018      	movs	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	b002      	add	sp, #8
 800604e:	bd80      	pop	{r7, pc}
 8006050:	200001c4 	.word	0x200001c4

08006054 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2222      	movs	r2, #34	; 0x22
 8006060:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006062:	4b02      	ldr	r3, [pc, #8]	; (800606c <USBD_HID_GetHSCfgDesc+0x18>)
}
 8006064:	0018      	movs	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	b002      	add	sp, #8
 800606a:	bd80      	pop	{r7, pc}
 800606c:	200001e8 	.word	0x200001e8

08006070 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2222      	movs	r2, #34	; 0x22
 800607c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800607e:	4b02      	ldr	r3, [pc, #8]	; (8006088 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8006080:	0018      	movs	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	b002      	add	sp, #8
 8006086:	bd80      	pop	{r7, pc}
 8006088:	2000020c 	.word	0x2000020c

0800608c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	000a      	movs	r2, r1
 8006096:	1cfb      	adds	r3, r7, #3
 8006098:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	23ae      	movs	r3, #174	; 0xae
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	58d3      	ldr	r3, [r2, r3]
 80060a2:	2200      	movs	r2, #0
 80060a4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	0018      	movs	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b002      	add	sp, #8
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	220a      	movs	r2, #10
 80060bc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80060be:	4b02      	ldr	r3, [pc, #8]	; (80060c8 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 80060c0:	0018      	movs	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b002      	add	sp, #8
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	2000023c 	.word	0x2000023c

080060cc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	1dfb      	adds	r3, r7, #7
 80060d8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80060e0:	2302      	movs	r3, #2
 80060e2:	e020      	b.n	8006126 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	23ad      	movs	r3, #173	; 0xad
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	58d3      	ldr	r3, [r2, r3]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d004      	beq.n	80060fa <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	23ad      	movs	r3, #173	; 0xad
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	2100      	movs	r1, #0
 80060f8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	23ac      	movs	r3, #172	; 0xac
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	23a7      	movs	r3, #167	; 0xa7
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	2101      	movs	r1, #1
 8006112:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	1dfa      	adds	r2, r7, #7
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	0018      	movs	r0, r3
 8006120:	f001 fbf6 	bl	8007910 <USBD_LL_Init>

  return USBD_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	0018      	movs	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	b004      	add	sp, #16
 800612c:	bd80      	pop	{r7, pc}

0800612e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006138:	200f      	movs	r0, #15
 800613a:	183b      	adds	r3, r7, r0
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	23ad      	movs	r3, #173	; 0xad
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006150:	183b      	adds	r3, r7, r0
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e003      	b.n	8006160 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006158:	230f      	movs	r3, #15
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	2202      	movs	r2, #2
 800615e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006160:	230f      	movs	r3, #15
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	781b      	ldrb	r3, [r3, #0]
}
 8006166:	0018      	movs	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	b004      	add	sp, #16
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	0018      	movs	r0, r3
 800617a:	f001 fc19 	bl	80079b0 <USBD_LL_Start>

  return USBD_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	0018      	movs	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	b002      	add	sp, #8
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	0018      	movs	r0, r3
 8006194:	46bd      	mov	sp, r7
 8006196:	b002      	add	sp, #8
 8006198:	bd80      	pop	{r7, pc}

0800619a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800619a:	b590      	push	{r4, r7, lr}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	000a      	movs	r2, r1
 80061a4:	1cfb      	adds	r3, r7, #3
 80061a6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061a8:	240f      	movs	r4, #15
 80061aa:	193b      	adds	r3, r7, r4
 80061ac:	2202      	movs	r2, #2
 80061ae:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	23ad      	movs	r3, #173	; 0xad
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	58d3      	ldr	r3, [r2, r3]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00e      	beq.n	80061da <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	23ad      	movs	r3, #173	; 0xad
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	58d3      	ldr	r3, [r2, r3]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	1cfa      	adds	r2, r7, #3
 80061c8:	7811      	ldrb	r1, [r2, #0]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	0010      	movs	r0, r2
 80061ce:	4798      	blx	r3
 80061d0:	1e03      	subs	r3, r0, #0
 80061d2:	d102      	bne.n	80061da <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80061d4:	193b      	adds	r3, r7, r4
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80061da:	230f      	movs	r3, #15
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	781b      	ldrb	r3, [r3, #0]
}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b005      	add	sp, #20
 80061e6:	bd90      	pop	{r4, r7, pc}

080061e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	000a      	movs	r2, r1
 80061f2:	1cfb      	adds	r3, r7, #3
 80061f4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	23ad      	movs	r3, #173	; 0xad
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	58d3      	ldr	r3, [r2, r3]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	1cfa      	adds	r2, r7, #3
 8006202:	7811      	ldrb	r1, [r2, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	0010      	movs	r0, r2
 8006208:	4798      	blx	r3

  return USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	0018      	movs	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	b002      	add	sp, #8
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	22aa      	movs	r2, #170	; 0xaa
 8006222:	0092      	lsls	r2, r2, #2
 8006224:	4694      	mov	ip, r2
 8006226:	4463      	add	r3, ip
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	0011      	movs	r1, r2
 800622c:	0018      	movs	r0, r3
 800622e:	f001 f810 	bl	8007252 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	23a5      	movs	r3, #165	; 0xa5
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	2101      	movs	r1, #1
 800623a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a23      	ldr	r2, [pc, #140]	; (80062cc <USBD_LL_SetupStage+0xb8>)
 8006240:	5a9b      	ldrh	r3, [r3, r2]
 8006242:	0019      	movs	r1, r3
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	23a6      	movs	r3, #166	; 0xa6
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	23aa      	movs	r3, #170	; 0xaa
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	001a      	movs	r2, r3
 8006256:	231f      	movs	r3, #31
 8006258:	4013      	ands	r3, r2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d019      	beq.n	8006292 <USBD_LL_SetupStage+0x7e>
 800625e:	d822      	bhi.n	80062a6 <USBD_LL_SetupStage+0x92>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <USBD_LL_SetupStage+0x56>
 8006264:	2b01      	cmp	r3, #1
 8006266:	d00a      	beq.n	800627e <USBD_LL_SetupStage+0x6a>
 8006268:	e01d      	b.n	80062a6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	22aa      	movs	r2, #170	; 0xaa
 800626e:	0092      	lsls	r2, r2, #2
 8006270:	189a      	adds	r2, r3, r2
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0011      	movs	r1, r2
 8006276:	0018      	movs	r0, r3
 8006278:	f000 fa10 	bl	800669c <USBD_StdDevReq>
      break;
 800627c:	e020      	b.n	80062c0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	22aa      	movs	r2, #170	; 0xaa
 8006282:	0092      	lsls	r2, r2, #2
 8006284:	189a      	adds	r2, r3, r2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0011      	movs	r1, r2
 800628a:	0018      	movs	r0, r3
 800628c:	f000 fa78 	bl	8006780 <USBD_StdItfReq>
      break;
 8006290:	e016      	b.n	80062c0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	22aa      	movs	r2, #170	; 0xaa
 8006296:	0092      	lsls	r2, r2, #2
 8006298:	189a      	adds	r2, r3, r2
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	0011      	movs	r1, r2
 800629e:	0018      	movs	r0, r3
 80062a0:	f000 fac5 	bl	800682e <USBD_StdEPReq>
      break;
 80062a4:	e00c      	b.n	80062c0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	23aa      	movs	r3, #170	; 0xaa
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	5cd3      	ldrb	r3, [r2, r3]
 80062ae:	227f      	movs	r2, #127	; 0x7f
 80062b0:	4393      	bics	r3, r2
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0011      	movs	r1, r2
 80062b8:	0018      	movs	r0, r3
 80062ba:	f001 fc00 	bl	8007abe <USBD_LL_StallEP>
      break;
 80062be:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	0018      	movs	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b002      	add	sp, #8
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	000002ae 	.word	0x000002ae

080062d0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	200b      	movs	r0, #11
 80062dc:	183b      	adds	r3, r7, r0
 80062de:	1c0a      	adds	r2, r1, #0
 80062e0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80062e2:	183b      	adds	r3, r7, r0
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d154      	bne.n	8006394 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3355      	adds	r3, #85	; 0x55
 80062ee:	33ff      	adds	r3, #255	; 0xff
 80062f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	23a5      	movs	r3, #165	; 0xa5
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	58d3      	ldr	r3, [r2, r3]
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d139      	bne.n	8006372 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	429a      	cmp	r2, r3
 8006308:	d919      	bls.n	800633e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	1ad2      	subs	r2, r2, r3
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006320:	429a      	cmp	r2, r3
 8006322:	d203      	bcs.n	800632c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006328:	b29b      	uxth	r3, r3
 800632a:	e002      	b.n	8006332 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006330:	b29b      	uxth	r3, r3
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	001a      	movs	r2, r3
 8006338:	f001 f877 	bl	800742a <USBD_CtlContinueRx>
 800633c:	e045      	b.n	80063ca <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	23ad      	movs	r3, #173	; 0xad
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	58d3      	ldr	r3, [r2, r3]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	23a7      	movs	r3, #167	; 0xa7
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006354:	2b03      	cmp	r3, #3
 8006356:	d107      	bne.n	8006368 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	23ad      	movs	r3, #173	; 0xad
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	58d3      	ldr	r3, [r2, r3]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	0010      	movs	r0, r2
 8006366:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	0018      	movs	r0, r3
 800636c:	f001 f870 	bl	8007450 <USBD_CtlSendStatus>
 8006370:	e02b      	b.n	80063ca <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	23a5      	movs	r3, #165	; 0xa5
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	58d3      	ldr	r3, [r2, r3]
 800637a:	2b05      	cmp	r3, #5
 800637c:	d125      	bne.n	80063ca <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	23a5      	movs	r3, #165	; 0xa5
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	2100      	movs	r1, #0
 8006386:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2100      	movs	r1, #0
 800638c:	0018      	movs	r0, r3
 800638e:	f001 fb96 	bl	8007abe <USBD_LL_StallEP>
 8006392:	e01a      	b.n	80063ca <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	23ad      	movs	r3, #173	; 0xad
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	58d3      	ldr	r3, [r2, r3]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d011      	beq.n	80063c6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	23a7      	movs	r3, #167	; 0xa7
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d10b      	bne.n	80063c6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	23ad      	movs	r3, #173	; 0xad
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	58d3      	ldr	r3, [r2, r3]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	220b      	movs	r2, #11
 80063ba:	18ba      	adds	r2, r7, r2
 80063bc:	7811      	ldrb	r1, [r2, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	0010      	movs	r0, r2
 80063c2:	4798      	blx	r3
 80063c4:	e001      	b.n	80063ca <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063c6:	2302      	movs	r3, #2
 80063c8:	e000      	b.n	80063cc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	0018      	movs	r0, r3
 80063ce:	46bd      	mov	sp, r7
 80063d0:	b006      	add	sp, #24
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	607a      	str	r2, [r7, #4]
 80063de:	200b      	movs	r0, #11
 80063e0:	183b      	adds	r3, r7, r0
 80063e2:	1c0a      	adds	r2, r1, #0
 80063e4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80063e6:	183b      	adds	r3, r7, r0
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d000      	beq.n	80063f0 <USBD_LL_DataInStage+0x1c>
 80063ee:	e08e      	b.n	800650e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3314      	adds	r3, #20
 80063f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	23a5      	movs	r3, #165	; 0xa5
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	58d3      	ldr	r3, [r2, r3]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d164      	bne.n	80064cc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	429a      	cmp	r2, r3
 800640c:	d915      	bls.n	800643a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	1ad2      	subs	r2, r2, r3
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	b29a      	uxth	r2, r3
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	0018      	movs	r0, r3
 8006428:	f000 ffec 	bl	8007404 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	2300      	movs	r3, #0
 8006430:	2200      	movs	r2, #0
 8006432:	2100      	movs	r1, #0
 8006434:	f001 fc2c 	bl	8007c90 <USBD_LL_PrepareReceive>
 8006438:	e059      	b.n	80064ee <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	0019      	movs	r1, r3
 8006444:	0010      	movs	r0, r2
 8006446:	f7f9 fee5 	bl	8000214 <__aeabi_uidivmod>
 800644a:	1e0b      	subs	r3, r1, #0
 800644c:	d11f      	bne.n	800648e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006456:	429a      	cmp	r2, r3
 8006458:	d319      	bcc.n	800648e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	68f9      	ldr	r1, [r7, #12]
 8006460:	23a6      	movs	r3, #166	; 0xa6
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006466:	429a      	cmp	r2, r3
 8006468:	d211      	bcs.n	800648e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	0018      	movs	r0, r3
 8006472:	f000 ffc7 	bl	8007404 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	23a6      	movs	r3, #166	; 0xa6
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	2100      	movs	r1, #0
 800647e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	2300      	movs	r3, #0
 8006484:	2200      	movs	r2, #0
 8006486:	2100      	movs	r1, #0
 8006488:	f001 fc02 	bl	8007c90 <USBD_LL_PrepareReceive>
 800648c:	e02f      	b.n	80064ee <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	23ad      	movs	r3, #173	; 0xad
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	58d3      	ldr	r3, [r2, r3]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00d      	beq.n	80064b8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	23a7      	movs	r3, #167	; 0xa7
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d107      	bne.n	80064b8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	23ad      	movs	r3, #173	; 0xad
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	58d3      	ldr	r3, [r2, r3]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	0010      	movs	r0, r2
 80064b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	0018      	movs	r0, r3
 80064be:	f001 fafe 	bl	8007abe <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	0018      	movs	r0, r3
 80064c6:	f000 ffd7 	bl	8007478 <USBD_CtlReceiveStatus>
 80064ca:	e010      	b.n	80064ee <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	23a5      	movs	r3, #165	; 0xa5
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	58d3      	ldr	r3, [r2, r3]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d005      	beq.n	80064e4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	23a5      	movs	r3, #165	; 0xa5
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	0018      	movs	r0, r3
 80064ea:	f001 fae8 	bl	8007abe <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	23a8      	movs	r3, #168	; 0xa8
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	5cd3      	ldrb	r3, [r2, r3]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d124      	bne.n	8006544 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7ff fe43 	bl	8006188 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	23a8      	movs	r3, #168	; 0xa8
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	2100      	movs	r1, #0
 800650a:	54d1      	strb	r1, [r2, r3]
 800650c:	e01a      	b.n	8006544 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	23ad      	movs	r3, #173	; 0xad
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	58d3      	ldr	r3, [r2, r3]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d011      	beq.n	8006540 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	23a7      	movs	r3, #167	; 0xa7
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006524:	2b03      	cmp	r3, #3
 8006526:	d10b      	bne.n	8006540 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	23ad      	movs	r3, #173	; 0xad
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	58d3      	ldr	r3, [r2, r3]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	220b      	movs	r2, #11
 8006534:	18ba      	adds	r2, r7, r2
 8006536:	7811      	ldrb	r1, [r2, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	0010      	movs	r0, r2
 800653c:	4798      	blx	r3
 800653e:	e001      	b.n	8006544 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006540:	2302      	movs	r3, #2
 8006542:	e000      	b.n	8006546 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	0018      	movs	r0, r3
 8006548:	46bd      	mov	sp, r7
 800654a:	b006      	add	sp, #24
 800654c:	bd80      	pop	{r7, pc}

0800654e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	2340      	movs	r3, #64	; 0x40
 800655a:	2200      	movs	r2, #0
 800655c:	2100      	movs	r1, #0
 800655e:	f001 fa4c 	bl	80079fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	23ac      	movs	r3, #172	; 0xac
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	2101      	movs	r1, #1
 800656a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	23b2      	movs	r3, #178	; 0xb2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	2140      	movs	r1, #64	; 0x40
 8006574:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	2340      	movs	r3, #64	; 0x40
 800657a:	2200      	movs	r2, #0
 800657c:	2180      	movs	r1, #128	; 0x80
 800657e:	f001 fa3c 	bl	80079fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2240      	movs	r2, #64	; 0x40
 800658c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	23a7      	movs	r3, #167	; 0xa7
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	2101      	movs	r1, #1
 8006596:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	23a5      	movs	r3, #165	; 0xa5
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	2100      	movs	r1, #0
 80065a0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	23a9      	movs	r3, #169	; 0xa9
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	2100      	movs	r1, #0
 80065b0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	23ae      	movs	r3, #174	; 0xae
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	58d3      	ldr	r3, [r2, r3]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	23ad      	movs	r3, #173	; 0xad
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	58d3      	ldr	r3, [r2, r3]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	b2d9      	uxtb	r1, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	4790      	blx	r2
  }

  return USBD_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b002      	add	sp, #8
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	000a      	movs	r2, r1
 80065e8:	1cfb      	adds	r3, r7, #3
 80065ea:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	1cfa      	adds	r2, r7, #3
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	0018      	movs	r0, r3
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b002      	add	sp, #8
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	23a7      	movs	r3, #167	; 0xa7
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	5cd1      	ldrb	r1, [r2, r3]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a06      	ldr	r2, [pc, #24]	; (800662c <USBD_LL_Suspend+0x2c>)
 8006614:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	23a7      	movs	r3, #167	; 0xa7
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	2104      	movs	r1, #4
 800661e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	0018      	movs	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	b002      	add	sp, #8
 8006628:	bd80      	pop	{r7, pc}
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	0000029d 	.word	0x0000029d

08006630 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	23a7      	movs	r3, #167	; 0xa7
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	5cd3      	ldrb	r3, [r2, r3]
 8006640:	2b04      	cmp	r3, #4
 8006642:	d106      	bne.n	8006652 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a05      	ldr	r2, [pc, #20]	; (800665c <USBD_LL_Resume+0x2c>)
 8006648:	5c99      	ldrb	r1, [r3, r2]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	23a7      	movs	r3, #167	; 0xa7
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	0018      	movs	r0, r3
 8006656:	46bd      	mov	sp, r7
 8006658:	b002      	add	sp, #8
 800665a:	bd80      	pop	{r7, pc}
 800665c:	0000029d 	.word	0x0000029d

08006660 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	23a7      	movs	r3, #167	; 0xa7
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	5cd3      	ldrb	r3, [r2, r3]
 8006670:	2b03      	cmp	r3, #3
 8006672:	d10e      	bne.n	8006692 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	23ad      	movs	r3, #173	; 0xad
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	58d3      	ldr	r3, [r2, r3]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	23ad      	movs	r3, #173	; 0xad
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	58d3      	ldr	r3, [r2, r3]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	0010      	movs	r0, r2
 8006690:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	0018      	movs	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066a6:	230f      	movs	r3, #15
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	2200      	movs	r2, #0
 80066ac:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	001a      	movs	r2, r3
 80066b4:	2360      	movs	r3, #96	; 0x60
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d004      	beq.n	80066c6 <USBD_StdDevReq+0x2a>
 80066bc:	d84f      	bhi.n	800675e <USBD_StdDevReq+0xc2>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <USBD_StdDevReq+0x3e>
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d14b      	bne.n	800675e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	23ad      	movs	r3, #173	; 0xad
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	58d3      	ldr	r3, [r2, r3]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	0010      	movs	r0, r2
 80066d6:	4798      	blx	r3
      break;
 80066d8:	e048      	b.n	800676c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b09      	cmp	r3, #9
 80066e0:	d835      	bhi.n	800674e <USBD_StdDevReq+0xb2>
 80066e2:	009a      	lsls	r2, r3, #2
 80066e4:	4b25      	ldr	r3, [pc, #148]	; (800677c <USBD_StdDevReq+0xe0>)
 80066e6:	18d3      	adds	r3, r2, r3
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	0011      	movs	r1, r2
 80066f2:	0018      	movs	r0, r3
 80066f4:	f000 fa52 	bl	8006b9c <USBD_GetDescriptor>
          break;
 80066f8:	e030      	b.n	800675c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	0011      	movs	r1, r2
 8006700:	0018      	movs	r0, r3
 8006702:	f000 fbfd 	bl	8006f00 <USBD_SetAddress>
          break;
 8006706:	e029      	b.n	800675c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0011      	movs	r1, r2
 800670e:	0018      	movs	r0, r3
 8006710:	f000 fc4a 	bl	8006fa8 <USBD_SetConfig>
          break;
 8006714:	e022      	b.n	800675c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	0011      	movs	r1, r2
 800671c:	0018      	movs	r0, r3
 800671e:	f000 fce7 	bl	80070f0 <USBD_GetConfig>
          break;
 8006722:	e01b      	b.n	800675c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	0011      	movs	r1, r2
 800672a:	0018      	movs	r0, r3
 800672c:	f000 fd1b 	bl	8007166 <USBD_GetStatus>
          break;
 8006730:	e014      	b.n	800675c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	0011      	movs	r1, r2
 8006738:	0018      	movs	r0, r3
 800673a:	f000 fd4e 	bl	80071da <USBD_SetFeature>
          break;
 800673e:	e00d      	b.n	800675c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	0011      	movs	r1, r2
 8006746:	0018      	movs	r0, r3
 8006748:	f000 fd5d 	bl	8007206 <USBD_ClrFeature>
          break;
 800674c:	e006      	b.n	800675c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	0011      	movs	r1, r2
 8006754:	0018      	movs	r0, r3
 8006756:	f000 fdb7 	bl	80072c8 <USBD_CtlError>
          break;
 800675a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800675c:	e006      	b.n	800676c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	0011      	movs	r1, r2
 8006764:	0018      	movs	r0, r3
 8006766:	f000 fdaf 	bl	80072c8 <USBD_CtlError>
      break;
 800676a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800676c:	230f      	movs	r3, #15
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	781b      	ldrb	r3, [r3, #0]
}
 8006772:	0018      	movs	r0, r3
 8006774:	46bd      	mov	sp, r7
 8006776:	b004      	add	sp, #16
 8006778:	bd80      	pop	{r7, pc}
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	08007e64 	.word	0x08007e64

08006780 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006780:	b5b0      	push	{r4, r5, r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800678a:	230f      	movs	r3, #15
 800678c:	18fb      	adds	r3, r7, r3
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	001a      	movs	r2, r3
 8006798:	2360      	movs	r3, #96	; 0x60
 800679a:	4013      	ands	r3, r2
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d004      	beq.n	80067aa <USBD_StdItfReq+0x2a>
 80067a0:	d839      	bhi.n	8006816 <USBD_StdItfReq+0x96>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <USBD_StdItfReq+0x2a>
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d135      	bne.n	8006816 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	23a7      	movs	r3, #167	; 0xa7
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	5cd3      	ldrb	r3, [r2, r3]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d825      	bhi.n	8006804 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	889b      	ldrh	r3, [r3, #4]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d819      	bhi.n	80067f6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	23ad      	movs	r3, #173	; 0xad
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	58d3      	ldr	r3, [r2, r3]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	250f      	movs	r5, #15
 80067ce:	197c      	adds	r4, r7, r5
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	0010      	movs	r0, r2
 80067d6:	4798      	blx	r3
 80067d8:	0003      	movs	r3, r0
 80067da:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	88db      	ldrh	r3, [r3, #6]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d116      	bne.n	8006812 <USBD_StdItfReq+0x92>
 80067e4:	197b      	adds	r3, r7, r5
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d112      	bne.n	8006812 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	0018      	movs	r0, r3
 80067f0:	f000 fe2e 	bl	8007450 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067f4:	e00d      	b.n	8006812 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	0011      	movs	r1, r2
 80067fc:	0018      	movs	r0, r3
 80067fe:	f000 fd63 	bl	80072c8 <USBD_CtlError>
          break;
 8006802:	e006      	b.n	8006812 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	0011      	movs	r1, r2
 800680a:	0018      	movs	r0, r3
 800680c:	f000 fd5c 	bl	80072c8 <USBD_CtlError>
          break;
 8006810:	e000      	b.n	8006814 <USBD_StdItfReq+0x94>
          break;
 8006812:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006814:	e006      	b.n	8006824 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	0011      	movs	r1, r2
 800681c:	0018      	movs	r0, r3
 800681e:	f000 fd53 	bl	80072c8 <USBD_CtlError>
      break;
 8006822:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	0018      	movs	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	b004      	add	sp, #16
 800682c:	bdb0      	pop	{r4, r5, r7, pc}

0800682e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800682e:	b5b0      	push	{r4, r5, r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006838:	230f      	movs	r3, #15
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	2200      	movs	r2, #0
 800683e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	889a      	ldrh	r2, [r3, #4]
 8006844:	230e      	movs	r3, #14
 8006846:	18fb      	adds	r3, r7, r3
 8006848:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	001a      	movs	r2, r3
 8006850:	2360      	movs	r3, #96	; 0x60
 8006852:	4013      	ands	r3, r2
 8006854:	2b40      	cmp	r3, #64	; 0x40
 8006856:	d006      	beq.n	8006866 <USBD_StdEPReq+0x38>
 8006858:	d900      	bls.n	800685c <USBD_StdEPReq+0x2e>
 800685a:	e190      	b.n	8006b7e <USBD_StdEPReq+0x350>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00c      	beq.n	800687a <USBD_StdEPReq+0x4c>
 8006860:	2b20      	cmp	r3, #32
 8006862:	d000      	beq.n	8006866 <USBD_StdEPReq+0x38>
 8006864:	e18b      	b.n	8006b7e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	23ad      	movs	r3, #173	; 0xad
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	58d3      	ldr	r3, [r2, r3]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	0010      	movs	r0, r2
 8006876:	4798      	blx	r3
      break;
 8006878:	e188      	b.n	8006b8c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	001a      	movs	r2, r3
 8006880:	2360      	movs	r3, #96	; 0x60
 8006882:	4013      	ands	r3, r2
 8006884:	2b20      	cmp	r3, #32
 8006886:	d10f      	bne.n	80068a8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	23ad      	movs	r3, #173	; 0xad
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	58d3      	ldr	r3, [r2, r3]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	250f      	movs	r5, #15
 8006894:	197c      	adds	r4, r7, r5
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	0010      	movs	r0, r2
 800689c:	4798      	blx	r3
 800689e:	0003      	movs	r3, r0
 80068a0:	7023      	strb	r3, [r4, #0]

        return ret;
 80068a2:	197b      	adds	r3, r7, r5
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	e174      	b.n	8006b92 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d007      	beq.n	80068c0 <USBD_StdEPReq+0x92>
 80068b0:	dd00      	ble.n	80068b4 <USBD_StdEPReq+0x86>
 80068b2:	e15c      	b.n	8006b6e <USBD_StdEPReq+0x340>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d100      	bne.n	80068ba <USBD_StdEPReq+0x8c>
 80068b8:	e092      	b.n	80069e0 <USBD_StdEPReq+0x1b2>
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d04b      	beq.n	8006956 <USBD_StdEPReq+0x128>
 80068be:	e156      	b.n	8006b6e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	23a7      	movs	r3, #167	; 0xa7
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	5cd3      	ldrb	r3, [r2, r3]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d002      	beq.n	80068d2 <USBD_StdEPReq+0xa4>
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d01d      	beq.n	800690c <USBD_StdEPReq+0xde>
 80068d0:	e039      	b.n	8006946 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068d2:	220e      	movs	r2, #14
 80068d4:	18bb      	adds	r3, r7, r2
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d010      	beq.n	80068fe <USBD_StdEPReq+0xd0>
 80068dc:	18bb      	adds	r3, r7, r2
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b80      	cmp	r3, #128	; 0x80
 80068e2:	d00c      	beq.n	80068fe <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80068e4:	18bb      	adds	r3, r7, r2
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	0011      	movs	r1, r2
 80068ec:	0018      	movs	r0, r3
 80068ee:	f001 f8e6 	bl	8007abe <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2180      	movs	r1, #128	; 0x80
 80068f6:	0018      	movs	r0, r3
 80068f8:	f001 f8e1 	bl	8007abe <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068fc:	e02a      	b.n	8006954 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	0011      	movs	r1, r2
 8006904:	0018      	movs	r0, r3
 8006906:	f000 fcdf 	bl	80072c8 <USBD_CtlError>
              break;
 800690a:	e023      	b.n	8006954 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	885b      	ldrh	r3, [r3, #2]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d113      	bne.n	800693c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006914:	220e      	movs	r2, #14
 8006916:	18bb      	adds	r3, r7, r2
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00e      	beq.n	800693c <USBD_StdEPReq+0x10e>
 800691e:	18bb      	adds	r3, r7, r2
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d00a      	beq.n	800693c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	88db      	ldrh	r3, [r3, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800692e:	18bb      	adds	r3, r7, r2
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0011      	movs	r1, r2
 8006936:	0018      	movs	r0, r3
 8006938:	f001 f8c1 	bl	8007abe <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	0018      	movs	r0, r3
 8006940:	f000 fd86 	bl	8007450 <USBD_CtlSendStatus>

              break;
 8006944:	e006      	b.n	8006954 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	0011      	movs	r1, r2
 800694c:	0018      	movs	r0, r3
 800694e:	f000 fcbb 	bl	80072c8 <USBD_CtlError>
              break;
 8006952:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006954:	e112      	b.n	8006b7c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	23a7      	movs	r3, #167	; 0xa7
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	5cd3      	ldrb	r3, [r2, r3]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d002      	beq.n	8006968 <USBD_StdEPReq+0x13a>
 8006962:	2b03      	cmp	r3, #3
 8006964:	d01d      	beq.n	80069a2 <USBD_StdEPReq+0x174>
 8006966:	e032      	b.n	80069ce <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006968:	220e      	movs	r2, #14
 800696a:	18bb      	adds	r3, r7, r2
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d010      	beq.n	8006994 <USBD_StdEPReq+0x166>
 8006972:	18bb      	adds	r3, r7, r2
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b80      	cmp	r3, #128	; 0x80
 8006978:	d00c      	beq.n	8006994 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800697a:	18bb      	adds	r3, r7, r2
 800697c:	781a      	ldrb	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	0011      	movs	r1, r2
 8006982:	0018      	movs	r0, r3
 8006984:	f001 f89b 	bl	8007abe <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2180      	movs	r1, #128	; 0x80
 800698c:	0018      	movs	r0, r3
 800698e:	f001 f896 	bl	8007abe <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006992:	e024      	b.n	80069de <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0011      	movs	r1, r2
 800699a:	0018      	movs	r0, r3
 800699c:	f000 fc94 	bl	80072c8 <USBD_CtlError>
              break;
 80069a0:	e01d      	b.n	80069de <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	885b      	ldrh	r3, [r3, #2]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d118      	bne.n	80069dc <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069aa:	210e      	movs	r1, #14
 80069ac:	187b      	adds	r3, r7, r1
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	227f      	movs	r2, #127	; 0x7f
 80069b2:	4013      	ands	r3, r2
 80069b4:	d006      	beq.n	80069c4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80069b6:	187b      	adds	r3, r7, r1
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0011      	movs	r1, r2
 80069be:	0018      	movs	r0, r3
 80069c0:	f001 f8a8 	bl	8007b14 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	0018      	movs	r0, r3
 80069c8:	f000 fd42 	bl	8007450 <USBD_CtlSendStatus>
              }
              break;
 80069cc:	e006      	b.n	80069dc <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	0011      	movs	r1, r2
 80069d4:	0018      	movs	r0, r3
 80069d6:	f000 fc77 	bl	80072c8 <USBD_CtlError>
              break;
 80069da:	e000      	b.n	80069de <USBD_StdEPReq+0x1b0>
              break;
 80069dc:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80069de:	e0cd      	b.n	8006b7c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	23a7      	movs	r3, #167	; 0xa7
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	5cd3      	ldrb	r3, [r2, r3]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d002      	beq.n	80069f2 <USBD_StdEPReq+0x1c4>
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d03c      	beq.n	8006a6a <USBD_StdEPReq+0x23c>
 80069f0:	e0b5      	b.n	8006b5e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069f2:	220e      	movs	r2, #14
 80069f4:	18bb      	adds	r3, r7, r2
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <USBD_StdEPReq+0x1e4>
 80069fc:	18bb      	adds	r3, r7, r2
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d006      	beq.n	8006a12 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	0011      	movs	r1, r2
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f000 fc5c 	bl	80072c8 <USBD_CtlError>
                break;
 8006a10:	e0ac      	b.n	8006b6c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a12:	220e      	movs	r2, #14
 8006a14:	18bb      	adds	r3, r7, r2
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b25b      	sxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da0c      	bge.n	8006a38 <USBD_StdEPReq+0x20a>
 8006a1e:	18bb      	adds	r3, r7, r2
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	227f      	movs	r2, #127	; 0x7f
 8006a24:	401a      	ands	r2, r3
 8006a26:	0013      	movs	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	3310      	adds	r3, #16
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	18d3      	adds	r3, r2, r3
 8006a34:	3304      	adds	r3, #4
 8006a36:	e00d      	b.n	8006a54 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a38:	230e      	movs	r3, #14
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	227f      	movs	r2, #127	; 0x7f
 8006a40:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a42:	0013      	movs	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	189b      	adds	r3, r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	3351      	adds	r3, #81	; 0x51
 8006a4c:	33ff      	adds	r3, #255	; 0xff
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	18d3      	adds	r3, r2, r3
 8006a52:	3304      	adds	r3, #4
 8006a54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	0018      	movs	r0, r3
 8006a64:	f000 fcae 	bl	80073c4 <USBD_CtlSendData>
              break;
 8006a68:	e080      	b.n	8006b6c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a6a:	220e      	movs	r2, #14
 8006a6c:	18bb      	adds	r3, r7, r2
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b25b      	sxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da14      	bge.n	8006aa0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a76:	18bb      	adds	r3, r7, r2
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	220f      	movs	r2, #15
 8006a7c:	401a      	ands	r2, r3
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	0013      	movs	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	189b      	adds	r3, r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	18cb      	adds	r3, r1, r3
 8006a8a:	3318      	adds	r3, #24
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d11e      	bne.n	8006ad0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	0011      	movs	r1, r2
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f000 fc15 	bl	80072c8 <USBD_CtlError>
                  break;
 8006a9e:	e065      	b.n	8006b6c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006aa0:	230e      	movs	r3, #14
 8006aa2:	18fb      	adds	r3, r7, r3
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	220f      	movs	r2, #15
 8006aa8:	401a      	ands	r2, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	23ac      	movs	r3, #172	; 0xac
 8006aae:	0059      	lsls	r1, r3, #1
 8006ab0:	0013      	movs	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	189b      	adds	r3, r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	18c3      	adds	r3, r0, r3
 8006aba:	185b      	adds	r3, r3, r1
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	0011      	movs	r1, r2
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 fbfd 	bl	80072c8 <USBD_CtlError>
                  break;
 8006ace:	e04d      	b.n	8006b6c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ad0:	220e      	movs	r2, #14
 8006ad2:	18bb      	adds	r3, r7, r2
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	b25b      	sxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	da0c      	bge.n	8006af6 <USBD_StdEPReq+0x2c8>
 8006adc:	18bb      	adds	r3, r7, r2
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	227f      	movs	r2, #127	; 0x7f
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	0013      	movs	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	189b      	adds	r3, r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	3310      	adds	r3, #16
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	18d3      	adds	r3, r2, r3
 8006af2:	3304      	adds	r3, #4
 8006af4:	e00d      	b.n	8006b12 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006af6:	230e      	movs	r3, #14
 8006af8:	18fb      	adds	r3, r7, r3
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	227f      	movs	r2, #127	; 0x7f
 8006afe:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b00:	0013      	movs	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	189b      	adds	r3, r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	3351      	adds	r3, #81	; 0x51
 8006b0a:	33ff      	adds	r3, #255	; 0xff
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	18d3      	adds	r3, r2, r3
 8006b10:	3304      	adds	r3, #4
 8006b12:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b14:	220e      	movs	r2, #14
 8006b16:	18bb      	adds	r3, r7, r2
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <USBD_StdEPReq+0x2f8>
 8006b1e:	18bb      	adds	r3, r7, r2
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b80      	cmp	r3, #128	; 0x80
 8006b24:	d103      	bne.n	8006b2e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e010      	b.n	8006b50 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b2e:	230e      	movs	r3, #14
 8006b30:	18fb      	adds	r3, r7, r3
 8006b32:	781a      	ldrb	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	0011      	movs	r1, r2
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f001 f816 	bl	8007b6a <USBD_LL_IsStallEP>
 8006b3e:	1e03      	subs	r3, r0, #0
 8006b40:	d003      	beq.n	8006b4a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2201      	movs	r2, #1
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e002      	b.n	8006b50 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	0018      	movs	r0, r3
 8006b58:	f000 fc34 	bl	80073c4 <USBD_CtlSendData>
              break;
 8006b5c:	e006      	b.n	8006b6c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	0011      	movs	r1, r2
 8006b64:	0018      	movs	r0, r3
 8006b66:	f000 fbaf 	bl	80072c8 <USBD_CtlError>
              break;
 8006b6a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006b6c:	e006      	b.n	8006b7c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0011      	movs	r1, r2
 8006b74:	0018      	movs	r0, r3
 8006b76:	f000 fba7 	bl	80072c8 <USBD_CtlError>
          break;
 8006b7a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006b7c:	e006      	b.n	8006b8c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	0011      	movs	r1, r2
 8006b84:	0018      	movs	r0, r3
 8006b86:	f000 fb9f 	bl	80072c8 <USBD_CtlError>
      break;
 8006b8a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006b8c:	230f      	movs	r3, #15
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	781b      	ldrb	r3, [r3, #0]
}
 8006b92:	0018      	movs	r0, r3
 8006b94:	46bd      	mov	sp, r7
 8006b96:	b004      	add	sp, #16
 8006b98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006b9c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	18fb      	adds	r3, r7, r3
 8006baa:	2200      	movs	r2, #0
 8006bac:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bb2:	230b      	movs	r3, #11
 8006bb4:	18fb      	adds	r3, r7, r3
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	885b      	ldrh	r3, [r3, #2]
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b07      	cmp	r3, #7
 8006bc4:	d900      	bls.n	8006bc8 <USBD_GetDescriptor+0x2c>
 8006bc6:	e159      	b.n	8006e7c <USBD_GetDescriptor+0x2e0>
 8006bc8:	009a      	lsls	r2, r3, #2
 8006bca:	4bcb      	ldr	r3, [pc, #812]	; (8006ef8 <USBD_GetDescriptor+0x35c>)
 8006bcc:	18d3      	adds	r3, r2, r3
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	23ac      	movs	r3, #172	; 0xac
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	58d3      	ldr	r3, [r2, r3]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	7c12      	ldrb	r2, [r2, #16]
 8006be0:	2108      	movs	r1, #8
 8006be2:	1879      	adds	r1, r7, r1
 8006be4:	0010      	movs	r0, r2
 8006be6:	4798      	blx	r3
 8006be8:	0003      	movs	r3, r0
 8006bea:	60fb      	str	r3, [r7, #12]
      break;
 8006bec:	e153      	b.n	8006e96 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	7c1b      	ldrb	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10f      	bne.n	8006c16 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	23ad      	movs	r3, #173	; 0xad
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	58d3      	ldr	r3, [r2, r3]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c00:	2208      	movs	r2, #8
 8006c02:	18ba      	adds	r2, r7, r2
 8006c04:	0010      	movs	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	0003      	movs	r3, r0
 8006c0a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	2202      	movs	r2, #2
 8006c12:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c14:	e13f      	b.n	8006e96 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	23ad      	movs	r3, #173	; 0xad
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	58d3      	ldr	r3, [r2, r3]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	2208      	movs	r2, #8
 8006c22:	18ba      	adds	r2, r7, r2
 8006c24:	0010      	movs	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	0003      	movs	r3, r0
 8006c2a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	2202      	movs	r2, #2
 8006c32:	701a      	strb	r2, [r3, #0]
      break;
 8006c34:	e12f      	b.n	8006e96 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	885b      	ldrh	r3, [r3, #2]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	d900      	bls.n	8006c42 <USBD_GetDescriptor+0xa6>
 8006c40:	e0d0      	b.n	8006de4 <USBD_GetDescriptor+0x248>
 8006c42:	009a      	lsls	r2, r3, #2
 8006c44:	4bad      	ldr	r3, [pc, #692]	; (8006efc <USBD_GetDescriptor+0x360>)
 8006c46:	18d3      	adds	r3, r2, r3
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	23ac      	movs	r3, #172	; 0xac
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	58d3      	ldr	r3, [r2, r3]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00d      	beq.n	8006c76 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	23ac      	movs	r3, #172	; 0xac
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	58d3      	ldr	r3, [r2, r3]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	7c12      	ldrb	r2, [r2, #16]
 8006c68:	2108      	movs	r1, #8
 8006c6a:	1879      	adds	r1, r7, r1
 8006c6c:	0010      	movs	r0, r2
 8006c6e:	4798      	blx	r3
 8006c70:	0003      	movs	r3, r0
 8006c72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c74:	e0c3      	b.n	8006dfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0011      	movs	r1, r2
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f000 fb23 	bl	80072c8 <USBD_CtlError>
            err++;
 8006c82:	210b      	movs	r1, #11
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	781a      	ldrb	r2, [r3, #0]
 8006c88:	187b      	adds	r3, r7, r1
 8006c8a:	3201      	adds	r2, #1
 8006c8c:	701a      	strb	r2, [r3, #0]
          break;
 8006c8e:	e0b6      	b.n	8006dfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	23ac      	movs	r3, #172	; 0xac
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	58d3      	ldr	r3, [r2, r3]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00d      	beq.n	8006cba <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	23ac      	movs	r3, #172	; 0xac
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	58d3      	ldr	r3, [r2, r3]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	7c12      	ldrb	r2, [r2, #16]
 8006cac:	2108      	movs	r1, #8
 8006cae:	1879      	adds	r1, r7, r1
 8006cb0:	0010      	movs	r0, r2
 8006cb2:	4798      	blx	r3
 8006cb4:	0003      	movs	r3, r0
 8006cb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cb8:	e0a1      	b.n	8006dfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0011      	movs	r1, r2
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f000 fb01 	bl	80072c8 <USBD_CtlError>
            err++;
 8006cc6:	210b      	movs	r1, #11
 8006cc8:	187b      	adds	r3, r7, r1
 8006cca:	781a      	ldrb	r2, [r3, #0]
 8006ccc:	187b      	adds	r3, r7, r1
 8006cce:	3201      	adds	r2, #1
 8006cd0:	701a      	strb	r2, [r3, #0]
          break;
 8006cd2:	e094      	b.n	8006dfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	23ac      	movs	r3, #172	; 0xac
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	58d3      	ldr	r3, [r2, r3]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00d      	beq.n	8006cfe <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	23ac      	movs	r3, #172	; 0xac
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	58d3      	ldr	r3, [r2, r3]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	7c12      	ldrb	r2, [r2, #16]
 8006cf0:	2108      	movs	r1, #8
 8006cf2:	1879      	adds	r1, r7, r1
 8006cf4:	0010      	movs	r0, r2
 8006cf6:	4798      	blx	r3
 8006cf8:	0003      	movs	r3, r0
 8006cfa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfc:	e07f      	b.n	8006dfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	0011      	movs	r1, r2
 8006d04:	0018      	movs	r0, r3
 8006d06:	f000 fadf 	bl	80072c8 <USBD_CtlError>
            err++;
 8006d0a:	210b      	movs	r1, #11
 8006d0c:	187b      	adds	r3, r7, r1
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	187b      	adds	r3, r7, r1
 8006d12:	3201      	adds	r2, #1
 8006d14:	701a      	strb	r2, [r3, #0]
          break;
 8006d16:	e072      	b.n	8006dfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	23ac      	movs	r3, #172	; 0xac
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	58d3      	ldr	r3, [r2, r3]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00d      	beq.n	8006d42 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	23ac      	movs	r3, #172	; 0xac
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	58d3      	ldr	r3, [r2, r3]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	7c12      	ldrb	r2, [r2, #16]
 8006d34:	2108      	movs	r1, #8
 8006d36:	1879      	adds	r1, r7, r1
 8006d38:	0010      	movs	r0, r2
 8006d3a:	4798      	blx	r3
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d40:	e05d      	b.n	8006dfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	0011      	movs	r1, r2
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f000 fabd 	bl	80072c8 <USBD_CtlError>
            err++;
 8006d4e:	210b      	movs	r1, #11
 8006d50:	187b      	adds	r3, r7, r1
 8006d52:	781a      	ldrb	r2, [r3, #0]
 8006d54:	187b      	adds	r3, r7, r1
 8006d56:	3201      	adds	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
          break;
 8006d5a:	e050      	b.n	8006dfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	23ac      	movs	r3, #172	; 0xac
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	58d3      	ldr	r3, [r2, r3]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00d      	beq.n	8006d86 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	23ac      	movs	r3, #172	; 0xac
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	58d3      	ldr	r3, [r2, r3]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	7c12      	ldrb	r2, [r2, #16]
 8006d78:	2108      	movs	r1, #8
 8006d7a:	1879      	adds	r1, r7, r1
 8006d7c:	0010      	movs	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	0003      	movs	r3, r0
 8006d82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d84:	e03b      	b.n	8006dfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	0011      	movs	r1, r2
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f000 fa9b 	bl	80072c8 <USBD_CtlError>
            err++;
 8006d92:	210b      	movs	r1, #11
 8006d94:	187b      	adds	r3, r7, r1
 8006d96:	781a      	ldrb	r2, [r3, #0]
 8006d98:	187b      	adds	r3, r7, r1
 8006d9a:	3201      	adds	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]
          break;
 8006d9e:	e02e      	b.n	8006dfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	23ac      	movs	r3, #172	; 0xac
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	58d3      	ldr	r3, [r2, r3]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00d      	beq.n	8006dca <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	23ac      	movs	r3, #172	; 0xac
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	58d3      	ldr	r3, [r2, r3]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	7c12      	ldrb	r2, [r2, #16]
 8006dbc:	2108      	movs	r1, #8
 8006dbe:	1879      	adds	r1, r7, r1
 8006dc0:	0010      	movs	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	0003      	movs	r3, r0
 8006dc6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc8:	e019      	b.n	8006dfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	0011      	movs	r1, r2
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f000 fa79 	bl	80072c8 <USBD_CtlError>
            err++;
 8006dd6:	210b      	movs	r1, #11
 8006dd8:	187b      	adds	r3, r7, r1
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	187b      	adds	r3, r7, r1
 8006dde:	3201      	adds	r2, #1
 8006de0:	701a      	strb	r2, [r3, #0]
          break;
 8006de2:	e00c      	b.n	8006dfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0011      	movs	r1, r2
 8006dea:	0018      	movs	r0, r3
 8006dec:	f000 fa6c 	bl	80072c8 <USBD_CtlError>
          err++;
 8006df0:	210b      	movs	r1, #11
 8006df2:	187b      	adds	r3, r7, r1
 8006df4:	781a      	ldrb	r2, [r3, #0]
 8006df6:	187b      	adds	r3, r7, r1
 8006df8:	3201      	adds	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006dfc:	e04b      	b.n	8006e96 <USBD_GetDescriptor+0x2fa>
 8006dfe:	e04a      	b.n	8006e96 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7c1b      	ldrb	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	23ad      	movs	r3, #173	; 0xad
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	58d3      	ldr	r3, [r2, r3]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	2208      	movs	r2, #8
 8006e14:	18ba      	adds	r2, r7, r2
 8006e16:	0010      	movs	r0, r2
 8006e18:	4798      	blx	r3
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e1e:	e03a      	b.n	8006e96 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	0011      	movs	r1, r2
 8006e26:	0018      	movs	r0, r3
 8006e28:	f000 fa4e 	bl	80072c8 <USBD_CtlError>
        err++;
 8006e2c:	210b      	movs	r1, #11
 8006e2e:	187b      	adds	r3, r7, r1
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	187b      	adds	r3, r7, r1
 8006e34:	3201      	adds	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
      break;
 8006e38:	e02d      	b.n	8006e96 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7c1b      	ldrb	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10f      	bne.n	8006e62 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	23ad      	movs	r3, #173	; 0xad
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	58d3      	ldr	r3, [r2, r3]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	18ba      	adds	r2, r7, r2
 8006e50:	0010      	movs	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	0003      	movs	r3, r0
 8006e56:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	2207      	movs	r2, #7
 8006e5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e60:	e019      	b.n	8006e96 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	0011      	movs	r1, r2
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f000 fa2d 	bl	80072c8 <USBD_CtlError>
        err++;
 8006e6e:	210b      	movs	r1, #11
 8006e70:	187b      	adds	r3, r7, r1
 8006e72:	781a      	ldrb	r2, [r3, #0]
 8006e74:	187b      	adds	r3, r7, r1
 8006e76:	3201      	adds	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
      break;
 8006e7a:	e00c      	b.n	8006e96 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	0011      	movs	r1, r2
 8006e82:	0018      	movs	r0, r3
 8006e84:	f000 fa20 	bl	80072c8 <USBD_CtlError>
      err++;
 8006e88:	210b      	movs	r1, #11
 8006e8a:	187b      	adds	r3, r7, r1
 8006e8c:	781a      	ldrb	r2, [r3, #0]
 8006e8e:	187b      	adds	r3, r7, r1
 8006e90:	3201      	adds	r2, #1
 8006e92:	701a      	strb	r2, [r3, #0]
      break;
 8006e94:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8006e96:	230b      	movs	r3, #11
 8006e98:	18fb      	adds	r3, r7, r3
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d127      	bne.n	8006ef0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ea0:	2108      	movs	r1, #8
 8006ea2:	187b      	adds	r3, r7, r1
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d019      	beq.n	8006ede <USBD_GetDescriptor+0x342>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	88db      	ldrh	r3, [r3, #6]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d015      	beq.n	8006ede <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	88da      	ldrh	r2, [r3, #6]
 8006eb6:	187b      	adds	r3, r7, r1
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	1c18      	adds	r0, r3, #0
 8006ebc:	1c11      	adds	r1, r2, #0
 8006ebe:	b28a      	uxth	r2, r1
 8006ec0:	b283      	uxth	r3, r0
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d900      	bls.n	8006ec8 <USBD_GetDescriptor+0x32c>
 8006ec6:	1c01      	adds	r1, r0, #0
 8006ec8:	b28a      	uxth	r2, r1
 8006eca:	2108      	movs	r1, #8
 8006ecc:	187b      	adds	r3, r7, r1
 8006ece:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ed0:	187b      	adds	r3, r7, r1
 8006ed2:	881a      	ldrh	r2, [r3, #0]
 8006ed4:	68f9      	ldr	r1, [r7, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f000 fa73 	bl	80073c4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	88db      	ldrh	r3, [r3, #6]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f000 fab1 	bl	8007450 <USBD_CtlSendStatus>
 8006eee:	e000      	b.n	8006ef2 <USBD_GetDescriptor+0x356>
    return;
 8006ef0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b004      	add	sp, #16
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	08007e8c 	.word	0x08007e8c
 8006efc:	08007eac 	.word	0x08007eac

08006f00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	889b      	ldrh	r3, [r3, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d13d      	bne.n	8006f8e <USBD_SetAddress+0x8e>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	88db      	ldrh	r3, [r3, #6]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d139      	bne.n	8006f8e <USBD_SetAddress+0x8e>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f20:	d835      	bhi.n	8006f8e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	885b      	ldrh	r3, [r3, #2]
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	230f      	movs	r3, #15
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	217f      	movs	r1, #127	; 0x7f
 8006f2e:	400a      	ands	r2, r1
 8006f30:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	23a7      	movs	r3, #167	; 0xa7
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	5cd3      	ldrb	r3, [r2, r3]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d106      	bne.n	8006f4c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	0011      	movs	r1, r2
 8006f44:	0018      	movs	r0, r3
 8006f46:	f000 f9bf 	bl	80072c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4a:	e027      	b.n	8006f9c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	240f      	movs	r4, #15
 8006f50:	193a      	adds	r2, r7, r4
 8006f52:	4914      	ldr	r1, [pc, #80]	; (8006fa4 <USBD_SetAddress+0xa4>)
 8006f54:	7812      	ldrb	r2, [r2, #0]
 8006f56:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f58:	193b      	adds	r3, r7, r4
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	0011      	movs	r1, r2
 8006f60:	0018      	movs	r0, r3
 8006f62:	f000 fe33 	bl	8007bcc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f000 fa71 	bl	8007450 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f6e:	193b      	adds	r3, r7, r4
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	23a7      	movs	r3, #167	; 0xa7
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f80:	e00c      	b.n	8006f9c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	23a7      	movs	r3, #167	; 0xa7
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	2101      	movs	r1, #1
 8006f8a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f8c:	e006      	b.n	8006f9c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	0011      	movs	r1, r2
 8006f94:	0018      	movs	r0, r3
 8006f96:	f000 f997 	bl	80072c8 <USBD_CtlError>
  }
}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	46c0      	nop			; (mov r8, r8)
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b005      	add	sp, #20
 8006fa2:	bd90      	pop	{r4, r7, pc}
 8006fa4:	0000029e 	.word	0x0000029e

08006fa8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	885b      	ldrh	r3, [r3, #2]
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	4b4c      	ldr	r3, [pc, #304]	; (80070ec <USBD_SetConfig+0x144>)
 8006fba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fbc:	4b4b      	ldr	r3, [pc, #300]	; (80070ec <USBD_SetConfig+0x144>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d906      	bls.n	8006fd2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0011      	movs	r1, r2
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 f97c 	bl	80072c8 <USBD_CtlError>
 8006fd0:	e088      	b.n	80070e4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	23a7      	movs	r3, #167	; 0xa7
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	5cd3      	ldrb	r3, [r2, r3]
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d002      	beq.n	8006fe4 <USBD_SetConfig+0x3c>
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d029      	beq.n	8007036 <USBD_SetConfig+0x8e>
 8006fe2:	e071      	b.n	80070c8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006fe4:	4b41      	ldr	r3, [pc, #260]	; (80070ec <USBD_SetConfig+0x144>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01f      	beq.n	800702c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006fec:	4b3f      	ldr	r3, [pc, #252]	; (80070ec <USBD_SetConfig+0x144>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	23a7      	movs	r3, #167	; 0xa7
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	2103      	movs	r1, #3
 8006ffe:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007000:	4b3a      	ldr	r3, [pc, #232]	; (80070ec <USBD_SetConfig+0x144>)
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	0011      	movs	r1, r2
 8007008:	0018      	movs	r0, r3
 800700a:	f7ff f8c6 	bl	800619a <USBD_SetClassConfig>
 800700e:	0003      	movs	r3, r0
 8007010:	2b02      	cmp	r3, #2
 8007012:	d106      	bne.n	8007022 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0011      	movs	r1, r2
 800701a:	0018      	movs	r0, r3
 800701c:	f000 f954 	bl	80072c8 <USBD_CtlError>
            return;
 8007020:	e060      	b.n	80070e4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	0018      	movs	r0, r3
 8007026:	f000 fa13 	bl	8007450 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800702a:	e05b      	b.n	80070e4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	0018      	movs	r0, r3
 8007030:	f000 fa0e 	bl	8007450 <USBD_CtlSendStatus>
        break;
 8007034:	e056      	b.n	80070e4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007036:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <USBD_SetConfig+0x144>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d115      	bne.n	800706a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	23a7      	movs	r3, #167	; 0xa7
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	2102      	movs	r1, #2
 8007046:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007048:	4b28      	ldr	r3, [pc, #160]	; (80070ec <USBD_SetConfig+0x144>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	001a      	movs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007052:	4b26      	ldr	r3, [pc, #152]	; (80070ec <USBD_SetConfig+0x144>)
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0011      	movs	r1, r2
 800705a:	0018      	movs	r0, r3
 800705c:	f7ff f8c4 	bl	80061e8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	0018      	movs	r0, r3
 8007064:	f000 f9f4 	bl	8007450 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007068:	e03c      	b.n	80070e4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800706a:	4b20      	ldr	r3, [pc, #128]	; (80070ec <USBD_SetConfig+0x144>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	001a      	movs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	429a      	cmp	r2, r3
 8007076:	d022      	beq.n	80070be <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	0011      	movs	r1, r2
 8007082:	0018      	movs	r0, r3
 8007084:	f7ff f8b0 	bl	80061e8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007088:	4b18      	ldr	r3, [pc, #96]	; (80070ec <USBD_SetConfig+0x144>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	001a      	movs	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007092:	4b16      	ldr	r3, [pc, #88]	; (80070ec <USBD_SetConfig+0x144>)
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	0011      	movs	r1, r2
 800709a:	0018      	movs	r0, r3
 800709c:	f7ff f87d 	bl	800619a <USBD_SetClassConfig>
 80070a0:	0003      	movs	r3, r0
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d106      	bne.n	80070b4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0011      	movs	r1, r2
 80070ac:	0018      	movs	r0, r3
 80070ae:	f000 f90b 	bl	80072c8 <USBD_CtlError>
            return;
 80070b2:	e017      	b.n	80070e4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	0018      	movs	r0, r3
 80070b8:	f000 f9ca 	bl	8007450 <USBD_CtlSendStatus>
        break;
 80070bc:	e012      	b.n	80070e4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f000 f9c5 	bl	8007450 <USBD_CtlSendStatus>
        break;
 80070c6:	e00d      	b.n	80070e4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	0011      	movs	r1, r2
 80070ce:	0018      	movs	r0, r3
 80070d0:	f000 f8fa 	bl	80072c8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <USBD_SetConfig+0x144>)
 80070d6:	781a      	ldrb	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	0011      	movs	r1, r2
 80070dc:	0018      	movs	r0, r3
 80070de:	f7ff f883 	bl	80061e8 <USBD_ClrClassConfig>
        break;
 80070e2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b002      	add	sp, #8
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	20000300 	.word	0x20000300

080070f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	88db      	ldrh	r3, [r3, #6]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d006      	beq.n	8007110 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	0011      	movs	r1, r2
 8007108:	0018      	movs	r0, r3
 800710a:	f000 f8dd 	bl	80072c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800710e:	e026      	b.n	800715e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	23a7      	movs	r3, #167	; 0xa7
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	5cd3      	ldrb	r3, [r2, r3]
 8007118:	2b02      	cmp	r3, #2
 800711a:	dc02      	bgt.n	8007122 <USBD_GetConfig+0x32>
 800711c:	2b00      	cmp	r3, #0
 800711e:	dc03      	bgt.n	8007128 <USBD_GetConfig+0x38>
 8007120:	e016      	b.n	8007150 <USBD_GetConfig+0x60>
 8007122:	2b03      	cmp	r3, #3
 8007124:	d00c      	beq.n	8007140 <USBD_GetConfig+0x50>
 8007126:	e013      	b.n	8007150 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3308      	adds	r3, #8
 8007132:	0019      	movs	r1, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	0018      	movs	r0, r3
 800713a:	f000 f943 	bl	80073c4 <USBD_CtlSendData>
        break;
 800713e:	e00e      	b.n	800715e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	1d19      	adds	r1, r3, #4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	0018      	movs	r0, r3
 800714a:	f000 f93b 	bl	80073c4 <USBD_CtlSendData>
        break;
 800714e:	e006      	b.n	800715e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	0011      	movs	r1, r2
 8007156:	0018      	movs	r0, r3
 8007158:	f000 f8b6 	bl	80072c8 <USBD_CtlError>
        break;
 800715c:	46c0      	nop			; (mov r8, r8)
}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	46bd      	mov	sp, r7
 8007162:	b002      	add	sp, #8
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	23a7      	movs	r3, #167	; 0xa7
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	5cd3      	ldrb	r3, [r2, r3]
 8007178:	3b01      	subs	r3, #1
 800717a:	2b02      	cmp	r3, #2
 800717c:	d822      	bhi.n	80071c4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	88db      	ldrh	r3, [r3, #6]
 8007182:	2b02      	cmp	r3, #2
 8007184:	d006      	beq.n	8007194 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	0011      	movs	r1, r2
 800718c:	0018      	movs	r0, r3
 800718e:	f000 f89b 	bl	80072c8 <USBD_CtlError>
        break;
 8007192:	e01e      	b.n	80071d2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	23a9      	movs	r3, #169	; 0xa9
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	58d3      	ldr	r3, [r2, r3]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2202      	movs	r2, #2
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	330c      	adds	r3, #12
 80071b6:	0019      	movs	r1, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	0018      	movs	r0, r3
 80071be:	f000 f901 	bl	80073c4 <USBD_CtlSendData>
      break;
 80071c2:	e006      	b.n	80071d2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	0011      	movs	r1, r2
 80071ca:	0018      	movs	r0, r3
 80071cc:	f000 f87c 	bl	80072c8 <USBD_CtlError>
      break;
 80071d0:	46c0      	nop			; (mov r8, r8)
  }
}
 80071d2:	46c0      	nop			; (mov r8, r8)
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b002      	add	sp, #8
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	885b      	ldrh	r3, [r3, #2]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d108      	bne.n	80071fe <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	23a9      	movs	r3, #169	; 0xa9
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	2101      	movs	r1, #1
 80071f4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	0018      	movs	r0, r3
 80071fa:	f000 f929 	bl	8007450 <USBD_CtlSendStatus>
  }
}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	46bd      	mov	sp, r7
 8007202:	b002      	add	sp, #8
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	23a7      	movs	r3, #167	; 0xa7
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	5cd3      	ldrb	r3, [r2, r3]
 8007218:	3b01      	subs	r3, #1
 800721a:	2b02      	cmp	r3, #2
 800721c:	d80d      	bhi.n	800723a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	885b      	ldrh	r3, [r3, #2]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d110      	bne.n	8007248 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	23a9      	movs	r3, #169	; 0xa9
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	2100      	movs	r1, #0
 800722e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	0018      	movs	r0, r3
 8007234:	f000 f90c 	bl	8007450 <USBD_CtlSendStatus>
      }
      break;
 8007238:	e006      	b.n	8007248 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	0011      	movs	r1, r2
 8007240:	0018      	movs	r0, r3
 8007242:	f000 f841 	bl	80072c8 <USBD_CtlError>
      break;
 8007246:	e000      	b.n	800724a <USBD_ClrFeature+0x44>
      break;
 8007248:	46c0      	nop			; (mov r8, r8)
  }
}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	46bd      	mov	sp, r7
 800724e:	b002      	add	sp, #8
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	785a      	ldrb	r2, [r3, #1]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	3302      	adds	r3, #2
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	b29a      	uxth	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	3303      	adds	r3, #3
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	021b      	lsls	r3, r3, #8
 800727e:	b29b      	uxth	r3, r3
 8007280:	18d3      	adds	r3, r2, r3
 8007282:	b29a      	uxth	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	3304      	adds	r3, #4
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	b29a      	uxth	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	3305      	adds	r3, #5
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	b29b      	uxth	r3, r3
 800729c:	18d3      	adds	r3, r2, r3
 800729e:	b29a      	uxth	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	3306      	adds	r3, #6
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	3307      	adds	r3, #7
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	18d3      	adds	r3, r2, r3
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	80da      	strh	r2, [r3, #6]

}
 80072c0:	46c0      	nop			; (mov r8, r8)
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b002      	add	sp, #8
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2180      	movs	r1, #128	; 0x80
 80072d6:	0018      	movs	r0, r3
 80072d8:	f000 fbf1 	bl	8007abe <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2100      	movs	r1, #0
 80072e0:	0018      	movs	r0, r3
 80072e2:	f000 fbec 	bl	8007abe <USBD_LL_StallEP>
}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	46bd      	mov	sp, r7
 80072ea:	b002      	add	sp, #8
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072ee:	b590      	push	{r4, r7, lr}
 80072f0:	b087      	sub	sp, #28
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072fa:	2417      	movs	r4, #23
 80072fc:	193b      	adds	r3, r7, r4
 80072fe:	2200      	movs	r2, #0
 8007300:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d03c      	beq.n	8007382 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	0018      	movs	r0, r3
 800730c:	f000 f83d 	bl	800738a <USBD_GetLen>
 8007310:	0003      	movs	r3, r0
 8007312:	3301      	adds	r3, #1
 8007314:	b29b      	uxth	r3, r3
 8007316:	18db      	adds	r3, r3, r3
 8007318:	b29a      	uxth	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800731e:	193b      	adds	r3, r7, r4
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	193a      	adds	r2, r7, r4
 8007324:	1c59      	adds	r1, r3, #1
 8007326:	7011      	strb	r1, [r2, #0]
 8007328:	001a      	movs	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	189b      	adds	r3, r3, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007334:	193b      	adds	r3, r7, r4
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	193a      	adds	r2, r7, r4
 800733a:	1c59      	adds	r1, r3, #1
 800733c:	7011      	strb	r1, [r2, #0]
 800733e:	001a      	movs	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	189b      	adds	r3, r3, r2
 8007344:	2203      	movs	r2, #3
 8007346:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007348:	e017      	b.n	800737a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	60fa      	str	r2, [r7, #12]
 8007350:	2417      	movs	r4, #23
 8007352:	193a      	adds	r2, r7, r4
 8007354:	7812      	ldrb	r2, [r2, #0]
 8007356:	1939      	adds	r1, r7, r4
 8007358:	1c50      	adds	r0, r2, #1
 800735a:	7008      	strb	r0, [r1, #0]
 800735c:	0011      	movs	r1, r2
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	1852      	adds	r2, r2, r1
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007366:	193b      	adds	r3, r7, r4
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	193a      	adds	r2, r7, r4
 800736c:	1c59      	adds	r1, r3, #1
 800736e:	7011      	strb	r1, [r2, #0]
 8007370:	001a      	movs	r2, r3
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	189b      	adds	r3, r3, r2
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e3      	bne.n	800734a <USBD_GetString+0x5c>
    }
  }
}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	46bd      	mov	sp, r7
 8007386:	b007      	add	sp, #28
 8007388:	bd90      	pop	{r4, r7, pc}

0800738a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007392:	230f      	movs	r3, #15
 8007394:	18fb      	adds	r3, r7, r3
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800739a:	e008      	b.n	80073ae <USBD_GetLen+0x24>
  {
    len++;
 800739c:	210f      	movs	r1, #15
 800739e:	187b      	adds	r3, r7, r1
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	187b      	adds	r3, r7, r1
 80073a4:	3201      	adds	r2, #1
 80073a6:	701a      	strb	r2, [r3, #0]
    buf++;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3301      	adds	r3, #1
 80073ac:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f2      	bne.n	800739c <USBD_GetLen+0x12>
  }

  return len;
 80073b6:	230f      	movs	r3, #15
 80073b8:	18fb      	adds	r3, r7, r3
 80073ba:	781b      	ldrb	r3, [r3, #0]
}
 80073bc:	0018      	movs	r0, r3
 80073be:	46bd      	mov	sp, r7
 80073c0:	b004      	add	sp, #16
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	1dbb      	adds	r3, r7, #6
 80073d0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	23a5      	movs	r3, #165	; 0xa5
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	2102      	movs	r1, #2
 80073da:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80073dc:	1dbb      	adds	r3, r7, #6
 80073de:	881a      	ldrh	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80073e4:	1dbb      	adds	r3, r7, #6
 80073e6:	881a      	ldrh	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073ec:	1dbb      	adds	r3, r7, #6
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	2100      	movs	r1, #0
 80073f6:	f000 fc14 	bl	8007c22 <USBD_LL_Transmit>

  return USBD_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	0018      	movs	r0, r3
 80073fe:	46bd      	mov	sp, r7
 8007400:	b004      	add	sp, #16
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	1dbb      	adds	r3, r7, #6
 8007410:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007412:	1dbb      	adds	r3, r7, #6
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	2100      	movs	r1, #0
 800741c:	f000 fc01 	bl	8007c22 <USBD_LL_Transmit>

  return USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	0018      	movs	r0, r3
 8007424:	46bd      	mov	sp, r7
 8007426:	b004      	add	sp, #16
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	1dbb      	adds	r3, r7, #6
 8007436:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007438:	1dbb      	adds	r3, r7, #6
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	2100      	movs	r1, #0
 8007442:	f000 fc25 	bl	8007c90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	0018      	movs	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	b004      	add	sp, #16
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	23a5      	movs	r3, #165	; 0xa5
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	2104      	movs	r1, #4
 8007460:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	2300      	movs	r3, #0
 8007466:	2200      	movs	r2, #0
 8007468:	2100      	movs	r1, #0
 800746a:	f000 fbda 	bl	8007c22 <USBD_LL_Transmit>

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	0018      	movs	r0, r3
 8007472:	46bd      	mov	sp, r7
 8007474:	b002      	add	sp, #8
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	23a5      	movs	r3, #165	; 0xa5
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	2105      	movs	r1, #5
 8007488:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	2300      	movs	r3, #0
 800748e:	2200      	movs	r2, #0
 8007490:	2100      	movs	r1, #0
 8007492:	f000 fbfd 	bl	8007c90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	0018      	movs	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	b002      	add	sp, #8
 800749e:	bd80      	pop	{r7, pc}

080074a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074a4:	490f      	ldr	r1, [pc, #60]	; (80074e4 <MX_USB_DEVICE_Init+0x44>)
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <MX_USB_DEVICE_Init+0x48>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	0018      	movs	r0, r3
 80074ac:	f7fe fe0e 	bl	80060cc <USBD_Init>
 80074b0:	1e03      	subs	r3, r0, #0
 80074b2:	d001      	beq.n	80074b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074b4:	f7f9 fab0 	bl	8000a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074b8:	4a0c      	ldr	r2, [pc, #48]	; (80074ec <MX_USB_DEVICE_Init+0x4c>)
 80074ba:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <MX_USB_DEVICE_Init+0x48>)
 80074bc:	0011      	movs	r1, r2
 80074be:	0018      	movs	r0, r3
 80074c0:	f7fe fe35 	bl	800612e <USBD_RegisterClass>
 80074c4:	1e03      	subs	r3, r0, #0
 80074c6:	d001      	beq.n	80074cc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80074c8:	f7f9 faa6 	bl	8000a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <MX_USB_DEVICE_Init+0x48>)
 80074ce:	0018      	movs	r0, r3
 80074d0:	f7fe fe4d 	bl	800616e <USBD_Start>
 80074d4:	1e03      	subs	r3, r0, #0
 80074d6:	d001      	beq.n	80074dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074d8:	f7f9 fa9e 	bl	8000a18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074dc:	46c0      	nop			; (mov r8, r8)
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	20000288 	.word	0x20000288
 80074e8:	20000304 	.word	0x20000304
 80074ec:	2000018c 	.word	0x2000018c

080074f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	0002      	movs	r2, r0
 80074f8:	6039      	str	r1, [r7, #0]
 80074fa:	1dfb      	adds	r3, r7, #7
 80074fc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2212      	movs	r2, #18
 8007502:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007504:	4b02      	ldr	r3, [pc, #8]	; (8007510 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007506:	0018      	movs	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	b002      	add	sp, #8
 800750c:	bd80      	pop	{r7, pc}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	200002a4 	.word	0x200002a4

08007514 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	0002      	movs	r2, r0
 800751c:	6039      	str	r1, [r7, #0]
 800751e:	1dfb      	adds	r3, r7, #7
 8007520:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2204      	movs	r2, #4
 8007526:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007528:	4b02      	ldr	r3, [pc, #8]	; (8007534 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800752a:	0018      	movs	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	b002      	add	sp, #8
 8007530:	bd80      	pop	{r7, pc}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	200002b8 	.word	0x200002b8

08007538 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	0002      	movs	r2, r0
 8007540:	6039      	str	r1, [r7, #0]
 8007542:	1dfb      	adds	r3, r7, #7
 8007544:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007546:	1dfb      	adds	r3, r7, #7
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	4908      	ldr	r1, [pc, #32]	; (8007574 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007552:	4b09      	ldr	r3, [pc, #36]	; (8007578 <USBD_FS_ProductStrDescriptor+0x40>)
 8007554:	0018      	movs	r0, r3
 8007556:	f7ff feca 	bl	80072ee <USBD_GetString>
 800755a:	e005      	b.n	8007568 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	4905      	ldr	r1, [pc, #20]	; (8007574 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <USBD_FS_ProductStrDescriptor+0x40>)
 8007562:	0018      	movs	r0, r3
 8007564:	f7ff fec3 	bl	80072ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8007568:	4b02      	ldr	r3, [pc, #8]	; (8007574 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800756a:	0018      	movs	r0, r3
 800756c:	46bd      	mov	sp, r7
 800756e:	b002      	add	sp, #8
 8007570:	bd80      	pop	{r7, pc}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	200005c8 	.word	0x200005c8
 8007578:	08007e14 	.word	0x08007e14

0800757c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	0002      	movs	r2, r0
 8007584:	6039      	str	r1, [r7, #0]
 8007586:	1dfb      	adds	r3, r7, #7
 8007588:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	4904      	ldr	r1, [pc, #16]	; (80075a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007590:	0018      	movs	r0, r3
 8007592:	f7ff feac 	bl	80072ee <USBD_GetString>
  return USBD_StrDesc;
 8007596:	4b02      	ldr	r3, [pc, #8]	; (80075a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007598:	0018      	movs	r0, r3
 800759a:	46bd      	mov	sp, r7
 800759c:	b002      	add	sp, #8
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	200005c8 	.word	0x200005c8
 80075a4:	08007e18 	.word	0x08007e18

080075a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	0002      	movs	r2, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	1dfb      	adds	r3, r7, #7
 80075b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	221a      	movs	r2, #26
 80075ba:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075bc:	f000 f84c 	bl	8007658 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075c0:	4b02      	ldr	r3, [pc, #8]	; (80075cc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80075c2:	0018      	movs	r0, r3
 80075c4:	46bd      	mov	sp, r7
 80075c6:	b002      	add	sp, #8
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	200002bc 	.word	0x200002bc

080075d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	0002      	movs	r2, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	1dfb      	adds	r3, r7, #7
 80075dc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80075de:	1dfb      	adds	r3, r7, #7
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	4908      	ldr	r1, [pc, #32]	; (800760c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <USBD_FS_ConfigStrDescriptor+0x40>)
 80075ec:	0018      	movs	r0, r3
 80075ee:	f7ff fe7e 	bl	80072ee <USBD_GetString>
 80075f2:	e005      	b.n	8007600 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	4905      	ldr	r1, [pc, #20]	; (800760c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80075f8:	4b05      	ldr	r3, [pc, #20]	; (8007610 <USBD_FS_ConfigStrDescriptor+0x40>)
 80075fa:	0018      	movs	r0, r3
 80075fc:	f7ff fe77 	bl	80072ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8007600:	4b02      	ldr	r3, [pc, #8]	; (800760c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007602:	0018      	movs	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	b002      	add	sp, #8
 8007608:	bd80      	pop	{r7, pc}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	200005c8 	.word	0x200005c8
 8007610:	08007e2c 	.word	0x08007e2c

08007614 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	0002      	movs	r2, r0
 800761c:	6039      	str	r1, [r7, #0]
 800761e:	1dfb      	adds	r3, r7, #7
 8007620:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007622:	1dfb      	adds	r3, r7, #7
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	4908      	ldr	r1, [pc, #32]	; (8007650 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800762e:	4b09      	ldr	r3, [pc, #36]	; (8007654 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007630:	0018      	movs	r0, r3
 8007632:	f7ff fe5c 	bl	80072ee <USBD_GetString>
 8007636:	e005      	b.n	8007644 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	4905      	ldr	r1, [pc, #20]	; (8007650 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800763e:	0018      	movs	r0, r3
 8007640:	f7ff fe55 	bl	80072ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8007644:	4b02      	ldr	r3, [pc, #8]	; (8007650 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007646:	0018      	movs	r0, r3
 8007648:	46bd      	mov	sp, r7
 800764a:	b002      	add	sp, #8
 800764c:	bd80      	pop	{r7, pc}
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	200005c8 	.word	0x200005c8
 8007654:	08007e38 	.word	0x08007e38

08007658 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800765e:	4b10      	ldr	r3, [pc, #64]	; (80076a0 <Get_SerialNum+0x48>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <Get_SerialNum+0x4c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800766a:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <Get_SerialNum+0x50>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	18d3      	adds	r3, r2, r3
 8007676:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800767e:	490b      	ldr	r1, [pc, #44]	; (80076ac <Get_SerialNum+0x54>)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2208      	movs	r2, #8
 8007684:	0018      	movs	r0, r3
 8007686:	f000 f815 	bl	80076b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800768a:	4909      	ldr	r1, [pc, #36]	; (80076b0 <Get_SerialNum+0x58>)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2204      	movs	r2, #4
 8007690:	0018      	movs	r0, r3
 8007692:	f000 f80f 	bl	80076b4 <IntToUnicode>
  }
}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	46bd      	mov	sp, r7
 800769a:	b004      	add	sp, #16
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	1ff80050 	.word	0x1ff80050
 80076a4:	1ff80054 	.word	0x1ff80054
 80076a8:	1ff80058 	.word	0x1ff80058
 80076ac:	200002be 	.word	0x200002be
 80076b0:	200002ce 	.word	0x200002ce

080076b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	1dfb      	adds	r3, r7, #7
 80076c0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80076c2:	2117      	movs	r1, #23
 80076c4:	187b      	adds	r3, r7, r1
 80076c6:	2200      	movs	r2, #0
 80076c8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80076ca:	187b      	adds	r3, r7, r1
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	e02f      	b.n	8007732 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	0f1b      	lsrs	r3, r3, #28
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d80d      	bhi.n	80076f6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	0f1b      	lsrs	r3, r3, #28
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	2317      	movs	r3, #23
 80076e2:	18fb      	adds	r3, r7, r3
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	0019      	movs	r1, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	185b      	adds	r3, r3, r1
 80076ee:	3230      	adds	r2, #48	; 0x30
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	e00c      	b.n	8007710 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	0f1b      	lsrs	r3, r3, #28
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	2317      	movs	r3, #23
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	0019      	movs	r1, r3
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	185b      	adds	r3, r3, r1
 800770a:	3237      	adds	r2, #55	; 0x37
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007716:	2117      	movs	r1, #23
 8007718:	187b      	adds	r3, r7, r1
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	3301      	adds	r3, #1
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	18d3      	adds	r3, r2, r3
 8007724:	2200      	movs	r2, #0
 8007726:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007728:	187b      	adds	r3, r7, r1
 800772a:	781a      	ldrb	r2, [r3, #0]
 800772c:	187b      	adds	r3, r7, r1
 800772e:	3201      	adds	r2, #1
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	2317      	movs	r3, #23
 8007734:	18fa      	adds	r2, r7, r3
 8007736:	1dfb      	adds	r3, r7, #7
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d3c8      	bcc.n	80076d2 <IntToUnicode+0x1e>
  }
}
 8007740:	46c0      	nop			; (mov r8, r8)
 8007742:	46c0      	nop			; (mov r8, r8)
 8007744:	46bd      	mov	sp, r7
 8007746:	b006      	add	sp, #24
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <HAL_PCD_MspInit+0x38>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d10e      	bne.n	800777c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800775e:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <HAL_PCD_MspInit+0x3c>)
 8007760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007762:	4b09      	ldr	r3, [pc, #36]	; (8007788 <HAL_PCD_MspInit+0x3c>)
 8007764:	2180      	movs	r1, #128	; 0x80
 8007766:	0409      	lsls	r1, r1, #16
 8007768:	430a      	orrs	r2, r1
 800776a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800776c:	2200      	movs	r2, #0
 800776e:	2100      	movs	r1, #0
 8007770:	201f      	movs	r0, #31
 8007772:	f7f9 faff 	bl	8000d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007776:	201f      	movs	r0, #31
 8007778:	f7f9 fb11 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800777c:	46c0      	nop			; (mov r8, r8)
 800777e:	46bd      	mov	sp, r7
 8007780:	b002      	add	sp, #8
 8007782:	bd80      	pop	{r7, pc}
 8007784:	40005c00 	.word	0x40005c00
 8007788:	40021000 	.word	0x40021000

0800778c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	23bc      	movs	r3, #188	; 0xbc
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	58d2      	ldr	r2, [r2, r3]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	21ac      	movs	r1, #172	; 0xac
 80077a0:	0089      	lsls	r1, r1, #2
 80077a2:	468c      	mov	ip, r1
 80077a4:	4463      	add	r3, ip
 80077a6:	0019      	movs	r1, r3
 80077a8:	0010      	movs	r0, r2
 80077aa:	f7fe fd33 	bl	8006214 <USBD_LL_SetupStage>
}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b002      	add	sp, #8
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b6:	b590      	push	{r4, r7, lr}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	000a      	movs	r2, r1
 80077c0:	1cfb      	adds	r3, r7, #3
 80077c2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	23bc      	movs	r3, #188	; 0xbc
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	58d4      	ldr	r4, [r2, r3]
 80077cc:	1cfb      	adds	r3, r7, #3
 80077ce:	781a      	ldrb	r2, [r3, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	23be      	movs	r3, #190	; 0xbe
 80077d4:	0059      	lsls	r1, r3, #1
 80077d6:	0013      	movs	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	189b      	adds	r3, r3, r2
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	18c3      	adds	r3, r0, r3
 80077e0:	185b      	adds	r3, r3, r1
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	1cfb      	adds	r3, r7, #3
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	0019      	movs	r1, r3
 80077ea:	0020      	movs	r0, r4
 80077ec:	f7fe fd70 	bl	80062d0 <USBD_LL_DataOutStage>
}
 80077f0:	46c0      	nop			; (mov r8, r8)
 80077f2:	46bd      	mov	sp, r7
 80077f4:	b003      	add	sp, #12
 80077f6:	bd90      	pop	{r4, r7, pc}

080077f8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	000a      	movs	r2, r1
 8007802:	1cfb      	adds	r3, r7, #3
 8007804:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	23bc      	movs	r3, #188	; 0xbc
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	58d0      	ldr	r0, [r2, r3]
 800780e:	1cfb      	adds	r3, r7, #3
 8007810:	781a      	ldrb	r2, [r3, #0]
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	0013      	movs	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	189b      	adds	r3, r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	18cb      	adds	r3, r1, r3
 800781e:	333c      	adds	r3, #60	; 0x3c
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	1cfb      	adds	r3, r7, #3
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	0019      	movs	r1, r3
 8007828:	f7fe fdd4 	bl	80063d4 <USBD_LL_DataInStage>
}
 800782c:	46c0      	nop			; (mov r8, r8)
 800782e:	46bd      	mov	sp, r7
 8007830:	b002      	add	sp, #8
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	23bc      	movs	r3, #188	; 0xbc
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	58d3      	ldr	r3, [r2, r3]
 8007844:	0018      	movs	r0, r3
 8007846:	f7fe ff0b 	bl	8006660 <USBD_LL_SOF>
}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	46bd      	mov	sp, r7
 800784e:	b002      	add	sp, #8
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800785a:	230f      	movs	r3, #15
 800785c:	18fb      	adds	r3, r7, r3
 800785e:	2201      	movs	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d001      	beq.n	800786e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800786a:	f7f9 f8d5 	bl	8000a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	23bc      	movs	r3, #188	; 0xbc
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	58d2      	ldr	r2, [r2, r3]
 8007876:	230f      	movs	r3, #15
 8007878:	18fb      	adds	r3, r7, r3
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	0019      	movs	r1, r3
 800787e:	0010      	movs	r0, r2
 8007880:	f7fe fead 	bl	80065de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	23bc      	movs	r3, #188	; 0xbc
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	58d3      	ldr	r3, [r2, r3]
 800788c:	0018      	movs	r0, r3
 800788e:	f7fe fe5e 	bl	800654e <USBD_LL_Reset>
}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	46bd      	mov	sp, r7
 8007896:	b004      	add	sp, #16
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	23bc      	movs	r3, #188	; 0xbc
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	58d3      	ldr	r3, [r2, r3]
 80078ac:	0018      	movs	r0, r3
 80078ae:	f7fe fea7 	bl	8006600 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078ba:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <HAL_PCD_SuspendCallback+0x34>)
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <HAL_PCD_SuspendCallback+0x34>)
 80078c0:	2106      	movs	r1, #6
 80078c2:	430a      	orrs	r2, r1
 80078c4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b002      	add	sp, #8
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	e000ed00 	.word	0xe000ed00

080078d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d007      	beq.n	80078f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078e4:	4b09      	ldr	r3, [pc, #36]	; (800790c <HAL_PCD_ResumeCallback+0x38>)
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	4b08      	ldr	r3, [pc, #32]	; (800790c <HAL_PCD_ResumeCallback+0x38>)
 80078ea:	2106      	movs	r1, #6
 80078ec:	438a      	bics	r2, r1
 80078ee:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80078f0:	f000 fa1a 	bl	8007d28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	23bc      	movs	r3, #188	; 0xbc
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	58d3      	ldr	r3, [r2, r3]
 80078fc:	0018      	movs	r0, r3
 80078fe:	f7fe fe97 	bl	8006630 <USBD_LL_Resume>
}
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	46bd      	mov	sp, r7
 8007906:	b002      	add	sp, #8
 8007908:	bd80      	pop	{r7, pc}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	e000ed00 	.word	0xe000ed00

08007910 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007918:	4a23      	ldr	r2, [pc, #140]	; (80079a8 <USBD_LL_Init+0x98>)
 800791a:	23bc      	movs	r3, #188	; 0xbc
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	23b0      	movs	r3, #176	; 0xb0
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	491f      	ldr	r1, [pc, #124]	; (80079a8 <USBD_LL_Init+0x98>)
 800792a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800792c:	4b1e      	ldr	r3, [pc, #120]	; (80079a8 <USBD_LL_Init+0x98>)
 800792e:	4a1f      	ldr	r2, [pc, #124]	; (80079ac <USBD_LL_Init+0x9c>)
 8007930:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007932:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <USBD_LL_Init+0x98>)
 8007934:	2208      	movs	r2, #8
 8007936:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007938:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <USBD_LL_Init+0x98>)
 800793a:	2202      	movs	r2, #2
 800793c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800793e:	4b1a      	ldr	r3, [pc, #104]	; (80079a8 <USBD_LL_Init+0x98>)
 8007940:	2202      	movs	r2, #2
 8007942:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007944:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <USBD_LL_Init+0x98>)
 8007946:	2200      	movs	r2, #0
 8007948:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800794a:	4b17      	ldr	r3, [pc, #92]	; (80079a8 <USBD_LL_Init+0x98>)
 800794c:	2200      	movs	r2, #0
 800794e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007950:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <USBD_LL_Init+0x98>)
 8007952:	2200      	movs	r2, #0
 8007954:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <USBD_LL_Init+0x98>)
 8007958:	0018      	movs	r0, r3
 800795a:	f7f9 fbed 	bl	8001138 <HAL_PCD_Init>
 800795e:	1e03      	subs	r3, r0, #0
 8007960:	d001      	beq.n	8007966 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007962:	f7f9 f859 	bl	8000a18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	23b0      	movs	r3, #176	; 0xb0
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	58d0      	ldr	r0, [r2, r3]
 800796e:	2318      	movs	r3, #24
 8007970:	2200      	movs	r2, #0
 8007972:	2100      	movs	r1, #0
 8007974:	f7fb f994 	bl	8002ca0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	23b0      	movs	r3, #176	; 0xb0
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	58d0      	ldr	r0, [r2, r3]
 8007980:	2358      	movs	r3, #88	; 0x58
 8007982:	2200      	movs	r2, #0
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	f7fb f98b 	bl	8002ca0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	23b0      	movs	r3, #176	; 0xb0
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	58d0      	ldr	r0, [r2, r3]
 8007992:	2380      	movs	r3, #128	; 0x80
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	2200      	movs	r2, #0
 8007998:	2181      	movs	r1, #129	; 0x81
 800799a:	f7fb f981 	bl	8002ca0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	0018      	movs	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b002      	add	sp, #8
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	200007c8 	.word	0x200007c8
 80079ac:	40005c00 	.word	0x40005c00

080079b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b8:	210f      	movs	r1, #15
 80079ba:	187b      	adds	r3, r7, r1
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c0:	260e      	movs	r6, #14
 80079c2:	19bb      	adds	r3, r7, r6
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	23b0      	movs	r3, #176	; 0xb0
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	58d3      	ldr	r3, [r2, r3]
 80079d0:	000d      	movs	r5, r1
 80079d2:	187c      	adds	r4, r7, r1
 80079d4:	0018      	movs	r0, r3
 80079d6:	f7f9 fcaf 	bl	8001338 <HAL_PCD_Start>
 80079da:	0003      	movs	r3, r0
 80079dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079de:	19bc      	adds	r4, r7, r6
 80079e0:	197b      	adds	r3, r7, r5
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f000 f9a6 	bl	8007d36 <USBD_Get_USB_Status>
 80079ea:	0003      	movs	r3, r0
 80079ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80079ee:	19bb      	adds	r3, r7, r6
 80079f0:	781b      	ldrb	r3, [r3, #0]
}
 80079f2:	0018      	movs	r0, r3
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b005      	add	sp, #20
 80079f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	000c      	movs	r4, r1
 8007a04:	0010      	movs	r0, r2
 8007a06:	0019      	movs	r1, r3
 8007a08:	1cfb      	adds	r3, r7, #3
 8007a0a:	1c22      	adds	r2, r4, #0
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	1cbb      	adds	r3, r7, #2
 8007a10:	1c02      	adds	r2, r0, #0
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	003b      	movs	r3, r7
 8007a16:	1c0a      	adds	r2, r1, #0
 8007a18:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1a:	260f      	movs	r6, #15
 8007a1c:	19bb      	adds	r3, r7, r6
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a22:	250e      	movs	r5, #14
 8007a24:	197b      	adds	r3, r7, r5
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	23b0      	movs	r3, #176	; 0xb0
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	58d0      	ldr	r0, [r2, r3]
 8007a32:	19bc      	adds	r4, r7, r6
 8007a34:	1cbb      	adds	r3, r7, #2
 8007a36:	781d      	ldrb	r5, [r3, #0]
 8007a38:	003b      	movs	r3, r7
 8007a3a:	881a      	ldrh	r2, [r3, #0]
 8007a3c:	1cfb      	adds	r3, r7, #3
 8007a3e:	7819      	ldrb	r1, [r3, #0]
 8007a40:	002b      	movs	r3, r5
 8007a42:	f7f9 fe0e 	bl	8001662 <HAL_PCD_EP_Open>
 8007a46:	0003      	movs	r3, r0
 8007a48:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a4a:	250e      	movs	r5, #14
 8007a4c:	197c      	adds	r4, r7, r5
 8007a4e:	19bb      	adds	r3, r7, r6
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	0018      	movs	r0, r3
 8007a54:	f000 f96f 	bl	8007d36 <USBD_Get_USB_Status>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007a5c:	197b      	adds	r3, r7, r5
 8007a5e:	781b      	ldrb	r3, [r3, #0]
}
 8007a60:	0018      	movs	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b005      	add	sp, #20
 8007a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a68 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	000a      	movs	r2, r1
 8007a72:	1cfb      	adds	r3, r7, #3
 8007a74:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a76:	210f      	movs	r1, #15
 8007a78:	187b      	adds	r3, r7, r1
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a7e:	260e      	movs	r6, #14
 8007a80:	19bb      	adds	r3, r7, r6
 8007a82:	2200      	movs	r2, #0
 8007a84:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	23b0      	movs	r3, #176	; 0xb0
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	58d2      	ldr	r2, [r2, r3]
 8007a8e:	000d      	movs	r5, r1
 8007a90:	187c      	adds	r4, r7, r1
 8007a92:	1cfb      	adds	r3, r7, #3
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	0019      	movs	r1, r3
 8007a98:	0010      	movs	r0, r2
 8007a9a:	f7f9 fe51 	bl	8001740 <HAL_PCD_EP_Close>
 8007a9e:	0003      	movs	r3, r0
 8007aa0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa2:	19bc      	adds	r4, r7, r6
 8007aa4:	197b      	adds	r3, r7, r5
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f000 f944 	bl	8007d36 <USBD_Get_USB_Status>
 8007aae:	0003      	movs	r3, r0
 8007ab0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007ab2:	19bb      	adds	r3, r7, r6
 8007ab4:	781b      	ldrb	r3, [r3, #0]
}
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	b005      	add	sp, #20
 8007abc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007abe <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	000a      	movs	r2, r1
 8007ac8:	1cfb      	adds	r3, r7, #3
 8007aca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007acc:	210f      	movs	r1, #15
 8007ace:	187b      	adds	r3, r7, r1
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad4:	260e      	movs	r6, #14
 8007ad6:	19bb      	adds	r3, r7, r6
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	23b0      	movs	r3, #176	; 0xb0
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	58d2      	ldr	r2, [r2, r3]
 8007ae4:	000d      	movs	r5, r1
 8007ae6:	187c      	adds	r4, r7, r1
 8007ae8:	1cfb      	adds	r3, r7, #3
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	0019      	movs	r1, r3
 8007aee:	0010      	movs	r0, r2
 8007af0:	f7f9 feea 	bl	80018c8 <HAL_PCD_EP_SetStall>
 8007af4:	0003      	movs	r3, r0
 8007af6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af8:	19bc      	adds	r4, r7, r6
 8007afa:	197b      	adds	r3, r7, r5
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	0018      	movs	r0, r3
 8007b00:	f000 f919 	bl	8007d36 <USBD_Get_USB_Status>
 8007b04:	0003      	movs	r3, r0
 8007b06:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007b08:	19bb      	adds	r3, r7, r6
 8007b0a:	781b      	ldrb	r3, [r3, #0]
}
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b005      	add	sp, #20
 8007b12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b14 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	000a      	movs	r2, r1
 8007b1e:	1cfb      	adds	r3, r7, #3
 8007b20:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b22:	210f      	movs	r1, #15
 8007b24:	187b      	adds	r3, r7, r1
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b2a:	260e      	movs	r6, #14
 8007b2c:	19bb      	adds	r3, r7, r6
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	23b0      	movs	r3, #176	; 0xb0
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	58d2      	ldr	r2, [r2, r3]
 8007b3a:	000d      	movs	r5, r1
 8007b3c:	187c      	adds	r4, r7, r1
 8007b3e:	1cfb      	adds	r3, r7, #3
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	0019      	movs	r1, r3
 8007b44:	0010      	movs	r0, r2
 8007b46:	f7f9 ff1b 	bl	8001980 <HAL_PCD_EP_ClrStall>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b4e:	19bc      	adds	r4, r7, r6
 8007b50:	197b      	adds	r3, r7, r5
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	0018      	movs	r0, r3
 8007b56:	f000 f8ee 	bl	8007d36 <USBD_Get_USB_Status>
 8007b5a:	0003      	movs	r3, r0
 8007b5c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007b5e:	19bb      	adds	r3, r7, r6
 8007b60:	781b      	ldrb	r3, [r3, #0]
}
 8007b62:	0018      	movs	r0, r3
 8007b64:	46bd      	mov	sp, r7
 8007b66:	b005      	add	sp, #20
 8007b68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b6a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	000a      	movs	r2, r1
 8007b74:	1cfb      	adds	r3, r7, #3
 8007b76:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	23b0      	movs	r3, #176	; 0xb0
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	58d3      	ldr	r3, [r2, r3]
 8007b80:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b82:	1cfb      	adds	r3, r7, #3
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b25b      	sxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	da0d      	bge.n	8007ba8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b8c:	1cfb      	adds	r3, r7, #3
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	227f      	movs	r2, #127	; 0x7f
 8007b92:	4013      	ands	r3, r2
 8007b94:	68f9      	ldr	r1, [r7, #12]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	0013      	movs	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	189b      	adds	r3, r3, r2
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	18cb      	adds	r3, r1, r3
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	e00d      	b.n	8007bc4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ba8:	1cfb      	adds	r3, r7, #3
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	227f      	movs	r2, #127	; 0x7f
 8007bae:	401a      	ands	r2, r3
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	23b5      	movs	r3, #181	; 0xb5
 8007bb4:	0059      	lsls	r1, r3, #1
 8007bb6:	0013      	movs	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	18c3      	adds	r3, r0, r3
 8007bc0:	185b      	adds	r3, r3, r1
 8007bc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	b004      	add	sp, #16
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	000a      	movs	r2, r1
 8007bd6:	1cfb      	adds	r3, r7, #3
 8007bd8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bda:	210f      	movs	r1, #15
 8007bdc:	187b      	adds	r3, r7, r1
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be2:	260e      	movs	r6, #14
 8007be4:	19bb      	adds	r3, r7, r6
 8007be6:	2200      	movs	r2, #0
 8007be8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	23b0      	movs	r3, #176	; 0xb0
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	58d2      	ldr	r2, [r2, r3]
 8007bf2:	000d      	movs	r5, r1
 8007bf4:	187c      	adds	r4, r7, r1
 8007bf6:	1cfb      	adds	r3, r7, #3
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	0019      	movs	r1, r3
 8007bfc:	0010      	movs	r0, r2
 8007bfe:	f7f9 fd05 	bl	800160c <HAL_PCD_SetAddress>
 8007c02:	0003      	movs	r3, r0
 8007c04:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c06:	19bc      	adds	r4, r7, r6
 8007c08:	197b      	adds	r3, r7, r5
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f000 f892 	bl	8007d36 <USBD_Get_USB_Status>
 8007c12:	0003      	movs	r3, r0
 8007c14:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007c16:	19bb      	adds	r3, r7, r6
 8007c18:	781b      	ldrb	r3, [r3, #0]
}
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	b005      	add	sp, #20
 8007c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c24:	b087      	sub	sp, #28
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	0008      	movs	r0, r1
 8007c2c:	607a      	str	r2, [r7, #4]
 8007c2e:	0019      	movs	r1, r3
 8007c30:	230b      	movs	r3, #11
 8007c32:	18fb      	adds	r3, r7, r3
 8007c34:	1c02      	adds	r2, r0, #0
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	2408      	movs	r4, #8
 8007c3a:	193b      	adds	r3, r7, r4
 8007c3c:	1c0a      	adds	r2, r1, #0
 8007c3e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c40:	2117      	movs	r1, #23
 8007c42:	187b      	adds	r3, r7, r1
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c48:	2516      	movs	r5, #22
 8007c4a:	197b      	adds	r3, r7, r5
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	23b0      	movs	r3, #176	; 0xb0
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	58d0      	ldr	r0, [r2, r3]
 8007c58:	193b      	adds	r3, r7, r4
 8007c5a:	881d      	ldrh	r5, [r3, #0]
 8007c5c:	000e      	movs	r6, r1
 8007c5e:	187c      	adds	r4, r7, r1
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	230b      	movs	r3, #11
 8007c64:	18fb      	adds	r3, r7, r3
 8007c66:	7819      	ldrb	r1, [r3, #0]
 8007c68:	002b      	movs	r3, r5
 8007c6a:	f7f9 fdf1 	bl	8001850 <HAL_PCD_EP_Transmit>
 8007c6e:	0003      	movs	r3, r0
 8007c70:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c72:	2516      	movs	r5, #22
 8007c74:	197c      	adds	r4, r7, r5
 8007c76:	19bb      	adds	r3, r7, r6
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f000 f85b 	bl	8007d36 <USBD_Get_USB_Status>
 8007c80:	0003      	movs	r3, r0
 8007c82:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007c84:	197b      	adds	r3, r7, r5
 8007c86:	781b      	ldrb	r3, [r3, #0]
}
 8007c88:	0018      	movs	r0, r3
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b007      	add	sp, #28
 8007c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	0008      	movs	r0, r1
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	0019      	movs	r1, r3
 8007c9e:	230b      	movs	r3, #11
 8007ca0:	18fb      	adds	r3, r7, r3
 8007ca2:	1c02      	adds	r2, r0, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	2408      	movs	r4, #8
 8007ca8:	193b      	adds	r3, r7, r4
 8007caa:	1c0a      	adds	r2, r1, #0
 8007cac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cae:	2117      	movs	r1, #23
 8007cb0:	187b      	adds	r3, r7, r1
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb6:	2516      	movs	r5, #22
 8007cb8:	197b      	adds	r3, r7, r5
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	23b0      	movs	r3, #176	; 0xb0
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	58d0      	ldr	r0, [r2, r3]
 8007cc6:	193b      	adds	r3, r7, r4
 8007cc8:	881d      	ldrh	r5, [r3, #0]
 8007cca:	000e      	movs	r6, r1
 8007ccc:	187c      	adds	r4, r7, r1
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	230b      	movs	r3, #11
 8007cd2:	18fb      	adds	r3, r7, r3
 8007cd4:	7819      	ldrb	r1, [r3, #0]
 8007cd6:	002b      	movs	r3, r5
 8007cd8:	f7f9 fd83 	bl	80017e2 <HAL_PCD_EP_Receive>
 8007cdc:	0003      	movs	r3, r0
 8007cde:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce0:	2516      	movs	r5, #22
 8007ce2:	197c      	adds	r4, r7, r5
 8007ce4:	19bb      	adds	r3, r7, r6
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	0018      	movs	r0, r3
 8007cea:	f000 f824 	bl	8007d36 <USBD_Get_USB_Status>
 8007cee:	0003      	movs	r3, r0
 8007cf0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007cf2:	197b      	adds	r3, r7, r5
 8007cf4:	781b      	ldrb	r3, [r3, #0]
}
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	b007      	add	sp, #28
 8007cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007d00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d08:	4b02      	ldr	r3, [pc, #8]	; (8007d14 <USBD_static_malloc+0x14>)
}
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	b002      	add	sp, #8
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	20000abc 	.word	0x20000abc

08007d18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

}
 8007d20:	46c0      	nop			; (mov r8, r8)
 8007d22:	46bd      	mov	sp, r7
 8007d24:	b002      	add	sp, #8
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007d2c:	f7f8 fd8e 	bl	800084c <SystemClock_Config>
}
 8007d30:	46c0      	nop			; (mov r8, r8)
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	0002      	movs	r2, r0
 8007d3e:	1dfb      	adds	r3, r7, #7
 8007d40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d42:	230f      	movs	r3, #15
 8007d44:	18fb      	adds	r3, r7, r3
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007d4a:	1dfb      	adds	r3, r7, #7
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d017      	beq.n	8007d82 <USBD_Get_USB_Status+0x4c>
 8007d52:	dc1b      	bgt.n	8007d8c <USBD_Get_USB_Status+0x56>
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d00f      	beq.n	8007d78 <USBD_Get_USB_Status+0x42>
 8007d58:	dc18      	bgt.n	8007d8c <USBD_Get_USB_Status+0x56>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <USBD_Get_USB_Status+0x2e>
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d005      	beq.n	8007d6e <USBD_Get_USB_Status+0x38>
 8007d62:	e013      	b.n	8007d8c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d64:	230f      	movs	r3, #15
 8007d66:	18fb      	adds	r3, r7, r3
 8007d68:	2200      	movs	r2, #0
 8007d6a:	701a      	strb	r2, [r3, #0]
    break;
 8007d6c:	e013      	b.n	8007d96 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d6e:	230f      	movs	r3, #15
 8007d70:	18fb      	adds	r3, r7, r3
 8007d72:	2202      	movs	r2, #2
 8007d74:	701a      	strb	r2, [r3, #0]
    break;
 8007d76:	e00e      	b.n	8007d96 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d78:	230f      	movs	r3, #15
 8007d7a:	18fb      	adds	r3, r7, r3
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	701a      	strb	r2, [r3, #0]
    break;
 8007d80:	e009      	b.n	8007d96 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d82:	230f      	movs	r3, #15
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	2202      	movs	r2, #2
 8007d88:	701a      	strb	r2, [r3, #0]
    break;
 8007d8a:	e004      	b.n	8007d96 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007d8c:	230f      	movs	r3, #15
 8007d8e:	18fb      	adds	r3, r7, r3
 8007d90:	2202      	movs	r2, #2
 8007d92:	701a      	strb	r2, [r3, #0]
    break;
 8007d94:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007d96:	230f      	movs	r3, #15
 8007d98:	18fb      	adds	r3, r7, r3
 8007d9a:	781b      	ldrb	r3, [r3, #0]
}
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	b004      	add	sp, #16
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <memset>:
 8007da4:	0003      	movs	r3, r0
 8007da6:	1882      	adds	r2, r0, r2
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d100      	bne.n	8007dae <memset+0xa>
 8007dac:	4770      	bx	lr
 8007dae:	7019      	strb	r1, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	e7f9      	b.n	8007da8 <memset+0x4>

08007db4 <__libc_init_array>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	2600      	movs	r6, #0
 8007db8:	4c0c      	ldr	r4, [pc, #48]	; (8007dec <__libc_init_array+0x38>)
 8007dba:	4d0d      	ldr	r5, [pc, #52]	; (8007df0 <__libc_init_array+0x3c>)
 8007dbc:	1b64      	subs	r4, r4, r5
 8007dbe:	10a4      	asrs	r4, r4, #2
 8007dc0:	42a6      	cmp	r6, r4
 8007dc2:	d109      	bne.n	8007dd8 <__libc_init_array+0x24>
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	f000 f819 	bl	8007dfc <_init>
 8007dca:	4c0a      	ldr	r4, [pc, #40]	; (8007df4 <__libc_init_array+0x40>)
 8007dcc:	4d0a      	ldr	r5, [pc, #40]	; (8007df8 <__libc_init_array+0x44>)
 8007dce:	1b64      	subs	r4, r4, r5
 8007dd0:	10a4      	asrs	r4, r4, #2
 8007dd2:	42a6      	cmp	r6, r4
 8007dd4:	d105      	bne.n	8007de2 <__libc_init_array+0x2e>
 8007dd6:	bd70      	pop	{r4, r5, r6, pc}
 8007dd8:	00b3      	lsls	r3, r6, #2
 8007dda:	58eb      	ldr	r3, [r5, r3]
 8007ddc:	4798      	blx	r3
 8007dde:	3601      	adds	r6, #1
 8007de0:	e7ee      	b.n	8007dc0 <__libc_init_array+0xc>
 8007de2:	00b3      	lsls	r3, r6, #2
 8007de4:	58eb      	ldr	r3, [r5, r3]
 8007de6:	4798      	blx	r3
 8007de8:	3601      	adds	r6, #1
 8007dea:	e7f2      	b.n	8007dd2 <__libc_init_array+0x1e>
 8007dec:	08007ecc 	.word	0x08007ecc
 8007df0:	08007ecc 	.word	0x08007ecc
 8007df4:	08007ed0 	.word	0x08007ed0
 8007df8:	08007ecc 	.word	0x08007ecc

08007dfc <_init>:
 8007dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e02:	bc08      	pop	{r3}
 8007e04:	469e      	mov	lr, r3
 8007e06:	4770      	bx	lr

08007e08 <_fini>:
 8007e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0e:	bc08      	pop	{r3}
 8007e10:	469e      	mov	lr, r3
 8007e12:	4770      	bx	lr
